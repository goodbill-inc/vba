=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class NetworkProfileAssignmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create NetworkProfileAssign
    # Creates a new NetworkProfileAssign
    # @param vbasoftware_database [String] Target database
    # @param network_profile_assign [NetworkProfileAssign] 
    # @param [Hash] opts the optional parameters
    # @return [NetworkProfileAssignVBAResponse]
    def create_network_profile_assign(vbasoftware_database, network_profile_assign, opts = {})
      data, _status_code, _headers = create_network_profile_assign_with_http_info(vbasoftware_database, network_profile_assign, opts)
      data
    end

    # Create NetworkProfileAssign
    # Creates a new NetworkProfileAssign
    # @param vbasoftware_database [String] Target database
    # @param network_profile_assign [NetworkProfileAssign] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkProfileAssignVBAResponse, Integer, Hash)>] NetworkProfileAssignVBAResponse data, response status code and response headers
    def create_network_profile_assign_with_http_info(vbasoftware_database, network_profile_assign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.create_network_profile_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.create_network_profile_assign"
      end
      # verify the required parameter 'network_profile_assign' is set
      if @api_client.config.client_side_validation && network_profile_assign.nil?
        fail ArgumentError, "Missing the required parameter 'network_profile_assign' when calling NetworkProfileAssignmentsApi.create_network_profile_assign"
      end
      # resource path
      local_var_path = '/network-profile-assignments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(network_profile_assign)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkProfileAssignVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.create_network_profile_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#create_network_profile_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete NetworkProfileAssign
    # Deletes an NetworkProfileAssign
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param assign_type [String] Assign Type
    # @param assign_id [String] Assign ID
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_network_profile_assign(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, opts = {})
      delete_network_profile_assign_with_http_info(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, opts)
      nil
    end

    # Delete NetworkProfileAssign
    # Deletes an NetworkProfileAssign
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param assign_type [String] Assign Type
    # @param assign_id [String] Assign ID
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_network_profile_assign_with_http_info(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.delete_network_profile_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.delete_network_profile_assign"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling NetworkProfileAssignmentsApi.delete_network_profile_assign"
      end
      # verify the required parameter 'assign_type' is set
      if @api_client.config.client_side_validation && assign_type.nil?
        fail ArgumentError, "Missing the required parameter 'assign_type' when calling NetworkProfileAssignmentsApi.delete_network_profile_assign"
      end
      # verify the required parameter 'assign_id' is set
      if @api_client.config.client_side_validation && assign_id.nil?
        fail ArgumentError, "Missing the required parameter 'assign_id' when calling NetworkProfileAssignmentsApi.delete_network_profile_assign"
      end
      # verify the required parameter 'effective_date' is set
      if @api_client.config.client_side_validation && effective_date.nil?
        fail ArgumentError, "Missing the required parameter 'effective_date' when calling NetworkProfileAssignmentsApi.delete_network_profile_assign"
      end
      # resource path
      local_var_path = '/network-profiles/{Profile_ID}/types/{Assign_Type}/assignments/{Assign_ID}/effective/{Effective_Date}'.sub('{' + 'Profile_ID' + '}', CGI.escape(profile_id.to_s)).sub('{' + 'Assign_Type' + '}', CGI.escape(assign_type.to_s)).sub('{' + 'Assign_ID' + '}', CGI.escape(assign_id.to_s)).sub('{' + 'Effective_Date' + '}', CGI.escape(effective_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.delete_network_profile_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#delete_network_profile_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get NetworkProfileAssign
    # Gets NetworkProfileAssign
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param assign_type [String] Assign Type
    # @param assign_id [String] Assign ID
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [NetworkProfileAssignVBAResponse]
    def get_network_profile_assign(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, opts = {})
      data, _status_code, _headers = get_network_profile_assign_with_http_info(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, opts)
      data
    end

    # Get NetworkProfileAssign
    # Gets NetworkProfileAssign
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param assign_type [String] Assign Type
    # @param assign_id [String] Assign ID
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkProfileAssignVBAResponse, Integer, Hash)>] NetworkProfileAssignVBAResponse data, response status code and response headers
    def get_network_profile_assign_with_http_info(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.get_network_profile_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.get_network_profile_assign"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling NetworkProfileAssignmentsApi.get_network_profile_assign"
      end
      # verify the required parameter 'assign_type' is set
      if @api_client.config.client_side_validation && assign_type.nil?
        fail ArgumentError, "Missing the required parameter 'assign_type' when calling NetworkProfileAssignmentsApi.get_network_profile_assign"
      end
      # verify the required parameter 'assign_id' is set
      if @api_client.config.client_side_validation && assign_id.nil?
        fail ArgumentError, "Missing the required parameter 'assign_id' when calling NetworkProfileAssignmentsApi.get_network_profile_assign"
      end
      # verify the required parameter 'effective_date' is set
      if @api_client.config.client_side_validation && effective_date.nil?
        fail ArgumentError, "Missing the required parameter 'effective_date' when calling NetworkProfileAssignmentsApi.get_network_profile_assign"
      end
      # resource path
      local_var_path = '/network-profiles/{Profile_ID}/types/{Assign_Type}/assignments/{Assign_ID}/effective/{Effective_Date}'.sub('{' + 'Profile_ID' + '}', CGI.escape(profile_id.to_s)).sub('{' + 'Assign_Type' + '}', CGI.escape(assign_type.to_s)).sub('{' + 'Assign_ID' + '}', CGI.escape(assign_id.to_s)).sub('{' + 'Effective_Date' + '}', CGI.escape(effective_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkProfileAssignVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.get_network_profile_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#get_network_profile_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Assign Types
    # List Assign Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_assign_type(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_assign_type_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Assign Types
    # List Assign Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_assign_type_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.list_assign_type ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.list_assign_type"
      end
      # resource path
      local_var_path = '/network-profile-assign-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.list_assign_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#list_assign_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List NetworkProfileAssign
    # Lists all NetworkProfileAssign for the given Profile_ID
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @return [NetworkProfileAssignListVBAResponse]
    def list_network_profile_assign(vbasoftware_database, profile_id, opts = {})
      data, _status_code, _headers = list_network_profile_assign_with_http_info(vbasoftware_database, profile_id, opts)
      data
    end

    # List NetworkProfileAssign
    # Lists all NetworkProfileAssign for the given Profile_ID
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @return [Array<(NetworkProfileAssignListVBAResponse, Integer, Hash)>] NetworkProfileAssignListVBAResponse data, response status code and response headers
    def list_network_profile_assign_with_http_info(vbasoftware_database, profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.list_network_profile_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.list_network_profile_assign"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling NetworkProfileAssignmentsApi.list_network_profile_assign"
      end
      # resource path
      local_var_path = '/network-profiles/{Profile_ID}/assignments'.sub('{' + 'Profile_ID' + '}', CGI.escape(profile_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkProfileAssignListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.list_network_profile_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#list_network_profile_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch NetworkProfileAssign
    # Create or Update multiple NetworkProfileAssign at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param network_profile_assign [Array<NetworkProfileAssign>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_network_profile_assign(vbasoftware_database, network_profile_assign, opts = {})
      data, _status_code, _headers = update_batch_network_profile_assign_with_http_info(vbasoftware_database, network_profile_assign, opts)
      data
    end

    # Create or Update Batch NetworkProfileAssign
    # Create or Update multiple NetworkProfileAssign at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param network_profile_assign [Array<NetworkProfileAssign>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_network_profile_assign_with_http_info(vbasoftware_database, network_profile_assign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.update_batch_network_profile_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.update_batch_network_profile_assign"
      end
      # verify the required parameter 'network_profile_assign' is set
      if @api_client.config.client_side_validation && network_profile_assign.nil?
        fail ArgumentError, "Missing the required parameter 'network_profile_assign' when calling NetworkProfileAssignmentsApi.update_batch_network_profile_assign"
      end
      # resource path
      local_var_path = '/network-profile-assignments-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(network_profile_assign)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.update_batch_network_profile_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#update_batch_network_profile_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NetworkProfileAssign
    # Updates a specific NetworkProfileAssign.
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param assign_type [String] Assign Type
    # @param assign_id [String] Assign ID
    # @param effective_date [Time] Effective Date
    # @param network_profile_assign [NetworkProfileAssign] 
    # @param [Hash] opts the optional parameters
    # @return [NetworkProfileAssignVBAResponse]
    def update_network_profile_assign(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, network_profile_assign, opts = {})
      data, _status_code, _headers = update_network_profile_assign_with_http_info(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, network_profile_assign, opts)
      data
    end

    # Update NetworkProfileAssign
    # Updates a specific NetworkProfileAssign.
    # @param vbasoftware_database [String] Target database
    # @param profile_id [String] Profile ID
    # @param assign_type [String] Assign Type
    # @param assign_id [String] Assign ID
    # @param effective_date [Time] Effective Date
    # @param network_profile_assign [NetworkProfileAssign] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkProfileAssignVBAResponse, Integer, Hash)>] NetworkProfileAssignVBAResponse data, response status code and response headers
    def update_network_profile_assign_with_http_info(vbasoftware_database, profile_id, assign_type, assign_id, effective_date, network_profile_assign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkProfileAssignmentsApi.update_network_profile_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NetworkProfileAssignmentsApi.update_network_profile_assign"
      end
      # verify the required parameter 'profile_id' is set
      if @api_client.config.client_side_validation && profile_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_id' when calling NetworkProfileAssignmentsApi.update_network_profile_assign"
      end
      # verify the required parameter 'assign_type' is set
      if @api_client.config.client_side_validation && assign_type.nil?
        fail ArgumentError, "Missing the required parameter 'assign_type' when calling NetworkProfileAssignmentsApi.update_network_profile_assign"
      end
      # verify the required parameter 'assign_id' is set
      if @api_client.config.client_side_validation && assign_id.nil?
        fail ArgumentError, "Missing the required parameter 'assign_id' when calling NetworkProfileAssignmentsApi.update_network_profile_assign"
      end
      # verify the required parameter 'effective_date' is set
      if @api_client.config.client_side_validation && effective_date.nil?
        fail ArgumentError, "Missing the required parameter 'effective_date' when calling NetworkProfileAssignmentsApi.update_network_profile_assign"
      end
      # verify the required parameter 'network_profile_assign' is set
      if @api_client.config.client_side_validation && network_profile_assign.nil?
        fail ArgumentError, "Missing the required parameter 'network_profile_assign' when calling NetworkProfileAssignmentsApi.update_network_profile_assign"
      end
      # resource path
      local_var_path = '/network-profiles/{Profile_ID}/types/{Assign_Type}/assignments/{Assign_ID}/effective/{Effective_Date}'.sub('{' + 'Profile_ID' + '}', CGI.escape(profile_id.to_s)).sub('{' + 'Assign_Type' + '}', CGI.escape(assign_type.to_s)).sub('{' + 'Assign_ID' + '}', CGI.escape(assign_id.to_s)).sub('{' + 'Effective_Date' + '}', CGI.escape(effective_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(network_profile_assign)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkProfileAssignVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NetworkProfileAssignmentsApi.update_network_profile_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkProfileAssignmentsApi#update_network_profile_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
