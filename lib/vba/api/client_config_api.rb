=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ClientConfigApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create SSOConfig
    # Creates a new SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param sso_config [SSOConfig] 
    # @param [Hash] opts the optional parameters
    # @return [SSOConfigVBAResponse]
    def create_sso_config(vbasoftware_database, sso_config, opts = {})
      data, _status_code, _headers = create_sso_config_with_http_info(vbasoftware_database, sso_config, opts)
      data
    end

    # Create SSOConfig
    # Creates a new SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param sso_config [SSOConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SSOConfigVBAResponse, Integer, Hash)>] SSOConfigVBAResponse data, response status code and response headers
    def create_sso_config_with_http_info(vbasoftware_database, sso_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.create_sso_config ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClientConfigApi.create_sso_config"
      end
      # verify the required parameter 'sso_config' is set
      if @api_client.config.client_side_validation && sso_config.nil?
        fail ArgumentError, "Missing the required parameter 'sso_config' when calling ClientConfigApi.create_sso_config"
      end
      # resource path
      local_var_path = '/sso-configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sso_config)

      # return_type
      return_type = opts[:debug_return_type] || 'SSOConfigVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.create_sso_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#create_sso_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SSOConfig
    # Deletes an SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param sso_config_id [String] SSOConfig ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sso_config(vbasoftware_database, sso_config_id, opts = {})
      delete_sso_config_with_http_info(vbasoftware_database, sso_config_id, opts)
      nil
    end

    # Delete SSOConfig
    # Deletes an SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param sso_config_id [String] SSOConfig ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sso_config_with_http_info(vbasoftware_database, sso_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.delete_sso_config ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClientConfigApi.delete_sso_config"
      end
      # verify the required parameter 'sso_config_id' is set
      if @api_client.config.client_side_validation && sso_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'sso_config_id' when calling ClientConfigApi.delete_sso_config"
      end
      # resource path
      local_var_path = '/sso-configs/{SSOConfig_ID}'.sub('{' + 'SSOConfig_ID' + '}', CGI.escape(sso_config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.delete_sso_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#delete_sso_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Application Information
    # Returns the latest application information including version, file details, release notes, and release date in JSON format.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param environment [String] environment
    # @param [Hash] opts the optional parameters
    # @return [VBAAppInfoVBAResponse]
    def get_app_info(vbasoftware_client_id, vbasoftware_client_code, environment, opts = {})
      data, _status_code, _headers = get_app_info_with_http_info(vbasoftware_client_id, vbasoftware_client_code, environment, opts)
      data
    end

    # Get Application Information
    # Returns the latest application information including version, file details, release notes, and release date in JSON format.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param environment [String] environment
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAAppInfoVBAResponse, Integer, Hash)>] VBAAppInfoVBAResponse data, response status code and response headers
    def get_app_info_with_http_info(vbasoftware_client_id, vbasoftware_client_code, environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.get_app_info ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling ClientConfigApi.get_app_info"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling ClientConfigApi.get_app_info"
      end
      # verify the required parameter 'environment' is set
      if @api_client.config.client_side_validation && environment.nil?
        fail ArgumentError, "Missing the required parameter 'environment' when calling ClientConfigApi.get_app_info"
      end
      # resource path
      local_var_path = '/app-info/{environment}'.sub('{' + 'environment' + '}', CGI.escape(environment.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAAppInfoVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.get_app_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#get_app_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SSOConfig
    # Gets SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param sso_config_id [String] SSOConfig ID
    # @param [Hash] opts the optional parameters
    # @return [SSOConfigVBAResponse]
    def get_sso_config(vbasoftware_database, sso_config_id, opts = {})
      data, _status_code, _headers = get_sso_config_with_http_info(vbasoftware_database, sso_config_id, opts)
      data
    end

    # Get SSOConfig
    # Gets SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param sso_config_id [String] SSOConfig ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SSOConfigVBAResponse, Integer, Hash)>] SSOConfigVBAResponse data, response status code and response headers
    def get_sso_config_with_http_info(vbasoftware_database, sso_config_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.get_sso_config ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClientConfigApi.get_sso_config"
      end
      # verify the required parameter 'sso_config_id' is set
      if @api_client.config.client_side_validation && sso_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'sso_config_id' when calling ClientConfigApi.get_sso_config"
      end
      # resource path
      local_var_path = '/sso-configs/{SSOConfig_ID}'.sub('{' + 'SSOConfig_ID' + '}', CGI.escape(sso_config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SSOConfigVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.get_sso_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#get_sso_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Client Environments
    # Lists the client environments that are available for the given client id and client code.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param [Hash] opts the optional parameters
    # @return [VBAClientEnvironmentListVBAResponse]
    def list_client_environments(vbasoftware_client_id, vbasoftware_client_code, opts = {})
      data, _status_code, _headers = list_client_environments_with_http_info(vbasoftware_client_id, vbasoftware_client_code, opts)
      data
    end

    # List Client Environments
    # Lists the client environments that are available for the given client id and client code.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAClientEnvironmentListVBAResponse, Integer, Hash)>] VBAClientEnvironmentListVBAResponse data, response status code and response headers
    def list_client_environments_with_http_info(vbasoftware_client_id, vbasoftware_client_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.list_client_environments ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling ClientConfigApi.list_client_environments"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling ClientConfigApi.list_client_environments"
      end
      # resource path
      local_var_path = '/client-environments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAClientEnvironmentListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.list_client_environments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#list_client_environments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SSOConfig
    # Lists all SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @return [SSOConfigListVBAResponse]
    def list_sso_config(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_sso_config_with_http_info(vbasoftware_database, opts)
      data
    end

    # List SSOConfig
    # Lists all SSOConfig
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @return [Array<(SSOConfigListVBAResponse, Integer, Hash)>] SSOConfigListVBAResponse data, response status code and response headers
    def list_sso_config_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.list_sso_config ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClientConfigApi.list_sso_config"
      end
      # resource path
      local_var_path = '/sso-configs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SSOConfigListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.list_sso_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#list_sso_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # SSO Callback
    # This endpoint is the callback URL for the Single Sign-On (SSO) process. It receives an authorization code from the identity provider (e.g., Cognito) and exchanges it for an access token. The access token is then used to authenticate the user in the application.
    # @param state [String] base64 encoded state
    # @param code [String] Authorization Code
    # @param [Hash] opts the optional parameters
    # @return [UserAuthenticationResponseVBAResponse]
    def sso_callback(state, code, opts = {})
      data, _status_code, _headers = sso_callback_with_http_info(state, code, opts)
      data
    end

    # SSO Callback
    # This endpoint is the callback URL for the Single Sign-On (SSO) process. It receives an authorization code from the identity provider (e.g., Cognito) and exchanges it for an access token. The access token is then used to authenticate the user in the application.
    # @param state [String] base64 encoded state
    # @param code [String] Authorization Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserAuthenticationResponseVBAResponse, Integer, Hash)>] UserAuthenticationResponseVBAResponse data, response status code and response headers
    def sso_callback_with_http_info(state, code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.sso_callback ...'
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling ClientConfigApi.sso_callback"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling ClientConfigApi.sso_callback"
      end
      # resource path
      local_var_path = '/sso-callback'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'state'] = state
      query_params[:'code'] = code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserAuthenticationResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.sso_callback",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#sso_callback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch SSOConfig
    # Create or Update multiple SSOConfig at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param sso_config [Array<SSOConfig>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_sso_config(vbasoftware_database, sso_config, opts = {})
      data, _status_code, _headers = update_batch_sso_config_with_http_info(vbasoftware_database, sso_config, opts)
      data
    end

    # Create or Update Batch SSOConfig
    # Create or Update multiple SSOConfig at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param sso_config [Array<SSOConfig>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_sso_config_with_http_info(vbasoftware_database, sso_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.update_batch_sso_config ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClientConfigApi.update_batch_sso_config"
      end
      # verify the required parameter 'sso_config' is set
      if @api_client.config.client_side_validation && sso_config.nil?
        fail ArgumentError, "Missing the required parameter 'sso_config' when calling ClientConfigApi.update_batch_sso_config"
      end
      # resource path
      local_var_path = '/sso-configs-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sso_config)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.update_batch_sso_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#update_batch_sso_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SSOConfig
    # Updates a specific SSOConfig.
    # @param vbasoftware_database [String] Target database
    # @param sso_config_id [String] SSOConfig ID
    # @param sso_config [SSOConfig] 
    # @param [Hash] opts the optional parameters
    # @return [SSOConfigVBAResponse]
    def update_sso_config(vbasoftware_database, sso_config_id, sso_config, opts = {})
      data, _status_code, _headers = update_sso_config_with_http_info(vbasoftware_database, sso_config_id, sso_config, opts)
      data
    end

    # Update SSOConfig
    # Updates a specific SSOConfig.
    # @param vbasoftware_database [String] Target database
    # @param sso_config_id [String] SSOConfig ID
    # @param sso_config [SSOConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SSOConfigVBAResponse, Integer, Hash)>] SSOConfigVBAResponse data, response status code and response headers
    def update_sso_config_with_http_info(vbasoftware_database, sso_config_id, sso_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientConfigApi.update_sso_config ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClientConfigApi.update_sso_config"
      end
      # verify the required parameter 'sso_config_id' is set
      if @api_client.config.client_side_validation && sso_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'sso_config_id' when calling ClientConfigApi.update_sso_config"
      end
      # verify the required parameter 'sso_config' is set
      if @api_client.config.client_side_validation && sso_config.nil?
        fail ArgumentError, "Missing the required parameter 'sso_config' when calling ClientConfigApi.update_sso_config"
      end
      # resource path
      local_var_path = '/sso-configs/{SSOConfig_ID}'.sub('{' + 'SSOConfig_ID' + '}', CGI.escape(sso_config_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sso_config)

      # return_type
      return_type = opts[:debug_return_type] || 'SSOConfigVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClientConfigApi.update_sso_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientConfigApi#update_sso_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
