=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class MembersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Auto-Assign Primary Care Physician
    # Automatically assigns a Primary care Physician to Members based on the Criteria found in the EnrollmentPCPAutoAssign entity passed in the body.
    # @param vbasoftware_database [String] Target database
    # @param enrollment_pcp_auto_assign [EnrollmentPCPAutoAssign] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requesting_user_id Requesting User
    # @return [nil]
    def auto_assign_priary_care_physician(vbasoftware_database, enrollment_pcp_auto_assign, opts = {})
      auto_assign_priary_care_physician_with_http_info(vbasoftware_database, enrollment_pcp_auto_assign, opts)
      nil
    end

    # Auto-Assign Primary Care Physician
    # Automatically assigns a Primary care Physician to Members based on the Criteria found in the EnrollmentPCPAutoAssign entity passed in the body.
    # @param vbasoftware_database [String] Target database
    # @param enrollment_pcp_auto_assign [EnrollmentPCPAutoAssign] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requesting_user_id Requesting User
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auto_assign_priary_care_physician_with_http_info(vbasoftware_database, enrollment_pcp_auto_assign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.auto_assign_priary_care_physician ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.auto_assign_priary_care_physician"
      end
      # verify the required parameter 'enrollment_pcp_auto_assign' is set
      if @api_client.config.client_side_validation && enrollment_pcp_auto_assign.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_pcp_auto_assign' when calling MembersApi.auto_assign_priary_care_physician"
      end
      # resource path
      local_var_path = '/auto-assign-primary-care-physician'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestingUserId'] = opts[:'requesting_user_id'] if !opts[:'requesting_user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_pcp_auto_assign)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.auto_assign_priary_care_physician",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#auto_assign_priary_care_physician\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Members
    # Creates a new Members
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param members [Members] 
    # @param [Hash] opts the optional parameters
    # @return [MembersVBAResponse]
    def create_members(vbasoftware_database, subscriber_id, members, opts = {})
      data, _status_code, _headers = create_members_with_http_info(vbasoftware_database, subscriber_id, members, opts)
      data
    end

    # Create Members
    # Creates a new Members
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param members [Members] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembersVBAResponse, Integer, Hash)>] MembersVBAResponse data, response status code and response headers
    def create_members_with_http_info(vbasoftware_database, subscriber_id, members, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.create_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.create_members"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.create_members"
      end
      # verify the required parameter 'members' is set
      if @api_client.config.client_side_validation && members.nil?
        fail ArgumentError, "Missing the required parameter 'members' when calling MembersApi.create_members"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(members)

      # return_type
      return_type = opts[:debug_return_type] || 'MembersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.create_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#create_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Members
    # Deletes an Members
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_members(vbasoftware_database, subscriber_id, member_seq, opts = {})
      delete_members_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts)
      nil
    end

    # Delete Members
    # Deletes an Members
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_members_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.delete_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.delete_members"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.delete_members"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling MembersApi.delete_members"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.delete_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#delete_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Benefit Inquiry
    # Get a consolidated payload of benefit information, accumulator information, and eligility.
    # @param vbasoftware_database [String] Target database
    # @param vba_benefit_inquiry_request [VBABenefitInquiryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [VBABenefitInquiryVBAResponse]
    def enrollment_benefit_inquiry(vbasoftware_database, vba_benefit_inquiry_request, opts = {})
      data, _status_code, _headers = enrollment_benefit_inquiry_with_http_info(vbasoftware_database, vba_benefit_inquiry_request, opts)
      data
    end

    # Benefit Inquiry
    # Get a consolidated payload of benefit information, accumulator information, and eligility.
    # @param vbasoftware_database [String] Target database
    # @param vba_benefit_inquiry_request [VBABenefitInquiryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBABenefitInquiryVBAResponse, Integer, Hash)>] VBABenefitInquiryVBAResponse data, response status code and response headers
    def enrollment_benefit_inquiry_with_http_info(vbasoftware_database, vba_benefit_inquiry_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.enrollment_benefit_inquiry ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.enrollment_benefit_inquiry"
      end
      # verify the required parameter 'vba_benefit_inquiry_request' is set
      if @api_client.config.client_side_validation && vba_benefit_inquiry_request.nil?
        fail ArgumentError, "Missing the required parameter 'vba_benefit_inquiry_request' when calling MembersApi.enrollment_benefit_inquiry"
      end
      # resource path
      local_var_path = '/enrollment-benefit-inquiry'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_benefit_inquiry_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VBABenefitInquiryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.enrollment_benefit_inquiry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#enrollment_benefit_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Members
    # Gets Members
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @return [MembersVBAResponse]
    def get_members(vbasoftware_database, subscriber_id, member_seq, opts = {})
      data, _status_code, _headers = get_members_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts)
      data
    end

    # Get Members
    # Gets Members
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembersVBAResponse, Integer, Hash)>] MembersVBAResponse data, response status code and response headers
    def get_members_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.get_members"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.get_members"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling MembersApi.get_members"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.get_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get MembersDisabilityTaxSummary
    # Retrieve the MembersDisabilityTaxSummary for the given year
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param tax_year [Integer] Tax Year
    # @param [Hash] opts the optional parameters
    # @return [VBAMembersDisabilityTaxSummaryVBAResponse]
    def get_members_disability_tax_summary(vbasoftware_database, subscriber_id, tax_year, opts = {})
      data, _status_code, _headers = get_members_disability_tax_summary_with_http_info(vbasoftware_database, subscriber_id, tax_year, opts)
      data
    end

    # Get MembersDisabilityTaxSummary
    # Retrieve the MembersDisabilityTaxSummary for the given year
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param tax_year [Integer] Tax Year
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAMembersDisabilityTaxSummaryVBAResponse, Integer, Hash)>] VBAMembersDisabilityTaxSummaryVBAResponse data, response status code and response headers
    def get_members_disability_tax_summary_with_http_info(vbasoftware_database, subscriber_id, tax_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.get_members_disability_tax_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.get_members_disability_tax_summary"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.get_members_disability_tax_summary"
      end
      # verify the required parameter 'tax_year' is set
      if @api_client.config.client_side_validation && tax_year.nil?
        fail ArgumentError, "Missing the required parameter 'tax_year' when calling MembersApi.get_members_disability_tax_summary"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/member-disability-tax-summary/{taxYear}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'taxYear' + '}', CGI.escape(tax_year.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAMembersDisabilityTaxSummaryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.get_members_disability_tax_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#get_members_disability_tax_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Members with Auto-Assign Primary Care Physician
    # Get a list of Members that will be automatically assigned a Primary care Physician.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :run_date Run Date
    # @return [EnrollmentPCPAutoAssignMemberListVBAResponse]
    def list_auto_assign_priary_care_physician_members(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_auto_assign_priary_care_physician_members_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Members with Auto-Assign Primary Care Physician
    # Get a list of Members that will be automatically assigned a Primary care Physician.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :run_date Run Date
    # @return [Array<(EnrollmentPCPAutoAssignMemberListVBAResponse, Integer, Hash)>] EnrollmentPCPAutoAssignMemberListVBAResponse data, response status code and response headers
    def list_auto_assign_priary_care_physician_members_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.list_auto_assign_priary_care_physician_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.list_auto_assign_priary_care_physician_members"
      end
      # resource path
      local_var_path = '/auto-assign-primary-care-physician-members'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'runDate'] = opts[:'run_date'] if !opts[:'run_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentPCPAutoAssignMemberListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.list_auto_assign_priary_care_physician_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#list_auto_assign_priary_care_physician_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Members
    # Lists all Members for the given subscriberID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [MembersListVBAResponse]
    def list_members(vbasoftware_database, subscriber_id, opts = {})
      data, _status_code, _headers = list_members_with_http_info(vbasoftware_database, subscriber_id, opts)
      data
    end

    # List Members
    # Lists all Members for the given subscriberID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(MembersListVBAResponse, Integer, Hash)>] MembersListVBAResponse data, response status code and response headers
    def list_members_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.list_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.list_members"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.list_members"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.list_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#list_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Plan Year by Member
    # List Plan Years available for a Member from both Group Plan Year and the Member Plan Year if applicable.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @return [GroupPlanYearListVBAResponse]
    def list_plan_year_by_member(vbasoftware_database, subscriber_id, member_seq, opts = {})
      data, _status_code, _headers = list_plan_year_by_member_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts)
      data
    end

    # List Plan Year by Member
    # List Plan Years available for a Member from both Group Plan Year and the Member Plan Year if applicable.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupPlanYearListVBAResponse, Integer, Hash)>] GroupPlanYearListVBAResponse data, response status code and response headers
    def list_plan_year_by_member_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.list_plan_year_by_member ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.list_plan_year_by_member"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.list_plan_year_by_member"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling MembersApi.list_plan_year_by_member"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-plan-year'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupPlanYearListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.list_plan_year_by_member",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#list_plan_year_by_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Providers that are eligible for PCP Auto-Assign
    # Get a list of Providers that are eligible for PCP Auto-Assign for the given Networks and Provider Types.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :networks Networks as a comma separated list of strings
    # @option opts [String] :practice_types Practice Types  as a comma separated list of strings
    # @option opts [Time] :expiration_date Expiration Date
    # @return [EnrollmentPCPAutoAssignProviderListVBAResponse]
    def list_providers_with_pcp_auto_assign(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_providers_with_pcp_auto_assign_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Providers that are eligible for PCP Auto-Assign
    # Get a list of Providers that are eligible for PCP Auto-Assign for the given Networks and Provider Types.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :networks Networks as a comma separated list of strings
    # @option opts [String] :practice_types Practice Types  as a comma separated list of strings
    # @option opts [Time] :expiration_date Expiration Date
    # @return [Array<(EnrollmentPCPAutoAssignProviderListVBAResponse, Integer, Hash)>] EnrollmentPCPAutoAssignProviderListVBAResponse data, response status code and response headers
    def list_providers_with_pcp_auto_assign_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.list_providers_with_pcp_auto_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.list_providers_with_pcp_auto_assign"
      end
      # resource path
      local_var_path = '/auto-assign-primary-care-physician-providers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'networks'] = opts[:'networks'] if !opts[:'networks'].nil?
      query_params[:'practiceTypes'] = opts[:'practice_types'] if !opts[:'practice_types'].nil?
      query_params[:'expirationDate'] = opts[:'expiration_date'] if !opts[:'expiration_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentPCPAutoAssignProviderListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.list_providers_with_pcp_auto_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#list_providers_with_pcp_auto_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Members
    # Create or Update multiple Members at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param members [Array<Members>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_members(vbasoftware_database, subscriber_id, members, opts = {})
      data, _status_code, _headers = update_batch_members_with_http_info(vbasoftware_database, subscriber_id, members, opts)
      data
    end

    # Create or Update Batch Members
    # Create or Update multiple Members at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param members [Array<Members>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_members_with_http_info(vbasoftware_database, subscriber_id, members, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.update_batch_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.update_batch_members"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.update_batch_members"
      end
      # verify the required parameter 'members' is set
      if @api_client.config.client_side_validation && members.nil?
        fail ArgumentError, "Missing the required parameter 'members' when calling MembersApi.update_batch_members"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members-batch'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(members)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.update_batch_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#update_batch_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Members
    # Updates a specific Members.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param members [Members] 
    # @param [Hash] opts the optional parameters
    # @return [MembersVBAResponse]
    def update_members(vbasoftware_database, subscriber_id, member_seq, members, opts = {})
      data, _status_code, _headers = update_members_with_http_info(vbasoftware_database, subscriber_id, member_seq, members, opts)
      data
    end

    # Update Members
    # Updates a specific Members.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param members [Members] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembersVBAResponse, Integer, Hash)>] MembersVBAResponse data, response status code and response headers
    def update_members_with_http_info(vbasoftware_database, subscriber_id, member_seq, members, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MembersApi.update_members ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling MembersApi.update_members"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling MembersApi.update_members"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling MembersApi.update_members"
      end
      # verify the required parameter 'members' is set
      if @api_client.config.client_side_validation && members.nil?
        fail ArgumentError, "Missing the required parameter 'members' when calling MembersApi.update_members"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(members)

      # return_type
      return_type = opts[:debug_return_type] || 'MembersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"MembersApi.update_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MembersApi#update_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
