=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class TaxonomyGroupDetailsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create TaxonomyGroupDetail
    # Creates a new TaxonomyGroupDetail
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail [TaxonomyGroupDetail] 
    # @param [Hash] opts the optional parameters
    # @return [TaxonomyGroupDetailVBAResponse]
    def create_taxonomy_group_detail(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail, opts = {})
      data, _status_code, _headers = create_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail, opts)
      data
    end

    # Create TaxonomyGroupDetail
    # Creates a new TaxonomyGroupDetail
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail [TaxonomyGroupDetail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaxonomyGroupDetailVBAResponse, Integer, Hash)>] TaxonomyGroupDetailVBAResponse data, response status code and response headers
    def create_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxonomyGroupDetailsApi.create_taxonomy_group_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling TaxonomyGroupDetailsApi.create_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_id' is set
      if @api_client.config.client_side_validation && taxonomy_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_id' when calling TaxonomyGroupDetailsApi.create_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_detail' is set
      if @api_client.config.client_side_validation && taxonomy_group_detail.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_detail' when calling TaxonomyGroupDetailsApi.create_taxonomy_group_detail"
      end
      # resource path
      local_var_path = '/taxonomy-groups/{taxonomyGroupID}/taxonomy-group-details'.sub('{' + 'taxonomyGroupID' + '}', CGI.escape(taxonomy_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(taxonomy_group_detail)

      # return_type
      return_type = opts[:debug_return_type] || 'TaxonomyGroupDetailVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxonomyGroupDetailsApi.create_taxonomy_group_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxonomyGroupDetailsApi#create_taxonomy_group_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete TaxonomyGroupDetail
    # Deletes an TaxonomyGroupDetail
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail_key [Integer] TaxonomyGroupDetail Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_taxonomy_group_detail(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, opts = {})
      delete_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, opts)
      nil
    end

    # Delete TaxonomyGroupDetail
    # Deletes an TaxonomyGroupDetail
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail_key [Integer] TaxonomyGroupDetail Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxonomyGroupDetailsApi.delete_taxonomy_group_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling TaxonomyGroupDetailsApi.delete_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_id' is set
      if @api_client.config.client_side_validation && taxonomy_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_id' when calling TaxonomyGroupDetailsApi.delete_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_detail_key' is set
      if @api_client.config.client_side_validation && taxonomy_group_detail_key.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_detail_key' when calling TaxonomyGroupDetailsApi.delete_taxonomy_group_detail"
      end
      # resource path
      local_var_path = '/taxonomy-groups/{taxonomyGroupID}/taxonomy-group-details/{taxonomyGroupDetailKey}'.sub('{' + 'taxonomyGroupID' + '}', CGI.escape(taxonomy_group_id.to_s)).sub('{' + 'taxonomyGroupDetailKey' + '}', CGI.escape(taxonomy_group_detail_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxonomyGroupDetailsApi.delete_taxonomy_group_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxonomyGroupDetailsApi#delete_taxonomy_group_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get TaxonomyGroupDetail
    # Gets TaxonomyGroupDetail
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail_key [Integer] TaxonomyGroupDetail Key
    # @param [Hash] opts the optional parameters
    # @return [TaxonomyGroupDetailVBAResponse]
    def get_taxonomy_group_detail(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, opts = {})
      data, _status_code, _headers = get_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, opts)
      data
    end

    # Get TaxonomyGroupDetail
    # Gets TaxonomyGroupDetail
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail_key [Integer] TaxonomyGroupDetail Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaxonomyGroupDetailVBAResponse, Integer, Hash)>] TaxonomyGroupDetailVBAResponse data, response status code and response headers
    def get_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxonomyGroupDetailsApi.get_taxonomy_group_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling TaxonomyGroupDetailsApi.get_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_id' is set
      if @api_client.config.client_side_validation && taxonomy_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_id' when calling TaxonomyGroupDetailsApi.get_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_detail_key' is set
      if @api_client.config.client_side_validation && taxonomy_group_detail_key.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_detail_key' when calling TaxonomyGroupDetailsApi.get_taxonomy_group_detail"
      end
      # resource path
      local_var_path = '/taxonomy-groups/{taxonomyGroupID}/taxonomy-group-details/{taxonomyGroupDetailKey}'.sub('{' + 'taxonomyGroupID' + '}', CGI.escape(taxonomy_group_id.to_s)).sub('{' + 'taxonomyGroupDetailKey' + '}', CGI.escape(taxonomy_group_detail_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaxonomyGroupDetailVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxonomyGroupDetailsApi.get_taxonomy_group_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxonomyGroupDetailsApi#get_taxonomy_group_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List TaxonomyGroupDetail
    # Lists all TaxonomyGroupDetail given a specific taxonomyGroupID
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param [Hash] opts the optional parameters
    # @return [TaxonomyGroupDetailListVBAResponse]
    def list_taxonomy_group_detail(vbasoftware_database, taxonomy_group_id, opts = {})
      data, _status_code, _headers = list_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, opts)
      data
    end

    # List TaxonomyGroupDetail
    # Lists all TaxonomyGroupDetail given a specific taxonomyGroupID
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaxonomyGroupDetailListVBAResponse, Integer, Hash)>] TaxonomyGroupDetailListVBAResponse data, response status code and response headers
    def list_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxonomyGroupDetailsApi.list_taxonomy_group_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling TaxonomyGroupDetailsApi.list_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_id' is set
      if @api_client.config.client_side_validation && taxonomy_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_id' when calling TaxonomyGroupDetailsApi.list_taxonomy_group_detail"
      end
      # resource path
      local_var_path = '/taxonomy-groups/{taxonomyGroupID}/taxonomy-group-details'.sub('{' + 'taxonomyGroupID' + '}', CGI.escape(taxonomy_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaxonomyGroupDetailListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxonomyGroupDetailsApi.list_taxonomy_group_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxonomyGroupDetailsApi#list_taxonomy_group_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch TaxonomyGroupDetail
    # Create or Update multiple TaxonomyGroupDetail at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail [Array<TaxonomyGroupDetail>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_taxonomy_group_detail(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail, opts = {})
      data, _status_code, _headers = update_batch_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail, opts)
      data
    end

    # Create or Update Batch TaxonomyGroupDetail
    # Create or Update multiple TaxonomyGroupDetail at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail [Array<TaxonomyGroupDetail>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxonomyGroupDetailsApi.update_batch_taxonomy_group_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling TaxonomyGroupDetailsApi.update_batch_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_id' is set
      if @api_client.config.client_side_validation && taxonomy_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_id' when calling TaxonomyGroupDetailsApi.update_batch_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_detail' is set
      if @api_client.config.client_side_validation && taxonomy_group_detail.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_detail' when calling TaxonomyGroupDetailsApi.update_batch_taxonomy_group_detail"
      end
      # resource path
      local_var_path = '/taxonomy-groups/{taxonomyGroupID}/taxonomy-group-details-batch'.sub('{' + 'taxonomyGroupID' + '}', CGI.escape(taxonomy_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(taxonomy_group_detail)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxonomyGroupDetailsApi.update_batch_taxonomy_group_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxonomyGroupDetailsApi#update_batch_taxonomy_group_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update TaxonomyGroupDetail
    # Updates a specific TaxonomyGroupDetail.
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail_key [Integer] TaxonomyGroupDetail Key
    # @param taxonomy_group_detail [TaxonomyGroupDetail] 
    # @param [Hash] opts the optional parameters
    # @return [TaxonomyGroupDetailVBAResponse]
    def update_taxonomy_group_detail(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, taxonomy_group_detail, opts = {})
      data, _status_code, _headers = update_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, taxonomy_group_detail, opts)
      data
    end

    # Update TaxonomyGroupDetail
    # Updates a specific TaxonomyGroupDetail.
    # @param vbasoftware_database [String] Target database
    # @param taxonomy_group_id [String] Taxonomy Group ID
    # @param taxonomy_group_detail_key [Integer] TaxonomyGroupDetail Key
    # @param taxonomy_group_detail [TaxonomyGroupDetail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaxonomyGroupDetailVBAResponse, Integer, Hash)>] TaxonomyGroupDetailVBAResponse data, response status code and response headers
    def update_taxonomy_group_detail_with_http_info(vbasoftware_database, taxonomy_group_id, taxonomy_group_detail_key, taxonomy_group_detail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxonomyGroupDetailsApi.update_taxonomy_group_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling TaxonomyGroupDetailsApi.update_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_id' is set
      if @api_client.config.client_side_validation && taxonomy_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_id' when calling TaxonomyGroupDetailsApi.update_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_detail_key' is set
      if @api_client.config.client_side_validation && taxonomy_group_detail_key.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_detail_key' when calling TaxonomyGroupDetailsApi.update_taxonomy_group_detail"
      end
      # verify the required parameter 'taxonomy_group_detail' is set
      if @api_client.config.client_side_validation && taxonomy_group_detail.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_group_detail' when calling TaxonomyGroupDetailsApi.update_taxonomy_group_detail"
      end
      # resource path
      local_var_path = '/taxonomy-groups/{taxonomyGroupID}/taxonomy-group-details/{taxonomyGroupDetailKey}'.sub('{' + 'taxonomyGroupID' + '}', CGI.escape(taxonomy_group_id.to_s)).sub('{' + 'taxonomyGroupDetailKey' + '}', CGI.escape(taxonomy_group_detail_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(taxonomy_group_detail)

      # return_type
      return_type = opts[:debug_return_type] || 'TaxonomyGroupDetailVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxonomyGroupDetailsApi.update_taxonomy_group_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxonomyGroupDetailsApi#update_taxonomy_group_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
