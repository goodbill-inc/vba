=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PremiumInvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PremInvoice
    # Creates a new PremInvoice
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice [PremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def create_prem_invoice(vbasoftware_database, prem_invoice, opts = {})
      data, _status_code, _headers = create_prem_invoice_with_http_info(vbasoftware_database, prem_invoice, opts)
      data
    end

    # Create PremInvoice
    # Creates a new PremInvoice
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice [PremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def create_prem_invoice_with_http_info(vbasoftware_database, prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.create_prem_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.create_prem_invoice"
      end
      # verify the required parameter 'prem_invoice' is set
      if @api_client.config.client_side_validation && prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice' when calling PremiumInvoicesApi.create_prem_invoice"
      end
      # resource path
      local_var_path = '/premium-invoices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.create_prem_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#create_prem_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PremInvoice
    # Deletes an PremInvoice
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_prem_invoice(vbasoftware_database, invoice_key, opts = {})
      delete_prem_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Delete PremInvoice
    # Deletes an PremInvoice
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_prem_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.delete_prem_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.delete_prem_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.delete_prem_invoice"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.delete_prem_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#delete_prem_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finalize Invoice
    # This will finalize the selected Invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def finalize_invoice(vbasoftware_database, invoice_key, opts = {})
      finalize_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Finalize Invoice
    # This will finalize the selected Invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def finalize_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.finalize_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.finalize_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.finalize_invoice"
      end
      # resource path
      local_var_path = '/invoice-finalize/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.finalize_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#finalize_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Invoice with additional options
    # This process will delete an invoice and remove attached records, update or delete adjustments based on selected options.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param delete_additional_invoices [Boolean] Delete Additional Invoices
    # @param keep_manual_adjustments [Boolean] Keep Manual Adjustments
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def full_delete_invoice(vbasoftware_database, invoice_key, delete_additional_invoices, keep_manual_adjustments, opts = {})
      full_delete_invoice_with_http_info(vbasoftware_database, invoice_key, delete_additional_invoices, keep_manual_adjustments, opts)
      nil
    end

    # Delete an Invoice with additional options
    # This process will delete an invoice and remove attached records, update or delete adjustments based on selected options.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param delete_additional_invoices [Boolean] Delete Additional Invoices
    # @param keep_manual_adjustments [Boolean] Keep Manual Adjustments
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def full_delete_invoice_with_http_info(vbasoftware_database, invoice_key, delete_additional_invoices, keep_manual_adjustments, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.full_delete_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.full_delete_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.full_delete_invoice"
      end
      # verify the required parameter 'delete_additional_invoices' is set
      if @api_client.config.client_side_validation && delete_additional_invoices.nil?
        fail ArgumentError, "Missing the required parameter 'delete_additional_invoices' when calling PremiumInvoicesApi.full_delete_invoice"
      end
      # verify the required parameter 'keep_manual_adjustments' is set
      if @api_client.config.client_side_validation && keep_manual_adjustments.nil?
        fail ArgumentError, "Missing the required parameter 'keep_manual_adjustments' when calling PremiumInvoicesApi.full_delete_invoice"
      end
      # resource path
      local_var_path = '/invoice-full-delete/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deleteAdditionalInvoices'] = delete_additional_invoices
      query_params[:'keepManualAdjustments'] = keep_manual_adjustments

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.full_delete_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#full_delete_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Division Invoice
    # Creates a new Premium Billing Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_division(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Division Invoice
    # Creates a new Premium Billing Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_division"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_division"
      end
      # resource path
      local_var_path = '/generate-division-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Group Invoice
    # Creates a new Premium Billing Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_group(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Group Invoice
    # Creates a new Premium Billing Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_group ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_group"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_group"
      end
      # resource path
      local_var_path = '/generate-group-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Group and Division Invoice
    # Creates a new Premium Billing Invoice the selected Group for any Division with the Group Invoice Level AND a separate Invoice for each Division flagged as Division Invoice Level.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_prem_invoice_group_division(vbasoftware_database, generate_prem_invoice, opts = {})
      generate_prem_invoice_group_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      nil
    end

    # Generate Group and Division Invoice
    # Creates a new Premium Billing Invoice the selected Group for any Division with the Group Invoice Level AND a separate Invoice for each Division flagged as Division Invoice Level.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_prem_invoice_group_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_group_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_group_division"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_group_division"
      end
      # resource path
      local_var_path = '/generate-group-division-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_group_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_group_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate GroupDivisionCaptive Invoice
    # Creates a new Premium Billing Invoice for the selected GroupDivisionCaptive.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_group_division_captive(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_group_division_captive_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate GroupDivisionCaptive Invoice
    # Creates a new Premium Billing Invoice for the selected GroupDivisionCaptive.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_group_division_captive_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_group_division_captive ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_group_division_captive"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_group_division_captive"
      end
      # resource path
      local_var_path = '/generate-group-division-captive-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_group_division_captive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_group_division_captive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Self-Admin Division Invoice
    # Creates a new Self-Admin Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_self_admin_division(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_self_admin_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Self-Admin Division Invoice
    # Creates a new Self-Admin Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_self_admin_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_self_admin_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_self_admin_division"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_self_admin_division"
      end
      # resource path
      local_var_path = '/generate-self-admin-division-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_self_admin_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_self_admin_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Self-Admin Group Invoice
    # Creates a new Self-Admin Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_self_admin_group(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_self_admin_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Self-Admin Group Invoice
    # Creates a new Self-Admin Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_self_admin_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_self_admin_group ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_self_admin_group"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_self_admin_group"
      end
      # resource path
      local_var_path = '/generate-self-admin-group-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_self_admin_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_self_admin_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Subscriber Invoice
    # Creates a new Premium Billing Invoice for the selected Subscriber.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_subscriber(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_subscriber_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Subscriber Invoice
    # Creates a new Premium Billing Invoice for the selected Subscriber.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_subscriber_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.generate_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.generate_prem_invoice_subscriber"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling PremiumInvoicesApi.generate_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/generate-subscriber-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.generate_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#generate_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PremInvoice
    # Gets PremInvoice
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def get_prem_invoice(vbasoftware_database, invoice_key, opts = {})
      data, _status_code, _headers = get_prem_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      data
    end

    # Get PremInvoice
    # Gets PremInvoice
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def get_prem_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.get_prem_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.get_prem_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.get_prem_invoice"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.get_prem_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#get_prem_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PremInvoice Group Summary
    # Gets PremInvoice Summary for the specified group id and invoice year.  First PremInvoiceSelfAdmin table is checked for the group id, if found the values are aggregated from come from PremInvoiceSelfAdmin; if the group is not found in PremInvoiceSelfAdmin, the PremInvoiceSubscriber table is checked for this group.  If not present in either table, an error is returned.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param invoice_year [Integer] Invoice Year
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceGroupSummaryVBAResponse]
    def get_prem_invoice_group_summary(vbasoftware_database, group_id, invoice_year, opts = {})
      data, _status_code, _headers = get_prem_invoice_group_summary_with_http_info(vbasoftware_database, group_id, invoice_year, opts)
      data
    end

    # Get PremInvoice Group Summary
    # Gets PremInvoice Summary for the specified group id and invoice year.  First PremInvoiceSelfAdmin table is checked for the group id, if found the values are aggregated from come from PremInvoiceSelfAdmin; if the group is not found in PremInvoiceSelfAdmin, the PremInvoiceSubscriber table is checked for this group.  If not present in either table, an error is returned.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param invoice_year [Integer] Invoice Year
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceGroupSummaryVBAResponse, Integer, Hash)>] PremInvoiceGroupSummaryVBAResponse data, response status code and response headers
    def get_prem_invoice_group_summary_with_http_info(vbasoftware_database, group_id, invoice_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.get_prem_invoice_group_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.get_prem_invoice_group_summary"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PremiumInvoicesApi.get_prem_invoice_group_summary"
      end
      # verify the required parameter 'invoice_year' is set
      if @api_client.config.client_side_validation && invoice_year.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_year' when calling PremiumInvoicesApi.get_prem_invoice_group_summary"
      end
      # resource path
      local_var_path = '/premium-invoices-group-summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'invoiceYear'] = invoice_year

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceGroupSummaryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.get_prem_invoice_group_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#get_prem_invoice_group_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PremInvoice Summary
    # Gets PremInvoice Summary for the specified invoice.  First PremInvoiceSelfAdmin table is checked for the invoice key, if found the values are aggregated from come from PremInvoiceSelfAdmin; if the invoice key is not found in PremInvoiceSelfAdmin, the PremInvoiceSubscriber table is checked.  If not present in either table, an error is returned.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceGroupSummaryVBAResponse]
    def get_prem_invoice_summary(vbasoftware_database, invoice_key, opts = {})
      data, _status_code, _headers = get_prem_invoice_summary_with_http_info(vbasoftware_database, invoice_key, opts)
      data
    end

    # Get PremInvoice Summary
    # Gets PremInvoice Summary for the specified invoice.  First PremInvoiceSelfAdmin table is checked for the invoice key, if found the values are aggregated from come from PremInvoiceSelfAdmin; if the invoice key is not found in PremInvoiceSelfAdmin, the PremInvoiceSubscriber table is checked.  If not present in either table, an error is returned.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceGroupSummaryVBAResponse, Integer, Hash)>] PremInvoiceGroupSummaryVBAResponse data, response status code and response headers
    def get_prem_invoice_summary_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.get_prem_invoice_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.get_prem_invoice_summary"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.get_prem_invoice_summary"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/summary'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceGroupSummaryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.get_prem_invoice_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#get_prem_invoice_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear Applied on Invoice
    # Clear Applied data on invoice.  Delete received records.  Update Received Amounts.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def invoice_clear_applied(vbasoftware_database, invoice_key, opts = {})
      invoice_clear_applied_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Clear Applied on Invoice
    # Clear Applied data on invoice.  Delete received records.  Update Received Amounts.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def invoice_clear_applied_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.invoice_clear_applied ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.invoice_clear_applied"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.invoice_clear_applied"
      end
      # resource path
      local_var_path = '/invoice-clear-applied/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.invoice_clear_applied",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#invoice_clear_applied\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PremInvoice
    # Lists all PremInvoice.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PremInvoiceListVBAResponse]
    def list_prem_invoice(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_prem_invoice_with_http_info(vbasoftware_database, opts)
      data
    end

    # List PremInvoice
    # Lists all PremInvoice.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PremInvoiceListVBAResponse, Integer, Hash)>] PremInvoiceListVBAResponse data, response status code and response headers
    def list_prem_invoice_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.list_prem_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.list_prem_invoice"
      end
      # resource path
      local_var_path = '/premium-invoices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.list_prem_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#list_prem_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Invoices to be Generated
    # List of Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceGenerateInvListListVBAResponse]
    def list_prem_invoice_generate(vbasoftware_database, invoice_date, opts = {})
      data, _status_code, _headers = list_prem_invoice_generate_with_http_info(vbasoftware_database, invoice_date, opts)
      data
    end

    # List Invoices to be Generated
    # List of Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceGenerateInvListListVBAResponse, Integer, Hash)>] PremInvoiceGenerateInvListListVBAResponse data, response status code and response headers
    def list_prem_invoice_generate_with_http_info(vbasoftware_database, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.list_prem_invoice_generate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.list_prem_invoice_generate"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling PremiumInvoicesApi.list_prem_invoice_generate"
      end
      # resource path
      local_var_path = '/list-generate-bill/{invoiceDate}'.sub('{' + 'invoiceDate' + '}', CGI.escape(invoice_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceGenerateInvListListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.list_prem_invoice_generate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#list_prem_invoice_generate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Self-Admin Invoices to be Generated
    # List of Self-Admin Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceGenerateSelfAdminInvListListVBAResponse]
    def list_prem_invoice_generate_self_admin(vbasoftware_database, invoice_date, opts = {})
      data, _status_code, _headers = list_prem_invoice_generate_self_admin_with_http_info(vbasoftware_database, invoice_date, opts)
      data
    end

    # List Self-Admin Invoices to be Generated
    # List of Self-Admin Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceGenerateSelfAdminInvListListVBAResponse, Integer, Hash)>] PremInvoiceGenerateSelfAdminInvListListVBAResponse data, response status code and response headers
    def list_prem_invoice_generate_self_admin_with_http_info(vbasoftware_database, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.list_prem_invoice_generate_self_admin ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.list_prem_invoice_generate_self_admin"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling PremiumInvoicesApi.list_prem_invoice_generate_self_admin"
      end
      # resource path
      local_var_path = '/list-generate-self-admin/{invoiceDate}'.sub('{' + 'invoiceDate' + '}', CGI.escape(invoice_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceGenerateSelfAdminInvListListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.list_prem_invoice_generate_self_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#list_prem_invoice_generate_self_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PremInvoiceSlim
    # Gets a 'Slim' list of PremInvoices.  The Slim model has a limited subset of fields intended for quick loading.  You may provide the GroupID and/or Invoice Year to filter the list to include only those Invoices in which the Group/Invoice Year match an invoice with the same Group/Invoice Year wihtin the PremInvoiceSubscriber and PremInvoiceSelfAdmin tables.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [Integer] :invoice_year Invoice Year (default to -1)
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PremInvoiceSlimListVBAResponse]
    def list_prem_invoice_slim(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_prem_invoice_slim_with_http_info(vbasoftware_database, opts)
      data
    end

    # List PremInvoiceSlim
    # Gets a &#39;Slim&#39; list of PremInvoices.  The Slim model has a limited subset of fields intended for quick loading.  You may provide the GroupID and/or Invoice Year to filter the list to include only those Invoices in which the Group/Invoice Year match an invoice with the same Group/Invoice Year wihtin the PremInvoiceSubscriber and PremInvoiceSelfAdmin tables.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [Integer] :invoice_year Invoice Year (default to -1)
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PremInvoiceSlimListVBAResponse, Integer, Hash)>] PremInvoiceSlimListVBAResponse data, response status code and response headers
    def list_prem_invoice_slim_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.list_prem_invoice_slim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.list_prem_invoice_slim"
      end
      # resource path
      local_var_path = '/premium-invoices-slim'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'invoiceYear'] = opts[:'invoice_year'] if !opts[:'invoice_year'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceSlimListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.list_prem_invoice_slim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#list_prem_invoice_slim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Header Adjustment
    # PremInvoice Apply Payments by Header Adjustment
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_header_adjustment(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_header_adjustment_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Header Adjustment
    # PremInvoice Apply Payments by Header Adjustment
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_header_adjustment_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_apply_payment_header_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_apply_payment_header_adjustment"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling PremiumInvoicesApi.prem_invoice_apply_payment_header_adjustment"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-adj'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_apply_payment_header_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_apply_payment_header_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments for Self-Admin
    # PremInvoice Apply Payments for Self-Admin
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_self_admin(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_self_admin_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments for Self-Admin
    # PremInvoice Apply Payments for Self-Admin
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_self_admin_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_apply_payment_self_admin ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_apply_payment_self_admin"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling PremiumInvoicesApi.prem_invoice_apply_payment_self_admin"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-self-admin'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_apply_payment_self_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_apply_payment_self_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Subscriber
    # PremInvoice Apply Payments by Subscriber
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_subscriber(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_subscriber_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Subscriber
    # PremInvoice Apply Payments by Subscriber
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_subscriber_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_apply_payment_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_apply_payment_subscriber"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling PremiumInvoicesApi.prem_invoice_apply_payment_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-sub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_apply_payment_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_apply_payment_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Subscriber and Payor ID
    # PremInvoice Apply Payments by Subscriber and Payor ID
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_subscriber_payor_id(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_subscriber_payor_id_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Subscriber and Payor ID
    # PremInvoice Apply Payments by Subscriber and Payor ID
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_subscriber_payor_id_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_payor_id ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_payor_id"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_payor_id"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-sub-payor_id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_payor_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_apply_payment_subscriber_payor_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Subscriber and Plan Type
    # PremInvoice Apply Payments by Subscriber and Plan Type
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_subscriber_plan_type(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_subscriber_plan_type_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Subscriber and Plan Type
    # PremInvoice Apply Payments by Subscriber and Plan Type
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_subscriber_plan_type_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_plan_type ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_plan_type"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_plan_type"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-sub-plan-type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_apply_payment_subscriber_plan_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_apply_payment_subscriber_plan_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Auto-Apply
    # Auto-Apply all payements to the selected invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_auto_apply(vbasoftware_database, invoice_key, opts = {})
      prem_invoice_auto_apply_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # PremInvoice Auto-Apply
    # Auto-Apply all payements to the selected invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_auto_apply_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_auto_apply ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_auto_apply"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.prem_invoice_auto_apply"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/auto-apply'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_auto_apply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_auto_apply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Auto-Apply for Self-Admin
    # Auto-Apply all payements to the selected Self-Admin invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_auto_apply_self_admin(vbasoftware_database, invoice_key, opts = {})
      prem_invoice_auto_apply_self_admin_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # PremInvoice Auto-Apply for Self-Admin
    # Auto-Apply all payements to the selected Self-Admin invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_auto_apply_self_admin_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.prem_invoice_auto_apply_self_admin ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.prem_invoice_auto_apply_self_admin"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.prem_invoice_auto_apply_self_admin"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/auto-apply-self-admin'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.prem_invoice_auto_apply_self_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#prem_invoice_auto_apply_self_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Regenerate Invoice
    # This will delete the invoice, remove attached adjustments, payments, etc. Then Regenerate the Invoice using the same Invoice Key.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def regenerate_invoice(vbasoftware_database, invoice_key, opts = {})
      regenerate_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Regenerate Invoice
    # This will delete the invoice, remove attached adjustments, payments, etc. Then Regenerate the Invoice using the same Invoice Key.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def regenerate_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.regenerate_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.regenerate_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.regenerate_invoice"
      end
      # resource path
      local_var_path = '/invoice-regenerate/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.regenerate_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#regenerate_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset Self-Admin Invoice
    # Reset a Self-Admin Invoice removing received amounts, adjustments applied, etc.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_self_admin_invoice(vbasoftware_database, invoice_key, opts = {})
      reset_self_admin_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Reset Self-Admin Invoice
    # Reset a Self-Admin Invoice removing received amounts, adjustments applied, etc.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_self_admin_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.reset_self_admin_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.reset_self_admin_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.reset_self_admin_invoice"
      end
      # resource path
      local_var_path = '/reset-self-admin-invoice/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.reset_self_admin_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#reset_self_admin_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PremInvoice
    # Create or Update multiple PremInvoice at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice [Array<PremInvoice>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_prem_invoice(vbasoftware_database, prem_invoice, opts = {})
      data, _status_code, _headers = update_batch_prem_invoice_with_http_info(vbasoftware_database, prem_invoice, opts)
      data
    end

    # Create or Update Batch PremInvoice
    # Create or Update multiple PremInvoice at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice [Array<PremInvoice>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_prem_invoice_with_http_info(vbasoftware_database, prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.update_batch_prem_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.update_batch_prem_invoice"
      end
      # verify the required parameter 'prem_invoice' is set
      if @api_client.config.client_side_validation && prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice' when calling PremiumInvoicesApi.update_batch_prem_invoice"
      end
      # resource path
      local_var_path = '/premium-invoices-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.update_batch_prem_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#update_batch_prem_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PremInvoice
    # Updates a specific PremInvoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param prem_invoice [PremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def update_prem_invoice(vbasoftware_database, invoice_key, prem_invoice, opts = {})
      data, _status_code, _headers = update_prem_invoice_with_http_info(vbasoftware_database, invoice_key, prem_invoice, opts)
      data
    end

    # Update PremInvoice
    # Updates a specific PremInvoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param prem_invoice [PremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def update_prem_invoice_with_http_info(vbasoftware_database, invoice_key, prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoicesApi.update_prem_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoicesApi.update_prem_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoicesApi.update_prem_invoice"
      end
      # verify the required parameter 'prem_invoice' is set
      if @api_client.config.client_side_validation && prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice' when calling PremiumInvoicesApi.update_prem_invoice"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoicesApi.update_prem_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoicesApi#update_prem_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
