=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class UserAccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Admin Disable User
    # Admin request to disable a User.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def admin_disable_user(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = admin_disable_user_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Admin Disable User
    # Admin request to disable a User.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def admin_disable_user_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.admin_disable_user ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.admin_disable_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.admin_disable_user"
      end
      # resource path
      local_var_path = '/users/{userID}/admin-disable'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.admin_disable_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#admin_disable_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Admin Enable User
    # Admin request to enable a User.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def admin_enable_user(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = admin_enable_user_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Admin Enable User
    # Admin request to enable a User.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def admin_enable_user_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.admin_enable_user ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.admin_enable_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.admin_enable_user"
      end
      # resource path
      local_var_path = '/users/{userID}/admin-enable'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.admin_enable_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#admin_enable_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Admin Resend Confirmation Code
    # Resends a User a confirmation code.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def admin_resend_confirmation_code(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = admin_resend_confirmation_code_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Admin Resend Confirmation Code
    # Resends a User a confirmation code.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def admin_resend_confirmation_code_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.admin_resend_confirmation_code ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.admin_resend_confirmation_code"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.admin_resend_confirmation_code"
      end
      # resource path
      local_var_path = '/users/{userID}/resend-confirmation-code'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.admin_resend_confirmation_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#admin_resend_confirmation_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Admin Resend Welcome Message
    # Resends the invitation message to a user that already exists and resets the expiration on the user's sign-up window.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def admin_resend_welcome_mesasge(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = admin_resend_welcome_mesasge_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Admin Resend Welcome Message
    # Resends the invitation message to a user that already exists and resets the expiration on the user&#39;s sign-up window.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def admin_resend_welcome_mesasge_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.admin_resend_welcome_mesasge ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.admin_resend_welcome_mesasge"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.admin_resend_welcome_mesasge"
      end
      # resource path
      local_var_path = '/users/{userID}/resend-welcome-message'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.admin_resend_welcome_mesasge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#admin_resend_welcome_mesasge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Confirm Forgot Password
    # Allows a user to enter a confirmation code to reset a forgotten password.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param user_confirm_forgot_password_request [UserConfirmForgotPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UserConfirmForgotPasswordResponseVBAResponse]
    def confirm_forgot_password(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_confirm_forgot_password_request, opts = {})
      data, _status_code, _headers = confirm_forgot_password_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_confirm_forgot_password_request, opts)
      data
    end

    # Confirm Forgot Password
    # Allows a user to enter a confirmation code to reset a forgotten password.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param user_confirm_forgot_password_request [UserConfirmForgotPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserConfirmForgotPasswordResponseVBAResponse, Integer, Hash)>] UserConfirmForgotPasswordResponseVBAResponse data, response status code and response headers
    def confirm_forgot_password_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_confirm_forgot_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.confirm_forgot_password ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling UserAccountApi.confirm_forgot_password"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling UserAccountApi.confirm_forgot_password"
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.confirm_forgot_password"
      end
      # verify the required parameter 'user_confirm_forgot_password_request' is set
      if @api_client.config.client_side_validation && user_confirm_forgot_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_confirm_forgot_password_request' when calling UserAccountApi.confirm_forgot_password"
      end
      # resource path
      local_var_path = '/confirm-forgot-password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_confirm_forgot_password_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserConfirmForgotPasswordResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.confirm_forgot_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#confirm_forgot_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Forgot Password
    # Begin password recovery flow. Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param user_forgot_password_request [UserForgotPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UserForgotPasswordResponseVBAResponse]
    def forgot_password(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_forgot_password_request, opts = {})
      data, _status_code, _headers = forgot_password_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_forgot_password_request, opts)
      data
    end

    # Forgot Password
    # Begin password recovery flow. Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user&#39;s password.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param user_forgot_password_request [UserForgotPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserForgotPasswordResponseVBAResponse, Integer, Hash)>] UserForgotPasswordResponseVBAResponse data, response status code and response headers
    def forgot_password_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_forgot_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.forgot_password ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling UserAccountApi.forgot_password"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling UserAccountApi.forgot_password"
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.forgot_password"
      end
      # verify the required parameter 'user_forgot_password_request' is set
      if @api_client.config.client_side_validation && user_forgot_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_forgot_password_request' when calling UserAccountApi.forgot_password"
      end
      # resource path
      local_var_path = '/forgot-password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_forgot_password_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserForgotPasswordResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.forgot_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#forgot_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lock User Account
    # Locks a specific user account to prevent access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [UsersVBAResponse]
    def lock_user_account(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = lock_user_account_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Lock User Account
    # Locks a specific user account to prevent access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersVBAResponse, Integer, Hash)>] UsersVBAResponse data, response status code and response headers
    def lock_user_account_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.lock_user_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.lock_user_account"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.lock_user_account"
      end
      # resource path
      local_var_path = '/users/{userID}/lock'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.lock_user_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#lock_user_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh User Tokens
    # Uses the Refresh Token to obtain new JWT tokens to extend the user's session.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param expired_id_token [String] Expired Id Token
    # @param refresh_token [String] Refresh Token
    # @param [Hash] opts the optional parameters
    # @return [UserAuthenticationResponseVBAResponse]
    def refresh_user_tokens(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, expired_id_token, refresh_token, opts = {})
      data, _status_code, _headers = refresh_user_tokens_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, expired_id_token, refresh_token, opts)
      data
    end

    # Refresh User Tokens
    # Uses the Refresh Token to obtain new JWT tokens to extend the user&#39;s session.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param expired_id_token [String] Expired Id Token
    # @param refresh_token [String] Refresh Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserAuthenticationResponseVBAResponse, Integer, Hash)>] UserAuthenticationResponseVBAResponse data, response status code and response headers
    def refresh_user_tokens_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, expired_id_token, refresh_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.refresh_user_tokens ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling UserAccountApi.refresh_user_tokens"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling UserAccountApi.refresh_user_tokens"
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.refresh_user_tokens"
      end
      # verify the required parameter 'expired_id_token' is set
      if @api_client.config.client_side_validation && expired_id_token.nil?
        fail ArgumentError, "Missing the required parameter 'expired_id_token' when calling UserAccountApi.refresh_user_tokens"
      end
      # verify the required parameter 'refresh_token' is set
      if @api_client.config.client_side_validation && refresh_token.nil?
        fail ArgumentError, "Missing the required parameter 'refresh_token' when calling UserAccountApi.refresh_user_tokens"
      end
      # resource path
      local_var_path = '/user-refresh-tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code
      header_params[:'vbasoftware-database'] = vbasoftware_database
      header_params[:'expired-id-token'] = expired_id_token
      header_params[:'refresh-token'] = refresh_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserAuthenticationResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.refresh_user_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#refresh_user_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlock User Account
    # Unlocks a specific user account to grant access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [UsersVBAResponse]
    def unlock_user_account(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = unlock_user_account_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Unlock User Account
    # Unlocks a specific user account to grant access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersVBAResponse, Integer, Hash)>] UsersVBAResponse data, response status code and response headers
    def unlock_user_account_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.unlock_user_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.unlock_user_account"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.unlock_user_account"
      end
      # resource path
      local_var_path = '/users/{userID}/unlock'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.unlock_user_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#unlock_user_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # User Authentication
    # Starts User Authentication
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vbasoftware_machine_id Machine ID (optional)
    # @return [UserAuthenticationResponseVBAResponse]
    def user_authentication(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, opts = {})
      data, _status_code, _headers = user_authentication_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, opts)
      data
    end

    # User Authentication
    # Starts User Authentication
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vbasoftware_machine_id Machine ID (optional)
    # @return [Array<(UserAuthenticationResponseVBAResponse, Integer, Hash)>] UserAuthenticationResponseVBAResponse data, response status code and response headers
    def user_authentication_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.user_authentication ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling UserAccountApi.user_authentication"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling UserAccountApi.user_authentication"
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.user_authentication"
      end
      # resource path
      local_var_path = '/user-authentication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code
      header_params[:'vbasoftware-database'] = vbasoftware_database
      header_params[:'vbasoftware-machine-id'] = opts[:'vbasoftware_machine_id'] if !opts[:'vbasoftware_machine_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserAuthenticationResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth', 'apiKeyAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.user_authentication",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#user_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # User Change Password
    # User requests to change their password.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_reset_password_request [UserResetPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def user_change_password(vbasoftware_database, user_id, user_reset_password_request, opts = {})
      data, _status_code, _headers = user_change_password_with_http_info(vbasoftware_database, user_id, user_reset_password_request, opts)
      data
    end

    # User Change Password
    # User requests to change their password.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_reset_password_request [UserResetPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def user_change_password_with_http_info(vbasoftware_database, user_id, user_reset_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.user_change_password ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.user_change_password"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.user_change_password"
      end
      # verify the required parameter 'user_reset_password_request' is set
      if @api_client.config.client_side_validation && user_reset_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_reset_password_request' when calling UserAccountApi.user_change_password"
      end
      # resource path
      local_var_path = '/users/{userID}/change-password'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_reset_password_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.user_change_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#user_change_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Temporary Password
    # Changes a User's temporary password.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param user_change_temp_password_request [UserChangeTempPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UserChangeTempPasswordResponseVBAResponse]
    def user_change_temp_password(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_change_temp_password_request, opts = {})
      data, _status_code, _headers = user_change_temp_password_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_change_temp_password_request, opts)
      data
    end

    # Change Temporary Password
    # Changes a User&#39;s temporary password.
    # @param vbasoftware_client_id [String] Client ID
    # @param vbasoftware_client_code [String] Client Code
    # @param vbasoftware_database [String] Target database
    # @param user_change_temp_password_request [UserChangeTempPasswordRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserChangeTempPasswordResponseVBAResponse, Integer, Hash)>] UserChangeTempPasswordResponseVBAResponse data, response status code and response headers
    def user_change_temp_password_with_http_info(vbasoftware_client_id, vbasoftware_client_code, vbasoftware_database, user_change_temp_password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.user_change_temp_password ...'
      end
      # verify the required parameter 'vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_id' when calling UserAccountApi.user_change_temp_password"
      end
      # verify the required parameter 'vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_client_code' when calling UserAccountApi.user_change_temp_password"
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.user_change_temp_password"
      end
      # verify the required parameter 'user_change_temp_password_request' is set
      if @api_client.config.client_side_validation && user_change_temp_password_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_change_temp_password_request' when calling UserAccountApi.user_change_temp_password"
      end
      # resource path
      local_var_path = '/change-temporary-password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-client-id'] = vbasoftware_client_id
      header_params[:'vbasoftware-client-code'] = vbasoftware_client_code
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_change_temp_password_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserChangeTempPasswordResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.user_change_temp_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#user_change_temp_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Admin Reset User Password
    # Admin request to reset a User's password. When an Administrator calls this API, the User's current password is invalidated and must be changed. If a user tries to sign in after the API is called, the User will get a `PasswordResetRequired` message back and should use the `forgot password` flow. In addition, if a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def user_reset_password(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = user_reset_password_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Admin Reset User Password
    # Admin request to reset a User&#39;s password. When an Administrator calls this API, the User&#39;s current password is invalidated and must be changed. If a user tries to sign in after the API is called, the User will get a &#x60;PasswordResetRequired&#x60; message back and should use the &#x60;forgot password&#x60; flow. In addition, if a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def user_reset_password_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserAccountApi.user_reset_password ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserAccountApi.user_reset_password"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserAccountApi.user_reset_password"
      end
      # resource path
      local_var_path = '/users/{userID}/admin-reset-password'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserAccountApi.user_reset_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserAccountApi#user_reset_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
