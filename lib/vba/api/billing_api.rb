=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class BillingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Billing Apply Payment Category
    # Using the ListPremApplyPaymentCategory Operation to get a list of payments and additional configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_config [BillingApplyPaymentConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_apply_payment_category(vbasoftware_database, billing_apply_payment_config, opts = {})
      billing_apply_payment_category_with_http_info(vbasoftware_database, billing_apply_payment_config, opts)
      nil
    end

    # Billing Apply Payment Category
    # Using the ListPremApplyPaymentCategory Operation to get a list of payments and additional configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_config [BillingApplyPaymentConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_apply_payment_category_with_http_info(vbasoftware_database, billing_apply_payment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_apply_payment_category ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BillingApi.billing_apply_payment_category"
      end
      # verify the required parameter 'billing_apply_payment_config' is set
      if @api_client.config.client_side_validation && billing_apply_payment_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_apply_payment_config' when calling BillingApi.billing_apply_payment_category"
      end
      # resource path
      local_var_path = '/billing-apply-payment-category'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_apply_payment_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BillingApi.billing_apply_payment_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_apply_payment_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Apply Payment On Account Category
    # Using the PremPaymentOnAccount List as a basis for configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_on_account_config [BillingApplyPaymentOnAccountConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_apply_payment_on_account_category(vbasoftware_database, billing_apply_payment_on_account_config, opts = {})
      billing_apply_payment_on_account_category_with_http_info(vbasoftware_database, billing_apply_payment_on_account_config, opts)
      nil
    end

    # Billing Apply Payment On Account Category
    # Using the PremPaymentOnAccount List as a basis for configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_on_account_config [BillingApplyPaymentOnAccountConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_apply_payment_on_account_category_with_http_info(vbasoftware_database, billing_apply_payment_on_account_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_apply_payment_on_account_category ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BillingApi.billing_apply_payment_on_account_category"
      end
      # verify the required parameter 'billing_apply_payment_on_account_config' is set
      if @api_client.config.client_side_validation && billing_apply_payment_on_account_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_apply_payment_on_account_config' when calling BillingApi.billing_apply_payment_on_account_category"
      end
      # resource path
      local_var_path = '/billing-apply-payment-on-account-category'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_apply_payment_on_account_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BillingApi.billing_apply_payment_on_account_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_apply_payment_on_account_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Auto-Apply
    # Auto Apply Payment based on specified configuration options.
    # @param vbasoftware_database [String] Target database
    # @param billing_auto_apply_config [BillingAutoApplyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_auto_apply(vbasoftware_database, billing_auto_apply_config, opts = {})
      billing_auto_apply_with_http_info(vbasoftware_database, billing_auto_apply_config, opts)
      nil
    end

    # Billing Auto-Apply
    # Auto Apply Payment based on specified configuration options.
    # @param vbasoftware_database [String] Target database
    # @param billing_auto_apply_config [BillingAutoApplyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_auto_apply_with_http_info(vbasoftware_database, billing_auto_apply_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_auto_apply ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BillingApi.billing_auto_apply"
      end
      # verify the required parameter 'billing_auto_apply_config' is set
      if @api_client.config.client_side_validation && billing_auto_apply_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_auto_apply_config' when calling BillingApi.billing_auto_apply"
      end
      # resource path
      local_var_path = '/billing-auto-apply'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_auto_apply_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BillingApi.billing_auto_apply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_auto_apply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Refund
    # Generate the necessary Billing adjustments for an Invoice refund and create a Distribution if needed.
    # @param vbasoftware_database [String] Target database
    # @param billing_refund [BillingRefund] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_refund(vbasoftware_database, billing_refund, opts = {})
      billing_refund_with_http_info(vbasoftware_database, billing_refund, opts)
      nil
    end

    # Billing Refund
    # Generate the necessary Billing adjustments for an Invoice refund and create a Distribution if needed.
    # @param vbasoftware_database [String] Target database
    # @param billing_refund [BillingRefund] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_refund_with_http_info(vbasoftware_database, billing_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingApi.billing_refund ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BillingApi.billing_refund"
      end
      # verify the required parameter 'billing_refund' is set
      if @api_client.config.client_side_validation && billing_refund.nil?
        fail ArgumentError, "Missing the required parameter 'billing_refund' when calling BillingApi.billing_refund"
      end
      # resource path
      local_var_path = '/billing-refund'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_refund)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BillingApi.billing_refund",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingApi#billing_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
