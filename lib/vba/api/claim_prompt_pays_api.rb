=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ClaimPromptPaysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create ClaimPromptPay
    # Creates a new ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay [ClaimPromptPay] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimPromptPayVBAResponse]
    def create_claim_prompt_pay(vbasoftware_database, claim_prompt_pay, opts = {})
      data, _status_code, _headers = create_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay, opts)
      data
    end

    # Create ClaimPromptPay
    # Creates a new ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay [ClaimPromptPay] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimPromptPayVBAResponse, Integer, Hash)>] ClaimPromptPayVBAResponse data, response status code and response headers
    def create_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPromptPaysApi.create_claim_prompt_pay ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPromptPaysApi.create_claim_prompt_pay"
      end
      # verify the required parameter 'claim_prompt_pay' is set
      if @api_client.config.client_side_validation && claim_prompt_pay.nil?
        fail ArgumentError, "Missing the required parameter 'claim_prompt_pay' when calling ClaimPromptPaysApi.create_claim_prompt_pay"
      end
      # resource path
      local_var_path = '/claim-prompt-pays'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_prompt_pay)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPromptPayVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPromptPaysApi.create_claim_prompt_pay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPromptPaysApi#create_claim_prompt_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ClaimPromptPay
    # Deletes an ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay_key [Integer] ClaimPromptPay Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_claim_prompt_pay(vbasoftware_database, claim_prompt_pay_key, opts = {})
      delete_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay_key, opts)
      nil
    end

    # Delete ClaimPromptPay
    # Deletes an ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay_key [Integer] ClaimPromptPay Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPromptPaysApi.delete_claim_prompt_pay ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPromptPaysApi.delete_claim_prompt_pay"
      end
      # verify the required parameter 'claim_prompt_pay_key' is set
      if @api_client.config.client_side_validation && claim_prompt_pay_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_prompt_pay_key' when calling ClaimPromptPaysApi.delete_claim_prompt_pay"
      end
      # resource path
      local_var_path = '/claim-prompt-pays/{ClaimPromptPay_Key}'.sub('{' + 'ClaimPromptPay_Key' + '}', CGI.escape(claim_prompt_pay_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPromptPaysApi.delete_claim_prompt_pay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPromptPaysApi#delete_claim_prompt_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ClaimPromptPay
    # Gets ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay_key [Integer] ClaimPromptPay Key
    # @param [Hash] opts the optional parameters
    # @return [ClaimPromptPayVBAResponse]
    def get_claim_prompt_pay(vbasoftware_database, claim_prompt_pay_key, opts = {})
      data, _status_code, _headers = get_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay_key, opts)
      data
    end

    # Get ClaimPromptPay
    # Gets ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay_key [Integer] ClaimPromptPay Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimPromptPayVBAResponse, Integer, Hash)>] ClaimPromptPayVBAResponse data, response status code and response headers
    def get_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPromptPaysApi.get_claim_prompt_pay ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPromptPaysApi.get_claim_prompt_pay"
      end
      # verify the required parameter 'claim_prompt_pay_key' is set
      if @api_client.config.client_side_validation && claim_prompt_pay_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_prompt_pay_key' when calling ClaimPromptPaysApi.get_claim_prompt_pay"
      end
      # resource path
      local_var_path = '/claim-prompt-pays/{ClaimPromptPay_Key}'.sub('{' + 'ClaimPromptPay_Key' + '}', CGI.escape(claim_prompt_pay_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPromptPayVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPromptPaysApi.get_claim_prompt_pay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPromptPaysApi#get_claim_prompt_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ClaimPromptPay
    # Lists all ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @return [ClaimPromptPayListVBAResponse]
    def list_claim_prompt_pay(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_claim_prompt_pay_with_http_info(vbasoftware_database, opts)
      data
    end

    # List ClaimPromptPay
    # Lists all ClaimPromptPay
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @return [Array<(ClaimPromptPayListVBAResponse, Integer, Hash)>] ClaimPromptPayListVBAResponse data, response status code and response headers
    def list_claim_prompt_pay_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPromptPaysApi.list_claim_prompt_pay ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPromptPaysApi.list_claim_prompt_pay"
      end
      # resource path
      local_var_path = '/claim-prompt-pays'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPromptPayListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPromptPaysApi.list_claim_prompt_pay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPromptPaysApi#list_claim_prompt_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch ClaimPromptPay
    # Create or Update multiple ClaimPromptPay at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay [Array<ClaimPromptPay>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_claim_prompt_pay(vbasoftware_database, claim_prompt_pay, opts = {})
      data, _status_code, _headers = update_batch_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay, opts)
      data
    end

    # Create or Update Batch ClaimPromptPay
    # Create or Update multiple ClaimPromptPay at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay [Array<ClaimPromptPay>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPromptPaysApi.update_batch_claim_prompt_pay ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPromptPaysApi.update_batch_claim_prompt_pay"
      end
      # verify the required parameter 'claim_prompt_pay' is set
      if @api_client.config.client_side_validation && claim_prompt_pay.nil?
        fail ArgumentError, "Missing the required parameter 'claim_prompt_pay' when calling ClaimPromptPaysApi.update_batch_claim_prompt_pay"
      end
      # resource path
      local_var_path = '/claim-prompt-pays-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_prompt_pay)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPromptPaysApi.update_batch_claim_prompt_pay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPromptPaysApi#update_batch_claim_prompt_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update ClaimPromptPay
    # Updates a specific ClaimPromptPay.
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay_key [Integer] ClaimPromptPay Key
    # @param claim_prompt_pay [ClaimPromptPay] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimPromptPayVBAResponse]
    def update_claim_prompt_pay(vbasoftware_database, claim_prompt_pay_key, claim_prompt_pay, opts = {})
      data, _status_code, _headers = update_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay_key, claim_prompt_pay, opts)
      data
    end

    # Update ClaimPromptPay
    # Updates a specific ClaimPromptPay.
    # @param vbasoftware_database [String] Target database
    # @param claim_prompt_pay_key [Integer] ClaimPromptPay Key
    # @param claim_prompt_pay [ClaimPromptPay] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimPromptPayVBAResponse, Integer, Hash)>] ClaimPromptPayVBAResponse data, response status code and response headers
    def update_claim_prompt_pay_with_http_info(vbasoftware_database, claim_prompt_pay_key, claim_prompt_pay, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPromptPaysApi.update_claim_prompt_pay ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPromptPaysApi.update_claim_prompt_pay"
      end
      # verify the required parameter 'claim_prompt_pay_key' is set
      if @api_client.config.client_side_validation && claim_prompt_pay_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_prompt_pay_key' when calling ClaimPromptPaysApi.update_claim_prompt_pay"
      end
      # verify the required parameter 'claim_prompt_pay' is set
      if @api_client.config.client_side_validation && claim_prompt_pay.nil?
        fail ArgumentError, "Missing the required parameter 'claim_prompt_pay' when calling ClaimPromptPaysApi.update_claim_prompt_pay"
      end
      # resource path
      local_var_path = '/claim-prompt-pays/{ClaimPromptPay_Key}'.sub('{' + 'ClaimPromptPay_Key' + '}', CGI.escape(claim_prompt_pay_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_prompt_pay)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPromptPayVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPromptPaysApi.update_claim_prompt_pay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPromptPaysApi#update_claim_prompt_pay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
