=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PayeeAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PayeeAccount
    # Creates a new PayeeAccount
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account [PayeeAccount] 
    # @param [Hash] opts the optional parameters
    # @return [PayeeAccountVBAResponse]
    def create_payee_account(vbasoftware_database, payee_id, payee_account, opts = {})
      data, _status_code, _headers = create_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account, opts)
      data
    end

    # Create PayeeAccount
    # Creates a new PayeeAccount
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account [PayeeAccount] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayeeAccountVBAResponse, Integer, Hash)>] PayeeAccountVBAResponse data, response status code and response headers
    def create_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayeeAccountsApi.create_payee_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayeeAccountsApi.create_payee_account"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PayeeAccountsApi.create_payee_account"
      end
      # verify the required parameter 'payee_account' is set
      if @api_client.config.client_side_validation && payee_account.nil?
        fail ArgumentError, "Missing the required parameter 'payee_account' when calling PayeeAccountsApi.create_payee_account"
      end
      # resource path
      local_var_path = '/payees/{payeeID}/accounts'.sub('{' + 'payeeID' + '}', CGI.escape(payee_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payee_account)

      # return_type
      return_type = opts[:debug_return_type] || 'PayeeAccountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayeeAccountsApi.create_payee_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayeeAccountsApi#create_payee_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PayeeAccount
    # Deletes an PayeeAccount
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account_key [Integer] PayeeAccount Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_payee_account(vbasoftware_database, payee_id, payee_account_key, opts = {})
      delete_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account_key, opts)
      nil
    end

    # Delete PayeeAccount
    # Deletes an PayeeAccount
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account_key [Integer] PayeeAccount Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayeeAccountsApi.delete_payee_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayeeAccountsApi.delete_payee_account"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PayeeAccountsApi.delete_payee_account"
      end
      # verify the required parameter 'payee_account_key' is set
      if @api_client.config.client_side_validation && payee_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payee_account_key' when calling PayeeAccountsApi.delete_payee_account"
      end
      # resource path
      local_var_path = '/payees/{payeeID}/accounts/{payeeAccountKey}'.sub('{' + 'payeeID' + '}', CGI.escape(payee_id.to_s)).sub('{' + 'payeeAccountKey' + '}', CGI.escape(payee_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayeeAccountsApi.delete_payee_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayeeAccountsApi#delete_payee_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PayeeAccount
    # Gets PayeeAccount
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account_key [Integer] PayeeAccount Key
    # @param [Hash] opts the optional parameters
    # @return [PayeeAccountVBAResponse]
    def get_payee_account(vbasoftware_database, payee_id, payee_account_key, opts = {})
      data, _status_code, _headers = get_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account_key, opts)
      data
    end

    # Get PayeeAccount
    # Gets PayeeAccount
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account_key [Integer] PayeeAccount Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayeeAccountVBAResponse, Integer, Hash)>] PayeeAccountVBAResponse data, response status code and response headers
    def get_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayeeAccountsApi.get_payee_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayeeAccountsApi.get_payee_account"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PayeeAccountsApi.get_payee_account"
      end
      # verify the required parameter 'payee_account_key' is set
      if @api_client.config.client_side_validation && payee_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payee_account_key' when calling PayeeAccountsApi.get_payee_account"
      end
      # resource path
      local_var_path = '/payees/{payeeID}/accounts/{payeeAccountKey}'.sub('{' + 'payeeID' + '}', CGI.escape(payee_id.to_s)).sub('{' + 'payeeAccountKey' + '}', CGI.escape(payee_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PayeeAccountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayeeAccountsApi.get_payee_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayeeAccountsApi#get_payee_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PayeeAccount
    # Lists all PayeeAccount for the given payeeID
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PayeeAccountListVBAResponse]
    def list_payee_account(vbasoftware_database, payee_id, opts = {})
      data, _status_code, _headers = list_payee_account_with_http_info(vbasoftware_database, payee_id, opts)
      data
    end

    # List PayeeAccount
    # Lists all PayeeAccount for the given payeeID
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PayeeAccountListVBAResponse, Integer, Hash)>] PayeeAccountListVBAResponse data, response status code and response headers
    def list_payee_account_with_http_info(vbasoftware_database, payee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayeeAccountsApi.list_payee_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayeeAccountsApi.list_payee_account"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PayeeAccountsApi.list_payee_account"
      end
      # resource path
      local_var_path = '/payees/{payeeID}/accounts'.sub('{' + 'payeeID' + '}', CGI.escape(payee_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PayeeAccountListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayeeAccountsApi.list_payee_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayeeAccountsApi#list_payee_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PayeeAccount
    # Create or Update multiple PayeeAccount at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account [Array<PayeeAccount>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_payee_account(vbasoftware_database, payee_id, payee_account, opts = {})
      data, _status_code, _headers = update_batch_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account, opts)
      data
    end

    # Create or Update Batch PayeeAccount
    # Create or Update multiple PayeeAccount at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account [Array<PayeeAccount>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayeeAccountsApi.update_batch_payee_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayeeAccountsApi.update_batch_payee_account"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PayeeAccountsApi.update_batch_payee_account"
      end
      # verify the required parameter 'payee_account' is set
      if @api_client.config.client_side_validation && payee_account.nil?
        fail ArgumentError, "Missing the required parameter 'payee_account' when calling PayeeAccountsApi.update_batch_payee_account"
      end
      # resource path
      local_var_path = '/payees/{payeeID}/accounts-batch'.sub('{' + 'payeeID' + '}', CGI.escape(payee_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payee_account)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayeeAccountsApi.update_batch_payee_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayeeAccountsApi#update_batch_payee_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PayeeAccount
    # Updates a specific PayeeAccount.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account_key [Integer] PayeeAccount Key
    # @param payee_account [PayeeAccount] 
    # @param [Hash] opts the optional parameters
    # @return [PayeeAccountVBAResponse]
    def update_payee_account(vbasoftware_database, payee_id, payee_account_key, payee_account, opts = {})
      data, _status_code, _headers = update_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account_key, payee_account, opts)
      data
    end

    # Update PayeeAccount
    # Updates a specific PayeeAccount.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payee_account_key [Integer] PayeeAccount Key
    # @param payee_account [PayeeAccount] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayeeAccountVBAResponse, Integer, Hash)>] PayeeAccountVBAResponse data, response status code and response headers
    def update_payee_account_with_http_info(vbasoftware_database, payee_id, payee_account_key, payee_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayeeAccountsApi.update_payee_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayeeAccountsApi.update_payee_account"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PayeeAccountsApi.update_payee_account"
      end
      # verify the required parameter 'payee_account_key' is set
      if @api_client.config.client_side_validation && payee_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payee_account_key' when calling PayeeAccountsApi.update_payee_account"
      end
      # verify the required parameter 'payee_account' is set
      if @api_client.config.client_side_validation && payee_account.nil?
        fail ArgumentError, "Missing the required parameter 'payee_account' when calling PayeeAccountsApi.update_payee_account"
      end
      # resource path
      local_var_path = '/payees/{payeeID}/accounts/{payeeAccountKey}'.sub('{' + 'payeeID' + '}', CGI.escape(payee_id.to_s)).sub('{' + 'payeeAccountKey' + '}', CGI.escape(payee_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payee_account)

      # return_type
      return_type = opts[:debug_return_type] || 'PayeeAccountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayeeAccountsApi.update_payee_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayeeAccountsApi#update_payee_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
