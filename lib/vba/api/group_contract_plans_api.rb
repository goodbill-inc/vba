=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class GroupContractPlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cascade Plan Update to GroupContractPlan
    # Using an existing GroupContractPlan, pass in a Plan ID to be updated that then updates downstream SubenrollmentPlan and MemenrollmentPlan records.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param group_contract_plan [GroupContractPlan] 
    # @param [Hash] opts the optional parameters
    # @return [GroupContractPlanVBAResponse]
    def cascade_update_group_contract_plan(vbasoftware_database, plan_id, group_contract_plan, opts = {})
      data, _status_code, _headers = cascade_update_group_contract_plan_with_http_info(vbasoftware_database, plan_id, group_contract_plan, opts)
      data
    end

    # Cascade Plan Update to GroupContractPlan
    # Using an existing GroupContractPlan, pass in a Plan ID to be updated that then updates downstream SubenrollmentPlan and MemenrollmentPlan records.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param group_contract_plan [GroupContractPlan] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupContractPlanVBAResponse, Integer, Hash)>] GroupContractPlanVBAResponse data, response status code and response headers
    def cascade_update_group_contract_plan_with_http_info(vbasoftware_database, plan_id, group_contract_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.cascade_update_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.cascade_update_group_contract_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling GroupContractPlansApi.cascade_update_group_contract_plan"
      end
      # verify the required parameter 'group_contract_plan' is set
      if @api_client.config.client_side_validation && group_contract_plan.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract_plan' when calling GroupContractPlansApi.cascade_update_group_contract_plan"
      end
      # resource path
      local_var_path = '/group-contract-plan-cascade-update/{planId}'.sub('{' + 'planId' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupContractPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.cascade_update_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#cascade_update_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create GroupContractPlan
    # Creates a new GroupContractPlan
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param group_contract_plan [GroupContractPlan] 
    # @param [Hash] opts the optional parameters
    # @return [GroupContractPlanVBAResponse]
    def create_group_contract_plan(vbasoftware_database, group_id, division_id, coverage_start, group_contract_plan, opts = {})
      data, _status_code, _headers = create_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, group_contract_plan, opts)
      data
    end

    # Create GroupContractPlan
    # Creates a new GroupContractPlan
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param group_contract_plan [GroupContractPlan] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupContractPlanVBAResponse, Integer, Hash)>] GroupContractPlanVBAResponse data, response status code and response headers
    def create_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, group_contract_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.create_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.create_group_contract_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.create_group_contract_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.create_group_contract_plan"
      end
      # verify the required parameter 'coverage_start' is set
      if @api_client.config.client_side_validation && coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_start' when calling GroupContractPlansApi.create_group_contract_plan"
      end
      # verify the required parameter 'group_contract_plan' is set
      if @api_client.config.client_side_validation && group_contract_plan.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract_plan' when calling GroupContractPlansApi.create_group_contract_plan"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/contracts/{coverageStart}/plans'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'coverageStart' + '}', CGI.escape(coverage_start.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupContractPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.create_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#create_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete GroupContractPlan
    # Deletes an GroupContractPlan
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_contract_plan(vbasoftware_database, group_id, division_id, coverage_start, plan_id, opts = {})
      delete_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, plan_id, opts)
      nil
    end

    # Delete GroupContractPlan
    # Deletes an GroupContractPlan
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.delete_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.delete_group_contract_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.delete_group_contract_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.delete_group_contract_plan"
      end
      # verify the required parameter 'coverage_start' is set
      if @api_client.config.client_side_validation && coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_start' when calling GroupContractPlansApi.delete_group_contract_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling GroupContractPlansApi.delete_group_contract_plan"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/contracts/{coverageStart}/plans/{planID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'coverageStart' + '}', CGI.escape(coverage_start.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.delete_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#delete_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GroupContractPlan
    # Gets GroupContractPlan
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [GroupContractPlanVBAResponse]
    def get_group_contract_plan(vbasoftware_database, group_id, division_id, coverage_start, plan_id, opts = {})
      data, _status_code, _headers = get_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, plan_id, opts)
      data
    end

    # Get GroupContractPlan
    # Gets GroupContractPlan
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupContractPlanVBAResponse, Integer, Hash)>] GroupContractPlanVBAResponse data, response status code and response headers
    def get_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.get_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.get_group_contract_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.get_group_contract_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.get_group_contract_plan"
      end
      # verify the required parameter 'coverage_start' is set
      if @api_client.config.client_side_validation && coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_start' when calling GroupContractPlansApi.get_group_contract_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling GroupContractPlansApi.get_group_contract_plan"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/contracts/{coverageStart}/plans/{planID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'coverageStart' + '}', CGI.escape(coverage_start.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupContractPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.get_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#get_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List GroupContractPlan
    # Lists all GroupContractPlan for the given groupID and divisionID and coverageStart
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [GroupContractPlanListVBAResponse]
    def list_group_contract_plan(vbasoftware_database, group_id, division_id, coverage_start, opts = {})
      data, _status_code, _headers = list_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, opts)
      data
    end

    # List GroupContractPlan
    # Lists all GroupContractPlan for the given groupID and divisionID and coverageStart
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(GroupContractPlanListVBAResponse, Integer, Hash)>] GroupContractPlanListVBAResponse data, response status code and response headers
    def list_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.list_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.list_group_contract_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.list_group_contract_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.list_group_contract_plan"
      end
      # verify the required parameter 'coverage_start' is set
      if @api_client.config.client_side_validation && coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_start' when calling GroupContractPlansApi.list_group_contract_plan"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/contracts/{coverageStart}/plans'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'coverageStart' + '}', CGI.escape(coverage_start.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupContractPlanListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.list_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#list_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Plans by Group and Division
    # A unique list of Plans for all GroupContractPlan for the given groupID and divisionID
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param [Hash] opts the optional parameters
    # @return [PlansListVBAResponse]
    def list_plan_no_contract(vbasoftware_database, group_id, division_id, opts = {})
      data, _status_code, _headers = list_plan_no_contract_with_http_info(vbasoftware_database, group_id, division_id, opts)
      data
    end

    # List Plans by Group and Division
    # A unique list of Plans for all GroupContractPlan for the given groupID and divisionID
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlansListVBAResponse, Integer, Hash)>] PlansListVBAResponse data, response status code and response headers
    def list_plan_no_contract_with_http_info(vbasoftware_database, group_id, division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.list_plan_no_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.list_plan_no_contract"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.list_plan_no_contract"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.list_plan_no_contract"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/plans-no-contracts'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlansListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.list_plan_no_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#list_plan_no_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch GroupContractPlan
    # Create or Update multiple GroupContractPlan at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param group_contract_plan [Array<GroupContractPlan>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_group_contract_plan(vbasoftware_database, group_id, division_id, coverage_start, group_contract_plan, opts = {})
      data, _status_code, _headers = update_batch_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, group_contract_plan, opts)
      data
    end

    # Create or Update Batch GroupContractPlan
    # Create or Update multiple GroupContractPlan at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param group_contract_plan [Array<GroupContractPlan>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, group_contract_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.update_batch_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.update_batch_group_contract_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.update_batch_group_contract_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.update_batch_group_contract_plan"
      end
      # verify the required parameter 'coverage_start' is set
      if @api_client.config.client_side_validation && coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_start' when calling GroupContractPlansApi.update_batch_group_contract_plan"
      end
      # verify the required parameter 'group_contract_plan' is set
      if @api_client.config.client_side_validation && group_contract_plan.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract_plan' when calling GroupContractPlansApi.update_batch_group_contract_plan"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/contracts/{coverageStart}/plans-batch'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'coverageStart' + '}', CGI.escape(coverage_start.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.update_batch_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#update_batch_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update GroupContractPlan
    # Updates a specific GroupContractPlan.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param plan_id [String] Plan ID
    # @param group_contract_plan [GroupContractPlan] 
    # @param [Hash] opts the optional parameters
    # @return [GroupContractPlanVBAResponse]
    def update_group_contract_plan(vbasoftware_database, group_id, division_id, coverage_start, plan_id, group_contract_plan, opts = {})
      data, _status_code, _headers = update_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, plan_id, group_contract_plan, opts)
      data
    end

    # Update GroupContractPlan
    # Updates a specific GroupContractPlan.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param coverage_start [Time] Coverage Start
    # @param plan_id [String] Plan ID
    # @param group_contract_plan [GroupContractPlan] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupContractPlanVBAResponse, Integer, Hash)>] GroupContractPlanVBAResponse data, response status code and response headers
    def update_group_contract_plan_with_http_info(vbasoftware_database, group_id, division_id, coverage_start, plan_id, group_contract_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupContractPlansApi.update_group_contract_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupContractPlansApi.update_group_contract_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupContractPlansApi.update_group_contract_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupContractPlansApi.update_group_contract_plan"
      end
      # verify the required parameter 'coverage_start' is set
      if @api_client.config.client_side_validation && coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'coverage_start' when calling GroupContractPlansApi.update_group_contract_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling GroupContractPlansApi.update_group_contract_plan"
      end
      # verify the required parameter 'group_contract_plan' is set
      if @api_client.config.client_side_validation && group_contract_plan.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract_plan' when calling GroupContractPlansApi.update_group_contract_plan"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/contracts/{coverageStart}/plans/{planID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'coverageStart' + '}', CGI.escape(coverage_start.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupContractPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupContractPlansApi.update_group_contract_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupContractPlansApi#update_group_contract_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
