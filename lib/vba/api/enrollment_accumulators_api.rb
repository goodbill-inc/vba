=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class EnrollmentAccumulatorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List All Accumulator Benefit Detail
    # List accumulator detail for any benefit the member has accumulators against by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param [Hash] opts the optional parameters
    # @return [AccumulatorAllBenefitDetailResultListVBAResponse]
    def list_accumulator_all_benefit_detail(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts = {})
      data, _status_code, _headers = list_accumulator_all_benefit_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts)
      data
    end

    # List All Accumulator Benefit Detail
    # List accumulator detail for any benefit the member has accumulators against by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccumulatorAllBenefitDetailResultListVBAResponse, Integer, Hash)>] AccumulatorAllBenefitDetailResultListVBAResponse data, response status code and response headers
    def list_accumulator_all_benefit_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail"
      end
      # verify the required parameter 'plan_year' is set
      if @api_client.config.client_side_validation && plan_year.nil?
        fail ArgumentError, "Missing the required parameter 'plan_year' when calling EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-accum-all-benefit-detail'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'planId'] = plan_id
      query_params[:'planYear'] = plan_year

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccumulatorAllBenefitDetailResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.list_accumulator_all_benefit_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#list_accumulator_all_benefit_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Accumulator Benefit Detail
    # List accumulator benefit detail by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param benefti_code [String] Benefit Code
    # @param [Hash] opts the optional parameters
    # @return [AccumulatorBenefitDetailResultListVBAResponse]
    def list_accumulator_benefit_detail(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, opts = {})
      data, _status_code, _headers = list_accumulator_benefit_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, opts)
      data
    end

    # List Accumulator Benefit Detail
    # List accumulator benefit detail by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param benefti_code [String] Benefit Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccumulatorBenefitDetailResultListVBAResponse, Integer, Hash)>] AccumulatorBenefitDetailResultListVBAResponse data, response status code and response headers
    def list_accumulator_benefit_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.list_accumulator_benefit_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # verify the required parameter 'plan_year' is set
      if @api_client.config.client_side_validation && plan_year.nil?
        fail ArgumentError, "Missing the required parameter 'plan_year' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # verify the required parameter 'benefti_code' is set
      if @api_client.config.client_side_validation && benefti_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefti_code' when calling EnrollmentAccumulatorsApi.list_accumulator_benefit_detail"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-accum-benefit-detail'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'planId'] = plan_id
      query_params[:'planYear'] = plan_year
      query_params[:'beneftiCode'] = benefti_code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccumulatorBenefitDetailResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.list_accumulator_benefit_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#list_accumulator_benefit_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Accumulator Detail
    # List accumulator detail by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param [Hash] opts the optional parameters
    # @return [AccumulatorDetailResultListVBAResponse]
    def list_accumulator_detail(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts = {})
      data, _status_code, _headers = list_accumulator_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts)
      data
    end

    # List Accumulator Detail
    # List accumulator detail by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccumulatorDetailResultListVBAResponse, Integer, Hash)>] AccumulatorDetailResultListVBAResponse data, response status code and response headers
    def list_accumulator_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.list_accumulator_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.list_accumulator_detail"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.list_accumulator_detail"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.list_accumulator_detail"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentAccumulatorsApi.list_accumulator_detail"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling EnrollmentAccumulatorsApi.list_accumulator_detail"
      end
      # verify the required parameter 'plan_year' is set
      if @api_client.config.client_side_validation && plan_year.nil?
        fail ArgumentError, "Missing the required parameter 'plan_year' when calling EnrollmentAccumulatorsApi.list_accumulator_detail"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-accum-detail'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'planId'] = plan_id
      query_params[:'planYear'] = plan_year

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccumulatorDetailResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.list_accumulator_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#list_accumulator_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Accumulator Plan Max Claim Detail
    # List Plan Max Claim Detail for a selected Plan and Max ID for a particualr Subscriber, Group, Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param benefti_code [String] Benefit Code
    # @param max_id [String] Max ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [GetPlanMaxClaimDetailResultListVBAResponse]
    def list_accumulator_plan_max_claim_detail(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, max_id, as_of_date, opts = {})
      data, _status_code, _headers = list_accumulator_plan_max_claim_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, max_id, as_of_date, opts)
      data
    end

    # List Accumulator Plan Max Claim Detail
    # List Plan Max Claim Detail for a selected Plan and Max ID for a particualr Subscriber, Group, Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param benefti_code [String] Benefit Code
    # @param max_id [String] Max ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlanMaxClaimDetailResultListVBAResponse, Integer, Hash)>] GetPlanMaxClaimDetailResultListVBAResponse data, response status code and response headers
    def list_accumulator_plan_max_claim_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, max_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'plan_year' is set
      if @api_client.config.client_side_validation && plan_year.nil?
        fail ArgumentError, "Missing the required parameter 'plan_year' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'benefti_code' is set
      if @api_client.config.client_side_validation && benefti_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefti_code' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'max_id' is set
      if @api_client.config.client_side_validation && max_id.nil?
        fail ArgumentError, "Missing the required parameter 'max_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-accum-plan-max-claim-detail'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'planId'] = plan_id
      query_params[:'planYear'] = plan_year
      query_params[:'beneftiCode'] = benefti_code
      query_params[:'maxId'] = max_id
      query_params[:'asOfDate'] = as_of_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlanMaxClaimDetailResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.list_accumulator_plan_max_claim_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#list_accumulator_plan_max_claim_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Accumulator Plan Max Summary
    # List Plan Max Summary for a selected Plan and Max ID for a particualr Subscriber, Group, Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param benefti_code [String] Benefit Code
    # @param max_id [String] Max ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [GetPlanMaxSummaryResultListVBAResponse]
    def list_accumulator_plan_max_summary(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, max_id, as_of_date, opts = {})
      data, _status_code, _headers = list_accumulator_plan_max_summary_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, max_id, as_of_date, opts)
      data
    end

    # List Accumulator Plan Max Summary
    # List Plan Max Summary for a selected Plan and Max ID for a particualr Subscriber, Group, Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param benefti_code [String] Benefit Code
    # @param max_id [String] Max ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlanMaxSummaryResultListVBAResponse, Integer, Hash)>] GetPlanMaxSummaryResultListVBAResponse data, response status code and response headers
    def list_accumulator_plan_max_summary_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, benefti_code, max_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'plan_year' is set
      if @api_client.config.client_side_validation && plan_year.nil?
        fail ArgumentError, "Missing the required parameter 'plan_year' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'benefti_code' is set
      if @api_client.config.client_side_validation && benefti_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefti_code' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'max_id' is set
      if @api_client.config.client_side_validation && max_id.nil?
        fail ArgumentError, "Missing the required parameter 'max_id' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-accum-plan-max-summary'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'planId'] = plan_id
      query_params[:'planYear'] = plan_year
      query_params[:'beneftiCode'] = benefti_code
      query_params[:'maxId'] = max_id
      query_params[:'asOfDate'] = as_of_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlanMaxSummaryResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.list_accumulator_plan_max_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#list_accumulator_plan_max_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Added Accumulator Detail
    # List added accumulator detail by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param [Hash] opts the optional parameters
    # @return [AccumulatorAddedAccumDetailResultListVBAResponse]
    def list_added_accumulator_detail(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts = {})
      data, _status_code, _headers = list_added_accumulator_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts)
      data
    end

    # List Added Accumulator Detail
    # List added accumulator detail by Member, Plan, and Plan Year.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param group_id [String] Group ID
    # @param plan_id [String] Plan ID
    # @param plan_year [String] Plan Year
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccumulatorAddedAccumDetailResultListVBAResponse, Integer, Hash)>] AccumulatorAddedAccumDetailResultListVBAResponse data, response status code and response headers
    def list_added_accumulator_detail_with_http_info(vbasoftware_database, subscriber_id, member_seq, group_id, plan_id, plan_year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.list_added_accumulator_detail ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.list_added_accumulator_detail"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.list_added_accumulator_detail"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.list_added_accumulator_detail"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentAccumulatorsApi.list_added_accumulator_detail"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling EnrollmentAccumulatorsApi.list_added_accumulator_detail"
      end
      # verify the required parameter 'plan_year' is set
      if @api_client.config.client_side_validation && plan_year.nil?
        fail ArgumentError, "Missing the required parameter 'plan_year' when calling EnrollmentAccumulatorsApi.list_added_accumulator_detail"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/list-added-accum-detail'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'planId'] = plan_id
      query_params[:'planYear'] = plan_year

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccumulatorAddedAccumDetailResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.list_added_accumulator_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#list_added_accumulator_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recalculate Member Teeth
    # Recalculate All Teeth for a given Subscriber and Member.  Pass the requestingUserId if this request is being made on behalf of another User.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requesting_user_id Requesting User
    # @return [nil]
    def recalculate_member_teeth(vbasoftware_database, subscriber_id, member_seq, opts = {})
      recalculate_member_teeth_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts)
      nil
    end

    # Recalculate Member Teeth
    # Recalculate All Teeth for a given Subscriber and Member.  Pass the requestingUserId if this request is being made on behalf of another User.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requesting_user_id Requesting User
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def recalculate_member_teeth_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.recalculate_member_teeth ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.recalculate_member_teeth"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.recalculate_member_teeth"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling EnrollmentAccumulatorsApi.recalculate_member_teeth"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/recalculate-teeth'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestingUserId'] = opts[:'requesting_user_id'] if !opts[:'requesting_user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.recalculate_member_teeth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#recalculate_member_teeth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recalculate Subscriber Accumulators
    # Recalculate Accumulators for a given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_recalc_accum(vbasoftware_database, subscriber_id, opts = {})
      subscriber_recalc_accum_with_http_info(vbasoftware_database, subscriber_id, opts)
      nil
    end

    # Recalculate Subscriber Accumulators
    # Recalculate Accumulators for a given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_recalc_accum_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentAccumulatorsApi.subscriber_recalc_accum ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling EnrollmentAccumulatorsApi.subscriber_recalc_accum"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling EnrollmentAccumulatorsApi.subscriber_recalc_accum"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/recalculate-accumulators'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"EnrollmentAccumulatorsApi.subscriber_recalc_accum",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentAccumulatorsApi#subscriber_recalc_accum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
