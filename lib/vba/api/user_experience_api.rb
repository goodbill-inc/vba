=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class UserExperienceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the Most Visited Areas
    # Get the most visited areas by a specific user.  Query parameter Count determines the number of most visited items to find. Days query parameter determines how many days to consider in the search.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Count (default to 3)
    # @option opts [Integer] :since_days Days (default to 7)
    # @return [MostVisitedListVBAResponse]
    def get_most_visited(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = get_most_visited_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Get the Most Visited Areas
    # Get the most visited areas by a specific user.  Query parameter Count determines the number of most visited items to find. Days query parameter determines how many days to consider in the search.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Count (default to 3)
    # @option opts [Integer] :since_days Days (default to 7)
    # @return [Array<(MostVisitedListVBAResponse, Integer, Hash)>] MostVisitedListVBAResponse data, response status code and response headers
    def get_most_visited_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserExperienceApi.get_most_visited ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserExperienceApi.get_most_visited"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserExperienceApi.get_most_visited"
      end
      # resource path
      local_var_path = '/users/{userID}/most-visited'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sinceDays'] = opts[:'since_days'] if !opts[:'since_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MostVisitedListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserExperienceApi.get_most_visited",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserExperienceApi#get_most_visited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the Recently Visited Areas
    # Get recently visited areas by a specific user.  Query parameter Count determines the number of recently visited areas to find. Days query parameter determines how many days to consider in the search.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Count (default to 3)
    # @option opts [Integer] :since_days Days (default to 7)
    # @return [RecentlyVisitedListVBAResponse]
    def get_recently_visited(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = get_recently_visited_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # Get the Recently Visited Areas
    # Get recently visited areas by a specific user.  Query parameter Count determines the number of recently visited areas to find. Days query parameter determines how many days to consider in the search.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Count (default to 3)
    # @option opts [Integer] :since_days Days (default to 7)
    # @return [Array<(RecentlyVisitedListVBAResponse, Integer, Hash)>] RecentlyVisitedListVBAResponse data, response status code and response headers
    def get_recently_visited_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserExperienceApi.get_recently_visited ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserExperienceApi.get_recently_visited"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserExperienceApi.get_recently_visited"
      end
      # resource path
      local_var_path = '/users/{userID}/recently-visited'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sinceDays'] = opts[:'since_days'] if !opts[:'since_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecentlyVisitedListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserExperienceApi.get_recently_visited",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserExperienceApi#get_recently_visited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
