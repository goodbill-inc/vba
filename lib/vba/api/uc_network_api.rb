=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class UCNetworkApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create UCNetwork
    # Creates a new UCNetwork
    # @param vbasoftware_database [String] Target database
    # @param uc_network [UCNetwork] 
    # @param [Hash] opts the optional parameters
    # @return [UCNetworkVBAResponse]
    def create_uc_network(vbasoftware_database, uc_network, opts = {})
      data, _status_code, _headers = create_uc_network_with_http_info(vbasoftware_database, uc_network, opts)
      data
    end

    # Create UCNetwork
    # Creates a new UCNetwork
    # @param vbasoftware_database [String] Target database
    # @param uc_network [UCNetwork] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UCNetworkVBAResponse, Integer, Hash)>] UCNetworkVBAResponse data, response status code and response headers
    def create_uc_network_with_http_info(vbasoftware_database, uc_network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UCNetworkApi.create_uc_network ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UCNetworkApi.create_uc_network"
      end
      # verify the required parameter 'uc_network' is set
      if @api_client.config.client_side_validation && uc_network.nil?
        fail ArgumentError, "Missing the required parameter 'uc_network' when calling UCNetworkApi.create_uc_network"
      end
      # resource path
      local_var_path = '/uc-networks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(uc_network)

      # return_type
      return_type = opts[:debug_return_type] || 'UCNetworkVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UCNetworkApi.create_uc_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UCNetworkApi#create_uc_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete UCNetwork
    # Deletes an UCNetwork
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param plan_id [String] Plan ID
    # @param state [String] State
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_uc_network(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, opts = {})
      delete_uc_network_with_http_info(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, opts)
      nil
    end

    # Delete UCNetwork
    # Deletes an UCNetwork
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param plan_id [String] Plan ID
    # @param state [String] State
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_uc_network_with_http_info(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UCNetworkApi.delete_uc_network ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UCNetworkApi.delete_uc_network"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UCNetworkApi.delete_uc_network"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling UCNetworkApi.delete_uc_network"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling UCNetworkApi.delete_uc_network"
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling UCNetworkApi.delete_uc_network"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling UCNetworkApi.delete_uc_network"
      end
      # resource path
      local_var_path = '/uc-networks/{groupID}/{divisionID}/{planID}/{state}/{feeSched}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'state' + '}', CGI.escape(state.to_s)).sub('{' + 'feeSched' + '}', CGI.escape(fee_sched.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UCNetworkApi.delete_uc_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UCNetworkApi#delete_uc_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get UCNetwork
    # Gets UCNetwork
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param plan_id [String] Plan ID
    # @param state [String] State
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [UCNetworkVBAResponse]
    def get_uc_network(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, opts = {})
      data, _status_code, _headers = get_uc_network_with_http_info(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, opts)
      data
    end

    # Get UCNetwork
    # Gets UCNetwork
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param plan_id [String] Plan ID
    # @param state [String] State
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [Array<(UCNetworkVBAResponse, Integer, Hash)>] UCNetworkVBAResponse data, response status code and response headers
    def get_uc_network_with_http_info(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UCNetworkApi.get_uc_network ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UCNetworkApi.get_uc_network"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UCNetworkApi.get_uc_network"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling UCNetworkApi.get_uc_network"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling UCNetworkApi.get_uc_network"
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling UCNetworkApi.get_uc_network"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling UCNetworkApi.get_uc_network"
      end
      # resource path
      local_var_path = '/uc-networks/{groupID}/{divisionID}/{planID}/{state}/{feeSched}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'state' + '}', CGI.escape(state.to_s)).sub('{' + 'feeSched' + '}', CGI.escape(fee_sched.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UCNetworkVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UCNetworkApi.get_uc_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UCNetworkApi#get_uc_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List UCNetwork
    # Lists all UCNetwork for the given groupID and divisionID and planID and state and feeSched
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :state State
    # @option opts [String] :fee_sched Fee Sched
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [UCNetworkListVBAResponse]
    def list_uc_network(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_uc_network_with_http_info(vbasoftware_database, opts)
      data
    end

    # List UCNetwork
    # Lists all UCNetwork for the given groupID and divisionID and planID and state and feeSched
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :state State
    # @option opts [String] :fee_sched Fee Sched
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(UCNetworkListVBAResponse, Integer, Hash)>] UCNetworkListVBAResponse data, response status code and response headers
    def list_uc_network_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UCNetworkApi.list_uc_network ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UCNetworkApi.list_uc_network"
      end
      # resource path
      local_var_path = '/uc-networks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupID'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'divisionID'] = opts[:'division_id'] if !opts[:'division_id'].nil?
      query_params[:'planID'] = opts[:'plan_id'] if !opts[:'plan_id'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'feeSched'] = opts[:'fee_sched'] if !opts[:'fee_sched'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UCNetworkListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UCNetworkApi.list_uc_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UCNetworkApi#list_uc_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update UCNetwork
    # Updates a specific UCNetwork.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param plan_id [String] Plan ID
    # @param state [String] State
    # @param fee_sched [String] Fee Sched
    # @param uc_network [UCNetwork] 
    # @param [Hash] opts the optional parameters
    # @return [UCNetworkVBAResponse]
    def update_uc_network(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, uc_network, opts = {})
      data, _status_code, _headers = update_uc_network_with_http_info(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, uc_network, opts)
      data
    end

    # Update UCNetwork
    # Updates a specific UCNetwork.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param plan_id [String] Plan ID
    # @param state [String] State
    # @param fee_sched [String] Fee Sched
    # @param uc_network [UCNetwork] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UCNetworkVBAResponse, Integer, Hash)>] UCNetworkVBAResponse data, response status code and response headers
    def update_uc_network_with_http_info(vbasoftware_database, group_id, division_id, plan_id, state, fee_sched, uc_network, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UCNetworkApi.update_uc_network ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UCNetworkApi.update_uc_network"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UCNetworkApi.update_uc_network"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling UCNetworkApi.update_uc_network"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling UCNetworkApi.update_uc_network"
      end
      # verify the required parameter 'state' is set
      if @api_client.config.client_side_validation && state.nil?
        fail ArgumentError, "Missing the required parameter 'state' when calling UCNetworkApi.update_uc_network"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling UCNetworkApi.update_uc_network"
      end
      # verify the required parameter 'uc_network' is set
      if @api_client.config.client_side_validation && uc_network.nil?
        fail ArgumentError, "Missing the required parameter 'uc_network' when calling UCNetworkApi.update_uc_network"
      end
      # resource path
      local_var_path = '/uc-networks/{groupID}/{divisionID}/{planID}/{state}/{feeSched}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'state' + '}', CGI.escape(state.to_s)).sub('{' + 'feeSched' + '}', CGI.escape(fee_sched.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(uc_network)

      # return_type
      return_type = opts[:debug_return_type] || 'UCNetworkVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UCNetworkApi.update_uc_network",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UCNetworkApi#update_uc_network\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
