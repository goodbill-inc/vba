=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvGroupContractsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Next GroupContract
    # Adds the next GroupContract, starting the day after that existing contract. A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_add_contract [GroupAddContract] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def add_next_group_contract(vbasoftware_database, group_id, division_id, group_add_contract, opts = {})
      data, _status_code, _headers = add_next_group_contract_with_http_info(vbasoftware_database, group_id, division_id, group_add_contract, opts)
      data
    end

    # Add Next GroupContract
    # Adds the next GroupContract, starting the day after that existing contract. A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_add_contract [GroupAddContract] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def add_next_group_contract_with_http_info(vbasoftware_database, group_id, division_id, group_add_contract, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupContractsApi.add_next_group_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupContractsApi.add_next_group_contract"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupContractsApi.add_next_group_contract"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvGroupContractsApi.add_next_group_contract"
      end
      # verify the required parameter 'group_add_contract' is set
      if @api_client.config.client_side_validation && group_add_contract.nil?
        fail ArgumentError, "Missing the required parameter 'group_add_contract' when calling AdvGroupContractsApi.add_next_group_contract"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/add-contract'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_add_contract)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupContractsApi.add_next_group_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupContractsApi#add_next_group_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change GroupContract Coverage Start
    # Changes the Coverage Start for a contract. A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_change_coverage_start [GroupChangeCoverageStart] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def change_coverage_start_group_contract(vbasoftware_database, group_id, division_id, group_change_coverage_start, opts = {})
      data, _status_code, _headers = change_coverage_start_group_contract_with_http_info(vbasoftware_database, group_id, division_id, group_change_coverage_start, opts)
      data
    end

    # Change GroupContract Coverage Start
    # Changes the Coverage Start for a contract. A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_change_coverage_start [GroupChangeCoverageStart] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def change_coverage_start_group_contract_with_http_info(vbasoftware_database, group_id, division_id, group_change_coverage_start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupContractsApi.change_coverage_start_group_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupContractsApi.change_coverage_start_group_contract"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupContractsApi.change_coverage_start_group_contract"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvGroupContractsApi.change_coverage_start_group_contract"
      end
      # verify the required parameter 'group_change_coverage_start' is set
      if @api_client.config.client_side_validation && group_change_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_change_coverage_start' when calling AdvGroupContractsApi.change_coverage_start_group_contract"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/change-coverage-start'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_change_coverage_start)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupContractsApi.change_coverage_start_group_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupContractsApi#change_coverage_start_group_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy GroupNetwork information
    # Take an existing configuration of GroupNetwork and copy that to any number of destination Divisions with the same Contract.
    # @param vbasoftware_database [String] Target database
    # @param group_contract_copy_config [GroupContractCopyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_network_config_to_division(vbasoftware_database, group_contract_copy_config, opts = {})
      copy_network_config_to_division_with_http_info(vbasoftware_database, group_contract_copy_config, opts)
      nil
    end

    # Copy GroupNetwork information
    # Take an existing configuration of GroupNetwork and copy that to any number of destination Divisions with the same Contract.
    # @param vbasoftware_database [String] Target database
    # @param group_contract_copy_config [GroupContractCopyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def copy_network_config_to_division_with_http_info(vbasoftware_database, group_contract_copy_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupContractsApi.copy_network_config_to_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupContractsApi.copy_network_config_to_division"
      end
      # verify the required parameter 'group_contract_copy_config' is set
      if @api_client.config.client_side_validation && group_contract_copy_config.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract_copy_config' when calling AdvGroupContractsApi.copy_network_config_to_division"
      end
      # resource path
      local_var_path = '/copy-network-config-to-division'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract_copy_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupContractsApi.copy_network_config_to_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupContractsApi#copy_network_config_to_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy GroupContractTier information
    # Take an existing configuration of GroupContractTier and copy that to any number of destination Divisions with the same Contract.
    # @param vbasoftware_database [String] Target database
    # @param group_contract_copy_config [GroupContractCopyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_tier_config_to_division(vbasoftware_database, group_contract_copy_config, opts = {})
      copy_tier_config_to_division_with_http_info(vbasoftware_database, group_contract_copy_config, opts)
      nil
    end

    # Copy GroupContractTier information
    # Take an existing configuration of GroupContractTier and copy that to any number of destination Divisions with the same Contract.
    # @param vbasoftware_database [String] Target database
    # @param group_contract_copy_config [GroupContractCopyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def copy_tier_config_to_division_with_http_info(vbasoftware_database, group_contract_copy_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupContractsApi.copy_tier_config_to_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupContractsApi.copy_tier_config_to_division"
      end
      # verify the required parameter 'group_contract_copy_config' is set
      if @api_client.config.client_side_validation && group_contract_copy_config.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract_copy_config' when calling AdvGroupContractsApi.copy_tier_config_to_division"
      end
      # resource path
      local_var_path = '/copy-tier-config-to-division'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract_copy_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupContractsApi.copy_tier_config_to_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupContractsApi#copy_tier_config_to_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set GroupContract Coverage End
    # Changes the Coverage End for a contract. A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_contract [GroupContract] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def set_coverage_group_contract(vbasoftware_database, group_id, division_id, group_contract, opts = {})
      data, _status_code, _headers = set_coverage_group_contract_with_http_info(vbasoftware_database, group_id, division_id, group_contract, opts)
      data
    end

    # Set GroupContract Coverage End
    # Changes the Coverage End for a contract. A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_contract [GroupContract] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def set_coverage_group_contract_with_http_info(vbasoftware_database, group_id, division_id, group_contract, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupContractsApi.set_coverage_group_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupContractsApi.set_coverage_group_contract"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupContractsApi.set_coverage_group_contract"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvGroupContractsApi.set_coverage_group_contract"
      end
      # verify the required parameter 'group_contract' is set
      if @api_client.config.client_side_validation && group_contract.nil?
        fail ArgumentError, "Missing the required parameter 'group_contract' when calling AdvGroupContractsApi.set_coverage_group_contract"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/set-coverage'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_contract)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupContractsApi.set_coverage_group_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupContractsApi#set_coverage_group_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
