=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class SubscribersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Change Subscriber ID
    # Changes a Subscriber ID globally
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param change_subscriber_id_request [ChangeSubscriberIDRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def changesubscriber_id(vbasoftware_database, subscriber_id, change_subscriber_id_request, opts = {})
      changesubscriber_id_with_http_info(vbasoftware_database, subscriber_id, change_subscriber_id_request, opts)
      nil
    end

    # Change Subscriber ID
    # Changes a Subscriber ID globally
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param change_subscriber_id_request [ChangeSubscriberIDRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def changesubscriber_id_with_http_info(vbasoftware_database, subscriber_id, change_subscriber_id_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.changesubscriber_id ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.changesubscriber_id"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.changesubscriber_id"
      end
      # verify the required parameter 'change_subscriber_id_request' is set
      if @api_client.config.client_side_validation && change_subscriber_id_request.nil?
        fail ArgumentError, "Missing the required parameter 'change_subscriber_id_request' when calling SubscribersApi.changesubscriber_id"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/change-id'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(change_subscriber_id_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.changesubscriber_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#changesubscriber_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Subscribers
    # Creates a new Subscribers
    # @param vbasoftware_database [String] Target database
    # @param subscribers [Subscribers] 
    # @param [Hash] opts the optional parameters
    # @return [SubscribersVBAResponse]
    def create_subscribers(vbasoftware_database, subscribers, opts = {})
      data, _status_code, _headers = create_subscribers_with_http_info(vbasoftware_database, subscribers, opts)
      data
    end

    # Create Subscribers
    # Creates a new Subscribers
    # @param vbasoftware_database [String] Target database
    # @param subscribers [Subscribers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscribersVBAResponse, Integer, Hash)>] SubscribersVBAResponse data, response status code and response headers
    def create_subscribers_with_http_info(vbasoftware_database, subscribers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.create_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.create_subscribers"
      end
      # verify the required parameter 'subscribers' is set
      if @api_client.config.client_side_validation && subscribers.nil?
        fail ArgumentError, "Missing the required parameter 'subscribers' when calling SubscribersApi.create_subscribers"
      end
      # resource path
      local_var_path = '/subscribers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(subscribers)

      # return_type
      return_type = opts[:debug_return_type] || 'SubscribersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.create_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#create_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Subscribers
    # Deletes an Subscribers
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subscribers(vbasoftware_database, subscriber_id, opts = {})
      delete_subscribers_with_http_info(vbasoftware_database, subscriber_id, opts)
      nil
    end

    # Delete Subscribers
    # Deletes an Subscribers
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_subscribers_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.delete_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.delete_subscribers"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.delete_subscribers"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.delete_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#delete_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Unique Subscriber ID
    # Get a unique Subscriber ID you can use for creating a new Subscriber or changing an existing Subscirbers ID
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def generate_subscriber_id(vbasoftware_database, opts = {})
      data, _status_code, _headers = generate_subscriber_id_with_http_info(vbasoftware_database, opts)
      data
    end

    # Get Unique Subscriber ID
    # Get a unique Subscriber ID you can use for creating a new Subscriber or changing an existing Subscirbers ID
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def generate_subscriber_id_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.generate_subscriber_id ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.generate_subscriber_id"
      end
      # resource path
      local_var_path = '/subscribers-generate-id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.generate_subscriber_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#generate_subscriber_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Subscribers
    # Gets Subscribers
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [SubscribersVBAResponse]
    def get_subscribers(vbasoftware_database, subscriber_id, opts = {})
      data, _status_code, _headers = get_subscribers_with_http_info(vbasoftware_database, subscriber_id, opts)
      data
    end

    # Get Subscribers
    # Gets Subscribers
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscribersVBAResponse, Integer, Hash)>] SubscribersVBAResponse data, response status code and response headers
    def get_subscribers_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.get_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.get_subscribers"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.get_subscribers"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscribersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.get_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#get_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Active Subscribers for a Groupd & Division
    # Lists all Subscribers for the given Group & Division. If division is omitted, all divisions will be included.  Active is defined by a plan start date <= today and plan end date >= today.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :division_id Division ID
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [ActiveSubscriberListVBAResponse]
    def list_active_subscribers(vbasoftware_database, group_id, opts = {})
      data, _status_code, _headers = list_active_subscribers_with_http_info(vbasoftware_database, group_id, opts)
      data
    end

    # List Active Subscribers for a Groupd &amp; Division
    # Lists all Subscribers for the given Group &amp; Division. If division is omitted, all divisions will be included.  Active is defined by a plan start date &lt;&#x3D; today and plan end date &gt;&#x3D; today.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :division_id Division ID
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(ActiveSubscriberListVBAResponse, Integer, Hash)>] ActiveSubscriberListVBAResponse data, response status code and response headers
    def list_active_subscribers_with_http_info(vbasoftware_database, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_active_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_active_subscribers"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscribersApi.list_active_subscribers"
      end
      # resource path
      local_var_path = '/active-subscribers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'divisionId'] = opts[:'division_id'] if !opts[:'division_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActiveSubscriberListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_active_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_active_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cobra Disenroll Reason Types
    # List of all Cobra Disenroll Reason Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_cobra_disenroll_reason_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_cobra_disenroll_reason_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Cobra Disenroll Reason Types
    # List of all Cobra Disenroll Reason Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_cobra_disenroll_reason_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_cobra_disenroll_reason_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_cobra_disenroll_reason_types"
      end
      # resource path
      local_var_path = '/cobra-disenroll-reason-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_cobra_disenroll_reason_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_cobra_disenroll_reason_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cobra Duration Types
    # List of all Cobra Duration Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_cobra_duration_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_cobra_duration_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Cobra Duration Types
    # List of all Cobra Duration Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_cobra_duration_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_cobra_duration_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_cobra_duration_types"
      end
      # resource path
      local_var_path = '/cobra-duration-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_cobra_duration_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_cobra_duration_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Billing Adjustments for Disenroll
    # List of Billing Adjustments that would be created based on a Subscriber being disenrolled on the As of Date.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentDisenrollAdjustmentListVBAResponse]
    def list_disenroll_adjustment(vbasoftware_database, subscriber_id, as_of_date, opts = {})
      data, _status_code, _headers = list_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, as_of_date, opts)
      data
    end

    # List Billing Adjustments for Disenroll
    # List of Billing Adjustments that would be created based on a Subscriber being disenrolled on the As of Date.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentDisenrollAdjustmentListVBAResponse, Integer, Hash)>] EnrollmentDisenrollAdjustmentListVBAResponse data, response status code and response headers
    def list_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_disenroll_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_disenroll_adjustment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.list_disenroll_adjustment"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling SubscribersApi.list_disenroll_adjustment"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/as-of-date/{asOfDate}/disenroll-adjustments'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'asOfDate' + '}', CGI.escape(as_of_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentDisenrollAdjustmentListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_disenroll_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_disenroll_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Disenrollment Family Options
    # List of all Disenrollment Family Options
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Int32StaticOptionListVBAResponse]
    def list_disenrollment_family_options(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_disenrollment_family_options_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Disenrollment Family Options
    # List of all Disenrollment Family Options
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32StaticOptionListVBAResponse, Integer, Hash)>] Int32StaticOptionListVBAResponse data, response status code and response headers
    def list_disenrollment_family_options_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_disenrollment_family_options ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_disenrollment_family_options"
      end
      # resource path
      local_var_path = '/disenroll-family-options'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Int32StaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_disenrollment_family_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_disenrollment_family_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Waiting Period Details
    # List of Waiting Period configuration based on the passed in settings (group, division, plan, and/or hire date).
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [Time] :hire_date Hire Date
    # @return [EnrollmentWaitingPeriodByHireDateListVBAResponse]
    def list_enrollment_waiting_period_by_hire_date(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_enrollment_waiting_period_by_hire_date_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Waiting Period Details
    # List of Waiting Period configuration based on the passed in settings (group, division, plan, and/or hire date).
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [Time] :hire_date Hire Date
    # @return [Array<(EnrollmentWaitingPeriodByHireDateListVBAResponse, Integer, Hash)>] EnrollmentWaitingPeriodByHireDateListVBAResponse data, response status code and response headers
    def list_enrollment_waiting_period_by_hire_date_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_enrollment_waiting_period_by_hire_date ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_enrollment_waiting_period_by_hire_date"
      end
      # resource path
      local_var_path = '/enrollment-waiting-period-by-hire-date'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupID'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'divisionID'] = opts[:'division_id'] if !opts[:'division_id'].nil?
      query_params[:'planID'] = opts[:'plan_id'] if !opts[:'plan_id'].nil?
      query_params[:'hireDate'] = opts[:'hire_date'] if !opts[:'hire_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentWaitingPeriodByHireDateListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_enrollment_waiting_period_by_hire_date",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_enrollment_waiting_period_by_hire_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Reenrollment Family Options
    # List of all Reenrollment Family Options
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Int32StaticOptionListVBAResponse]
    def list_reenrollment_family_options(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_reenrollment_family_options_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Reenrollment Family Options
    # List of all Reenrollment Family Options
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32StaticOptionListVBAResponse, Integer, Hash)>] Int32StaticOptionListVBAResponse data, response status code and response headers
    def list_reenrollment_family_options_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_reenrollment_family_options ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_reenrollment_family_options"
      end
      # resource path
      local_var_path = '/reenroll-family-options'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Int32StaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_reenrollment_family_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_reenrollment_family_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Subscriber Benefits
    # List of all Benefits for the given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_subscriber_benefits(vbasoftware_database, subscriber_id, opts = {})
      data, _status_code, _headers = list_subscriber_benefits_with_http_info(vbasoftware_database, subscriber_id, opts)
      data
    end

    # List Subscriber Benefits
    # List of all Benefits for the given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_subscriber_benefits_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_subscriber_benefits ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_subscriber_benefits"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.list_subscriber_benefits"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/benefits'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_subscriber_benefits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_subscriber_benefits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Subscribers
    # Lists all Subscribers
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [SubscribersListVBAResponse]
    def list_subscribers(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_subscribers_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Subscribers
    # Lists all Subscribers
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(SubscribersListVBAResponse, Integer, Hash)>] SubscribersListVBAResponse data, response status code and response headers
    def list_subscribers_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.list_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.list_subscribers"
      end
      # resource path
      local_var_path = '/subscribers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscribersListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.list_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#list_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Member Disenroll
    # Disenrolls a Member from an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_disenroll [EnrollmentDisenroll] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def member_disenroll(vbasoftware_database, subscriber_id, member_seq, enrollment_disenroll, opts = {})
      data, _status_code, _headers = member_disenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_disenroll, opts)
      data
    end

    # Member Disenroll
    # Disenrolls a Member from an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_disenroll [EnrollmentDisenroll] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def member_disenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_disenroll, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.member_disenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.member_disenroll"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.member_disenroll"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling SubscribersApi.member_disenroll"
      end
      # verify the required parameter 'enrollment_disenroll' is set
      if @api_client.config.client_side_validation && enrollment_disenroll.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_disenroll' when calling SubscribersApi.member_disenroll"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/disenroll'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_disenroll)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.member_disenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#member_disenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Member Re-enroll
    # Re-enrolls a Member to an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def member_reenroll(vbasoftware_database, subscriber_id, member_seq, enrollment_reenroll, opts = {})
      data, _status_code, _headers = member_reenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_reenroll, opts)
      data
    end

    # Member Re-enroll
    # Re-enrolls a Member to an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def member_reenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_reenroll, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.member_reenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.member_reenroll"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.member_reenroll"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling SubscribersApi.member_reenroll"
      end
      # verify the required parameter 'enrollment_reenroll' is set
      if @api_client.config.client_side_validation && enrollment_reenroll.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_reenroll' when calling SubscribersApi.member_reenroll"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/reenroll'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_reenroll)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.member_reenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#member_reenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscriber Add Enrollment
    # Adds enrollments to an existing subscriber. Can add enrollment for the subscriber or subscriber + all members.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param add_enrollment_request [AddEnrollmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_add_enrollment(vbasoftware_database, subscriber_id, add_enrollment_request, opts = {})
      subscriber_add_enrollment_with_http_info(vbasoftware_database, subscriber_id, add_enrollment_request, opts)
      nil
    end

    # Subscriber Add Enrollment
    # Adds enrollments to an existing subscriber. Can add enrollment for the subscriber or subscriber + all members.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param add_enrollment_request [AddEnrollmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_add_enrollment_with_http_info(vbasoftware_database, subscriber_id, add_enrollment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.subscriber_add_enrollment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.subscriber_add_enrollment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.subscriber_add_enrollment"
      end
      # verify the required parameter 'add_enrollment_request' is set
      if @api_client.config.client_side_validation && add_enrollment_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_enrollment_request' when calling SubscribersApi.subscriber_add_enrollment"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/add-enrollment'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_enrollment_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.subscriber_add_enrollment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#subscriber_add_enrollment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Subscribers
    # Create or Update multiple Subscribers at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param subscribers [Array<Subscribers>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_subscribers(vbasoftware_database, subscribers, opts = {})
      data, _status_code, _headers = update_batch_subscribers_with_http_info(vbasoftware_database, subscribers, opts)
      data
    end

    # Create or Update Batch Subscribers
    # Create or Update multiple Subscribers at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param subscribers [Array<Subscribers>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_subscribers_with_http_info(vbasoftware_database, subscribers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.update_batch_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.update_batch_subscribers"
      end
      # verify the required parameter 'subscribers' is set
      if @api_client.config.client_side_validation && subscribers.nil?
        fail ArgumentError, "Missing the required parameter 'subscribers' when calling SubscribersApi.update_batch_subscribers"
      end
      # resource path
      local_var_path = '/subscribers-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(subscribers)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.update_batch_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#update_batch_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Subscribers
    # Updates a specific Subscribers.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param subscribers [Subscribers] 
    # @param [Hash] opts the optional parameters
    # @return [SubscribersVBAResponse]
    def update_subscribers(vbasoftware_database, subscriber_id, subscribers, opts = {})
      data, _status_code, _headers = update_subscribers_with_http_info(vbasoftware_database, subscriber_id, subscribers, opts)
      data
    end

    # Update Subscribers
    # Updates a specific Subscribers.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param subscribers [Subscribers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscribersVBAResponse, Integer, Hash)>] SubscribersVBAResponse data, response status code and response headers
    def update_subscribers_with_http_info(vbasoftware_database, subscriber_id, subscribers, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscribersApi.update_subscribers ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscribersApi.update_subscribers"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscribersApi.update_subscribers"
      end
      # verify the required parameter 'subscribers' is set
      if @api_client.config.client_side_validation && subscribers.nil?
        fail ArgumentError, "Missing the required parameter 'subscribers' when calling SubscribersApi.update_subscribers"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(subscribers)

      # return_type
      return_type = opts[:debug_return_type] || 'SubscribersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscribersApi.update_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscribersApi#update_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
