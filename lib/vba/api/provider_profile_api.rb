=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ProviderProfileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create ProviderProfile
    # Creates a new ProviderProfile
    # @param vbasoftware_database [String] Target database
    # @param profile_provider_id [String] Profile Provider ID
    # @param address_provider_id [String] Address Provider ID
    # @param [Hash] opts the optional parameters
    # @return [ProviderProfileVBAResponse]
    def create_provider_profile(vbasoftware_database, profile_provider_id, address_provider_id, opts = {})
      data, _status_code, _headers = create_provider_profile_with_http_info(vbasoftware_database, profile_provider_id, address_provider_id, opts)
      data
    end

    # Create ProviderProfile
    # Creates a new ProviderProfile
    # @param vbasoftware_database [String] Target database
    # @param profile_provider_id [String] Profile Provider ID
    # @param address_provider_id [String] Address Provider ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProviderProfileVBAResponse, Integer, Hash)>] ProviderProfileVBAResponse data, response status code and response headers
    def create_provider_profile_with_http_info(vbasoftware_database, profile_provider_id, address_provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProviderProfileApi.create_provider_profile ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProviderProfileApi.create_provider_profile"
      end
      # verify the required parameter 'profile_provider_id' is set
      if @api_client.config.client_side_validation && profile_provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_provider_id' when calling ProviderProfileApi.create_provider_profile"
      end
      # verify the required parameter 'address_provider_id' is set
      if @api_client.config.client_side_validation && address_provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_provider_id' when calling ProviderProfileApi.create_provider_profile"
      end
      # resource path
      local_var_path = '/provider-profiles/{profileProviderId}/provider-addresses/{addressProviderId}'.sub('{' + 'profileProviderId' + '}', CGI.escape(profile_provider_id.to_s)).sub('{' + 'addressProviderId' + '}', CGI.escape(address_provider_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProviderProfileVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProviderProfileApi.create_provider_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProviderProfileApi#create_provider_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ProviderProfile
    # Deletes an ProviderProfile
    # @param vbasoftware_database [String] Target database
    # @param profile_provider_id [String] Profile Provider ID
    # @param address_provider_id [String] Address Provider ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_provider_profile(vbasoftware_database, profile_provider_id, address_provider_id, opts = {})
      delete_provider_profile_with_http_info(vbasoftware_database, profile_provider_id, address_provider_id, opts)
      nil
    end

    # Delete ProviderProfile
    # Deletes an ProviderProfile
    # @param vbasoftware_database [String] Target database
    # @param profile_provider_id [String] Profile Provider ID
    # @param address_provider_id [String] Address Provider ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_provider_profile_with_http_info(vbasoftware_database, profile_provider_id, address_provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProviderProfileApi.delete_provider_profile ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProviderProfileApi.delete_provider_profile"
      end
      # verify the required parameter 'profile_provider_id' is set
      if @api_client.config.client_side_validation && profile_provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_provider_id' when calling ProviderProfileApi.delete_provider_profile"
      end
      # verify the required parameter 'address_provider_id' is set
      if @api_client.config.client_side_validation && address_provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_provider_id' when calling ProviderProfileApi.delete_provider_profile"
      end
      # resource path
      local_var_path = '/provider-profiles/{profileProviderId}/provider-addresses/{addressProviderId}'.sub('{' + 'profileProviderId' + '}', CGI.escape(profile_provider_id.to_s)).sub('{' + 'addressProviderId' + '}', CGI.escape(address_provider_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProviderProfileApi.delete_provider_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProviderProfileApi#delete_provider_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ProviderProfile
    # Gets ProviderProfile
    # @param vbasoftware_database [String] Target database
    # @param profile_provider_id [String] Profile Provider ID
    # @param [Hash] opts the optional parameters
    # @return [ProfileProviderAddressProviderVBAResponse]
    def get_provider_profile(vbasoftware_database, profile_provider_id, opts = {})
      data, _status_code, _headers = get_provider_profile_with_http_info(vbasoftware_database, profile_provider_id, opts)
      data
    end

    # Get ProviderProfile
    # Gets ProviderProfile
    # @param vbasoftware_database [String] Target database
    # @param profile_provider_id [String] Profile Provider ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProfileProviderAddressProviderVBAResponse, Integer, Hash)>] ProfileProviderAddressProviderVBAResponse data, response status code and response headers
    def get_provider_profile_with_http_info(vbasoftware_database, profile_provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProviderProfileApi.get_provider_profile ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProviderProfileApi.get_provider_profile"
      end
      # verify the required parameter 'profile_provider_id' is set
      if @api_client.config.client_side_validation && profile_provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'profile_provider_id' when calling ProviderProfileApi.get_provider_profile"
      end
      # resource path
      local_var_path = '/provider-profiles/{profileProviderId}'.sub('{' + 'profileProviderId' + '}', CGI.escape(profile_provider_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProfileProviderAddressProviderVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProviderProfileApi.get_provider_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProviderProfileApi#get_provider_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
