=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class SpecialtyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create or Update Batch Specialty
    # Creates or Updates multiple Specialties
    # @param vbasoftware_database [String] Target database
    # @param specialty [Array<Specialty>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def create_or_update_batch_specialty(vbasoftware_database, specialty, opts = {})
      data, _status_code, _headers = create_or_update_batch_specialty_with_http_info(vbasoftware_database, specialty, opts)
      data
    end

    # Create or Update Batch Specialty
    # Creates or Updates multiple Specialties
    # @param vbasoftware_database [String] Target database
    # @param specialty [Array<Specialty>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def create_or_update_batch_specialty_with_http_info(vbasoftware_database, specialty, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpecialtyApi.create_or_update_batch_specialty ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SpecialtyApi.create_or_update_batch_specialty"
      end
      # verify the required parameter 'specialty' is set
      if @api_client.config.client_side_validation && specialty.nil?
        fail ArgumentError, "Missing the required parameter 'specialty' when calling SpecialtyApi.create_or_update_batch_specialty"
      end
      # resource path
      local_var_path = '/specialties-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(specialty)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SpecialtyApi.create_or_update_batch_specialty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpecialtyApi#create_or_update_batch_specialty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Specialty
    # Creates a new Specialty.
    # @param vbasoftware_database [String] Target database
    # @param specialty [Specialty] 
    # @param [Hash] opts the optional parameters
    # @return [SpecialtyVBAResponse]
    def create_specialty(vbasoftware_database, specialty, opts = {})
      data, _status_code, _headers = create_specialty_with_http_info(vbasoftware_database, specialty, opts)
      data
    end

    # Create Specialty
    # Creates a new Specialty.
    # @param vbasoftware_database [String] Target database
    # @param specialty [Specialty] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecialtyVBAResponse, Integer, Hash)>] SpecialtyVBAResponse data, response status code and response headers
    def create_specialty_with_http_info(vbasoftware_database, specialty, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpecialtyApi.create_specialty ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SpecialtyApi.create_specialty"
      end
      # verify the required parameter 'specialty' is set
      if @api_client.config.client_side_validation && specialty.nil?
        fail ArgumentError, "Missing the required parameter 'specialty' when calling SpecialtyApi.create_specialty"
      end
      # resource path
      local_var_path = '/specialties'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(specialty)

      # return_type
      return_type = opts[:debug_return_type] || 'SpecialtyVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SpecialtyApi.create_specialty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpecialtyApi#create_specialty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Specialty
    # Deletes an Specialty
    # @param vbasoftware_database [String] Target database
    # @param specialty_code [String] Specialty Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_specialty(vbasoftware_database, specialty_code, opts = {})
      delete_specialty_with_http_info(vbasoftware_database, specialty_code, opts)
      nil
    end

    # Delete Specialty
    # Deletes an Specialty
    # @param vbasoftware_database [String] Target database
    # @param specialty_code [String] Specialty Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_specialty_with_http_info(vbasoftware_database, specialty_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpecialtyApi.delete_specialty ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SpecialtyApi.delete_specialty"
      end
      # verify the required parameter 'specialty_code' is set
      if @api_client.config.client_side_validation && specialty_code.nil?
        fail ArgumentError, "Missing the required parameter 'specialty_code' when calling SpecialtyApi.delete_specialty"
      end
      # resource path
      local_var_path = '/specialties/{specialtyCode}'.sub('{' + 'specialtyCode' + '}', CGI.escape(specialty_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SpecialtyApi.delete_specialty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpecialtyApi#delete_specialty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Specialty
    # Gets Specialty
    # @param vbasoftware_database [String] Target database
    # @param specialty_code [String] Specialty Code
    # @param [Hash] opts the optional parameters
    # @return [SpecialtyVBAResponse]
    def get_specialty(vbasoftware_database, specialty_code, opts = {})
      data, _status_code, _headers = get_specialty_with_http_info(vbasoftware_database, specialty_code, opts)
      data
    end

    # Get Specialty
    # Gets Specialty
    # @param vbasoftware_database [String] Target database
    # @param specialty_code [String] Specialty Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecialtyVBAResponse, Integer, Hash)>] SpecialtyVBAResponse data, response status code and response headers
    def get_specialty_with_http_info(vbasoftware_database, specialty_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpecialtyApi.get_specialty ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SpecialtyApi.get_specialty"
      end
      # verify the required parameter 'specialty_code' is set
      if @api_client.config.client_side_validation && specialty_code.nil?
        fail ArgumentError, "Missing the required parameter 'specialty_code' when calling SpecialtyApi.get_specialty"
      end
      # resource path
      local_var_path = '/specialties/{specialtyCode}'.sub('{' + 'specialtyCode' + '}', CGI.escape(specialty_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpecialtyVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SpecialtyApi.get_specialty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpecialtyApi#get_specialty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Specialties
    # List all Specialties
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [SpecialtyListVBAResponse]
    def list_specialty(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_specialty_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Specialties
    # List all Specialties
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecialtyListVBAResponse, Integer, Hash)>] SpecialtyListVBAResponse data, response status code and response headers
    def list_specialty_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpecialtyApi.list_specialty ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SpecialtyApi.list_specialty"
      end
      # resource path
      local_var_path = '/specialties'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpecialtyListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SpecialtyApi.list_specialty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpecialtyApi#list_specialty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Specialty
    # Updates a specific Specialty.
    # @param vbasoftware_database [String] Target database
    # @param specialty_code [String] Specialty Code
    # @param specialty [Specialty] 
    # @param [Hash] opts the optional parameters
    # @return [SpecialtyVBAResponse]
    def update_specialty(vbasoftware_database, specialty_code, specialty, opts = {})
      data, _status_code, _headers = update_specialty_with_http_info(vbasoftware_database, specialty_code, specialty, opts)
      data
    end

    # Update Specialty
    # Updates a specific Specialty.
    # @param vbasoftware_database [String] Target database
    # @param specialty_code [String] Specialty Code
    # @param specialty [Specialty] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecialtyVBAResponse, Integer, Hash)>] SpecialtyVBAResponse data, response status code and response headers
    def update_specialty_with_http_info(vbasoftware_database, specialty_code, specialty, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpecialtyApi.update_specialty ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SpecialtyApi.update_specialty"
      end
      # verify the required parameter 'specialty_code' is set
      if @api_client.config.client_side_validation && specialty_code.nil?
        fail ArgumentError, "Missing the required parameter 'specialty_code' when calling SpecialtyApi.update_specialty"
      end
      # verify the required parameter 'specialty' is set
      if @api_client.config.client_side_validation && specialty.nil?
        fail ArgumentError, "Missing the required parameter 'specialty' when calling SpecialtyApi.update_specialty"
      end
      # resource path
      local_var_path = '/specialties/{specialtyCode}'.sub('{' + 'specialtyCode' + '}', CGI.escape(specialty_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(specialty)

      # return_type
      return_type = opts[:debug_return_type] || 'SpecialtyVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SpecialtyApi.update_specialty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpecialtyApi#update_specialty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
