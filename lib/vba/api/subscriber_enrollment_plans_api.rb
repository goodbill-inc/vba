=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class SubscriberEnrollmentPlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create SubEnrollmentPlan
    # Creates a new SubEnrollmentPlan
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param sub_enrollment_plan [SubEnrollmentPlan] 
    # @param [Hash] opts the optional parameters
    # @return [SubEnrollmentPlanVBAResponse]
    def create_sub_enrollment_plan(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, sub_enrollment_plan, opts = {})
      data, _status_code, _headers = create_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, sub_enrollment_plan, opts)
      data
    end

    # Create SubEnrollmentPlan
    # Creates a new SubEnrollmentPlan
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param sub_enrollment_plan [SubEnrollmentPlan] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubEnrollmentPlanVBAResponse, Integer, Hash)>] SubEnrollmentPlanVBAResponse data, response status code and response headers
    def create_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, sub_enrollment_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.create_sub_enrollment_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # verify the required parameter 'sub_enrollment_plan' is set
      if @api_client.config.client_side_validation && sub_enrollment_plan.nil?
        fail ArgumentError, "Missing the required parameter 'sub_enrollment_plan' when calling SubscriberEnrollmentPlansApi.create_sub_enrollment_plan"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/enrollments/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/plans'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sub_enrollment_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'SubEnrollmentPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.create_sub_enrollment_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#create_sub_enrollment_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SubEnrollmentPlan
    # Deletes an SubEnrollmentPlan
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param plan_id [String] Plan ID
    # @param plan_start [Time] Plan Start
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sub_enrollment_plan(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, opts = {})
      delete_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, opts)
      nil
    end

    # Delete SubEnrollmentPlan
    # Deletes an SubEnrollmentPlan
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param plan_id [String] Plan ID
    # @param plan_start [Time] Plan Start
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # verify the required parameter 'plan_start' is set
      if @api_client.config.client_side_validation && plan_start.nil?
        fail ArgumentError, "Missing the required parameter 'plan_start' when calling SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/enrollments/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/plans/{planID}/{planStart}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'planStart' + '}', CGI.escape(plan_start.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.delete_sub_enrollment_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#delete_sub_enrollment_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SubEnrollmentPlan
    # Gets SubEnrollmentPlan
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param plan_id [String] Plan ID
    # @param plan_start [Time] Plan Start
    # @param [Hash] opts the optional parameters
    # @return [SubEnrollmentPlanVBAResponse]
    def get_sub_enrollment_plan(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, opts = {})
      data, _status_code, _headers = get_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, opts)
      data
    end

    # Get SubEnrollmentPlan
    # Gets SubEnrollmentPlan
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param plan_id [String] Plan ID
    # @param plan_start [Time] Plan Start
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubEnrollmentPlanVBAResponse, Integer, Hash)>] SubEnrollmentPlanVBAResponse data, response status code and response headers
    def get_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.get_sub_enrollment_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # verify the required parameter 'plan_start' is set
      if @api_client.config.client_side_validation && plan_start.nil?
        fail ArgumentError, "Missing the required parameter 'plan_start' when calling SubscriberEnrollmentPlansApi.get_sub_enrollment_plan"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/enrollments/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/plans/{planID}/{planStart}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'planStart' + '}', CGI.escape(plan_start.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubEnrollmentPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.get_sub_enrollment_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#get_sub_enrollment_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SubEnrollmentPlan
    # Lists all SubEnrollmentPlan for the given Subscriber, Group, Division and Enrollment
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [SubEnrollmentPlanListVBAResponse]
    def list_sub_enrollment_plan(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, opts = {})
      data, _status_code, _headers = list_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, opts)
      data
    end

    # List SubEnrollmentPlan
    # Lists all SubEnrollmentPlan for the given Subscriber, Group, Division and Enrollment
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(SubEnrollmentPlanListVBAResponse, Integer, Hash)>] SubEnrollmentPlanListVBAResponse data, response status code and response headers
    def list_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.list_sub_enrollment_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.list_sub_enrollment_plan"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.list_sub_enrollment_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscriberEnrollmentPlansApi.list_sub_enrollment_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling SubscriberEnrollmentPlansApi.list_sub_enrollment_plan"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling SubscriberEnrollmentPlansApi.list_sub_enrollment_plan"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling SubscriberEnrollmentPlansApi.list_sub_enrollment_plan"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/enrollments/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/plans'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubEnrollmentPlanListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.list_sub_enrollment_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#list_sub_enrollment_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Subscriber SubEnrollmentPlans
    # Lists all SubEnrollmentPlans for the given Subscriber
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [StringStaticOptionListVBAResponse]
    def list_subscriber_sub_enrollment_plans(vbasoftware_database, subscriber_id, opts = {})
      data, _status_code, _headers = list_subscriber_sub_enrollment_plans_with_http_info(vbasoftware_database, subscriber_id, opts)
      data
    end

    # List Subscriber SubEnrollmentPlans
    # Lists all SubEnrollmentPlans for the given Subscriber
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_subscriber_sub_enrollment_plans_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.list_subscriber_sub_enrollment_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.list_subscriber_sub_enrollment_plans"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.list_subscriber_sub_enrollment_plans"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/plans'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.list_subscriber_sub_enrollment_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#list_subscriber_sub_enrollment_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch SubEnrollmentPlan
    # Create or Update multiple SubEnrollmentPlan at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param sub_enrollment_plan [Array<SubEnrollmentPlan>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_sub_enrollment_plan(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, sub_enrollment_plan, opts = {})
      data, _status_code, _headers = update_batch_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, sub_enrollment_plan, opts)
      data
    end

    # Create or Update Batch SubEnrollmentPlan
    # Create or Update multiple SubEnrollmentPlan at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param sub_enrollment_plan [Array<SubEnrollmentPlan>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, sub_enrollment_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # verify the required parameter 'sub_enrollment_plan' is set
      if @api_client.config.client_side_validation && sub_enrollment_plan.nil?
        fail ArgumentError, "Missing the required parameter 'sub_enrollment_plan' when calling SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/enrollments/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/plans-batch'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sub_enrollment_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.update_batch_sub_enrollment_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#update_batch_sub_enrollment_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SubEnrollmentPlan
    # Updates a specific SubEnrollmentPlan.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param plan_id [String] Plan ID
    # @param plan_start [Time] Plan Start
    # @param sub_enrollment_plan [SubEnrollmentPlan] 
    # @param [Hash] opts the optional parameters
    # @return [SubEnrollmentPlanVBAResponse]
    def update_sub_enrollment_plan(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, sub_enrollment_plan, opts = {})
      data, _status_code, _headers = update_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, sub_enrollment_plan, opts)
      data
    end

    # Update SubEnrollmentPlan
    # Updates a specific SubEnrollmentPlan.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param plan_id [String] Plan ID
    # @param plan_start [Time] Plan Start
    # @param sub_enrollment_plan [SubEnrollmentPlan] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubEnrollmentPlanVBAResponse, Integer, Hash)>] SubEnrollmentPlanVBAResponse data, response status code and response headers
    def update_sub_enrollment_plan_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, sub_enrollment_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberEnrollmentPlansApi.update_sub_enrollment_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'plan_start' is set
      if @api_client.config.client_side_validation && plan_start.nil?
        fail ArgumentError, "Missing the required parameter 'plan_start' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # verify the required parameter 'sub_enrollment_plan' is set
      if @api_client.config.client_side_validation && sub_enrollment_plan.nil?
        fail ArgumentError, "Missing the required parameter 'sub_enrollment_plan' when calling SubscriberEnrollmentPlansApi.update_sub_enrollment_plan"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/enrollments/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/plans/{planID}/{planStart}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'planStart' + '}', CGI.escape(plan_start.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sub_enrollment_plan)

      # return_type
      return_type = opts[:debug_return_type] || 'SubEnrollmentPlanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberEnrollmentPlansApi.update_sub_enrollment_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberEnrollmentPlansApi#update_sub_enrollment_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
