=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class NoteDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create NoteData
    # Creates a new NoteData
    # @param vbasoftware_database [String] Target database
    # @param note_data [NoteData] 
    # @param [Hash] opts the optional parameters
    # @return [NoteDataVBAResponse]
    def create_note_data(vbasoftware_database, note_data, opts = {})
      data, _status_code, _headers = create_note_data_with_http_info(vbasoftware_database, note_data, opts)
      data
    end

    # Create NoteData
    # Creates a new NoteData
    # @param vbasoftware_database [String] Target database
    # @param note_data [NoteData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NoteDataVBAResponse, Integer, Hash)>] NoteDataVBAResponse data, response status code and response headers
    def create_note_data_with_http_info(vbasoftware_database, note_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.create_note_data ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.create_note_data"
      end
      # verify the required parameter 'note_data' is set
      if @api_client.config.client_side_validation && note_data.nil?
        fail ArgumentError, "Missing the required parameter 'note_data' when calling NoteDataApi.create_note_data"
      end
      # resource path
      local_var_path = '/note-data'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(note_data)

      # return_type
      return_type = opts[:debug_return_type] || 'NoteDataVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.create_note_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#create_note_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete NoteData
    # Deletes an NoteData
    # @param vbasoftware_database [String] Target database
    # @param note_key [Integer] Note Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_note_data(vbasoftware_database, note_key, opts = {})
      delete_note_data_with_http_info(vbasoftware_database, note_key, opts)
      nil
    end

    # Delete NoteData
    # Deletes an NoteData
    # @param vbasoftware_database [String] Target database
    # @param note_key [Integer] Note Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_note_data_with_http_info(vbasoftware_database, note_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.delete_note_data ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.delete_note_data"
      end
      # verify the required parameter 'note_key' is set
      if @api_client.config.client_side_validation && note_key.nil?
        fail ArgumentError, "Missing the required parameter 'note_key' when calling NoteDataApi.delete_note_data"
      end
      # resource path
      local_var_path = '/note-data/{noteKey}'.sub('{' + 'noteKey' + '}', CGI.escape(note_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.delete_note_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#delete_note_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Note Attachment Location
    # Gets Note Attachment Location
    # @param vbasoftware_database [String] Target database
    # @param note_category [String] Note Category
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def get_note_attachment_location(vbasoftware_database, note_category, opts = {})
      data, _status_code, _headers = get_note_attachment_location_with_http_info(vbasoftware_database, note_category, opts)
      data
    end

    # Get Note Attachment Location
    # Gets Note Attachment Location
    # @param vbasoftware_database [String] Target database
    # @param note_category [String] Note Category
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def get_note_attachment_location_with_http_info(vbasoftware_database, note_category, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.get_note_attachment_location ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.get_note_attachment_location"
      end
      # verify the required parameter 'note_category' is set
      if @api_client.config.client_side_validation && note_category.nil?
        fail ArgumentError, "Missing the required parameter 'note_category' when calling NoteDataApi.get_note_attachment_location"
      end
      # resource path
      local_var_path = '/note-attachment-location/{noteCategory}'.sub('{' + 'noteCategory' + '}', CGI.escape(note_category.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.get_note_attachment_location",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#get_note_attachment_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get NoteData
    # Gets NoteData
    # @param vbasoftware_database [String] Target database
    # @param note_key [Integer] Note Key
    # @param [Hash] opts the optional parameters
    # @return [NoteDataVBAResponse]
    def get_note_data(vbasoftware_database, note_key, opts = {})
      data, _status_code, _headers = get_note_data_with_http_info(vbasoftware_database, note_key, opts)
      data
    end

    # Get NoteData
    # Gets NoteData
    # @param vbasoftware_database [String] Target database
    # @param note_key [Integer] Note Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(NoteDataVBAResponse, Integer, Hash)>] NoteDataVBAResponse data, response status code and response headers
    def get_note_data_with_http_info(vbasoftware_database, note_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.get_note_data ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.get_note_data"
      end
      # verify the required parameter 'note_key' is set
      if @api_client.config.client_side_validation && note_key.nil?
        fail ArgumentError, "Missing the required parameter 'note_key' when calling NoteDataApi.get_note_data"
      end
      # resource path
      local_var_path = '/note-data/{noteKey}'.sub('{' + 'noteKey' + '}', CGI.escape(note_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NoteDataVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.get_note_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#get_note_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List NoteData by Source
    # List of Notes based on a specific source              Expectations of Category compared to what is in the source values                AUTH              @SourceColumn1 = auth_number                CALL              @SourceColumn1 = call_key                CASE              @SourceColumn1 = case_key                CLAIM              @SourceColumn1 = batch_number              @SourceColumn2 = batch_claim                CLMBTCH ** NO REFS **              @SourceColumn1 = batch_number                COMMAGEN ** NO REFS **              @SourceColumn1 = commissionagency_key                COMMREP ** NO REFS **              @SourceColumn1 = commissionrep_key                CORTRACK ** NO REFS **              @SourceColumn1 = reporttrack_key                FEESCHED ** NO REFS **              @SourceColumn1 = fee_sched                GRIEV              @SourceColumn1 = grievance_key                GROUP              @SourceColumn1 = group_id                GROUPDIV              @SourceColumn1 = group_id              @SourceColumn2 = division_id                GRPCLASS              @SourceColumn1 = group_id                GWREQ ** NO REFS **              @SourceColumn1 = request_key                INTRFACE ** NO REFS **              @SourceColumn1 = vbainterface_key                INVHDR ** NO REFS **              @SourceColumn1 = invoice_key                MEMBER              @SourceColumn1 = subscriber_id              @SourceColumn2 = member_seq                NETWORK ** NO REFS **              @SourceColumn1 = network_id                NOTE ** NO REFS **              @SourceColumn1 = note_key                PAYEE ** NO REFS **              @SourceColumn1 = payee_id                PAYOR ** NO REFS **              @SourceColumn1 = payor_id                PBENMAX              @SourceColumn1 = plan_id              @SourceColumn2 = benefit_code              @SourceColumn3 = max_id                PLAN ** NO REFS **              @SourceColumn1 = plan_id                PLANLVL ** NO REFS **              @SourceColumn1 = planbenefitlevel_key                PROV ** NO REFS **              @SourceColumn1 = provider_id                PROVCRED              @SourceColumn1 = providercred_key                REINS              @SourceColumn1 = reinscontract_key                REINSTRN              @SourceColumn1 = reinscontracttrans_key                SUB              @SourceColumn1 = subscriber_id              
    # @param vbasoftware_database [String] Target database
    # @param note_category [String] Note_Category
    # @param column_name1 [String] Column_Name1
    # @param key_value1 [String] Key_Value1
    # @param [Hash] opts the optional parameters
    # @option opts [String] :column_name2 Column_Name2
    # @option opts [String] :key_value2 Key_Value2
    # @option opts [String] :column_name3 Column_Name3
    # @option opts [String] :key_value3 Key_Value3
    # @option opts [String] :column_name4 Column_Name4
    # @option opts [String] :key_value4 Key_Value4
    # @option opts [String] :column_name5 Column_Name5
    # @option opts [String] :key_value5 Key_Value5
    # @return [NoteDataListVBAResponse]
    def list_notes_by_source(vbasoftware_database, note_category, column_name1, key_value1, opts = {})
      data, _status_code, _headers = list_notes_by_source_with_http_info(vbasoftware_database, note_category, column_name1, key_value1, opts)
      data
    end

    # List NoteData by Source
    # List of Notes based on a specific source              Expectations of Category compared to what is in the source values                AUTH              @SourceColumn1 &#x3D; auth_number                CALL              @SourceColumn1 &#x3D; call_key                CASE              @SourceColumn1 &#x3D; case_key                CLAIM              @SourceColumn1 &#x3D; batch_number              @SourceColumn2 &#x3D; batch_claim                CLMBTCH ** NO REFS **              @SourceColumn1 &#x3D; batch_number                COMMAGEN ** NO REFS **              @SourceColumn1 &#x3D; commissionagency_key                COMMREP ** NO REFS **              @SourceColumn1 &#x3D; commissionrep_key                CORTRACK ** NO REFS **              @SourceColumn1 &#x3D; reporttrack_key                FEESCHED ** NO REFS **              @SourceColumn1 &#x3D; fee_sched                GRIEV              @SourceColumn1 &#x3D; grievance_key                GROUP              @SourceColumn1 &#x3D; group_id                GROUPDIV              @SourceColumn1 &#x3D; group_id              @SourceColumn2 &#x3D; division_id                GRPCLASS              @SourceColumn1 &#x3D; group_id                GWREQ ** NO REFS **              @SourceColumn1 &#x3D; request_key                INTRFACE ** NO REFS **              @SourceColumn1 &#x3D; vbainterface_key                INVHDR ** NO REFS **              @SourceColumn1 &#x3D; invoice_key                MEMBER              @SourceColumn1 &#x3D; subscriber_id              @SourceColumn2 &#x3D; member_seq                NETWORK ** NO REFS **              @SourceColumn1 &#x3D; network_id                NOTE ** NO REFS **              @SourceColumn1 &#x3D; note_key                PAYEE ** NO REFS **              @SourceColumn1 &#x3D; payee_id                PAYOR ** NO REFS **              @SourceColumn1 &#x3D; payor_id                PBENMAX              @SourceColumn1 &#x3D; plan_id              @SourceColumn2 &#x3D; benefit_code              @SourceColumn3 &#x3D; max_id                PLAN ** NO REFS **              @SourceColumn1 &#x3D; plan_id                PLANLVL ** NO REFS **              @SourceColumn1 &#x3D; planbenefitlevel_key                PROV ** NO REFS **              @SourceColumn1 &#x3D; provider_id                PROVCRED              @SourceColumn1 &#x3D; providercred_key                REINS              @SourceColumn1 &#x3D; reinscontract_key                REINSTRN              @SourceColumn1 &#x3D; reinscontracttrans_key                SUB              @SourceColumn1 &#x3D; subscriber_id              
    # @param vbasoftware_database [String] Target database
    # @param note_category [String] Note_Category
    # @param column_name1 [String] Column_Name1
    # @param key_value1 [String] Key_Value1
    # @param [Hash] opts the optional parameters
    # @option opts [String] :column_name2 Column_Name2
    # @option opts [String] :key_value2 Key_Value2
    # @option opts [String] :column_name3 Column_Name3
    # @option opts [String] :key_value3 Key_Value3
    # @option opts [String] :column_name4 Column_Name4
    # @option opts [String] :key_value4 Key_Value4
    # @option opts [String] :column_name5 Column_Name5
    # @option opts [String] :key_value5 Key_Value5
    # @return [Array<(NoteDataListVBAResponse, Integer, Hash)>] NoteDataListVBAResponse data, response status code and response headers
    def list_notes_by_source_with_http_info(vbasoftware_database, note_category, column_name1, key_value1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.list_notes_by_source ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.list_notes_by_source"
      end
      # verify the required parameter 'note_category' is set
      if @api_client.config.client_side_validation && note_category.nil?
        fail ArgumentError, "Missing the required parameter 'note_category' when calling NoteDataApi.list_notes_by_source"
      end
      # verify the required parameter 'column_name1' is set
      if @api_client.config.client_side_validation && column_name1.nil?
        fail ArgumentError, "Missing the required parameter 'column_name1' when calling NoteDataApi.list_notes_by_source"
      end
      # verify the required parameter 'key_value1' is set
      if @api_client.config.client_side_validation && key_value1.nil?
        fail ArgumentError, "Missing the required parameter 'key_value1' when calling NoteDataApi.list_notes_by_source"
      end
      # resource path
      local_var_path = '/note-data'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'noteCategory'] = note_category
      query_params[:'columnName1'] = column_name1
      query_params[:'keyValue1'] = key_value1
      query_params[:'columnName2'] = opts[:'column_name2'] if !opts[:'column_name2'].nil?
      query_params[:'keyValue2'] = opts[:'key_value2'] if !opts[:'key_value2'].nil?
      query_params[:'columnName3'] = opts[:'column_name3'] if !opts[:'column_name3'].nil?
      query_params[:'keyValue3'] = opts[:'key_value3'] if !opts[:'key_value3'].nil?
      query_params[:'columnName4'] = opts[:'column_name4'] if !opts[:'column_name4'].nil?
      query_params[:'keyValue4'] = opts[:'key_value4'] if !opts[:'key_value4'].nil?
      query_params[:'columnName5'] = opts[:'column_name5'] if !opts[:'column_name5'].nil?
      query_params[:'keyValue5'] = opts[:'key_value5'] if !opts[:'key_value5'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NoteDataListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.list_notes_by_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#list_notes_by_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch NoteData
    # Create or Update multiple NoteData at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param note_data [Array<NoteData>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_note_data(vbasoftware_database, note_data, opts = {})
      data, _status_code, _headers = update_batch_note_data_with_http_info(vbasoftware_database, note_data, opts)
      data
    end

    # Create or Update Batch NoteData
    # Create or Update multiple NoteData at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param note_data [Array<NoteData>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_note_data_with_http_info(vbasoftware_database, note_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.update_batch_note_data ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.update_batch_note_data"
      end
      # verify the required parameter 'note_data' is set
      if @api_client.config.client_side_validation && note_data.nil?
        fail ArgumentError, "Missing the required parameter 'note_data' when calling NoteDataApi.update_batch_note_data"
      end
      # resource path
      local_var_path = '/note-data-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(note_data)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.update_batch_note_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#update_batch_note_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NoteData
    # Updates a specific NoteData.
    # @param vbasoftware_database [String] Target database
    # @param note_key [Integer] Note Key
    # @param note_data [NoteData] 
    # @param [Hash] opts the optional parameters
    # @return [NoteDataVBAResponse]
    def update_note_data(vbasoftware_database, note_key, note_data, opts = {})
      data, _status_code, _headers = update_note_data_with_http_info(vbasoftware_database, note_key, note_data, opts)
      data
    end

    # Update NoteData
    # Updates a specific NoteData.
    # @param vbasoftware_database [String] Target database
    # @param note_key [Integer] Note Key
    # @param note_data [NoteData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NoteDataVBAResponse, Integer, Hash)>] NoteDataVBAResponse data, response status code and response headers
    def update_note_data_with_http_info(vbasoftware_database, note_key, note_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NoteDataApi.update_note_data ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling NoteDataApi.update_note_data"
      end
      # verify the required parameter 'note_key' is set
      if @api_client.config.client_side_validation && note_key.nil?
        fail ArgumentError, "Missing the required parameter 'note_key' when calling NoteDataApi.update_note_data"
      end
      # verify the required parameter 'note_data' is set
      if @api_client.config.client_side_validation && note_data.nil?
        fail ArgumentError, "Missing the required parameter 'note_data' when calling NoteDataApi.update_note_data"
      end
      # resource path
      local_var_path = '/note-data/{noteKey}'.sub('{' + 'noteKey' + '}', CGI.escape(note_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(note_data)

      # return_type
      return_type = opts[:debug_return_type] || 'NoteDataVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"NoteDataApi.update_note_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NoteDataApi#update_note_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
