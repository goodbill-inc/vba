=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class UserNoteAccessApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create User Note Access
    # Creates a new User Note Access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access [UserNoteAccess] 
    # @param [Hash] opts the optional parameters
    # @return [UserNoteAccessVBAResponse]
    def create_user_note_access(vbasoftware_database, user_id, user_note_access, opts = {})
      data, _status_code, _headers = create_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access, opts)
      data
    end

    # Create User Note Access
    # Creates a new User Note Access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access [UserNoteAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserNoteAccessVBAResponse, Integer, Hash)>] UserNoteAccessVBAResponse data, response status code and response headers
    def create_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserNoteAccessApi.create_user_note_access ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserNoteAccessApi.create_user_note_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserNoteAccessApi.create_user_note_access"
      end
      # verify the required parameter 'user_note_access' is set
      if @api_client.config.client_side_validation && user_note_access.nil?
        fail ArgumentError, "Missing the required parameter 'user_note_access' when calling UserNoteAccessApi.create_user_note_access"
      end
      # resource path
      local_var_path = '/users/{userID}/note-access'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_note_access)

      # return_type
      return_type = opts[:debug_return_type] || 'UserNoteAccessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserNoteAccessApi.create_user_note_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserNoteAccessApi#create_user_note_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete User Note Access
    # Deletes an User Note Access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access_key [Integer] User Note Access Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_note_access(vbasoftware_database, user_id, user_note_access_key, opts = {})
      delete_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access_key, opts)
      nil
    end

    # Delete User Note Access
    # Deletes an User Note Access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access_key [Integer] User Note Access Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserNoteAccessApi.delete_user_note_access ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserNoteAccessApi.delete_user_note_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserNoteAccessApi.delete_user_note_access"
      end
      # verify the required parameter 'user_note_access_key' is set
      if @api_client.config.client_side_validation && user_note_access_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_note_access_key' when calling UserNoteAccessApi.delete_user_note_access"
      end
      # resource path
      local_var_path = '/users/{userID}/note-access/{userNoteAccessKey}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'userNoteAccessKey' + '}', CGI.escape(user_note_access_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserNoteAccessApi.delete_user_note_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserNoteAccessApi#delete_user_note_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Note Access
    # Gets User Note Access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access_key [Integer] UserNoteAccess Key
    # @param [Hash] opts the optional parameters
    # @return [UserNoteAccessVBAResponse]
    def get_user_note_access(vbasoftware_database, user_id, user_note_access_key, opts = {})
      data, _status_code, _headers = get_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access_key, opts)
      data
    end

    # Get User Note Access
    # Gets User Note Access
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access_key [Integer] UserNoteAccess Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserNoteAccessVBAResponse, Integer, Hash)>] UserNoteAccessVBAResponse data, response status code and response headers
    def get_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserNoteAccessApi.get_user_note_access ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserNoteAccessApi.get_user_note_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserNoteAccessApi.get_user_note_access"
      end
      # verify the required parameter 'user_note_access_key' is set
      if @api_client.config.client_side_validation && user_note_access_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_note_access_key' when calling UserNoteAccessApi.get_user_note_access"
      end
      # resource path
      local_var_path = '/users/{userID}/note-access/{userNoteAccessKey}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'userNoteAccessKey' + '}', CGI.escape(user_note_access_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserNoteAccessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserNoteAccessApi.get_user_note_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserNoteAccessApi#get_user_note_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List User Note Access
    # Lists all User Note Access given a specific userID
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [UserNoteAccessListVBAResponse]
    def list_user_note_access(vbasoftware_database, user_id, opts = {})
      data, _status_code, _headers = list_user_note_access_with_http_info(vbasoftware_database, user_id, opts)
      data
    end

    # List User Note Access
    # Lists all User Note Access given a specific userID
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserNoteAccessListVBAResponse, Integer, Hash)>] UserNoteAccessListVBAResponse data, response status code and response headers
    def list_user_note_access_with_http_info(vbasoftware_database, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserNoteAccessApi.list_user_note_access ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserNoteAccessApi.list_user_note_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserNoteAccessApi.list_user_note_access"
      end
      # resource path
      local_var_path = '/users/{userID}/note-access'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserNoteAccessListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserNoteAccessApi.list_user_note_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserNoteAccessApi#list_user_note_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch User Note Access
    # Create or Update multiple User Note Access at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access [Array<UserNoteAccess>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_user_note_access(vbasoftware_database, user_id, user_note_access, opts = {})
      data, _status_code, _headers = update_batch_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access, opts)
      data
    end

    # Create or Update Batch User Note Access
    # Create or Update multiple User Note Access at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access [Array<UserNoteAccess>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserNoteAccessApi.update_batch_user_note_access ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserNoteAccessApi.update_batch_user_note_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserNoteAccessApi.update_batch_user_note_access"
      end
      # verify the required parameter 'user_note_access' is set
      if @api_client.config.client_side_validation && user_note_access.nil?
        fail ArgumentError, "Missing the required parameter 'user_note_access' when calling UserNoteAccessApi.update_batch_user_note_access"
      end
      # resource path
      local_var_path = '/users/{userID}/note-access-batch'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_note_access)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserNoteAccessApi.update_batch_user_note_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserNoteAccessApi#update_batch_user_note_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update User Note Access
    # Updates a specific User Note Access.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access_key [Integer] UserNoteAccess Key
    # @param user_note_access [UserNoteAccess] 
    # @param [Hash] opts the optional parameters
    # @return [UserNoteAccessVBAResponse]
    def update_user_note_access(vbasoftware_database, user_id, user_note_access_key, user_note_access, opts = {})
      data, _status_code, _headers = update_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access_key, user_note_access, opts)
      data
    end

    # Update User Note Access
    # Updates a specific User Note Access.
    # @param vbasoftware_database [String] Target database
    # @param user_id [String] User ID
    # @param user_note_access_key [Integer] UserNoteAccess Key
    # @param user_note_access [UserNoteAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserNoteAccessVBAResponse, Integer, Hash)>] UserNoteAccessVBAResponse data, response status code and response headers
    def update_user_note_access_with_http_info(vbasoftware_database, user_id, user_note_access_key, user_note_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserNoteAccessApi.update_user_note_access ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling UserNoteAccessApi.update_user_note_access"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserNoteAccessApi.update_user_note_access"
      end
      # verify the required parameter 'user_note_access_key' is set
      if @api_client.config.client_side_validation && user_note_access_key.nil?
        fail ArgumentError, "Missing the required parameter 'user_note_access_key' when calling UserNoteAccessApi.update_user_note_access"
      end
      # verify the required parameter 'user_note_access' is set
      if @api_client.config.client_side_validation && user_note_access.nil?
        fail ArgumentError, "Missing the required parameter 'user_note_access' when calling UserNoteAccessApi.update_user_note_access"
      end
      # resource path
      local_var_path = '/users/{userID}/note-access/{userNoteAccessKey}'.sub('{' + 'userID' + '}', CGI.escape(user_id.to_s)).sub('{' + 'userNoteAccessKey' + '}', CGI.escape(user_note_access_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_note_access)

      # return_type
      return_type = opts[:debug_return_type] || 'UserNoteAccessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"UserNoteAccessApi.update_user_note_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserNoteAccessApi#update_user_note_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
