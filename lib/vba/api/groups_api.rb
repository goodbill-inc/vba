=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class GroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Groups
    # Creates a new Groups
    # @param vbasoftware_database [String] Target database
    # @param groups [Groups] 
    # @param [Hash] opts the optional parameters
    # @return [GroupsVBAResponse]
    def create_groups(vbasoftware_database, groups, opts = {})
      data, _status_code, _headers = create_groups_with_http_info(vbasoftware_database, groups, opts)
      data
    end

    # Create Groups
    # Creates a new Groups
    # @param vbasoftware_database [String] Target database
    # @param groups [Groups] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupsVBAResponse, Integer, Hash)>] GroupsVBAResponse data, response status code and response headers
    def create_groups_with_http_info(vbasoftware_database, groups, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.create_groups ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.create_groups"
      end
      # verify the required parameter 'groups' is set
      if @api_client.config.client_side_validation && groups.nil?
        fail ArgumentError, "Missing the required parameter 'groups' when calling GroupsApi.create_groups"
      end
      # resource path
      local_var_path = '/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(groups)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupsVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.create_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#create_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Groups
    # Deletes an Groups
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_groups(vbasoftware_database, group_id, opts = {})
      delete_groups_with_http_info(vbasoftware_database, group_id, opts)
      nil
    end

    # Delete Groups
    # Deletes an Groups
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_groups_with_http_info(vbasoftware_database, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.delete_groups ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.delete_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.delete_groups"
      end
      # resource path
      local_var_path = '/groups/{groupID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.delete_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#delete_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group enrollment summary information
    # Gets Group enrollment summary for the given group id. 
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [VBAGroupEnrollmentSummaryVBAResponse]
    def get_group_enrollment_summary(vbasoftware_database, group_id, opts = {})
      data, _status_code, _headers = get_group_enrollment_summary_with_http_info(vbasoftware_database, group_id, opts)
      data
    end

    # Get Group enrollment summary information
    # Gets Group enrollment summary for the given group id. 
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAGroupEnrollmentSummaryVBAResponse, Integer, Hash)>] VBAGroupEnrollmentSummaryVBAResponse data, response status code and response headers
    def get_group_enrollment_summary_with_http_info(vbasoftware_database, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group_enrollment_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.get_group_enrollment_summary"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_group_enrollment_summary"
      end
      # resource path
      local_var_path = '/groups/{groupID}/enrollment-summary'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAGroupEnrollmentSummaryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.get_group_enrollment_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group_enrollment_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group ID Card Selections
    # Gets Group ID Card Selections
    # @param vbasoftware_database [String] Target database
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :relationship Relationship
    # @option opts [String] :flex_vendor Flex Vendor
    # @option opts [Integer] :page Page Index (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [VBAGroupIDCardSelectionVBAResponse]
    def get_group_id_card_selections(vbasoftware_database, as_of_date, opts = {})
      data, _status_code, _headers = get_group_id_card_selections_with_http_info(vbasoftware_database, as_of_date, opts)
      data
    end

    # Get Group ID Card Selections
    # Gets Group ID Card Selections
    # @param vbasoftware_database [String] Target database
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :relationship Relationship
    # @option opts [String] :flex_vendor Flex Vendor
    # @option opts [Integer] :page Page Index (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(VBAGroupIDCardSelectionVBAResponse, Integer, Hash)>] VBAGroupIDCardSelectionVBAResponse data, response status code and response headers
    def get_group_id_card_selections_with_http_info(vbasoftware_database, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group_id_card_selections ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.get_group_id_card_selections"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling GroupsApi.get_group_id_card_selections"
      end
      # resource path
      local_var_path = '/groups/id-card-selection'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asOfDate'] = as_of_date
      query_params[:'groupID'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'divisionID'] = opts[:'division_id'] if !opts[:'division_id'].nil?
      query_params[:'planID'] = opts[:'plan_id'] if !opts[:'plan_id'].nil?
      query_params[:'relationship'] = opts[:'relationship'] if !opts[:'relationship'].nil?
      query_params[:'flexVendor'] = opts[:'flex_vendor'] if !opts[:'flex_vendor'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAGroupIDCardSelectionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.get_group_id_card_selections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group_id_card_selections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Groups
    # Gets Groups
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [GroupsVBAResponse]
    def get_groups(vbasoftware_database, group_id, opts = {})
      data, _status_code, _headers = get_groups_with_http_info(vbasoftware_database, group_id, opts)
      data
    end

    # Get Groups
    # Gets Groups
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupsVBAResponse, Integer, Hash)>] GroupsVBAResponse data, response status code and response headers
    def get_groups_with_http_info(vbasoftware_database, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_groups ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.get_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_groups"
      end
      # resource path
      local_var_path = '/groups/{groupID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupsVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.get_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Group Disenroll
    # Disenrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_disenroll_group [EnrollmentDisenrollGroup] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def group_disenroll(vbasoftware_database, group_id, enrollment_disenroll_group, opts = {})
      data, _status_code, _headers = group_disenroll_with_http_info(vbasoftware_database, group_id, enrollment_disenroll_group, opts)
      data
    end

    # Group Disenroll
    # Disenrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_disenroll_group [EnrollmentDisenrollGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def group_disenroll_with_http_info(vbasoftware_database, group_id, enrollment_disenroll_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.group_disenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.group_disenroll"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.group_disenroll"
      end
      # verify the required parameter 'enrollment_disenroll_group' is set
      if @api_client.config.client_side_validation && enrollment_disenroll_group.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_disenroll_group' when calling GroupsApi.group_disenroll"
      end
      # resource path
      local_var_path = '/groups/{groupID}/disenroll'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_disenroll_group)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.group_disenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#group_disenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Group Reenroll
    # Re-enrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def group_reenroll(vbasoftware_database, group_id, enrollment_reenroll, opts = {})
      data, _status_code, _headers = group_reenroll_with_http_info(vbasoftware_database, group_id, enrollment_reenroll, opts)
      data
    end

    # Group Reenroll
    # Re-enrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def group_reenroll_with_http_info(vbasoftware_database, group_id, enrollment_reenroll, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.group_reenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.group_reenroll"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.group_reenroll"
      end
      # verify the required parameter 'enrollment_reenroll' is set
      if @api_client.config.client_side_validation && enrollment_reenroll.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_reenroll' when calling GroupsApi.group_reenroll"
      end
      # resource path
      local_var_path = '/groups/{groupID}/reenroll'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_reenroll)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.group_reenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#group_reenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Groups
    # Lists all Groups
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [GroupsListVBAResponse]
    def list_groups(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_groups_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Groups
    # Lists all Groups
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(GroupsListVBAResponse, Integer, Hash)>] GroupsListVBAResponse data, response status code and response headers
    def list_groups_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.list_groups ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.list_groups"
      end
      # resource path
      local_var_path = '/groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupsListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.list_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Groups
    # Create or Update multiple Groups at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param groups [Array<Groups>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_groups(vbasoftware_database, groups, opts = {})
      data, _status_code, _headers = update_batch_groups_with_http_info(vbasoftware_database, groups, opts)
      data
    end

    # Create or Update Batch Groups
    # Create or Update multiple Groups at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param groups [Array<Groups>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_groups_with_http_info(vbasoftware_database, groups, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.update_batch_groups ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.update_batch_groups"
      end
      # verify the required parameter 'groups' is set
      if @api_client.config.client_side_validation && groups.nil?
        fail ArgumentError, "Missing the required parameter 'groups' when calling GroupsApi.update_batch_groups"
      end
      # resource path
      local_var_path = '/groups-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(groups)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.update_batch_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#update_batch_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Groups
    # Updates a specific Groups.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param groups [Groups] 
    # @param [Hash] opts the optional parameters
    # @return [GroupsVBAResponse]
    def update_groups(vbasoftware_database, group_id, groups, opts = {})
      data, _status_code, _headers = update_groups_with_http_info(vbasoftware_database, group_id, groups, opts)
      data
    end

    # Update Groups
    # Updates a specific Groups.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param groups [Groups] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupsVBAResponse, Integer, Hash)>] GroupsVBAResponse data, response status code and response headers
    def update_groups_with_http_info(vbasoftware_database, group_id, groups, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.update_groups ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupsApi.update_groups"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.update_groups"
      end
      # verify the required parameter 'groups' is set
      if @api_client.config.client_side_validation && groups.nil?
        fail ArgumentError, "Missing the required parameter 'groups' when calling GroupsApi.update_groups"
      end
      # resource path
      local_var_path = '/groups/{groupID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(groups)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupsVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupsApi.update_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#update_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
