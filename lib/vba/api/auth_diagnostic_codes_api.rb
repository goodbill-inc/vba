=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AuthDiagnosticCodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Auth Diagnostic Code
    # Creates a new Diagnostic Code.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param auth_diag_codes [AuthDiagCodes] 
    # @param [Hash] opts the optional parameters
    # @return [AuthDiagCodesVBAResponse]
    def create_auth_diag_code(vbasoftware_database, auth_number, auth_diag_codes, opts = {})
      data, _status_code, _headers = create_auth_diag_code_with_http_info(vbasoftware_database, auth_number, auth_diag_codes, opts)
      data
    end

    # Create Auth Diagnostic Code
    # Creates a new Diagnostic Code.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param auth_diag_codes [AuthDiagCodes] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthDiagCodesVBAResponse, Integer, Hash)>] AuthDiagCodesVBAResponse data, response status code and response headers
    def create_auth_diag_code_with_http_info(vbasoftware_database, auth_number, auth_diag_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.create_auth_diag_code ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.create_auth_diag_code"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.create_auth_diag_code"
      end
      # verify the required parameter 'auth_diag_codes' is set
      if @api_client.config.client_side_validation && auth_diag_codes.nil?
        fail ArgumentError, "Missing the required parameter 'auth_diag_codes' when calling AuthDiagnosticCodesApi.create_auth_diag_code"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_diag_codes)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthDiagCodesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.create_auth_diag_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#create_auth_diag_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Diagnostic Code
    # Deletes a specific Diagnostic Code.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param diagnostic_code [String] Diagnostic Code to delete
    # @param diagnostic_code_type [String] Diagnostic Code Type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_auth_diag_code(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, opts = {})
      delete_auth_diag_code_with_http_info(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, opts)
      nil
    end

    # Delete Diagnostic Code
    # Deletes a specific Diagnostic Code.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param diagnostic_code [String] Diagnostic Code to delete
    # @param diagnostic_code_type [String] Diagnostic Code Type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_auth_diag_code_with_http_info(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.delete_auth_diag_code ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.delete_auth_diag_code"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.delete_auth_diag_code"
      end
      # verify the required parameter 'diagnostic_code' is set
      if @api_client.config.client_side_validation && diagnostic_code.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code' when calling AuthDiagnosticCodesApi.delete_auth_diag_code"
      end
      # verify the required parameter 'diagnostic_code_type' is set
      if @api_client.config.client_side_validation && diagnostic_code_type.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code_type' when calling AuthDiagnosticCodesApi.delete_auth_diag_code"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes/{diagnosticCode}/diagnostic-code-types/{diagnosticCodeType}'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s)).sub('{' + 'diagnosticCode' + '}', CGI.escape(diagnostic_code.to_s)).sub('{' + 'diagnosticCodeType' + '}', CGI.escape(diagnostic_code_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.delete_auth_diag_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#delete_auth_diag_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Diagnostic Codes for Auth
    # List Diagnostic Codes for a specific Auth
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param [Hash] opts the optional parameters
    # @return [AuthDiagCodesListVBAResponse]
    def get_auth_diag_code_list(vbasoftware_database, auth_number, opts = {})
      data, _status_code, _headers = get_auth_diag_code_list_with_http_info(vbasoftware_database, auth_number, opts)
      data
    end

    # List Diagnostic Codes for Auth
    # List Diagnostic Codes for a specific Auth
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthDiagCodesListVBAResponse, Integer, Hash)>] AuthDiagCodesListVBAResponse data, response status code and response headers
    def get_auth_diag_code_list_with_http_info(vbasoftware_database, auth_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.get_auth_diag_code_list ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.get_auth_diag_code_list"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.get_auth_diag_code_list"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthDiagCodesListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.get_auth_diag_code_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#get_auth_diag_code_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Diagnostic Code
    # Gets a specific Diagnostic Code
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param diagnostic_code [String] Diagnostic Code
    # @param diagnostic_code_type [String] Diagnostic Code Type
    # @param [Hash] opts the optional parameters
    # @return [AuthDiagCodesVBAResponse]
    def get_diag_code(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, opts = {})
      data, _status_code, _headers = get_diag_code_with_http_info(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, opts)
      data
    end

    # Get Diagnostic Code
    # Gets a specific Diagnostic Code
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param diagnostic_code [String] Diagnostic Code
    # @param diagnostic_code_type [String] Diagnostic Code Type
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthDiagCodesVBAResponse, Integer, Hash)>] AuthDiagCodesVBAResponse data, response status code and response headers
    def get_diag_code_with_http_info(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.get_diag_code ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.get_diag_code"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.get_diag_code"
      end
      # verify the required parameter 'diagnostic_code' is set
      if @api_client.config.client_side_validation && diagnostic_code.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code' when calling AuthDiagnosticCodesApi.get_diag_code"
      end
      # verify the required parameter 'diagnostic_code_type' is set
      if @api_client.config.client_side_validation && diagnostic_code_type.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code_type' when calling AuthDiagnosticCodesApi.get_diag_code"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes/{diagnosticCode}/diagnostic-code-types/{diagnosticCodeType}'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s)).sub('{' + 'diagnosticCode' + '}', CGI.escape(diagnostic_code.to_s)).sub('{' + 'diagnosticCodeType' + '}', CGI.escape(diagnostic_code_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthDiagCodesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.get_diag_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#get_diag_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Diagnostic Codes with Value
    # List Diagnostic Codes with a specific Diagnostic Code value.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param diagnostic_code [String] Diagnostic Code
    # @param [Hash] opts the optional parameters
    # @return [AuthDiagCodesListVBAResponse]
    def get_diag_code_list(vbasoftware_database, auth_number, diagnostic_code, opts = {})
      data, _status_code, _headers = get_diag_code_list_with_http_info(vbasoftware_database, auth_number, diagnostic_code, opts)
      data
    end

    # List Diagnostic Codes with Value
    # List Diagnostic Codes with a specific Diagnostic Code value.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth Number
    # @param diagnostic_code [String] Diagnostic Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthDiagCodesListVBAResponse, Integer, Hash)>] AuthDiagCodesListVBAResponse data, response status code and response headers
    def get_diag_code_list_with_http_info(vbasoftware_database, auth_number, diagnostic_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.get_diag_code_list ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.get_diag_code_list"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.get_diag_code_list"
      end
      # verify the required parameter 'diagnostic_code' is set
      if @api_client.config.client_side_validation && diagnostic_code.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code' when calling AuthDiagnosticCodesApi.get_diag_code_list"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes/{diagnosticCode}'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s)).sub('{' + 'diagnosticCode' + '}', CGI.escape(diagnostic_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthDiagCodesListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.get_diag_code_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#get_diag_code_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Diagnostic Code
    # Updates a specific Diagnostic Code.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth number
    # @param diagnostic_code [String] Diagnostic Code
    # @param diagnostic_code_type [String] Diagnostic Code Type
    # @param auth_diag_codes [AuthDiagCodes] 
    # @param [Hash] opts the optional parameters
    # @return [AuthDiagCodesVBAResponse]
    def update_auth_diag_code(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, auth_diag_codes, opts = {})
      data, _status_code, _headers = update_auth_diag_code_with_http_info(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, auth_diag_codes, opts)
      data
    end

    # Update Diagnostic Code
    # Updates a specific Diagnostic Code.
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth number
    # @param diagnostic_code [String] Diagnostic Code
    # @param diagnostic_code_type [String] Diagnostic Code Type
    # @param auth_diag_codes [AuthDiagCodes] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthDiagCodesVBAResponse, Integer, Hash)>] AuthDiagCodesVBAResponse data, response status code and response headers
    def update_auth_diag_code_with_http_info(vbasoftware_database, auth_number, diagnostic_code, diagnostic_code_type, auth_diag_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.update_auth_diag_code ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.update_auth_diag_code"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.update_auth_diag_code"
      end
      # verify the required parameter 'diagnostic_code' is set
      if @api_client.config.client_side_validation && diagnostic_code.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code' when calling AuthDiagnosticCodesApi.update_auth_diag_code"
      end
      # verify the required parameter 'diagnostic_code_type' is set
      if @api_client.config.client_side_validation && diagnostic_code_type.nil?
        fail ArgumentError, "Missing the required parameter 'diagnostic_code_type' when calling AuthDiagnosticCodesApi.update_auth_diag_code"
      end
      # verify the required parameter 'auth_diag_codes' is set
      if @api_client.config.client_side_validation && auth_diag_codes.nil?
        fail ArgumentError, "Missing the required parameter 'auth_diag_codes' when calling AuthDiagnosticCodesApi.update_auth_diag_code"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes/{diagnosticCode}/diagnostic-code-types/{diagnosticCodeType}'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s)).sub('{' + 'diagnosticCode' + '}', CGI.escape(diagnostic_code.to_s)).sub('{' + 'diagnosticCodeType' + '}', CGI.escape(diagnostic_code_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_diag_codes)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthDiagCodesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.update_auth_diag_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#update_auth_diag_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Diagnostic Code Batch
    # Updates multiple Diagnostic Code
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth number
    # @param auth_diag_codes [Array<AuthDiagCodes>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_auth_diag_code_batch(vbasoftware_database, auth_number, auth_diag_codes, opts = {})
      data, _status_code, _headers = update_auth_diag_code_batch_with_http_info(vbasoftware_database, auth_number, auth_diag_codes, opts)
      data
    end

    # Update Diagnostic Code Batch
    # Updates multiple Diagnostic Code
    # @param vbasoftware_database [String] Target database
    # @param auth_number [String] Auth number
    # @param auth_diag_codes [Array<AuthDiagCodes>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_auth_diag_code_batch_with_http_info(vbasoftware_database, auth_number, auth_diag_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthDiagnosticCodesApi.update_auth_diag_code_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthDiagnosticCodesApi.update_auth_diag_code_batch"
      end
      # verify the required parameter 'auth_number' is set
      if @api_client.config.client_side_validation && auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'auth_number' when calling AuthDiagnosticCodesApi.update_auth_diag_code_batch"
      end
      # verify the required parameter 'auth_diag_codes' is set
      if @api_client.config.client_side_validation && auth_diag_codes.nil?
        fail ArgumentError, "Missing the required parameter 'auth_diag_codes' when calling AuthDiagnosticCodesApi.update_auth_diag_code_batch"
      end
      # resource path
      local_var_path = '/auths/{authNumber}/diagnostic-codes-batch'.sub('{' + 'authNumber' + '}', CGI.escape(auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_diag_codes)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthDiagnosticCodesApi.update_auth_diag_code_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthDiagnosticCodesApi#update_auth_diag_code_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
