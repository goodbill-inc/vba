=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class CommissionRateSubscribersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create CommissionRateSubscriber
    # Creates a new CommissionRateSubscriber
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param commission_rate_subscriber [CommissionRateSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [CommissionRateSubscriberVBAResponse]
    def create_commission_rate_subscriber(vbasoftware_database, comm_rate_key, subscriber_id, commission_rate_subscriber, opts = {})
      data, _status_code, _headers = create_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, commission_rate_subscriber, opts)
      data
    end

    # Create CommissionRateSubscriber
    # Creates a new CommissionRateSubscriber
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param commission_rate_subscriber [CommissionRateSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommissionRateSubscriberVBAResponse, Integer, Hash)>] CommissionRateSubscriberVBAResponse data, response status code and response headers
    def create_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, commission_rate_subscriber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.create_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.create_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.create_commission_rate_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling CommissionRateSubscribersApi.create_commission_rate_subscriber"
      end
      # verify the required parameter 'commission_rate_subscriber' is set
      if @api_client.config.client_side_validation && commission_rate_subscriber.nil?
        fail ArgumentError, "Missing the required parameter 'commission_rate_subscriber' when calling CommissionRateSubscribersApi.create_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers/{subscriberId}'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s)).sub('{' + 'subscriberId' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(commission_rate_subscriber)

      # return_type
      return_type = opts[:debug_return_type] || 'CommissionRateSubscriberVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.create_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#create_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CommissionRateSubscriber
    # Deletes an CommissionRateSubscriber
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_commission_rate_subscriber(vbasoftware_database, comm_rate_key, subscriber_id, opts = {})
      delete_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, opts)
      nil
    end

    # Delete CommissionRateSubscriber
    # Deletes an CommissionRateSubscriber
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.delete_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.delete_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.delete_commission_rate_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling CommissionRateSubscribersApi.delete_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers/{subscriberId}'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s)).sub('{' + 'subscriberId' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.delete_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#delete_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CommissionRateSubscriber
    # Gets CommissionRateSubscriber
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [CommissionRateSubscriberVBAResponse]
    def get_commission_rate_subscriber(vbasoftware_database, comm_rate_key, subscriber_id, opts = {})
      data, _status_code, _headers = get_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, opts)
      data
    end

    # Get CommissionRateSubscriber
    # Gets CommissionRateSubscriber
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommissionRateSubscriberVBAResponse, Integer, Hash)>] CommissionRateSubscriberVBAResponse data, response status code and response headers
    def get_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.get_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.get_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.get_commission_rate_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling CommissionRateSubscribersApi.get_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers/{subscriberId}'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s)).sub('{' + 'subscriberId' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommissionRateSubscriberVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.get_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#get_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CommissionRateSubscriber
    # Lists all CommissionRateSubscriber for the given commRateKey
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [CommissionRateSubscriberListVBAResponse]
    def list_commission_rate_subscriber(vbasoftware_database, comm_rate_key, opts = {})
      data, _status_code, _headers = list_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, opts)
      data
    end

    # List CommissionRateSubscriber
    # Lists all CommissionRateSubscriber for the given commRateKey
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(CommissionRateSubscriberListVBAResponse, Integer, Hash)>] CommissionRateSubscriberListVBAResponse data, response status code and response headers
    def list_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.list_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.list_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.list_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommissionRateSubscriberListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.list_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#list_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VBA_CommissionRateSubscriber that match provided filters
    # Retrieves a list of VBA_CommissionRateSubscriber that match provided filters. The endpoint requires a CommissionRate Key, Group ID query parameter and an optional Division ID query parameter. By default, all records, including unassigned, are included. However, the Include Unassigned query parameter can be set to false to exclude unassigned records.
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :division_id Division ID
    # @option opts [Boolean] :include_unassigned Include Unassigned (default to true)
    # @return [VBACommissionRateSubscriberListVBAResponse]
    def list_vba_commission_rate_subscriber(vbasoftware_database, comm_rate_key, group_id, opts = {})
      data, _status_code, _headers = list_vba_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, group_id, opts)
      data
    end

    # List VBA_CommissionRateSubscriber that match provided filters
    # Retrieves a list of VBA_CommissionRateSubscriber that match provided filters. The endpoint requires a CommissionRate Key, Group ID query parameter and an optional Division ID query parameter. By default, all records, including unassigned, are included. However, the Include Unassigned query parameter can be set to false to exclude unassigned records.
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :division_id Division ID
    # @option opts [Boolean] :include_unassigned Include Unassigned (default to true)
    # @return [Array<(VBACommissionRateSubscriberListVBAResponse, Integer, Hash)>] VBACommissionRateSubscriberListVBAResponse data, response status code and response headers
    def list_vba_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.list_vba_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.list_vba_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.list_vba_commission_rate_subscriber"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling CommissionRateSubscribersApi.list_vba_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers-match'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupID'] = group_id
      query_params[:'divisionID'] = opts[:'division_id'] if !opts[:'division_id'].nil?
      query_params[:'includeUnassigned'] = opts[:'include_unassigned'] if !opts[:'include_unassigned'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBACommissionRateSubscriberListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.list_vba_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#list_vba_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch CommissionRateSubscriber
    # Create or Update multiple CommissionRateSubscriber at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param commission_rate_subscriber [Array<CommissionRateSubscriber>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_commission_rate_subscriber(vbasoftware_database, comm_rate_key, commission_rate_subscriber, opts = {})
      data, _status_code, _headers = update_batch_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, commission_rate_subscriber, opts)
      data
    end

    # Create or Update Batch CommissionRateSubscriber
    # Create or Update multiple CommissionRateSubscriber at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param commission_rate_subscriber [Array<CommissionRateSubscriber>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, commission_rate_subscriber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.update_batch_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.update_batch_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.update_batch_commission_rate_subscriber"
      end
      # verify the required parameter 'commission_rate_subscriber' is set
      if @api_client.config.client_side_validation && commission_rate_subscriber.nil?
        fail ArgumentError, "Missing the required parameter 'commission_rate_subscriber' when calling CommissionRateSubscribersApi.update_batch_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers-batch'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(commission_rate_subscriber)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.update_batch_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#update_batch_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update CommissionRateSubscriber
    # Updates a specific CommissionRateSubscriber.
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param commission_rate_subscriber [CommissionRateSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [CommissionRateSubscriberVBAResponse]
    def update_commission_rate_subscriber(vbasoftware_database, comm_rate_key, subscriber_id, commission_rate_subscriber, opts = {})
      data, _status_code, _headers = update_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, commission_rate_subscriber, opts)
      data
    end

    # Update CommissionRateSubscriber
    # Updates a specific CommissionRateSubscriber.
    # @param vbasoftware_database [String] Target database
    # @param comm_rate_key [Integer] CommissionRate Key
    # @param subscriber_id [String] Subscriber ID
    # @param commission_rate_subscriber [CommissionRateSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommissionRateSubscriberVBAResponse, Integer, Hash)>] CommissionRateSubscriberVBAResponse data, response status code and response headers
    def update_commission_rate_subscriber_with_http_info(vbasoftware_database, comm_rate_key, subscriber_id, commission_rate_subscriber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommissionRateSubscribersApi.update_commission_rate_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CommissionRateSubscribersApi.update_commission_rate_subscriber"
      end
      # verify the required parameter 'comm_rate_key' is set
      if @api_client.config.client_side_validation && comm_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'comm_rate_key' when calling CommissionRateSubscribersApi.update_commission_rate_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling CommissionRateSubscribersApi.update_commission_rate_subscriber"
      end
      # verify the required parameter 'commission_rate_subscriber' is set
      if @api_client.config.client_side_validation && commission_rate_subscriber.nil?
        fail ArgumentError, "Missing the required parameter 'commission_rate_subscriber' when calling CommissionRateSubscribersApi.update_commission_rate_subscriber"
      end
      # resource path
      local_var_path = '/commission-rates/{commRateKey}/commission-rate-subscribers/{subscriberId}'.sub('{' + 'commRateKey' + '}', CGI.escape(comm_rate_key.to_s)).sub('{' + 'subscriberId' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(commission_rate_subscriber)

      # return_type
      return_type = opts[:debug_return_type] || 'CommissionRateSubscriberVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CommissionRateSubscribersApi.update_commission_rate_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommissionRateSubscribersApi#update_commission_rate_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
