=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PremiumInvoiceSubscribersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PremInvoiceSubscriber
    # Creates a new PremInvoiceSubscriber
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param prem_invoice_subscriber [PremInvoiceSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceSubscriberVBAResponse]
    def create_prem_invoice_subscriber(vbasoftware_database, invoice_key, prem_invoice_subscriber, opts = {})
      data, _status_code, _headers = create_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, prem_invoice_subscriber, opts)
      data
    end

    # Create PremInvoiceSubscriber
    # Creates a new PremInvoiceSubscriber
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param prem_invoice_subscriber [PremInvoiceSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceSubscriberVBAResponse, Integer, Hash)>] PremInvoiceSubscriberVBAResponse data, response status code and response headers
    def create_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, prem_invoice_subscriber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.create_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.create_prem_invoice_subscriber"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.create_prem_invoice_subscriber"
      end
      # verify the required parameter 'prem_invoice_subscriber' is set
      if @api_client.config.client_side_validation && prem_invoice_subscriber.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_subscriber' when calling PremiumInvoiceSubscribersApi.create_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_subscriber)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceSubscriberVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.create_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#create_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PremInvoiceSubscriber
    # Deletes an PremInvoiceSubscriber
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_prem_invoice_subscriber(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, opts = {})
      delete_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, opts)
      nil
    end

    # Delete PremInvoiceSubscriber
    # Deletes an PremInvoiceSubscriber
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers/{groupID}/{divisionID}/{subscriberID}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.delete_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#delete_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PremInvoiceSubscriber
    # Gets PremInvoiceSubscriber
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceSubscriberVBAResponse]
    def get_prem_invoice_subscriber(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, opts = {})
      data, _status_code, _headers = get_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, opts)
      data
    end

    # Get PremInvoiceSubscriber
    # Gets PremInvoiceSubscriber
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceSubscriberVBAResponse, Integer, Hash)>] PremInvoiceSubscriberVBAResponse data, response status code and response headers
    def get_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers/{groupID}/{divisionID}/{subscriberID}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceSubscriberVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.get_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#get_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PremInvoiceSubscriber
    # Lists all PremInvoiceSubscriber for the given invoiceKey
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PremInvoiceSubscriberListVBAResponse]
    def list_prem_invoice_subscriber(vbasoftware_database, invoice_key, opts = {})
      data, _status_code, _headers = list_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, opts)
      data
    end

    # List PremInvoiceSubscriber
    # Lists all PremInvoiceSubscriber for the given invoiceKey
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PremInvoiceSubscriberListVBAResponse, Integer, Hash)>] PremInvoiceSubscriberListVBAResponse data, response status code and response headers
    def list_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceSubscriberListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#list_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of Premium Invoice Calculations by Subscriber
    # Retrieves detailed calculations and metrics for subscribers associated with a specific invoice key, including financial summaries, premium adjustments, and waiver statuses.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [GetPremInvoiceSubscriberListResultListVBAResponse]
    def list_prem_invoice_subscriber_calculations(vbasoftware_database, invoice_key, opts = {})
      data, _status_code, _headers = list_prem_invoice_subscriber_calculations_with_http_info(vbasoftware_database, invoice_key, opts)
      data
    end

    # List of Premium Invoice Calculations by Subscriber
    # Retrieves detailed calculations and metrics for subscribers associated with a specific invoice key, including financial summaries, premium adjustments, and waiver statuses.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPremInvoiceSubscriberListResultListVBAResponse, Integer, Hash)>] GetPremInvoiceSubscriberListResultListVBAResponse data, response status code and response headers
    def list_prem_invoice_subscriber_calculations_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_calculations ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_calculations"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_calculations"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscriber-calculations'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPremInvoiceSubscriberListResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_calculations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#list_prem_invoice_subscriber_calculations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of Premium Invoice Adjustment Details for Subscribers
    # Retrieves detailed invoice adjustments for subscribers associated with a specific invoice key, including financial summaries, & premium adjustments.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [VBAPremInvoiceSubscriberDetailAdjustmentListVBAResponse]
    def list_prem_invoice_subscriber_detail_adjustments(vbasoftware_database, invoice_key, opts = {})
      data, _status_code, _headers = list_prem_invoice_subscriber_detail_adjustments_with_http_info(vbasoftware_database, invoice_key, opts)
      data
    end

    # List of Premium Invoice Adjustment Details for Subscribers
    # Retrieves detailed invoice adjustments for subscribers associated with a specific invoice key, including financial summaries, &amp; premium adjustments.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAPremInvoiceSubscriberDetailAdjustmentListVBAResponse, Integer, Hash)>] VBAPremInvoiceSubscriberDetailAdjustmentListVBAResponse data, response status code and response headers
    def list_prem_invoice_subscriber_detail_adjustments_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_detail_adjustments ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_detail_adjustments"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_detail_adjustments"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscriber-detail-adjustments'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAPremInvoiceSubscriberDetailAdjustmentListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_detail_adjustments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#list_prem_invoice_subscriber_detail_adjustments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of Premium Invoice Details for Subscribers
    # Retrieves detailed calculations and metrics for subscribers associated with a specific invoice key, including financial summaries, premium adjustments, and waiver statuses.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [VBAPremInvoiceSubscriberDetailListVBAResponse]
    def list_prem_invoice_subscriber_details(vbasoftware_database, invoice_key, opts = {})
      data, _status_code, _headers = list_prem_invoice_subscriber_details_with_http_info(vbasoftware_database, invoice_key, opts)
      data
    end

    # List of Premium Invoice Details for Subscribers
    # Retrieves detailed calculations and metrics for subscribers associated with a specific invoice key, including financial summaries, premium adjustments, and waiver statuses.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAPremInvoiceSubscriberDetailListVBAResponse, Integer, Hash)>] VBAPremInvoiceSubscriberDetailListVBAResponse data, response status code and response headers
    def list_prem_invoice_subscriber_details_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_details ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_details"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_details"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscriber-details'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAPremInvoiceSubscriberDetailListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#list_prem_invoice_subscriber_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PremInvoiceSubscriberHistory
    # Lists all PremInvoiceSubscriber History for the given invoiceKey and Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [VBAPremInvoiceSubscriberHistoryListVBAResponse]
    def list_prem_invoice_subscriber_history(vbasoftware_database, invoice_key, subscriber_id, opts = {})
      data, _status_code, _headers = list_prem_invoice_subscriber_history_with_http_info(vbasoftware_database, invoice_key, subscriber_id, opts)
      data
    end

    # List PremInvoiceSubscriberHistory
    # Lists all PremInvoiceSubscriber History for the given invoiceKey and Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(VBAPremInvoiceSubscriberHistoryListVBAResponse, Integer, Hash)>] VBAPremInvoiceSubscriberHistoryListVBAResponse data, response status code and response headers
    def list_prem_invoice_subscriber_history_with_http_info(vbasoftware_database, invoice_key, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_history ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_history"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_history"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_history"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers/{subscriberID}/history'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s)).sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAPremInvoiceSubscriberHistoryListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.list_prem_invoice_subscriber_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#list_prem_invoice_subscriber_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PremInvoiceSubscriber
    # Create or Update multiple PremInvoiceSubscriber at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param prem_invoice_subscriber [Array<PremInvoiceSubscriber>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_prem_invoice_subscriber(vbasoftware_database, invoice_key, prem_invoice_subscriber, opts = {})
      data, _status_code, _headers = update_batch_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, prem_invoice_subscriber, opts)
      data
    end

    # Create or Update Batch PremInvoiceSubscriber
    # Create or Update multiple PremInvoiceSubscriber at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param prem_invoice_subscriber [Array<PremInvoiceSubscriber>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, prem_invoice_subscriber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.update_batch_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.update_batch_prem_invoice_subscriber"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.update_batch_prem_invoice_subscriber"
      end
      # verify the required parameter 'prem_invoice_subscriber' is set
      if @api_client.config.client_side_validation && prem_invoice_subscriber.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_subscriber' when calling PremiumInvoiceSubscribersApi.update_batch_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers-batch'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_subscriber)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.update_batch_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#update_batch_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PremInvoiceSubscriber
    # Updates a specific PremInvoiceSubscriber.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param prem_invoice_subscriber [PremInvoiceSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceSubscriberVBAResponse]
    def update_prem_invoice_subscriber(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, prem_invoice_subscriber, opts = {})
      data, _status_code, _headers = update_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, prem_invoice_subscriber, opts)
      data
    end

    # Update PremInvoiceSubscriber
    # Updates a specific PremInvoiceSubscriber.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param prem_invoice_subscriber [PremInvoiceSubscriber] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceSubscriberVBAResponse, Integer, Hash)>] PremInvoiceSubscriberVBAResponse data, response status code and response headers
    def update_prem_invoice_subscriber_with_http_info(vbasoftware_database, invoice_key, group_id, division_id, subscriber_id, prem_invoice_subscriber, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber"
      end
      # verify the required parameter 'prem_invoice_subscriber' is set
      if @api_client.config.client_side_validation && prem_invoice_subscriber.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_subscriber' when calling PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/subscribers/{groupID}/{divisionID}/{subscriberID}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_subscriber)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceSubscriberVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumInvoiceSubscribersApi.update_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumInvoiceSubscribersApi#update_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
