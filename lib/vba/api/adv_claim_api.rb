=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvClaimApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adjust Claim(s)
    # Adjust a selected list of claims by Claim Number.
    # @param vbasoftware_database [String] Target database
    # @param claim_adjustment_config [ClaimAdjustmentConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def adjust_claim(vbasoftware_database, claim_adjustment_config, opts = {})
      data, _status_code, _headers = adjust_claim_with_http_info(vbasoftware_database, claim_adjustment_config, opts)
      data
    end

    # Adjust Claim(s)
    # Adjust a selected list of claims by Claim Number.
    # @param vbasoftware_database [String] Target database
    # @param claim_adjustment_config [ClaimAdjustmentConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def adjust_claim_with_http_info(vbasoftware_database, claim_adjustment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.adjust_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.adjust_claim"
      end
      # verify the required parameter 'claim_adjustment_config' is set
      if @api_client.config.client_side_validation && claim_adjustment_config.nil?
        fail ArgumentError, "Missing the required parameter 'claim_adjustment_config' when calling AdvClaimApi.adjust_claim"
      end
      # resource path
      local_var_path = '/claim-adjustment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_adjustment_config)

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.adjust_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#adjust_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Split Claims by Payor/Account
    # When the chosen claim has a multi-Payor/Account error, this process will automatically split the claim and create a bridgre reference in ClaimBatchReference.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_claim_multi_payor_account(vbasoftware_database, batch_number, batch_claim, opts = {})
      copy_claim_multi_payor_account_with_http_info(vbasoftware_database, batch_number, batch_claim, opts)
      nil
    end

    # Split Claims by Payor/Account
    # When the chosen claim has a multi-Payor/Account error, this process will automatically split the claim and create a bridgre reference in ClaimBatchReference.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def copy_claim_multi_payor_account_with_http_info(vbasoftware_database, batch_number, batch_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.copy_claim_multi_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.copy_claim_multi_payor_account"
      end
      # verify the required parameter 'batch_number' is set
      if @api_client.config.client_side_validation && batch_number.nil?
        fail ArgumentError, "Missing the required parameter 'batch_number' when calling AdvClaimApi.copy_claim_multi_payor_account"
      end
      # verify the required parameter 'batch_claim' is set
      if @api_client.config.client_side_validation && batch_claim.nil?
        fail ArgumentError, "Missing the required parameter 'batch_claim' when calling AdvClaimApi.copy_claim_multi_payor_account"
      end
      # resource path
      local_var_path = '/claim-copy-multi-payor-account'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'batchNumber'] = batch_number
      query_params[:'batchClaim'] = batch_claim

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.copy_claim_multi_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#copy_claim_multi_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Split Claims by Plan Year
    # When the chosen claim has a multi-Plan Year error, this process will automatically split the claim and create a bridgre reference in ClaimBatchReference.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_claim_multi_plan_year(vbasoftware_database, batch_number, batch_claim, opts = {})
      copy_claim_multi_plan_year_with_http_info(vbasoftware_database, batch_number, batch_claim, opts)
      nil
    end

    # Split Claims by Plan Year
    # When the chosen claim has a multi-Plan Year error, this process will automatically split the claim and create a bridgre reference in ClaimBatchReference.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def copy_claim_multi_plan_year_with_http_info(vbasoftware_database, batch_number, batch_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.copy_claim_multi_plan_year ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.copy_claim_multi_plan_year"
      end
      # verify the required parameter 'batch_number' is set
      if @api_client.config.client_side_validation && batch_number.nil?
        fail ArgumentError, "Missing the required parameter 'batch_number' when calling AdvClaimApi.copy_claim_multi_plan_year"
      end
      # verify the required parameter 'batch_claim' is set
      if @api_client.config.client_side_validation && batch_claim.nil?
        fail ArgumentError, "Missing the required parameter 'batch_claim' when calling AdvClaimApi.copy_claim_multi_plan_year"
      end
      # resource path
      local_var_path = '/claim-copy-multi-plan-year'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'batchNumber'] = batch_number
      query_params[:'batchClaim'] = batch_claim

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.copy_claim_multi_plan_year",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#copy_claim_multi_plan_year\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy Selected Service Lines
    # Copy a list of ClaimBatchDetails x amount of times and add y amount of days to each copy.
    # @param vbasoftware_database [String] Target database
    # @param number_of_copies [Integer] Number of Copies
    # @param days_on_copy [Integer] Days on Copy
    # @param claim_batch_detail [Array<ClaimBatchDetail>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_claim_service_line(vbasoftware_database, number_of_copies, days_on_copy, claim_batch_detail, opts = {})
      copy_claim_service_line_with_http_info(vbasoftware_database, number_of_copies, days_on_copy, claim_batch_detail, opts)
      nil
    end

    # Copy Selected Service Lines
    # Copy a list of ClaimBatchDetails x amount of times and add y amount of days to each copy.
    # @param vbasoftware_database [String] Target database
    # @param number_of_copies [Integer] Number of Copies
    # @param days_on_copy [Integer] Days on Copy
    # @param claim_batch_detail [Array<ClaimBatchDetail>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def copy_claim_service_line_with_http_info(vbasoftware_database, number_of_copies, days_on_copy, claim_batch_detail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.copy_claim_service_line ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.copy_claim_service_line"
      end
      # verify the required parameter 'number_of_copies' is set
      if @api_client.config.client_side_validation && number_of_copies.nil?
        fail ArgumentError, "Missing the required parameter 'number_of_copies' when calling AdvClaimApi.copy_claim_service_line"
      end
      # verify the required parameter 'days_on_copy' is set
      if @api_client.config.client_side_validation && days_on_copy.nil?
        fail ArgumentError, "Missing the required parameter 'days_on_copy' when calling AdvClaimApi.copy_claim_service_line"
      end
      # verify the required parameter 'claim_batch_detail' is set
      if @api_client.config.client_side_validation && claim_batch_detail.nil?
        fail ArgumentError, "Missing the required parameter 'claim_batch_detail' when calling AdvClaimApi.copy_claim_service_line"
      end
      # resource path
      local_var_path = '/claim-copy-service-lines'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'numberOfCopies'] = number_of_copies
      query_params[:'daysOnCopy'] = days_on_copy

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_batch_detail)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.copy_claim_service_line",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#copy_claim_service_line\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy Claim(s) to Batch
    # Copy a selected list of claims to batch.
    # @param vbasoftware_database [String] Target database
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_claim_to_batch(vbasoftware_database, request_body, opts = {})
      copy_claim_to_batch_with_http_info(vbasoftware_database, request_body, opts)
      nil
    end

    # Copy Claim(s) to Batch
    # Copy a selected list of claims to batch.
    # @param vbasoftware_database [String] Target database
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def copy_claim_to_batch_with_http_info(vbasoftware_database, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.copy_claim_to_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.copy_claim_to_batch"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling AdvClaimApi.copy_claim_to_batch"
      end
      # resource path
      local_var_path = '/claim-copy-to-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.copy_claim_to_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#copy_claim_to_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Life Claim
    # Setup a Life Claim based on defined configuration and optionally setup the Life Claim payments.
    # @param vbasoftware_database [String] Target database
    # @param life_claim_advisor [LifeClaimAdvisor] 
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def create_life_claim(vbasoftware_database, life_claim_advisor, opts = {})
      data, _status_code, _headers = create_life_claim_with_http_info(vbasoftware_database, life_claim_advisor, opts)
      data
    end

    # Create a Life Claim
    # Setup a Life Claim based on defined configuration and optionally setup the Life Claim payments.
    # @param vbasoftware_database [String] Target database
    # @param life_claim_advisor [LifeClaimAdvisor] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def create_life_claim_with_http_info(vbasoftware_database, life_claim_advisor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.create_life_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.create_life_claim"
      end
      # verify the required parameter 'life_claim_advisor' is set
      if @api_client.config.client_side_validation && life_claim_advisor.nil?
        fail ArgumentError, "Missing the required parameter 'life_claim_advisor' when calling AdvClaimApi.create_life_claim"
      end
      # resource path
      local_var_path = '/create-life-claim'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(life_claim_advisor)

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.create_life_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#create_life_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Life Claim Payment
    # Based on passed in parameters, create a Life Claim Payment under an existing Life Claim.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param pay_to [String] Pay To
    # @param volume [Float] Volume
    # @param [Hash] opts the optional parameters
    # @option opts [String] :beneficiary_id Beneficiary ID
    # @option opts [Float] :assignment Assignment
    # @return [nil]
    def create_life_claim_payment(vbasoftware_database, batch_number, pay_to, volume, opts = {})
      create_life_claim_payment_with_http_info(vbasoftware_database, batch_number, pay_to, volume, opts)
      nil
    end

    # Create a Life Claim Payment
    # Based on passed in parameters, create a Life Claim Payment under an existing Life Claim.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param pay_to [String] Pay To
    # @param volume [Float] Volume
    # @param [Hash] opts the optional parameters
    # @option opts [String] :beneficiary_id Beneficiary ID
    # @option opts [Float] :assignment Assignment
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_life_claim_payment_with_http_info(vbasoftware_database, batch_number, pay_to, volume, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.create_life_claim_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.create_life_claim_payment"
      end
      # verify the required parameter 'batch_number' is set
      if @api_client.config.client_side_validation && batch_number.nil?
        fail ArgumentError, "Missing the required parameter 'batch_number' when calling AdvClaimApi.create_life_claim_payment"
      end
      # verify the required parameter 'pay_to' is set
      if @api_client.config.client_side_validation && pay_to.nil?
        fail ArgumentError, "Missing the required parameter 'pay_to' when calling AdvClaimApi.create_life_claim_payment"
      end
      # verify the required parameter 'volume' is set
      if @api_client.config.client_side_validation && volume.nil?
        fail ArgumentError, "Missing the required parameter 'volume' when calling AdvClaimApi.create_life_claim_payment"
      end
      # resource path
      local_var_path = '/create-life-claim-payment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'batchNumber'] = batch_number
      query_params[:'payTo'] = pay_to
      query_params[:'volume'] = volume
      query_params[:'beneficiaryId'] = opts[:'beneficiary_id'] if !opts[:'beneficiary_id'].nil?
      query_params[:'assignment'] = opts[:'assignment'] if !opts[:'assignment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.create_life_claim_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#create_life_claim_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Disability Payments
    # Create a Batch of Claims that represent Disability Payments for a STD or LTD disability claim.
    # @param vbasoftware_database [String] Target database
    # @param vba_disability_advisor [VBADisabilityAdvisor] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimInvoiceVBAResponse]
    def disability_advisor_create_claim(vbasoftware_database, vba_disability_advisor, opts = {})
      data, _status_code, _headers = disability_advisor_create_claim_with_http_info(vbasoftware_database, vba_disability_advisor, opts)
      data
    end

    # Create Disability Payments
    # Create a Batch of Claims that represent Disability Payments for a STD or LTD disability claim.
    # @param vbasoftware_database [String] Target database
    # @param vba_disability_advisor [VBADisabilityAdvisor] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimInvoiceVBAResponse, Integer, Hash)>] ClaimInvoiceVBAResponse data, response status code and response headers
    def disability_advisor_create_claim_with_http_info(vbasoftware_database, vba_disability_advisor, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.disability_advisor_create_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.disability_advisor_create_claim"
      end
      # verify the required parameter 'vba_disability_advisor' is set
      if @api_client.config.client_side_validation && vba_disability_advisor.nil?
        fail ArgumentError, "Missing the required parameter 'vba_disability_advisor' when calling AdvClaimApi.disability_advisor_create_claim"
      end
      # resource path
      local_var_path = '/disability-advisor-create-claim'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_disability_advisor)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.disability_advisor_create_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#disability_advisor_create_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync ClaimBatch Disability
    # Send in a ClaimBatch record and have all other ClaimBatch records remaining in Batch syncd to the Disability values on that submitted header.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disability_claim_sync(vbasoftware_database, batch_number, batch_claim, opts = {})
      disability_claim_sync_with_http_info(vbasoftware_database, batch_number, batch_claim, opts)
      nil
    end

    # Sync ClaimBatch Disability
    # Send in a ClaimBatch record and have all other ClaimBatch records remaining in Batch syncd to the Disability values on that submitted header.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disability_claim_sync_with_http_info(vbasoftware_database, batch_number, batch_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.disability_claim_sync ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.disability_claim_sync"
      end
      # verify the required parameter 'batch_number' is set
      if @api_client.config.client_side_validation && batch_number.nil?
        fail ArgumentError, "Missing the required parameter 'batch_number' when calling AdvClaimApi.disability_claim_sync"
      end
      # verify the required parameter 'batch_claim' is set
      if @api_client.config.client_side_validation && batch_claim.nil?
        fail ArgumentError, "Missing the required parameter 'batch_claim' when calling AdvClaimApi.disability_claim_sync"
      end
      # resource path
      local_var_path = '/disability-claim-sync-header'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'batchNumber'] = batch_number
      query_params[:'batchClaim'] = batch_claim

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.disability_claim_sync",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#disability_claim_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Full Delete ClaimBatch
    # Deletes an ClaimBatch record along with all associated processing needed as a result of that delete.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @option opts [String] :claim_status_category_code Claim Status Category Code
    # @option opts [String] :claim_status_code Claim Status Code
    # @return [nil]
    def full_delete_claim_batch(vbasoftware_database, batch_number, batch_claim, opts = {})
      full_delete_claim_batch_with_http_info(vbasoftware_database, batch_number, batch_claim, opts)
      nil
    end

    # Full Delete ClaimBatch
    # Deletes an ClaimBatch record along with all associated processing needed as a result of that delete.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param [Hash] opts the optional parameters
    # @option opts [String] :claim_status_category_code Claim Status Category Code
    # @option opts [String] :claim_status_code Claim Status Code
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def full_delete_claim_batch_with_http_info(vbasoftware_database, batch_number, batch_claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.full_delete_claim_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.full_delete_claim_batch"
      end
      # verify the required parameter 'batch_number' is set
      if @api_client.config.client_side_validation && batch_number.nil?
        fail ArgumentError, "Missing the required parameter 'batch_number' when calling AdvClaimApi.full_delete_claim_batch"
      end
      # verify the required parameter 'batch_claim' is set
      if @api_client.config.client_side_validation && batch_claim.nil?
        fail ArgumentError, "Missing the required parameter 'batch_claim' when calling AdvClaimApi.full_delete_claim_batch"
      end
      # resource path
      local_var_path = '/claim-batches/{batchNumber}/claims/{batchClaim}/full-delete'.sub('{' + 'batchNumber' + '}', CGI.escape(batch_number.to_s)).sub('{' + 'batchClaim' + '}', CGI.escape(batch_claim.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'claimStatusCategoryCode'] = opts[:'claim_status_category_code'] if !opts[:'claim_status_category_code'].nil?
      query_params[:'claimStatusCode'] = opts[:'claim_status_code'] if !opts[:'claim_status_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.full_delete_claim_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#full_delete_claim_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Claim Invoice
    # Creates a Claim Invoice and attaches a list of Claims.
    # @param vbasoftware_database [String] Target database
    # @param claim_invoice_config [ClaimInvoiceConfig] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimBatchClaimBatchDetailListVBAResponse]
    def generate_claim_invoice(vbasoftware_database, claim_invoice_config, opts = {})
      data, _status_code, _headers = generate_claim_invoice_with_http_info(vbasoftware_database, claim_invoice_config, opts)
      data
    end

    # Generate Claim Invoice
    # Creates a Claim Invoice and attaches a list of Claims.
    # @param vbasoftware_database [String] Target database
    # @param claim_invoice_config [ClaimInvoiceConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimBatchClaimBatchDetailListVBAResponse, Integer, Hash)>] ClaimBatchClaimBatchDetailListVBAResponse data, response status code and response headers
    def generate_claim_invoice_with_http_info(vbasoftware_database, claim_invoice_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.generate_claim_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.generate_claim_invoice"
      end
      # verify the required parameter 'claim_invoice_config' is set
      if @api_client.config.client_side_validation && claim_invoice_config.nil?
        fail ArgumentError, "Missing the required parameter 'claim_invoice_config' when calling AdvClaimApi.generate_claim_invoice"
      end
      # resource path
      local_var_path = '/claim-invoice-generate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_invoice_config)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimBatchClaimBatchDetailListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.generate_claim_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#generate_claim_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Claim EDI XML
    # Get a full XML representation of this claim submitted via EDI into VBADataIntegration. The criteria for this is available in Search Config: VBADATAINT_CLAIM.
    # @param vbasoftware_database [String] Target database
    # @param edi_key [Integer] EDI Key
    # @param claim_key [Integer] Claim Key
    # @param edi_location [String] EDI Location
    # @param [Hash] opts the optional parameters
    # @return [StringVBAResponse]
    def get_claim_xml(vbasoftware_database, edi_key, claim_key, edi_location, opts = {})
      data, _status_code, _headers = get_claim_xml_with_http_info(vbasoftware_database, edi_key, claim_key, edi_location, opts)
      data
    end

    # Get Claim EDI XML
    # Get a full XML representation of this claim submitted via EDI into VBADataIntegration. The criteria for this is available in Search Config: VBADATAINT_CLAIM.
    # @param vbasoftware_database [String] Target database
    # @param edi_key [Integer] EDI Key
    # @param claim_key [Integer] Claim Key
    # @param edi_location [String] EDI Location
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringVBAResponse, Integer, Hash)>] StringVBAResponse data, response status code and response headers
    def get_claim_xml_with_http_info(vbasoftware_database, edi_key, claim_key, edi_location, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.get_claim_xml ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.get_claim_xml"
      end
      # verify the required parameter 'edi_key' is set
      if @api_client.config.client_side_validation && edi_key.nil?
        fail ArgumentError, "Missing the required parameter 'edi_key' when calling AdvClaimApi.get_claim_xml"
      end
      # verify the required parameter 'claim_key' is set
      if @api_client.config.client_side_validation && claim_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_key' when calling AdvClaimApi.get_claim_xml"
      end
      # verify the required parameter 'edi_location' is set
      if @api_client.config.client_side_validation && edi_location.nil?
        fail ArgumentError, "Missing the required parameter 'edi_location' when calling AdvClaimApi.get_claim_xml"
      end
      # resource path
      local_var_path = '/edi-key/{ediKey}/edi-claim-key/{claimKey}/edi-location/{ediLocation}/edi-xml'.sub('{' + 'ediKey' + '}', CGI.escape(edi_key.to_s)).sub('{' + 'claimKey' + '}', CGI.escape(claim_key.to_s)).sub('{' + 'ediLocation' + '}', CGI.escape(edi_location.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.get_claim_xml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#get_claim_xml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List matching benefit detail
    # List of potential benefit matches along with a match count for a specific claim service line.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param claim_seq [String] Claim Seq
    # @param [Hash] opts the optional parameters
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :provider_id Provider ID
    # @option opts [String] :provider_type Provider Type
    # @return [AdjudicateBenefitMatchDetailListVBAResponse]
    def list_adjudicate_benefit_match(vbasoftware_database, batch_number, batch_claim, claim_seq, opts = {})
      data, _status_code, _headers = list_adjudicate_benefit_match_with_http_info(vbasoftware_database, batch_number, batch_claim, claim_seq, opts)
      data
    end

    # List matching benefit detail
    # List of potential benefit matches along with a match count for a specific claim service line.
    # @param vbasoftware_database [String] Target database
    # @param batch_number [Integer] Batch Number
    # @param batch_claim [Integer] Batch Claim
    # @param claim_seq [String] Claim Seq
    # @param [Hash] opts the optional parameters
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :provider_id Provider ID
    # @option opts [String] :provider_type Provider Type
    # @return [Array<(AdjudicateBenefitMatchDetailListVBAResponse, Integer, Hash)>] AdjudicateBenefitMatchDetailListVBAResponse data, response status code and response headers
    def list_adjudicate_benefit_match_with_http_info(vbasoftware_database, batch_number, batch_claim, claim_seq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.list_adjudicate_benefit_match ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.list_adjudicate_benefit_match"
      end
      # verify the required parameter 'batch_number' is set
      if @api_client.config.client_side_validation && batch_number.nil?
        fail ArgumentError, "Missing the required parameter 'batch_number' when calling AdvClaimApi.list_adjudicate_benefit_match"
      end
      # verify the required parameter 'batch_claim' is set
      if @api_client.config.client_side_validation && batch_claim.nil?
        fail ArgumentError, "Missing the required parameter 'batch_claim' when calling AdvClaimApi.list_adjudicate_benefit_match"
      end
      # verify the required parameter 'claim_seq' is set
      if @api_client.config.client_side_validation && claim_seq.nil?
        fail ArgumentError, "Missing the required parameter 'claim_seq' when calling AdvClaimApi.list_adjudicate_benefit_match"
      end
      # resource path
      local_var_path = '/claim-batches/{batchNumber}/claims/{batchClaim}/details/{claimSeq}/adjudicate-benefit-match'.sub('{' + 'batchNumber' + '}', CGI.escape(batch_number.to_s)).sub('{' + 'batchClaim' + '}', CGI.escape(batch_claim.to_s)).sub('{' + 'claimSeq' + '}', CGI.escape(claim_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'planId'] = opts[:'plan_id'] if !opts[:'plan_id'].nil?
      query_params[:'providerId'] = opts[:'provider_id'] if !opts[:'provider_id'].nil?
      query_params[:'providerType'] = opts[:'provider_type'] if !opts[:'provider_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdjudicateBenefitMatchDetailListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.list_adjudicate_benefit_match",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#list_adjudicate_benefit_match\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Claim(s) to Batch
    # Return a selected list of claims to batch.
    # @param vbasoftware_database [String] Target database
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def return_claim_to_batch(vbasoftware_database, request_body, opts = {})
      return_claim_to_batch_with_http_info(vbasoftware_database, request_body, opts)
      nil
    end

    # Return Claim(s) to Batch
    # Return a selected list of claims to batch.
    # @param vbasoftware_database [String] Target database
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def return_claim_to_batch_with_http_info(vbasoftware_database, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.return_claim_to_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.return_claim_to_batch"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling AdvClaimApi.return_claim_to_batch"
      end
      # resource path
      local_var_path = '/claim-return-to-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.return_claim_to_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#return_claim_to_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Suspend Claims on Audit
    # This process will take a Claim Audit key and then suspend any claims associated with that Claim Audit (assuming that claim is not Funded).
    # @param vbasoftware_database [String] Target database
    # @param claim_audit_key [Integer] Claim Audit Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def suspend_from_audit(vbasoftware_database, claim_audit_key, opts = {})
      suspend_from_audit_with_http_info(vbasoftware_database, claim_audit_key, opts)
      nil
    end

    # Suspend Claims on Audit
    # This process will take a Claim Audit key and then suspend any claims associated with that Claim Audit (assuming that claim is not Funded).
    # @param vbasoftware_database [String] Target database
    # @param claim_audit_key [Integer] Claim Audit Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def suspend_from_audit_with_http_info(vbasoftware_database, claim_audit_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.suspend_from_audit ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.suspend_from_audit"
      end
      # verify the required parameter 'claim_audit_key' is set
      if @api_client.config.client_side_validation && claim_audit_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_audit_key' when calling AdvClaimApi.suspend_from_audit"
      end
      # resource path
      local_var_path = '/claim-suspend-from-audit'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'claimAuditKey'] = claim_audit_key

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.suspend_from_audit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#suspend_from_audit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Release Suspended Claims
    # Release a selection of suspended claims so they can be Funded.
    # @param vbasoftware_database [String] Target database
    # @param suspense_claim_list [Array<SuspenseClaimList>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def suspense_claim_release(vbasoftware_database, suspense_claim_list, opts = {})
      suspense_claim_release_with_http_info(vbasoftware_database, suspense_claim_list, opts)
      nil
    end

    # Release Suspended Claims
    # Release a selection of suspended claims so they can be Funded.
    # @param vbasoftware_database [String] Target database
    # @param suspense_claim_list [Array<SuspenseClaimList>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def suspense_claim_release_with_http_info(vbasoftware_database, suspense_claim_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.suspense_claim_release ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.suspense_claim_release"
      end
      # verify the required parameter 'suspense_claim_list' is set
      if @api_client.config.client_side_validation && suspense_claim_list.nil?
        fail ArgumentError, "Missing the required parameter 'suspense_claim_list' when calling AdvClaimApi.suspense_claim_release"
      end
      # resource path
      local_var_path = '/suspense-claim-release'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(suspense_claim_list)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.suspense_claim_release",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#suspense_claim_release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Suspended Claims
    # Return a selection of suspended claims to Batch so they can be reprocessed.  Assign an optional Ex Code to the claim returned.
    # @param vbasoftware_database [String] Target database
    # @param ex_code [String] Ex Code
    # @param suspense_claim_list [Array<SuspenseClaimList>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def suspense_claim_return(vbasoftware_database, ex_code, suspense_claim_list, opts = {})
      suspense_claim_return_with_http_info(vbasoftware_database, ex_code, suspense_claim_list, opts)
      nil
    end

    # Return Suspended Claims
    # Return a selection of suspended claims to Batch so they can be reprocessed.  Assign an optional Ex Code to the claim returned.
    # @param vbasoftware_database [String] Target database
    # @param ex_code [String] Ex Code
    # @param suspense_claim_list [Array<SuspenseClaimList>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def suspense_claim_return_with_http_info(vbasoftware_database, ex_code, suspense_claim_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvClaimApi.suspense_claim_return ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvClaimApi.suspense_claim_return"
      end
      # verify the required parameter 'ex_code' is set
      if @api_client.config.client_side_validation && ex_code.nil?
        fail ArgumentError, "Missing the required parameter 'ex_code' when calling AdvClaimApi.suspense_claim_return"
      end
      # verify the required parameter 'suspense_claim_list' is set
      if @api_client.config.client_side_validation && suspense_claim_list.nil?
        fail ArgumentError, "Missing the required parameter 'suspense_claim_list' when calling AdvClaimApi.suspense_claim_return"
      end
      # resource path
      local_var_path = '/suspense-claim-return/{exCode}'.sub('{' + 'exCode' + '}', CGI.escape(ex_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(suspense_claim_list)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvClaimApi.suspense_claim_return",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvClaimApi#suspense_claim_return\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
