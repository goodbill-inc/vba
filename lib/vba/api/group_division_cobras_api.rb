=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class GroupDivisionCobrasApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create GroupDivisionCobra
    # Creates a new GroupDivisionCobra
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param cobra_division_id [String] Cobra Division ID
    # @param [Hash] opts the optional parameters
    # @return [GroupDivisionCobraVBAResponse]
    def create_group_division_cobra(vbasoftware_database, group_id, division_id, cobra_division_id, opts = {})
      data, _status_code, _headers = create_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, cobra_division_id, opts)
      data
    end

    # Create GroupDivisionCobra
    # Creates a new GroupDivisionCobra
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param cobra_division_id [String] Cobra Division ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupDivisionCobraVBAResponse, Integer, Hash)>] GroupDivisionCobraVBAResponse data, response status code and response headers
    def create_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, cobra_division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupDivisionCobrasApi.create_group_division_cobra ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupDivisionCobrasApi.create_group_division_cobra"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupDivisionCobrasApi.create_group_division_cobra"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupDivisionCobrasApi.create_group_division_cobra"
      end
      # verify the required parameter 'cobra_division_id' is set
      if @api_client.config.client_side_validation && cobra_division_id.nil?
        fail ArgumentError, "Missing the required parameter 'cobra_division_id' when calling GroupDivisionCobrasApi.create_group_division_cobra"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/cobra-divisions/{cobraDivisionID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'cobraDivisionID' + '}', CGI.escape(cobra_division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupDivisionCobraVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupDivisionCobrasApi.create_group_division_cobra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupDivisionCobrasApi#create_group_division_cobra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete GroupDivisionCobra
    # Deletes an GroupDivisionCobra
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param cobra_division_id [String] Cobra Division ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_division_cobra(vbasoftware_database, group_id, division_id, cobra_division_id, opts = {})
      delete_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, cobra_division_id, opts)
      nil
    end

    # Delete GroupDivisionCobra
    # Deletes an GroupDivisionCobra
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param cobra_division_id [String] Cobra Division ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, cobra_division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupDivisionCobrasApi.delete_group_division_cobra ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupDivisionCobrasApi.delete_group_division_cobra"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupDivisionCobrasApi.delete_group_division_cobra"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupDivisionCobrasApi.delete_group_division_cobra"
      end
      # verify the required parameter 'cobra_division_id' is set
      if @api_client.config.client_side_validation && cobra_division_id.nil?
        fail ArgumentError, "Missing the required parameter 'cobra_division_id' when calling GroupDivisionCobrasApi.delete_group_division_cobra"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/cobra-divisions/{cobraDivisionID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'cobraDivisionID' + '}', CGI.escape(cobra_division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupDivisionCobrasApi.delete_group_division_cobra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupDivisionCobrasApi#delete_group_division_cobra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get GroupDivisionCobra
    # Gets GroupDivisionCobra
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param cobra_division_id [String] Cobra Division ID
    # @param [Hash] opts the optional parameters
    # @return [GroupDivisionCobraVBAResponse]
    def get_group_division_cobra(vbasoftware_database, group_id, division_id, cobra_division_id, opts = {})
      data, _status_code, _headers = get_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, cobra_division_id, opts)
      data
    end

    # Get GroupDivisionCobra
    # Gets GroupDivisionCobra
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param cobra_division_id [String] Cobra Division ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupDivisionCobraVBAResponse, Integer, Hash)>] GroupDivisionCobraVBAResponse data, response status code and response headers
    def get_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, cobra_division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupDivisionCobrasApi.get_group_division_cobra ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupDivisionCobrasApi.get_group_division_cobra"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupDivisionCobrasApi.get_group_division_cobra"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupDivisionCobrasApi.get_group_division_cobra"
      end
      # verify the required parameter 'cobra_division_id' is set
      if @api_client.config.client_side_validation && cobra_division_id.nil?
        fail ArgumentError, "Missing the required parameter 'cobra_division_id' when calling GroupDivisionCobrasApi.get_group_division_cobra"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/cobra-divisions/{cobraDivisionID}'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'cobraDivisionID' + '}', CGI.escape(cobra_division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupDivisionCobraVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupDivisionCobrasApi.get_group_division_cobra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupDivisionCobrasApi#get_group_division_cobra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List GroupDivisionCobra
    # Lists all GroupDivisionCobra for the given groupID and divisionID
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [GroupDivisionCobraListVBAResponse]
    def list_group_division_cobra(vbasoftware_database, group_id, division_id, opts = {})
      data, _status_code, _headers = list_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, opts)
      data
    end

    # List GroupDivisionCobra
    # Lists all GroupDivisionCobra for the given groupID and divisionID
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(GroupDivisionCobraListVBAResponse, Integer, Hash)>] GroupDivisionCobraListVBAResponse data, response status code and response headers
    def list_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupDivisionCobrasApi.list_group_division_cobra ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupDivisionCobrasApi.list_group_division_cobra"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupDivisionCobrasApi.list_group_division_cobra"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupDivisionCobrasApi.list_group_division_cobra"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/cobra-divisions'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupDivisionCobraListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupDivisionCobrasApi.list_group_division_cobra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupDivisionCobrasApi#list_group_division_cobra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Batch GroupDivisionCobra
    # Create multiple GroupDivisionCobra at once.  If the entity does not exist, it will be created.  If the entity already exists, an error will come back for that item.  These entities are not editable. Delete and recreate to edit.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_division_cobra [Array<GroupDivisionCobra>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_group_division_cobra(vbasoftware_database, group_id, division_id, group_division_cobra, opts = {})
      data, _status_code, _headers = update_batch_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, group_division_cobra, opts)
      data
    end

    # Create Batch GroupDivisionCobra
    # Create multiple GroupDivisionCobra at once.  If the entity does not exist, it will be created.  If the entity already exists, an error will come back for that item.  These entities are not editable. Delete and recreate to edit.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_division_cobra [Array<GroupDivisionCobra>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_group_division_cobra_with_http_info(vbasoftware_database, group_id, division_id, group_division_cobra, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupDivisionCobrasApi.update_batch_group_division_cobra ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling GroupDivisionCobrasApi.update_batch_group_division_cobra"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupDivisionCobrasApi.update_batch_group_division_cobra"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling GroupDivisionCobrasApi.update_batch_group_division_cobra"
      end
      # verify the required parameter 'group_division_cobra' is set
      if @api_client.config.client_side_validation && group_division_cobra.nil?
        fail ArgumentError, "Missing the required parameter 'group_division_cobra' when calling GroupDivisionCobrasApi.update_batch_group_division_cobra"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/cobra-divisions-batch'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(group_division_cobra)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"GroupDivisionCobrasApi.update_batch_group_division_cobra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupDivisionCobrasApi#update_batch_group_division_cobra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
