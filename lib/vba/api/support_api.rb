=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class SupportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Support User in a client environment
    # This endpoint allows you to create a support user and add them to a specific client's database.
    # @param vbasoftware_database [String] Support Database
    # @param target_vbasoftware_client_id [String] Target Client ID
    # @param target_vbasoftware_client_code [String] Target Client Code
    # @param target_vbasoftware_database [String] Target Client Database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id_to_clone Client User ID to Clone
    # @option opts [Boolean] :make_admin Make Administrator (default to false)
    # @return [UsersVBAResponse]
    def create_support_user(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts = {})
      data, _status_code, _headers = create_support_user_with_http_info(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts)
      data
    end

    # Create Support User in a client environment
    # This endpoint allows you to create a support user and add them to a specific client&#39;s database.
    # @param vbasoftware_database [String] Support Database
    # @param target_vbasoftware_client_id [String] Target Client ID
    # @param target_vbasoftware_client_code [String] Target Client Code
    # @param target_vbasoftware_database [String] Target Client Database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id_to_clone Client User ID to Clone
    # @option opts [Boolean] :make_admin Make Administrator (default to false)
    # @return [Array<(UsersVBAResponse, Integer, Hash)>] UsersVBAResponse data, response status code and response headers
    def create_support_user_with_http_info(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.create_support_user ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SupportApi.create_support_user"
      end
      # verify the required parameter 'target_vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && target_vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_client_id' when calling SupportApi.create_support_user"
      end
      # verify the required parameter 'target_vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && target_vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_client_code' when calling SupportApi.create_support_user"
      end
      # verify the required parameter 'target_vbasoftware_database' is set
      if @api_client.config.client_side_validation && target_vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_database' when calling SupportApi.create_support_user"
      end
      # resource path
      local_var_path = '/support/client-users/add-me'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userIdToClone'] = opts[:'user_id_to_clone'] if !opts[:'user_id_to_clone'].nil?
      query_params[:'makeAdmin'] = opts[:'make_admin'] if !opts[:'make_admin'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database
      header_params[:'target-vbasoftware-client-id'] = target_vbasoftware_client_id
      header_params[:'target-vbasoftware-client-code'] = target_vbasoftware_client_code
      header_params[:'target-vbasoftware-database'] = target_vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SupportApi.create_support_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#create_support_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disables the Support User in a client environment
    # This endpoint allows you to disable the currently authenticated Support user within the client's environment instead of deleting them.
    # @param vbasoftware_database [String] Support Database
    # @param target_vbasoftware_client_id [String] Target Client ID
    # @param target_vbasoftware_client_code [String] Target Client Code
    # @param target_vbasoftware_database [String] Target Client Database
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_support_user(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts = {})
      disable_support_user_with_http_info(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts)
      nil
    end

    # Disables the Support User in a client environment
    # This endpoint allows you to disable the currently authenticated Support user within the client&#39;s environment instead of deleting them.
    # @param vbasoftware_database [String] Support Database
    # @param target_vbasoftware_client_id [String] Target Client ID
    # @param target_vbasoftware_client_code [String] Target Client Code
    # @param target_vbasoftware_database [String] Target Client Database
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_support_user_with_http_info(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.disable_support_user ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SupportApi.disable_support_user"
      end
      # verify the required parameter 'target_vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && target_vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_client_id' when calling SupportApi.disable_support_user"
      end
      # verify the required parameter 'target_vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && target_vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_client_code' when calling SupportApi.disable_support_user"
      end
      # verify the required parameter 'target_vbasoftware_database' is set
      if @api_client.config.client_side_validation && target_vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_database' when calling SupportApi.disable_support_user"
      end
      # resource path
      local_var_path = '/support/client-users/disable-me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database
      header_params[:'target-vbasoftware-client-id'] = target_vbasoftware_client_id
      header_params[:'target-vbasoftware-client-code'] = target_vbasoftware_client_code
      header_params[:'target-vbasoftware-database'] = target_vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SupportApi.disable_support_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#disable_support_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Client
    # Gets the client details for the given client id and client code.
    # @param vbasoftware_database [String] Support Database
    # @param client_id [String] Client ID
    # @param client_code [String] Client Code
    # @param [Hash] opts the optional parameters
    # @return [VBAClientVBAResponse]
    def get_client(vbasoftware_database, client_id, client_code, opts = {})
      data, _status_code, _headers = get_client_with_http_info(vbasoftware_database, client_id, client_code, opts)
      data
    end

    # Get Client
    # Gets the client details for the given client id and client code.
    # @param vbasoftware_database [String] Support Database
    # @param client_id [String] Client ID
    # @param client_code [String] Client Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAClientVBAResponse, Integer, Hash)>] VBAClientVBAResponse data, response status code and response headers
    def get_client_with_http_info(vbasoftware_database, client_id, client_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.get_client ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SupportApi.get_client"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling SupportApi.get_client"
      end
      # verify the required parameter 'client_code' is set
      if @api_client.config.client_side_validation && client_code.nil?
        fail ArgumentError, "Missing the required parameter 'client_code' when calling SupportApi.get_client"
      end
      # resource path
      local_var_path = '/support/client'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'clientId'] = client_id
      query_params[:'clientCode'] = client_code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAClientVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SupportApi.get_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#get_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of all Users in a client environment
    # 
    # @param vbasoftware_database [String] Support Database
    # @param target_vbasoftware_client_id [String] Target Client ID
    # @param target_vbasoftware_client_code [String] Target Client Code
    # @param target_vbasoftware_database [String] Target Client Database
    # @param [Hash] opts the optional parameters
    # @return [UsersListVBAResponse]
    def list_client_users(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts = {})
      data, _status_code, _headers = list_client_users_with_http_info(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts)
      data
    end

    # List of all Users in a client environment
    # 
    # @param vbasoftware_database [String] Support Database
    # @param target_vbasoftware_client_id [String] Target Client ID
    # @param target_vbasoftware_client_code [String] Target Client Code
    # @param target_vbasoftware_database [String] Target Client Database
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersListVBAResponse, Integer, Hash)>] UsersListVBAResponse data, response status code and response headers
    def list_client_users_with_http_info(vbasoftware_database, target_vbasoftware_client_id, target_vbasoftware_client_code, target_vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.list_client_users ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SupportApi.list_client_users"
      end
      # verify the required parameter 'target_vbasoftware_client_id' is set
      if @api_client.config.client_side_validation && target_vbasoftware_client_id.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_client_id' when calling SupportApi.list_client_users"
      end
      # verify the required parameter 'target_vbasoftware_client_code' is set
      if @api_client.config.client_side_validation && target_vbasoftware_client_code.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_client_code' when calling SupportApi.list_client_users"
      end
      # verify the required parameter 'target_vbasoftware_database' is set
      if @api_client.config.client_side_validation && target_vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'target_vbasoftware_database' when calling SupportApi.list_client_users"
      end
      # resource path
      local_var_path = '/support/client-users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database
      header_params[:'target-vbasoftware-client-id'] = target_vbasoftware_client_id
      header_params[:'target-vbasoftware-client-code'] = target_vbasoftware_client_code
      header_params[:'target-vbasoftware-database'] = target_vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SupportApi.list_client_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#list_client_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List All Clients
    # Lists the clients
    # @param vbasoftware_database [String] Support Database
    # @param [Hash] opts the optional parameters
    # @return [VBAClientListVBAResponse]
    def list_clients(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_clients_with_http_info(vbasoftware_database, opts)
      data
    end

    # List All Clients
    # Lists the clients
    # @param vbasoftware_database [String] Support Database
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAClientListVBAResponse, Integer, Hash)>] VBAClientListVBAResponse data, response status code and response headers
    def list_clients_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupportApi.list_clients ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SupportApi.list_clients"
      end
      # resource path
      local_var_path = '/support/clients'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAClientListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SupportApi.list_clients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupportApi#list_clients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
