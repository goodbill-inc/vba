=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PremiumDistributionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PremDistribution
    # Creates a new PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution [PremDistribution] 
    # @param [Hash] opts the optional parameters
    # @return [PremDistributionVBAResponse]
    def create_prem_distribution(vbasoftware_database, prem_distribution, opts = {})
      data, _status_code, _headers = create_prem_distribution_with_http_info(vbasoftware_database, prem_distribution, opts)
      data
    end

    # Create PremDistribution
    # Creates a new PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution [PremDistribution] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremDistributionVBAResponse, Integer, Hash)>] PremDistributionVBAResponse data, response status code and response headers
    def create_prem_distribution_with_http_info(vbasoftware_database, prem_distribution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.create_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.create_prem_distribution"
      end
      # verify the required parameter 'prem_distribution' is set
      if @api_client.config.client_side_validation && prem_distribution.nil?
        fail ArgumentError, "Missing the required parameter 'prem_distribution' when calling PremiumDistributionsApi.create_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_distribution)

      # return_type
      return_type = opts[:debug_return_type] || 'PremDistributionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.create_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#create_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PremDistribution
    # Deletes an PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution_key [Integer] PremDistribution Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_prem_distribution(vbasoftware_database, prem_distribution_key, opts = {})
      delete_prem_distribution_with_http_info(vbasoftware_database, prem_distribution_key, opts)
      nil
    end

    # Delete PremDistribution
    # Deletes an PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution_key [Integer] PremDistribution Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_prem_distribution_with_http_info(vbasoftware_database, prem_distribution_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.delete_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.delete_prem_distribution"
      end
      # verify the required parameter 'prem_distribution_key' is set
      if @api_client.config.client_side_validation && prem_distribution_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_distribution_key' when calling PremiumDistributionsApi.delete_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions/{premDistributionKey}'.sub('{' + 'premDistributionKey' + '}', CGI.escape(prem_distribution_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.delete_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#delete_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Premium Distributions
    # Generate the Premium Distributions for the selected Group and As of Date.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_prem_distribution(vbasoftware_database, group_id, as_of_date, opts = {})
      generate_prem_distribution_with_http_info(vbasoftware_database, group_id, as_of_date, opts)
      nil
    end

    # Create Premium Distributions
    # Generate the Premium Distributions for the selected Group and As of Date.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_prem_distribution_with_http_info(vbasoftware_database, group_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.generate_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.generate_prem_distribution"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PremiumDistributionsApi.generate_prem_distribution"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling PremiumDistributionsApi.generate_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions-generate/{groupId}/{asOfDate}'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s)).sub('{' + 'asOfDate' + '}', CGI.escape(as_of_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.generate_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#generate_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Premium Distributions Checks
    # Generate the Premium Distribution Checks for the selected Payor and Payee.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param check_number [String] Check Number
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_prem_distribution_check(vbasoftware_database, payee_id, payor_id, account_key, check_number, opts = {})
      generate_prem_distribution_check_with_http_info(vbasoftware_database, payee_id, payor_id, account_key, check_number, opts)
      nil
    end

    # Create Premium Distributions Checks
    # Generate the Premium Distribution Checks for the selected Payor and Payee.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param check_number [String] Check Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_prem_distribution_check_with_http_info(vbasoftware_database, payee_id, payor_id, account_key, check_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.generate_prem_distribution_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling PremiumDistributionsApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'payor_id' is set
      if @api_client.config.client_side_validation && payor_id.nil?
        fail ArgumentError, "Missing the required parameter 'payor_id' when calling PremiumDistributionsApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'account_key' is set
      if @api_client.config.client_side_validation && account_key.nil?
        fail ArgumentError, "Missing the required parameter 'account_key' when calling PremiumDistributionsApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'check_number' is set
      if @api_client.config.client_side_validation && check_number.nil?
        fail ArgumentError, "Missing the required parameter 'check_number' when calling PremiumDistributionsApi.generate_prem_distribution_check"
      end
      # resource path
      local_var_path = '/premium-distributions-generate-check/{payeeId}/{payorId}/{accountKey}/{checkNumber}'.sub('{' + 'payeeId' + '}', CGI.escape(payee_id.to_s)).sub('{' + 'payorId' + '}', CGI.escape(payor_id.to_s)).sub('{' + 'accountKey' + '}', CGI.escape(account_key.to_s)).sub('{' + 'checkNumber' + '}', CGI.escape(check_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.generate_prem_distribution_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#generate_prem_distribution_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PremDistribution
    # Gets PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution_key [Integer] PremDistribution Key
    # @param [Hash] opts the optional parameters
    # @return [PremDistributionVBAResponse]
    def get_prem_distribution(vbasoftware_database, prem_distribution_key, opts = {})
      data, _status_code, _headers = get_prem_distribution_with_http_info(vbasoftware_database, prem_distribution_key, opts)
      data
    end

    # Get PremDistribution
    # Gets PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution_key [Integer] PremDistribution Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremDistributionVBAResponse, Integer, Hash)>] PremDistributionVBAResponse data, response status code and response headers
    def get_prem_distribution_with_http_info(vbasoftware_database, prem_distribution_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.get_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.get_prem_distribution"
      end
      # verify the required parameter 'prem_distribution_key' is set
      if @api_client.config.client_side_validation && prem_distribution_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_distribution_key' when calling PremiumDistributionsApi.get_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions/{premDistributionKey}'.sub('{' + 'premDistributionKey' + '}', CGI.escape(prem_distribution_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremDistributionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.get_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#get_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PremDistribution
    # Lists all PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PremDistributionListVBAResponse]
    def list_prem_distribution(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_prem_distribution_with_http_info(vbasoftware_database, opts)
      data
    end

    # List PremDistribution
    # Lists all PremDistribution
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PremDistributionListVBAResponse, Integer, Hash)>] PremDistributionListVBAResponse data, response status code and response headers
    def list_prem_distribution_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.list_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.list_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremDistributionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.list_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#list_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of Distribution by Group that have not been distributed.
    # List of Distribution by Group that have not been distributed.
    # @param vbasoftware_database [String] Target database
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [GetPremDistributionListResultListVBAResponse]
    def list_prem_distribution_available(vbasoftware_database, as_of_date, opts = {})
      data, _status_code, _headers = list_prem_distribution_available_with_http_info(vbasoftware_database, as_of_date, opts)
      data
    end

    # List of Distribution by Group that have not been distributed.
    # List of Distribution by Group that have not been distributed.
    # @param vbasoftware_database [String] Target database
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPremDistributionListResultListVBAResponse, Integer, Hash)>] GetPremDistributionListResultListVBAResponse data, response status code and response headers
    def list_prem_distribution_available_with_http_info(vbasoftware_database, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.list_prem_distribution_available ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.list_prem_distribution_available"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling PremiumDistributionsApi.list_prem_distribution_available"
      end
      # resource path
      local_var_path = '/premium-distributions-available/{asOfDate}'.sub('{' + 'asOfDate' + '}', CGI.escape(as_of_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPremDistributionListResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.list_prem_distribution_available",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#list_prem_distribution_available\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PremDistribution
    # Create or Update multiple PremDistribution at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution [Array<PremDistribution>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_prem_distribution(vbasoftware_database, prem_distribution, opts = {})
      data, _status_code, _headers = update_batch_prem_distribution_with_http_info(vbasoftware_database, prem_distribution, opts)
      data
    end

    # Create or Update Batch PremDistribution
    # Create or Update multiple PremDistribution at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution [Array<PremDistribution>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_prem_distribution_with_http_info(vbasoftware_database, prem_distribution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.update_batch_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.update_batch_prem_distribution"
      end
      # verify the required parameter 'prem_distribution' is set
      if @api_client.config.client_side_validation && prem_distribution.nil?
        fail ArgumentError, "Missing the required parameter 'prem_distribution' when calling PremiumDistributionsApi.update_batch_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_distribution)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.update_batch_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#update_batch_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PremDistribution
    # Updates a specific PremDistribution.
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution_key [Integer] PremDistribution Key
    # @param prem_distribution [PremDistribution] 
    # @param [Hash] opts the optional parameters
    # @return [PremDistributionVBAResponse]
    def update_prem_distribution(vbasoftware_database, prem_distribution_key, prem_distribution, opts = {})
      data, _status_code, _headers = update_prem_distribution_with_http_info(vbasoftware_database, prem_distribution_key, prem_distribution, opts)
      data
    end

    # Update PremDistribution
    # Updates a specific PremDistribution.
    # @param vbasoftware_database [String] Target database
    # @param prem_distribution_key [Integer] PremDistribution Key
    # @param prem_distribution [PremDistribution] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremDistributionVBAResponse, Integer, Hash)>] PremDistributionVBAResponse data, response status code and response headers
    def update_prem_distribution_with_http_info(vbasoftware_database, prem_distribution_key, prem_distribution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumDistributionsApi.update_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumDistributionsApi.update_prem_distribution"
      end
      # verify the required parameter 'prem_distribution_key' is set
      if @api_client.config.client_side_validation && prem_distribution_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_distribution_key' when calling PremiumDistributionsApi.update_prem_distribution"
      end
      # verify the required parameter 'prem_distribution' is set
      if @api_client.config.client_side_validation && prem_distribution.nil?
        fail ArgumentError, "Missing the required parameter 'prem_distribution' when calling PremiumDistributionsApi.update_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions/{premDistributionKey}'.sub('{' + 'premDistributionKey' + '}', CGI.escape(prem_distribution_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_distribution)

      # return_type
      return_type = opts[:debug_return_type] || 'PremDistributionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumDistributionsApi.update_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumDistributionsApi#update_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
