=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class IDCodeValuesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create IDCodeValue
    # Creates a new IDCodeValue
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value [IDCodeValue] 
    # @param [Hash] opts the optional parameters
    # @return [IDCodeValueVBAResponse]
    def create_id_code_value(vbasoftware_database, type, id_code, id_code_value, opts = {})
      data, _status_code, _headers = create_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value, opts)
      data
    end

    # Create IDCodeValue
    # Creates a new IDCodeValue
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value [IDCodeValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IDCodeValueVBAResponse, Integer, Hash)>] IDCodeValueVBAResponse data, response status code and response headers
    def create_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.create_id_code_value ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.create_id_code_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.create_id_code_value"
      end
      # verify the required parameter 'id_code' is set
      if @api_client.config.client_side_validation && id_code.nil?
        fail ArgumentError, "Missing the required parameter 'id_code' when calling IDCodeValuesApi.create_id_code_value"
      end
      # verify the required parameter 'id_code_value' is set
      if @api_client.config.client_side_validation && id_code_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_code_value' when calling IDCodeValuesApi.create_id_code_value"
      end
      # resource path
      local_var_path = '/id-types/{type}/id-codes/{idCode}/id-code-values'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'idCode' + '}', CGI.escape(id_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(id_code_value)

      # return_type
      return_type = opts[:debug_return_type] || 'IDCodeValueVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.create_id_code_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#create_id_code_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete IDCodeValue
    # Deletes an IDCodeValue
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value_key [Integer] IDCodeValue Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_id_code_value(vbasoftware_database, type, id_code, id_code_value_key, opts = {})
      delete_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value_key, opts)
      nil
    end

    # Delete IDCodeValue
    # Deletes an IDCodeValue
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value_key [Integer] IDCodeValue Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.delete_id_code_value ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.delete_id_code_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.delete_id_code_value"
      end
      # verify the required parameter 'id_code' is set
      if @api_client.config.client_side_validation && id_code.nil?
        fail ArgumentError, "Missing the required parameter 'id_code' when calling IDCodeValuesApi.delete_id_code_value"
      end
      # verify the required parameter 'id_code_value_key' is set
      if @api_client.config.client_side_validation && id_code_value_key.nil?
        fail ArgumentError, "Missing the required parameter 'id_code_value_key' when calling IDCodeValuesApi.delete_id_code_value"
      end
      # resource path
      local_var_path = '/id-types/{type}/id-codes/{idCode}/id-code-values/{idCodeValueKey}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'idCode' + '}', CGI.escape(id_code.to_s)).sub('{' + 'idCodeValueKey' + '}', CGI.escape(id_code_value_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.delete_id_code_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#delete_id_code_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get IDCodeValue
    # Gets IDCodeValue
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value_key [Integer] IDCodeValue Key
    # @param [Hash] opts the optional parameters
    # @return [IDCodeValueVBAResponse]
    def get_id_code_value(vbasoftware_database, type, id_code, id_code_value_key, opts = {})
      data, _status_code, _headers = get_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value_key, opts)
      data
    end

    # Get IDCodeValue
    # Gets IDCodeValue
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value_key [Integer] IDCodeValue Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(IDCodeValueVBAResponse, Integer, Hash)>] IDCodeValueVBAResponse data, response status code and response headers
    def get_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.get_id_code_value ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.get_id_code_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.get_id_code_value"
      end
      # verify the required parameter 'id_code' is set
      if @api_client.config.client_side_validation && id_code.nil?
        fail ArgumentError, "Missing the required parameter 'id_code' when calling IDCodeValuesApi.get_id_code_value"
      end
      # verify the required parameter 'id_code_value_key' is set
      if @api_client.config.client_side_validation && id_code_value_key.nil?
        fail ArgumentError, "Missing the required parameter 'id_code_value_key' when calling IDCodeValuesApi.get_id_code_value"
      end
      # resource path
      local_var_path = '/id-types/{type}/id-codes/{idCode}/id-code-values/{idCodeValueKey}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'idCode' + '}', CGI.escape(id_code.to_s)).sub('{' + 'idCodeValueKey' + '}', CGI.escape(id_code_value_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IDCodeValueVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.get_id_code_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#get_id_code_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IDCodeValue
    # Lists all IDCodeValue for the given type and idCode
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [IDCodeValueListVBAResponse]
    def list_id_code_value(vbasoftware_database, type, id_code, opts = {})
      data, _status_code, _headers = list_id_code_value_with_http_info(vbasoftware_database, type, id_code, opts)
      data
    end

    # List IDCodeValue
    # Lists all IDCodeValue for the given type and idCode
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(IDCodeValueListVBAResponse, Integer, Hash)>] IDCodeValueListVBAResponse data, response status code and response headers
    def list_id_code_value_with_http_info(vbasoftware_database, type, id_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.list_id_code_value ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.list_id_code_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.list_id_code_value"
      end
      # verify the required parameter 'id_code' is set
      if @api_client.config.client_side_validation && id_code.nil?
        fail ArgumentError, "Missing the required parameter 'id_code' when calling IDCodeValuesApi.list_id_code_value"
      end
      # resource path
      local_var_path = '/id-types/{type}/id-codes/{idCode}/id-code-values'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'idCode' + '}', CGI.escape(id_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IDCodeValueListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.list_id_code_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#list_id_code_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List IDCodeValue based on Source
    # Lists all IDCodeValue for the given type and specific source               Based on IDCodeType we will return different values.                 AUTH                @SourceColumn1 = auth_number                 BENEFIT                @SourceColumn1 = benefit_code                 CAREPLAN                @SourceColumn1 = case_key                 CARRIER                @SourceColumn1 = carrier_key                 CASE                @SourceColumn1 = case_key                 CLAIM                @SourceColumn1 = batch_number                @SourceColumn2 = batch_claim                 CLMBTCH                @SourceColumn1 = batch_number                 COMMAGENCY                @SourceColumn1 = commissionagency_key                 COMMREP                @SourceColumn1 = commissionrep_key                 COMPANYDATA                @SourceColumn1 = key_value                 CONTRACTRIDER                @SourceColumn1 = group_id                @SourceColumn2 = division_id                @SourceColumn3 = coverage_start                @SourceColumn4 = plan_id                @SourceColumn5 = benefit_code                 CREDQUESTION                @SourceColumn1 = credattestationquestion_key                 DISREASON                @SourceColumn1 = reason_id                 FUNDINGACCOUNT                @SourceColumn1 = account_key                 GRIEV                @SourceColumn1 = grievance_key                 GROUP                @SourceColumn1 = group_id                 GROUPDIVISION                @SourceColumn1 = group_id                @SourceColumn1 = division_id                 GROUPNETWORK                @SourceColumn1 = group_id                @SourceColumn2 = division_id                @SourceColumn3 = coverage_start                @SourceColumn4 = networkid                 GROUPPLAN                @SourceColumn1 = group_id                @SourceColumn2 = division_id                @SourceColumn3 = plan_id                 INTRFACE                @SourceColumn1 = vbainterface_key                 MEMBER                @SourceColumn1 = subscriber_id                @SourceColumn2 = member_seq                 NETWORK                @SourceColumn1 = networkid                 PAYEE                @SourceColumn1 = payee_id                 PAYOR                @SourceColumn1 = payor_id                 PLAN                @SourceColumn1 = plan_id                 PROV                @SourceColumn1 = provider_id                 PROVCRED                @SourceColumn1 = providercred_key                 REINS                @SourceColumn1 = reinscontract_key                 SUBSCRIBER                @SourceColumn1 = subscriber_id                 USER                @SourceColumn1 = user_id                  
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param column_name1 [String] Column_Name1
    # @param key_value1 [String] Key_Value1
    # @param [Hash] opts the optional parameters
    # @option opts [String] :column_name2 Column_Name2
    # @option opts [String] :key_value2 Key_Value2
    # @option opts [String] :column_name3 Column_Name3
    # @option opts [String] :key_value3 Key_Value3
    # @option opts [String] :column_name4 Column_Name4
    # @option opts [String] :key_value4 Key_Value4
    # @option opts [String] :column_name5 Column_Name5
    # @option opts [String] :key_value5 Key_Value5
    # @return [IDCodeValueResultBySourceListVBAResponse]
    def list_id_code_value_by_source(vbasoftware_database, type, column_name1, key_value1, opts = {})
      data, _status_code, _headers = list_id_code_value_by_source_with_http_info(vbasoftware_database, type, column_name1, key_value1, opts)
      data
    end

    # List IDCodeValue based on Source
    # Lists all IDCodeValue for the given type and specific source               Based on IDCodeType we will return different values.                 AUTH                @SourceColumn1 &#x3D; auth_number                 BENEFIT                @SourceColumn1 &#x3D; benefit_code                 CAREPLAN                @SourceColumn1 &#x3D; case_key                 CARRIER                @SourceColumn1 &#x3D; carrier_key                 CASE                @SourceColumn1 &#x3D; case_key                 CLAIM                @SourceColumn1 &#x3D; batch_number                @SourceColumn2 &#x3D; batch_claim                 CLMBTCH                @SourceColumn1 &#x3D; batch_number                 COMMAGENCY                @SourceColumn1 &#x3D; commissionagency_key                 COMMREP                @SourceColumn1 &#x3D; commissionrep_key                 COMPANYDATA                @SourceColumn1 &#x3D; key_value                 CONTRACTRIDER                @SourceColumn1 &#x3D; group_id                @SourceColumn2 &#x3D; division_id                @SourceColumn3 &#x3D; coverage_start                @SourceColumn4 &#x3D; plan_id                @SourceColumn5 &#x3D; benefit_code                 CREDQUESTION                @SourceColumn1 &#x3D; credattestationquestion_key                 DISREASON                @SourceColumn1 &#x3D; reason_id                 FUNDINGACCOUNT                @SourceColumn1 &#x3D; account_key                 GRIEV                @SourceColumn1 &#x3D; grievance_key                 GROUP                @SourceColumn1 &#x3D; group_id                 GROUPDIVISION                @SourceColumn1 &#x3D; group_id                @SourceColumn1 &#x3D; division_id                 GROUPNETWORK                @SourceColumn1 &#x3D; group_id                @SourceColumn2 &#x3D; division_id                @SourceColumn3 &#x3D; coverage_start                @SourceColumn4 &#x3D; networkid                 GROUPPLAN                @SourceColumn1 &#x3D; group_id                @SourceColumn2 &#x3D; division_id                @SourceColumn3 &#x3D; plan_id                 INTRFACE                @SourceColumn1 &#x3D; vbainterface_key                 MEMBER                @SourceColumn1 &#x3D; subscriber_id                @SourceColumn2 &#x3D; member_seq                 NETWORK                @SourceColumn1 &#x3D; networkid                 PAYEE                @SourceColumn1 &#x3D; payee_id                 PAYOR                @SourceColumn1 &#x3D; payor_id                 PLAN                @SourceColumn1 &#x3D; plan_id                 PROV                @SourceColumn1 &#x3D; provider_id                 PROVCRED                @SourceColumn1 &#x3D; providercred_key                 REINS                @SourceColumn1 &#x3D; reinscontract_key                 SUBSCRIBER                @SourceColumn1 &#x3D; subscriber_id                 USER                @SourceColumn1 &#x3D; user_id                  
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param column_name1 [String] Column_Name1
    # @param key_value1 [String] Key_Value1
    # @param [Hash] opts the optional parameters
    # @option opts [String] :column_name2 Column_Name2
    # @option opts [String] :key_value2 Key_Value2
    # @option opts [String] :column_name3 Column_Name3
    # @option opts [String] :key_value3 Key_Value3
    # @option opts [String] :column_name4 Column_Name4
    # @option opts [String] :key_value4 Key_Value4
    # @option opts [String] :column_name5 Column_Name5
    # @option opts [String] :key_value5 Key_Value5
    # @return [Array<(IDCodeValueResultBySourceListVBAResponse, Integer, Hash)>] IDCodeValueResultBySourceListVBAResponse data, response status code and response headers
    def list_id_code_value_by_source_with_http_info(vbasoftware_database, type, column_name1, key_value1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.list_id_code_value_by_source ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.list_id_code_value_by_source"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.list_id_code_value_by_source"
      end
      # verify the required parameter 'column_name1' is set
      if @api_client.config.client_side_validation && column_name1.nil?
        fail ArgumentError, "Missing the required parameter 'column_name1' when calling IDCodeValuesApi.list_id_code_value_by_source"
      end
      # verify the required parameter 'key_value1' is set
      if @api_client.config.client_side_validation && key_value1.nil?
        fail ArgumentError, "Missing the required parameter 'key_value1' when calling IDCodeValuesApi.list_id_code_value_by_source"
      end
      # resource path
      local_var_path = '/id-code-values-by-source'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'columnName1'] = column_name1
      query_params[:'keyValue1'] = key_value1
      query_params[:'columnName2'] = opts[:'column_name2'] if !opts[:'column_name2'].nil?
      query_params[:'keyValue2'] = opts[:'key_value2'] if !opts[:'key_value2'].nil?
      query_params[:'columnName3'] = opts[:'column_name3'] if !opts[:'column_name3'].nil?
      query_params[:'keyValue3'] = opts[:'key_value3'] if !opts[:'key_value3'].nil?
      query_params[:'columnName4'] = opts[:'column_name4'] if !opts[:'column_name4'].nil?
      query_params[:'keyValue4'] = opts[:'key_value4'] if !opts[:'key_value4'].nil?
      query_params[:'columnName5'] = opts[:'column_name5'] if !opts[:'column_name5'].nil?
      query_params[:'keyValue5'] = opts[:'key_value5'] if !opts[:'key_value5'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IDCodeValueResultBySourceListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.list_id_code_value_by_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#list_id_code_value_by_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch IDCodeValue
    # Create or Update multiple IDCodeValue at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value [Array<IDCodeValue>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_id_code_value(vbasoftware_database, type, id_code, id_code_value, opts = {})
      data, _status_code, _headers = update_batch_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value, opts)
      data
    end

    # Create or Update Batch IDCodeValue
    # Create or Update multiple IDCodeValue at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value [Array<IDCodeValue>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.update_batch_id_code_value ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.update_batch_id_code_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.update_batch_id_code_value"
      end
      # verify the required parameter 'id_code' is set
      if @api_client.config.client_side_validation && id_code.nil?
        fail ArgumentError, "Missing the required parameter 'id_code' when calling IDCodeValuesApi.update_batch_id_code_value"
      end
      # verify the required parameter 'id_code_value' is set
      if @api_client.config.client_side_validation && id_code_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_code_value' when calling IDCodeValuesApi.update_batch_id_code_value"
      end
      # resource path
      local_var_path = '/id-types/{type}/id-codes/{idCode}/id-code-values-batch'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'idCode' + '}', CGI.escape(id_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(id_code_value)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.update_batch_id_code_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#update_batch_id_code_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update IDCodeValue
    # Updates a specific IDCodeValue.
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value_key [Integer] IDCodeValue Key
    # @param id_code_value [IDCodeValue] 
    # @param [Hash] opts the optional parameters
    # @return [IDCodeValueVBAResponse]
    def update_id_code_value(vbasoftware_database, type, id_code, id_code_value_key, id_code_value, opts = {})
      data, _status_code, _headers = update_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value_key, id_code_value, opts)
      data
    end

    # Update IDCodeValue
    # Updates a specific IDCodeValue.
    # @param vbasoftware_database [String] Target database
    # @param type [String] Type
    # @param id_code [String] ID Code
    # @param id_code_value_key [Integer] IDCodeValue Key
    # @param id_code_value [IDCodeValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IDCodeValueVBAResponse, Integer, Hash)>] IDCodeValueVBAResponse data, response status code and response headers
    def update_id_code_value_with_http_info(vbasoftware_database, type, id_code, id_code_value_key, id_code_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IDCodeValuesApi.update_id_code_value ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling IDCodeValuesApi.update_id_code_value"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling IDCodeValuesApi.update_id_code_value"
      end
      # verify the required parameter 'id_code' is set
      if @api_client.config.client_side_validation && id_code.nil?
        fail ArgumentError, "Missing the required parameter 'id_code' when calling IDCodeValuesApi.update_id_code_value"
      end
      # verify the required parameter 'id_code_value_key' is set
      if @api_client.config.client_side_validation && id_code_value_key.nil?
        fail ArgumentError, "Missing the required parameter 'id_code_value_key' when calling IDCodeValuesApi.update_id_code_value"
      end
      # verify the required parameter 'id_code_value' is set
      if @api_client.config.client_side_validation && id_code_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_code_value' when calling IDCodeValuesApi.update_id_code_value"
      end
      # resource path
      local_var_path = '/id-types/{type}/id-codes/{idCode}/id-code-values/{idCodeValueKey}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'idCode' + '}', CGI.escape(id_code.to_s)).sub('{' + 'idCodeValueKey' + '}', CGI.escape(id_code_value_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(id_code_value)

      # return_type
      return_type = opts[:debug_return_type] || 'IDCodeValueVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"IDCodeValuesApi.update_id_code_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IDCodeValuesApi#update_id_code_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
