=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvReinsuranceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy and existing ReinsContract to a new ReinsContract
    # Copy everything from an existing contract to a new Contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_existing [ReinsServiceAddFromExisting] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def add_contract_from_existing(vbasoftware_database, reins_service_add_from_existing, opts = {})
      data, _status_code, _headers = add_contract_from_existing_with_http_info(vbasoftware_database, reins_service_add_from_existing, opts)
      data
    end

    # Copy and existing ReinsContract to a new ReinsContract
    # Copy everything from an existing contract to a new Contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_existing [ReinsServiceAddFromExisting] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def add_contract_from_existing_with_http_info(vbasoftware_database, reins_service_add_from_existing, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.add_contract_from_existing ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.add_contract_from_existing"
      end
      # verify the required parameter 'reins_service_add_from_existing' is set
      if @api_client.config.client_side_validation && reins_service_add_from_existing.nil?
        fail ArgumentError, "Missing the required parameter 'reins_service_add_from_existing' when calling AdvReinsuranceApi.add_contract_from_existing"
      end
      # resource path
      local_var_path = '/reinsurance-contract-copy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_service_add_from_existing)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.add_contract_from_existing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#add_contract_from_existing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add ReinsContract from a Template ReinsContract
    # Take the information from a template and apply it to one or more new contracts based on that template contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_template [ReinsServiceAddFromTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def add_contract_from_template(vbasoftware_database, reins_service_add_from_template, opts = {})
      data, _status_code, _headers = add_contract_from_template_with_http_info(vbasoftware_database, reins_service_add_from_template, opts)
      data
    end

    # Add ReinsContract from a Template ReinsContract
    # Take the information from a template and apply it to one or more new contracts based on that template contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_template [ReinsServiceAddFromTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def add_contract_from_template_with_http_info(vbasoftware_database, reins_service_add_from_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.add_contract_from_template ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.add_contract_from_template"
      end
      # verify the required parameter 'reins_service_add_from_template' is set
      if @api_client.config.client_side_validation && reins_service_add_from_template.nil?
        fail ArgumentError, "Missing the required parameter 'reins_service_add_from_template' when calling AdvReinsuranceApi.add_contract_from_template"
      end
      # resource path
      local_var_path = '/reinsurance-contract-add-from-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_service_add_from_template)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.add_contract_from_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#add_contract_from_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply Agg. Spec. Deductible ReinsContractTrans
    # Using this option will reset all aggregate deductible applied amounts for claims on this transaction. Aggregate Deductible amount is then applied to claims in service date order until Aggregate Specific Deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_agg_spec_ded_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      apply_agg_spec_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Apply Agg. Spec. Deductible ReinsContractTrans
    # Using this option will reset all aggregate deductible applied amounts for claims on this transaction. Aggregate Deductible amount is then applied to claims in service date order until Aggregate Specific Deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_agg_spec_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.apply_agg_spec_ded_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.apply_agg_spec_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.apply_agg_spec_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling AdvReinsuranceApi.apply_agg_spec_ded_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/apply-agg-spec-deductible'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.apply_agg_spec_ded_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#apply_agg_spec_ded_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply Deductible ReinsContractTrans
    # This option will reset all deductible applied amounts for claims on this transaction.  Specific or Lasered Deductible amount is then applied to claims in service date order until deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_ded_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      apply_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Apply Deductible ReinsContractTrans
    # This option will reset all deductible applied amounts for claims on this transaction.  Specific or Lasered Deductible amount is then applied to claims in service date order until deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.apply_ded_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.apply_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.apply_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling AdvReinsuranceApi.apply_ded_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/apply-deductible'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.apply_ded_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#apply_ded_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply Reimbursement ReinsContractTrans
    # Using this option will reset all reimbursement applied amounts for claims on this transaction. Received Reimbursement amount is then applied to claims in service date order until reimbursement amount is used.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_reimbursement_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      apply_reimbursement_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Apply Reimbursement ReinsContractTrans
    # Using this option will reset all reimbursement applied amounts for claims on this transaction. Received Reimbursement amount is then applied to claims in service date order until reimbursement amount is used.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_reimbursement_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.apply_reimbursement_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.apply_reimbursement_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.apply_reimbursement_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling AdvReinsuranceApi.apply_reimbursement_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/apply-reimbursement'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.apply_reimbursement_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#apply_reimbursement_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculate ReinsContractTrans
    # Based on information existing in the ReinsTrans records and the attached ReinsTransClaim records, calculate the header information and return result.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [VBAReinsContractTransAmountVBAResponse]
    def calculate_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      data, _status_code, _headers = calculate_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      data
    end

    # Calculate ReinsContractTrans
    # Based on information existing in the ReinsTrans records and the attached ReinsTransClaim records, calculate the header information and return result.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAReinsContractTransAmountVBAResponse, Integer, Hash)>] VBAReinsContractTransAmountVBAResponse data, response status code and response headers
    def calculate_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.calculate_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.calculate_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.calculate_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling AdvReinsuranceApi.calculate_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/calculate'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAReinsContractTransAmountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.calculate_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#calculate_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Level Transactions for this Contract
    # Based on submitted information, generate reinsurance level transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def generate_reins_level_transaction(vbasoftware_database, reins_contract_key, opts = {})
      data, _status_code, _headers = generate_reins_level_transaction_with_http_info(vbasoftware_database, reins_contract_key, opts)
      data
    end

    # Generate Level Transactions for this Contract
    # Based on submitted information, generate reinsurance level transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def generate_reins_level_transaction_with_http_info(vbasoftware_database, reins_contract_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.generate_reins_level_transaction ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.generate_reins_level_transaction"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.generate_reins_level_transaction"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/generate-level-transaction'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.generate_reins_level_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#generate_reins_level_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Transactions for this Contract
    # Based on submitted information, generate reinsurance transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param auto_apply_deductible [Boolean] Auto Apply Deductible
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subscriber_id Subscriber ID
    # @option opts [String] :member_seq Member Sequence
    # @return [GenerateReinsTransactionVBAResponse]
    def generate_reins_transaction(vbasoftware_database, reins_contract_key, auto_apply_deductible, opts = {})
      data, _status_code, _headers = generate_reins_transaction_with_http_info(vbasoftware_database, reins_contract_key, auto_apply_deductible, opts)
      data
    end

    # Generate Transactions for this Contract
    # Based on submitted information, generate reinsurance transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param auto_apply_deductible [Boolean] Auto Apply Deductible
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subscriber_id Subscriber ID
    # @option opts [String] :member_seq Member Sequence
    # @return [Array<(GenerateReinsTransactionVBAResponse, Integer, Hash)>] GenerateReinsTransactionVBAResponse data, response status code and response headers
    def generate_reins_transaction_with_http_info(vbasoftware_database, reins_contract_key, auto_apply_deductible, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.generate_reins_transaction ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.generate_reins_transaction"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.generate_reins_transaction"
      end
      # verify the required parameter 'auto_apply_deductible' is set
      if @api_client.config.client_side_validation && auto_apply_deductible.nil?
        fail ArgumentError, "Missing the required parameter 'auto_apply_deductible' when calling AdvReinsuranceApi.generate_reins_transaction"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/generate-transaction'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'autoApplyDeductible'] = auto_apply_deductible
      query_params[:'subscriberId'] = opts[:'subscriber_id'] if !opts[:'subscriber_id'].nil?
      query_params[:'memberSeq'] = opts[:'member_seq'] if !opts[:'member_seq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateReinsTransactionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.generate_reins_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#generate_reins_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset ReinsContractTrans
    # For all claims attached to this Reinsurance Transaction, reset the various applied amounts (Reimbursed, Not Covered, etc.).
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      reset_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Reset ReinsContractTrans
    # For all claims attached to this Reinsurance Transaction, reset the various applied amounts (Reimbursed, Not Covered, etc.).
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvReinsuranceApi.reset_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvReinsuranceApi.reset_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling AdvReinsuranceApi.reset_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling AdvReinsuranceApi.reset_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/reset'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvReinsuranceApi.reset_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvReinsuranceApi#reset_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
