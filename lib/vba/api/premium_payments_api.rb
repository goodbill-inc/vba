=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PremiumPaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PremPayment
    # Creates a new PremPayment
    # @param vbasoftware_database [String] Target database
    # @param prem_payment [PremPayment] 
    # @param [Hash] opts the optional parameters
    # @return [PremPaymentVBAResponse]
    def create_prem_payment(vbasoftware_database, prem_payment, opts = {})
      data, _status_code, _headers = create_prem_payment_with_http_info(vbasoftware_database, prem_payment, opts)
      data
    end

    # Create PremPayment
    # Creates a new PremPayment
    # @param vbasoftware_database [String] Target database
    # @param prem_payment [PremPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremPaymentVBAResponse, Integer, Hash)>] PremPaymentVBAResponse data, response status code and response headers
    def create_prem_payment_with_http_info(vbasoftware_database, prem_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.create_prem_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.create_prem_payment"
      end
      # verify the required parameter 'prem_payment' is set
      if @api_client.config.client_side_validation && prem_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment' when calling PremiumPaymentsApi.create_prem_payment"
      end
      # resource path
      local_var_path = '/premium-payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'PremPaymentVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.create_prem_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#create_prem_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PremPayment
    # Deletes an PremPayment
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_prem_payment(vbasoftware_database, prem_payment_key, opts = {})
      delete_prem_payment_with_http_info(vbasoftware_database, prem_payment_key, opts)
      nil
    end

    # Delete PremPayment
    # Deletes an PremPayment
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_prem_payment_with_http_info(vbasoftware_database, prem_payment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.delete_prem_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.delete_prem_payment"
      end
      # verify the required parameter 'prem_payment_key' is set
      if @api_client.config.client_side_validation && prem_payment_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment_key' when calling PremiumPaymentsApi.delete_prem_payment"
      end
      # resource path
      local_var_path = '/premium-payments/{premPaymentKey}'.sub('{' + 'premPaymentKey' + '}', CGI.escape(prem_payment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.delete_prem_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#delete_prem_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PremPayment
    # Gets PremPayment
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [PremPaymentVBAResponse]
    def get_prem_payment(vbasoftware_database, prem_payment_key, opts = {})
      data, _status_code, _headers = get_prem_payment_with_http_info(vbasoftware_database, prem_payment_key, opts)
      data
    end

    # Get PremPayment
    # Gets PremPayment
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremPaymentVBAResponse, Integer, Hash)>] PremPaymentVBAResponse data, response status code and response headers
    def get_prem_payment_with_http_info(vbasoftware_database, prem_payment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.get_prem_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.get_prem_payment"
      end
      # verify the required parameter 'prem_payment_key' is set
      if @api_client.config.client_side_validation && prem_payment_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment_key' when calling PremiumPaymentsApi.get_prem_payment"
      end
      # resource path
      local_var_path = '/premium-payments/{premPaymentKey}'.sub('{' + 'premPaymentKey' + '}', CGI.escape(prem_payment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremPaymentVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.get_prem_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#get_prem_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Premium for Payment Application
    # List Invoice Detail that can have premimum applied based on payment information and applied payment category.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param invoice_level [String] Invoice Level
    # @param [Hash] opts the optional parameters
    # @return [PremApplyPaymentCategoryResultListVBAResponse]
    def list_prem_apply_payment_category(vbasoftware_database, group_id, division_id, subscriber_id, invoice_level, opts = {})
      data, _status_code, _headers = list_prem_apply_payment_category_with_http_info(vbasoftware_database, group_id, division_id, subscriber_id, invoice_level, opts)
      data
    end

    # List Premium for Payment Application
    # List Invoice Detail that can have premimum applied based on payment information and applied payment category.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param invoice_level [String] Invoice Level
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremApplyPaymentCategoryResultListVBAResponse, Integer, Hash)>] PremApplyPaymentCategoryResultListVBAResponse data, response status code and response headers
    def list_prem_apply_payment_category_with_http_info(vbasoftware_database, group_id, division_id, subscriber_id, invoice_level, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.list_prem_apply_payment_category ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling PremiumPaymentsApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling PremiumPaymentsApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling PremiumPaymentsApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'invoice_level' is set
      if @api_client.config.client_side_validation && invoice_level.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_level' when calling PremiumPaymentsApi.list_prem_apply_payment_category"
      end
      # resource path
      local_var_path = '/list-apply-payment-category'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupID'] = group_id
      query_params[:'divisionID'] = division_id
      query_params[:'subscriberID'] = subscriber_id
      query_params[:'invoiceLevel'] = invoice_level

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremApplyPaymentCategoryResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.list_prem_apply_payment_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#list_prem_apply_payment_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PremPayment
    # Lists all PremPayment
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PremPaymentListVBAResponse]
    def list_prem_payment(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_prem_payment_with_http_info(vbasoftware_database, opts)
      data
    end

    # List PremPayment
    # Lists all PremPayment
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PremPaymentListVBAResponse, Integer, Hash)>] PremPaymentListVBAResponse data, response status code and response headers
    def list_prem_payment_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.list_prem_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.list_prem_payment"
      end
      # resource path
      local_var_path = '/premium-payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremPaymentListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.list_prem_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#list_prem_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process or Check Invoice Tolerance
    # Given an Invoice and amount due, either check if an Invoice falls withing Tolerance range to performan a write-off, or go ahead and perform the write-off.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param amount_due [Float] Amount Due
    # @param verify_only [Boolean] Verify Only
    # @param [Hash] opts the optional parameters
    # @return [BooleanVBAResponse]
    def process_invoice_tolerance(vbasoftware_database, invoice_key, amount_due, verify_only, opts = {})
      data, _status_code, _headers = process_invoice_tolerance_with_http_info(vbasoftware_database, invoice_key, amount_due, verify_only, opts)
      data
    end

    # Process or Check Invoice Tolerance
    # Given an Invoice and amount due, either check if an Invoice falls withing Tolerance range to performan a write-off, or go ahead and perform the write-off.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param amount_due [Float] Amount Due
    # @param verify_only [Boolean] Verify Only
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanVBAResponse, Integer, Hash)>] BooleanVBAResponse data, response status code and response headers
    def process_invoice_tolerance_with_http_info(vbasoftware_database, invoice_key, amount_due, verify_only, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.process_invoice_tolerance ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.process_invoice_tolerance"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling PremiumPaymentsApi.process_invoice_tolerance"
      end
      # verify the required parameter 'amount_due' is set
      if @api_client.config.client_side_validation && amount_due.nil?
        fail ArgumentError, "Missing the required parameter 'amount_due' when calling PremiumPaymentsApi.process_invoice_tolerance"
      end
      # verify the required parameter 'verify_only' is set
      if @api_client.config.client_side_validation && verify_only.nil?
        fail ArgumentError, "Missing the required parameter 'verify_only' when calling PremiumPaymentsApi.process_invoice_tolerance"
      end
      # resource path
      local_var_path = '/process-invoice-tolerance/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'amountDue'] = amount_due
      query_params[:'verifyOnly'] = verify_only

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.process_invoice_tolerance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#process_invoice_tolerance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process Payment File
    # Import a defined Payment File in .csv format to then have payments created and, optionally, attached to invoices.
    # @param vbasoftware_database [String] Target database
    # @param vba_process_payment_file [VBAProcessPaymentFile] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessPaymentFileResponseVBAResponse]
    def process_payment_file(vbasoftware_database, vba_process_payment_file, opts = {})
      data, _status_code, _headers = process_payment_file_with_http_info(vbasoftware_database, vba_process_payment_file, opts)
      data
    end

    # Process Payment File
    # Import a defined Payment File in .csv format to then have payments created and, optionally, attached to invoices.
    # @param vbasoftware_database [String] Target database
    # @param vba_process_payment_file [VBAProcessPaymentFile] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessPaymentFileResponseVBAResponse, Integer, Hash)>] VBAProcessPaymentFileResponseVBAResponse data, response status code and response headers
    def process_payment_file_with_http_info(vbasoftware_database, vba_process_payment_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.process_payment_file ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.process_payment_file"
      end
      # verify the required parameter 'vba_process_payment_file' is set
      if @api_client.config.client_side_validation && vba_process_payment_file.nil?
        fail ArgumentError, "Missing the required parameter 'vba_process_payment_file' when calling PremiumPaymentsApi.process_payment_file"
      end
      # resource path
      local_var_path = '/process-payment-file'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_process_payment_file)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessPaymentFileResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.process_payment_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#process_payment_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undo an Applied Premium Payment
    # Based on the supplied PremPayment_Key, remove this payment from any invoice it is attached, and then recalc the received on each affected invoice.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def undo_premium_payment(vbasoftware_database, prem_payment_key, opts = {})
      undo_premium_payment_with_http_info(vbasoftware_database, prem_payment_key, opts)
      nil
    end

    # Undo an Applied Premium Payment
    # Based on the supplied PremPayment_Key, remove this payment from any invoice it is attached, and then recalc the received on each affected invoice.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def undo_premium_payment_with_http_info(vbasoftware_database, prem_payment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.undo_premium_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.undo_premium_payment"
      end
      # verify the required parameter 'prem_payment_key' is set
      if @api_client.config.client_side_validation && prem_payment_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment_key' when calling PremiumPaymentsApi.undo_premium_payment"
      end
      # resource path
      local_var_path = '/undo-premium-payment/{premPaymentKey}'.sub('{' + 'premPaymentKey' + '}', CGI.escape(prem_payment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.undo_premium_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#undo_premium_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PremPayment
    # Create or Update multiple PremPayment at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment [Array<PremPayment>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_prem_payment(vbasoftware_database, prem_payment, opts = {})
      data, _status_code, _headers = update_batch_prem_payment_with_http_info(vbasoftware_database, prem_payment, opts)
      data
    end

    # Create or Update Batch PremPayment
    # Create or Update multiple PremPayment at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment [Array<PremPayment>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_prem_payment_with_http_info(vbasoftware_database, prem_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.update_batch_prem_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.update_batch_prem_payment"
      end
      # verify the required parameter 'prem_payment' is set
      if @api_client.config.client_side_validation && prem_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment' when calling PremiumPaymentsApi.update_batch_prem_payment"
      end
      # resource path
      local_var_path = '/premium-payments-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.update_batch_prem_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#update_batch_prem_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PremPayment
    # Updates a specific PremPayment.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param prem_payment [PremPayment] 
    # @param [Hash] opts the optional parameters
    # @return [PremPaymentVBAResponse]
    def update_prem_payment(vbasoftware_database, prem_payment_key, prem_payment, opts = {})
      data, _status_code, _headers = update_prem_payment_with_http_info(vbasoftware_database, prem_payment_key, prem_payment, opts)
      data
    end

    # Update PremPayment
    # Updates a specific PremPayment.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param prem_payment [PremPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremPaymentVBAResponse, Integer, Hash)>] PremPaymentVBAResponse data, response status code and response headers
    def update_prem_payment_with_http_info(vbasoftware_database, prem_payment_key, prem_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PremiumPaymentsApi.update_prem_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PremiumPaymentsApi.update_prem_payment"
      end
      # verify the required parameter 'prem_payment_key' is set
      if @api_client.config.client_side_validation && prem_payment_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment_key' when calling PremiumPaymentsApi.update_prem_payment"
      end
      # verify the required parameter 'prem_payment' is set
      if @api_client.config.client_side_validation && prem_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment' when calling PremiumPaymentsApi.update_prem_payment"
      end
      # resource path
      local_var_path = '/premium-payments/{premPaymentKey}'.sub('{' + 'premPaymentKey' + '}', CGI.escape(prem_payment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'PremPaymentVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PremiumPaymentsApi.update_prem_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PremiumPaymentsApi#update_prem_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
