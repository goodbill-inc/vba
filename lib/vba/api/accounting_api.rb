=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AccountingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Claim Account Funding
    # Submit a list of Payor/Account information to be funded based on configured parameters.  Returns whether there are invalid entries in your list that were skipped during processing.
    # @param vbasoftware_database [String] Target database
    # @param fundaccountbalancelist [Array<FUNDACCOUNTBALANCELIST>] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanVBAResponse]
    def accounting_fund_request(vbasoftware_database, fundaccountbalancelist, opts = {})
      data, _status_code, _headers = accounting_fund_request_with_http_info(vbasoftware_database, fundaccountbalancelist, opts)
      data
    end

    # Claim Account Funding
    # Submit a list of Payor/Account information to be funded based on configured parameters.  Returns whether there are invalid entries in your list that were skipped during processing.
    # @param vbasoftware_database [String] Target database
    # @param fundaccountbalancelist [Array<FUNDACCOUNTBALANCELIST>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanVBAResponse, Integer, Hash)>] BooleanVBAResponse data, response status code and response headers
    def accounting_fund_request_with_http_info(vbasoftware_database, fundaccountbalancelist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.accounting_fund_request ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AccountingApi.accounting_fund_request"
      end
      # verify the required parameter 'fundaccountbalancelist' is set
      if @api_client.config.client_side_validation && fundaccountbalancelist.nil?
        fail ArgumentError, "Missing the required parameter 'fundaccountbalancelist' when calling AccountingApi.accounting_fund_request"
      end
      # resource path
      local_var_path = '/accounting-fund-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fundaccountbalancelist)

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountingApi.accounting_fund_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#accounting_fund_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Claim Refund
    # Process a Claim Refund creating the necessary Backout and Reentry claims and adding Claim Reference values.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_claim_refund [FundingProcessClaimRefund] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def claim_refund(vbasoftware_database, funding_process_claim_refund, opts = {})
      claim_refund_with_http_info(vbasoftware_database, funding_process_claim_refund, opts)
      nil
    end

    # Claim Refund
    # Process a Claim Refund creating the necessary Backout and Reentry claims and adding Claim Reference values.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_claim_refund [FundingProcessClaimRefund] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def claim_refund_with_http_info(vbasoftware_database, funding_process_claim_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.claim_refund ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AccountingApi.claim_refund"
      end
      # verify the required parameter 'funding_process_claim_refund' is set
      if @api_client.config.client_side_validation && funding_process_claim_refund.nil?
        fail ArgumentError, "Missing the required parameter 'funding_process_claim_refund' when calling AccountingApi.claim_refund"
      end
      # resource path
      local_var_path = '/accounting-claim-refund'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_process_claim_refund)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountingApi.claim_refund",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#claim_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mass Update Claim Funded Status
    # Pass in a list of claims and what Claim_Funded_Status to update that claim to and have it updated in mass without iterating through claim records.
    # @param vbasoftware_database [String] Target database
    # @param vba_update_claim_funded_status [Array<VBAUpdateClaimFundedStatus>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mass_update_claim_funded_status(vbasoftware_database, vba_update_claim_funded_status, opts = {})
      mass_update_claim_funded_status_with_http_info(vbasoftware_database, vba_update_claim_funded_status, opts)
      nil
    end

    # Mass Update Claim Funded Status
    # Pass in a list of claims and what Claim_Funded_Status to update that claim to and have it updated in mass without iterating through claim records.
    # @param vbasoftware_database [String] Target database
    # @param vba_update_claim_funded_status [Array<VBAUpdateClaimFundedStatus>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mass_update_claim_funded_status_with_http_info(vbasoftware_database, vba_update_claim_funded_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountingApi.mass_update_claim_funded_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AccountingApi.mass_update_claim_funded_status"
      end
      # verify the required parameter 'vba_update_claim_funded_status' is set
      if @api_client.config.client_side_validation && vba_update_claim_funded_status.nil?
        fail ArgumentError, "Missing the required parameter 'vba_update_claim_funded_status' when calling AccountingApi.mass_update_claim_funded_status"
      end
      # resource path
      local_var_path = '/accounting-update-claim-funded-status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_update_claim_funded_status)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AccountingApi.mass_update_claim_funded_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountingApi#mass_update_claim_funded_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
