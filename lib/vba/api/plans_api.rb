=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy Plan
    # Copies an existing plan.  This copy can be to a completely new Plan ID, or to overwrite an existing Plan ID.
    # @param vbasoftware_database [String] Target database
    # @param plan_copy [PlanCopy] 
    # @param [Hash] opts the optional parameters
    # @return [PlansVBAResponse]
    def copy_plan(vbasoftware_database, plan_copy, opts = {})
      data, _status_code, _headers = copy_plan_with_http_info(vbasoftware_database, plan_copy, opts)
      data
    end

    # Copy Plan
    # Copies an existing plan.  This copy can be to a completely new Plan ID, or to overwrite an existing Plan ID.
    # @param vbasoftware_database [String] Target database
    # @param plan_copy [PlanCopy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlansVBAResponse, Integer, Hash)>] PlansVBAResponse data, response status code and response headers
    def copy_plan_with_http_info(vbasoftware_database, plan_copy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.copy_plan ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.copy_plan"
      end
      # verify the required parameter 'plan_copy' is set
      if @api_client.config.client_side_validation && plan_copy.nil?
        fail ArgumentError, "Missing the required parameter 'plan_copy' when calling PlansApi.copy_plan"
      end
      # resource path
      local_var_path = '/plans-copy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plan_copy)

      # return_type
      return_type = opts[:debug_return_type] || 'PlansVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.copy_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#copy_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Plan
    # Creates a new Plan
    # @param vbasoftware_database [String] Target database
    # @param plans [Plans] 
    # @param [Hash] opts the optional parameters
    # @return [PlansVBAResponse]
    def create_plans(vbasoftware_database, plans, opts = {})
      data, _status_code, _headers = create_plans_with_http_info(vbasoftware_database, plans, opts)
      data
    end

    # Create Plan
    # Creates a new Plan
    # @param vbasoftware_database [String] Target database
    # @param plans [Plans] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlansVBAResponse, Integer, Hash)>] PlansVBAResponse data, response status code and response headers
    def create_plans_with_http_info(vbasoftware_database, plans, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.create_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.create_plans"
      end
      # verify the required parameter 'plans' is set
      if @api_client.config.client_side_validation && plans.nil?
        fail ArgumentError, "Missing the required parameter 'plans' when calling PlansApi.create_plans"
      end
      # resource path
      local_var_path = '/plans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plans)

      # return_type
      return_type = opts[:debug_return_type] || 'PlansVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.create_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#create_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Plans
    # Deletes an Plans
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_plans(vbasoftware_database, plan_id, opts = {})
      delete_plans_with_http_info(vbasoftware_database, plan_id, opts)
      nil
    end

    # Delete Plans
    # Deletes an Plans
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_plans_with_http_info(vbasoftware_database, plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.delete_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.delete_plans"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlansApi.delete_plans"
      end
      # resource path
      local_var_path = '/plans/{planID}'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.delete_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#delete_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Plan
    # Gets a specific Plan
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [PlansVBAResponse]
    def get_plans(vbasoftware_database, plan_id, opts = {})
      data, _status_code, _headers = get_plans_with_http_info(vbasoftware_database, plan_id, opts)
      data
    end

    # Get Plan
    # Gets a specific Plan
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlansVBAResponse, Integer, Hash)>] PlansVBAResponse data, response status code and response headers
    def get_plans_with_http_info(vbasoftware_database, plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.get_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.get_plans"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlansApi.get_plans"
      end
      # resource path
      local_var_path = '/plans/{planID}'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlansVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.get_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#get_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Plans
    # Lists all Plans with option to filter by Plan Type.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :plan_type Plan Type
    # @return [PlansListVBAResponse]
    def list_plans(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_plans_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Plans
    # Lists all Plans with option to filter by Plan Type.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :plan_type Plan Type
    # @return [Array<(PlansListVBAResponse, Integer, Hash)>] PlansListVBAResponse data, response status code and response headers
    def list_plans_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.list_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.list_plans"
      end
      # resource path
      local_var_path = '/plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'planType'] = opts[:'plan_type'] if !opts[:'plan_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlansListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.list_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#list_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Plans
    # Create or Update multiple Plans at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param plans [Array<Plans>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_plans(vbasoftware_database, plans, opts = {})
      data, _status_code, _headers = update_batch_plans_with_http_info(vbasoftware_database, plans, opts)
      data
    end

    # Create or Update Batch Plans
    # Create or Update multiple Plans at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param plans [Array<Plans>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_plans_with_http_info(vbasoftware_database, plans, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.update_batch_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.update_batch_plans"
      end
      # verify the required parameter 'plans' is set
      if @api_client.config.client_side_validation && plans.nil?
        fail ArgumentError, "Missing the required parameter 'plans' when calling PlansApi.update_batch_plans"
      end
      # resource path
      local_var_path = '/plans-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plans)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.update_batch_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#update_batch_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Plans
    # Updates a specific Plans.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plans [Plans] 
    # @param [Hash] opts the optional parameters
    # @return [PlansVBAResponse]
    def update_plans(vbasoftware_database, plan_id, plans, opts = {})
      data, _status_code, _headers = update_plans_with_http_info(vbasoftware_database, plan_id, plans, opts)
      data
    end

    # Update Plans
    # Updates a specific Plans.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plans [Plans] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlansVBAResponse, Integer, Hash)>] PlansVBAResponse data, response status code and response headers
    def update_plans_with_http_info(vbasoftware_database, plan_id, plans, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.update_plans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlansApi.update_plans"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlansApi.update_plans"
      end
      # verify the required parameter 'plans' is set
      if @api_client.config.client_side_validation && plans.nil?
        fail ArgumentError, "Missing the required parameter 'plans' when calling PlansApi.update_plans"
      end
      # resource path
      local_var_path = '/plans/{planID}'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plans)

      # return_type
      return_type = opts[:debug_return_type] || 'PlansVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.update_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#update_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
