=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvWorkflowApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign Workflow Items
    # Set a list of WorkflowDetail records to Assign.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def workflow_processing_assign(vbasoftware_database, workflow_processing, opts = {})
      workflow_processing_assign_with_http_info(vbasoftware_database, workflow_processing, opts)
      nil
    end

    # Assign Workflow Items
    # Set a list of WorkflowDetail records to Assign.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def workflow_processing_assign_with_http_info(vbasoftware_database, workflow_processing, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvWorkflowApi.workflow_processing_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvWorkflowApi.workflow_processing_assign"
      end
      # verify the required parameter 'workflow_processing' is set
      if @api_client.config.client_side_validation && workflow_processing.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_processing' when calling AdvWorkflowApi.workflow_processing_assign"
      end
      # resource path
      local_var_path = '/workflow-assign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(workflow_processing)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvWorkflowApi.workflow_processing_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvWorkflowApi#workflow_processing_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete Workflow Items
    # Set a list of WorkflowDetail records to Complete.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def workflow_processing_complete(vbasoftware_database, workflow_processing, opts = {})
      workflow_processing_complete_with_http_info(vbasoftware_database, workflow_processing, opts)
      nil
    end

    # Complete Workflow Items
    # Set a list of WorkflowDetail records to Complete.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def workflow_processing_complete_with_http_info(vbasoftware_database, workflow_processing, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvWorkflowApi.workflow_processing_complete ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvWorkflowApi.workflow_processing_complete"
      end
      # verify the required parameter 'workflow_processing' is set
      if @api_client.config.client_side_validation && workflow_processing.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_processing' when calling AdvWorkflowApi.workflow_processing_complete"
      end
      # resource path
      local_var_path = '/workflow-complete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(workflow_processing)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvWorkflowApi.workflow_processing_complete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvWorkflowApi#workflow_processing_complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process Workflow Claims
    # Set a list of Claims in Batch to Process.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def workflow_processing_process_claims(vbasoftware_database, workflow_processing, opts = {})
      workflow_processing_process_claims_with_http_info(vbasoftware_database, workflow_processing, opts)
      nil
    end

    # Process Workflow Claims
    # Set a list of Claims in Batch to Process.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def workflow_processing_process_claims_with_http_info(vbasoftware_database, workflow_processing, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvWorkflowApi.workflow_processing_process_claims ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvWorkflowApi.workflow_processing_process_claims"
      end
      # verify the required parameter 'workflow_processing' is set
      if @api_client.config.client_side_validation && workflow_processing.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_processing' when calling AdvWorkflowApi.workflow_processing_process_claims"
      end
      # resource path
      local_var_path = '/workflow-process-claims'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(workflow_processing)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvWorkflowApi.workflow_processing_process_claims",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvWorkflowApi#workflow_processing_process_claims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reject Workflow Items
    # Set a list of WorkflowDetail records to Reject.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def workflow_processing_reject(vbasoftware_database, workflow_processing, opts = {})
      workflow_processing_reject_with_http_info(vbasoftware_database, workflow_processing, opts)
      nil
    end

    # Reject Workflow Items
    # Set a list of WorkflowDetail records to Reject.
    # @param vbasoftware_database [String] Target database
    # @param workflow_processing [WorkflowProcessing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def workflow_processing_reject_with_http_info(vbasoftware_database, workflow_processing, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvWorkflowApi.workflow_processing_reject ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvWorkflowApi.workflow_processing_reject"
      end
      # verify the required parameter 'workflow_processing' is set
      if @api_client.config.client_side_validation && workflow_processing.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_processing' when calling AdvWorkflowApi.workflow_processing_reject"
      end
      # resource path
      local_var_path = '/workflow-reject'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(workflow_processing)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvWorkflowApi.workflow_processing_reject",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvWorkflowApi#workflow_processing_reject\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
