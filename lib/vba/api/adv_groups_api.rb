=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Group enrollment summary information
    # Gets Group enrollment summary for the given group id. 
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [VBAGroupEnrollmentSummaryVBAResponse]
    def get_group_enrollment_summary(vbasoftware_database, group_id, opts = {})
      data, _status_code, _headers = get_group_enrollment_summary_with_http_info(vbasoftware_database, group_id, opts)
      data
    end

    # Get Group enrollment summary information
    # Gets Group enrollment summary for the given group id. 
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAGroupEnrollmentSummaryVBAResponse, Integer, Hash)>] VBAGroupEnrollmentSummaryVBAResponse data, response status code and response headers
    def get_group_enrollment_summary_with_http_info(vbasoftware_database, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupsApi.get_group_enrollment_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupsApi.get_group_enrollment_summary"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupsApi.get_group_enrollment_summary"
      end
      # resource path
      local_var_path = '/groups/{groupID}/enrollment-summary'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAGroupEnrollmentSummaryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupsApi.get_group_enrollment_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupsApi#get_group_enrollment_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Group Disenroll
    # Disenrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_disenroll_group [EnrollmentDisenrollGroup] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def group_disenroll(vbasoftware_database, group_id, enrollment_disenroll_group, opts = {})
      data, _status_code, _headers = group_disenroll_with_http_info(vbasoftware_database, group_id, enrollment_disenroll_group, opts)
      data
    end

    # Group Disenroll
    # Disenrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_disenroll_group [EnrollmentDisenrollGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def group_disenroll_with_http_info(vbasoftware_database, group_id, enrollment_disenroll_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupsApi.group_disenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupsApi.group_disenroll"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupsApi.group_disenroll"
      end
      # verify the required parameter 'enrollment_disenroll_group' is set
      if @api_client.config.client_side_validation && enrollment_disenroll_group.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_disenroll_group' when calling AdvGroupsApi.group_disenroll"
      end
      # resource path
      local_var_path = '/groups/{groupID}/disenroll'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_disenroll_group)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupsApi.group_disenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupsApi#group_disenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Group Reenroll
    # Re-enrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def group_reenroll(vbasoftware_database, group_id, enrollment_reenroll, opts = {})
      data, _status_code, _headers = group_reenroll_with_http_info(vbasoftware_database, group_id, enrollment_reenroll, opts)
      data
    end

    # Group Reenroll
    # Re-enrolls a Group and/or Division.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def group_reenroll_with_http_info(vbasoftware_database, group_id, enrollment_reenroll, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupsApi.group_reenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupsApi.group_reenroll"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupsApi.group_reenroll"
      end
      # verify the required parameter 'enrollment_reenroll' is set
      if @api_client.config.client_side_validation && enrollment_reenroll.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_reenroll' when calling AdvGroupsApi.group_reenroll"
      end
      # resource path
      local_var_path = '/groups/{groupID}/reenroll'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_reenroll)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupsApi.group_reenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupsApi#group_reenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
