=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ForfeitureStatusesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create ForfeitureStatus
    # Creates a new ForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [ForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [ForfeitureStatusVBAResponse]
    def create_forfeiture_status(vbasoftware_database, forfeiture_status, opts = {})
      data, _status_code, _headers = create_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts)
      data
    end

    # Create ForfeitureStatus
    # Creates a new ForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [ForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForfeitureStatusVBAResponse, Integer, Hash)>] ForfeitureStatusVBAResponse data, response status code and response headers
    def create_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ForfeitureStatusesApi.create_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ForfeitureStatusesApi.create_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling ForfeitureStatusesApi.create_forfeiture_status"
      end
      # resource path
      local_var_path = '/forfeiture-statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(forfeiture_status)

      # return_type
      return_type = opts[:debug_return_type] || 'ForfeitureStatusVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ForfeitureStatusesApi.create_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForfeitureStatusesApi#create_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ForfeitureStatus
    # Deletes an ForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [String] Forfeiture Status
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_forfeiture_status(vbasoftware_database, forfeiture_status, opts = {})
      delete_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts)
      nil
    end

    # Delete ForfeitureStatus
    # Deletes an ForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [String] Forfeiture Status
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ForfeitureStatusesApi.delete_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ForfeitureStatusesApi.delete_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling ForfeitureStatusesApi.delete_forfeiture_status"
      end
      # resource path
      local_var_path = '/forfeiture-statuses/{forfeitureStatus}'.sub('{' + 'forfeitureStatus' + '}', CGI.escape(forfeiture_status.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ForfeitureStatusesApi.delete_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForfeitureStatusesApi#delete_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ForfeitureStatus
    # Gets ForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [String] Forfeiture Status
    # @param [Hash] opts the optional parameters
    # @return [ForfeitureStatusVBAResponse]
    def get_forfeiture_status(vbasoftware_database, forfeiture_status, opts = {})
      data, _status_code, _headers = get_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts)
      data
    end

    # Get ForfeitureStatus
    # Gets ForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [String] Forfeiture Status
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForfeitureStatusVBAResponse, Integer, Hash)>] ForfeitureStatusVBAResponse data, response status code and response headers
    def get_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ForfeitureStatusesApi.get_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ForfeitureStatusesApi.get_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling ForfeitureStatusesApi.get_forfeiture_status"
      end
      # resource path
      local_var_path = '/forfeiture-statuses/{forfeitureStatus}'.sub('{' + 'forfeitureStatus' + '}', CGI.escape(forfeiture_status.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ForfeitureStatusVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ForfeitureStatusesApi.get_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForfeitureStatusesApi#get_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ForfeitureStatus
    # Lists all ForfeitureStatus 
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [ForfeitureStatusListVBAResponse]
    def list_forfeiture_status(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_forfeiture_status_with_http_info(vbasoftware_database, opts)
      data
    end

    # List ForfeitureStatus
    # Lists all ForfeitureStatus 
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForfeitureStatusListVBAResponse, Integer, Hash)>] ForfeitureStatusListVBAResponse data, response status code and response headers
    def list_forfeiture_status_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ForfeitureStatusesApi.list_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ForfeitureStatusesApi.list_forfeiture_status"
      end
      # resource path
      local_var_path = '/forfeiture-statuses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ForfeitureStatusListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ForfeitureStatusesApi.list_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForfeitureStatusesApi#list_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch ForfeitureStatus
    # Create or Update multiple ForfeitureStatus at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [Array<ForfeitureStatus>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_forfeiture_status(vbasoftware_database, forfeiture_status, opts = {})
      data, _status_code, _headers = update_batch_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts)
      data
    end

    # Create or Update Batch ForfeitureStatus
    # Create or Update multiple ForfeitureStatus at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [Array<ForfeitureStatus>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ForfeitureStatusesApi.update_batch_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ForfeitureStatusesApi.update_batch_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling ForfeitureStatusesApi.update_batch_forfeiture_status"
      end
      # resource path
      local_var_path = '/forfeiture-statuses-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(forfeiture_status)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ForfeitureStatusesApi.update_batch_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForfeitureStatusesApi#update_batch_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update ForfeitureStatus
    # Updates a specific ForfeitureStatus.
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [String] Forfeiture Status
    # @param forfeiture_status2 [ForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [ForfeitureStatusVBAResponse]
    def update_forfeiture_status(vbasoftware_database, forfeiture_status, forfeiture_status2, opts = {})
      data, _status_code, _headers = update_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, forfeiture_status2, opts)
      data
    end

    # Update ForfeitureStatus
    # Updates a specific ForfeitureStatus.
    # @param vbasoftware_database [String] Target database
    # @param forfeiture_status [String] Forfeiture Status
    # @param forfeiture_status2 [ForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ForfeitureStatusVBAResponse, Integer, Hash)>] ForfeitureStatusVBAResponse data, response status code and response headers
    def update_forfeiture_status_with_http_info(vbasoftware_database, forfeiture_status, forfeiture_status2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ForfeitureStatusesApi.update_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ForfeitureStatusesApi.update_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling ForfeitureStatusesApi.update_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status2' is set
      if @api_client.config.client_side_validation && forfeiture_status2.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status2' when calling ForfeitureStatusesApi.update_forfeiture_status"
      end
      # resource path
      local_var_path = '/forfeiture-statuses/{forfeitureStatus}'.sub('{' + 'forfeitureStatus' + '}', CGI.escape(forfeiture_status.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(forfeiture_status2)

      # return_type
      return_type = opts[:debug_return_type] || 'ForfeitureStatusVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ForfeitureStatusesApi.update_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ForfeitureStatusesApi#update_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
