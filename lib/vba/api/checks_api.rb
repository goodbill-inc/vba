=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ChecksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Checks
    # Creates a new Checks
    # @param vbasoftware_database [String] Target database
    # @param checks [Checks] 
    # @param [Hash] opts the optional parameters
    # @return [ChecksVBAResponse]
    def create_checks(vbasoftware_database, checks, opts = {})
      data, _status_code, _headers = create_checks_with_http_info(vbasoftware_database, checks, opts)
      data
    end

    # Create Checks
    # Creates a new Checks
    # @param vbasoftware_database [String] Target database
    # @param checks [Checks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChecksVBAResponse, Integer, Hash)>] ChecksVBAResponse data, response status code and response headers
    def create_checks_with_http_info(vbasoftware_database, checks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.create_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.create_checks"
      end
      # verify the required parameter 'checks' is set
      if @api_client.config.client_side_validation && checks.nil?
        fail ArgumentError, "Missing the required parameter 'checks' when calling ChecksApi.create_checks"
      end
      # resource path
      local_var_path = '/checks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks)

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.create_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#create_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Withhold Check Run
    # Takes Claims with a withhold amount and creates new claims to make payments for that withhold amount.
    # @param vbasoftware_database [String] Target database
    # @param accounting_withhold_check_config [AccountingWithholdCheckConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def create_withhold_check_batch(vbasoftware_database, accounting_withhold_check_config, opts = {})
      data, _status_code, _headers = create_withhold_check_batch_with_http_info(vbasoftware_database, accounting_withhold_check_config, opts)
      data
    end

    # Create Withhold Check Run
    # Takes Claims with a withhold amount and creates new claims to make payments for that withhold amount.
    # @param vbasoftware_database [String] Target database
    # @param accounting_withhold_check_config [AccountingWithholdCheckConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def create_withhold_check_batch_with_http_info(vbasoftware_database, accounting_withhold_check_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.create_withhold_check_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.create_withhold_check_batch"
      end
      # verify the required parameter 'accounting_withhold_check_config' is set
      if @api_client.config.client_side_validation && accounting_withhold_check_config.nil?
        fail ArgumentError, "Missing the required parameter 'accounting_withhold_check_config' when calling ChecksApi.create_withhold_check_batch"
      end
      # resource path
      local_var_path = '/accounting-create-withhold-check-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(accounting_withhold_check_config)

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.create_withhold_check_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#create_withhold_check_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Checks
    # Deletes an Checks
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_checks(vbasoftware_database, check_id, opts = {})
      delete_checks_with_http_info(vbasoftware_database, check_id, opts)
      nil
    end

    # Delete Checks
    # Deletes an Checks
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_checks_with_http_info(vbasoftware_database, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.delete_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.delete_checks"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling ChecksApi.delete_checks"
      end
      # resource path
      local_var_path = '/checks/{checkID}'.sub('{' + 'checkID' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.delete_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#delete_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Checks
    # Gets Checks
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [ChecksVBAResponse]
    def get_checks(vbasoftware_database, check_id, opts = {})
      data, _status_code, _headers = get_checks_with_http_info(vbasoftware_database, check_id, opts)
      data
    end

    # Get Checks
    # Gets Checks
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChecksVBAResponse, Integer, Hash)>] ChecksVBAResponse data, response status code and response headers
    def get_checks_with_http_info(vbasoftware_database, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.get_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.get_checks"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling ChecksApi.get_checks"
      end
      # resource path
      local_var_path = '/checks/{checkID}'.sub('{' + 'checkID' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.get_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#get_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Name and Address Information
    # Using Send Check To and a dynamic Pay To ID, get the delivery information for a potential check.
    # @param vbasoftware_database [String] Target database
    # @param funding_name_on_check [FundingNameOnCheck] 
    # @param [Hash] opts the optional parameters
    # @return [FundingNameOnCheckVBAResponse]
    def get_name_on_check(vbasoftware_database, funding_name_on_check, opts = {})
      data, _status_code, _headers = get_name_on_check_with_http_info(vbasoftware_database, funding_name_on_check, opts)
      data
    end

    # Get Name and Address Information
    # Using Send Check To and a dynamic Pay To ID, get the delivery information for a potential check.
    # @param vbasoftware_database [String] Target database
    # @param funding_name_on_check [FundingNameOnCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingNameOnCheckVBAResponse, Integer, Hash)>] FundingNameOnCheckVBAResponse data, response status code and response headers
    def get_name_on_check_with_http_info(vbasoftware_database, funding_name_on_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.get_name_on_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.get_name_on_check"
      end
      # verify the required parameter 'funding_name_on_check' is set
      if @api_client.config.client_side_validation && funding_name_on_check.nil?
        fail ArgumentError, "Missing the required parameter 'funding_name_on_check' when calling ChecksApi.get_name_on_check"
      end
      # resource path
      local_var_path = '/checks-name-on-check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_name_on_check)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingNameOnCheckVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.get_name_on_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#get_name_on_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Checks
    # Lists all Checks
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [ChecksListVBAResponse]
    def list_checks(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_checks_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Checks
    # Lists all Checks
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(ChecksListVBAResponse, Integer, Hash)>] ChecksListVBAResponse data, response status code and response headers
    def list_checks_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.list_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.list_checks"
      end
      # resource path
      local_var_path = '/checks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.list_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#list_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process Checks
    # Initiates the process of Check Processing. If the request is valid, the system will generate the necessary actions to process checks and respond with a success status code of 202 Accepted, along with the generated process key.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_check [FundingProcessCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def process_checks(vbasoftware_database, funding_process_check, opts = {})
      data, _status_code, _headers = process_checks_with_http_info(vbasoftware_database, funding_process_check, opts)
      data
    end

    # Process Checks
    # Initiates the process of Check Processing. If the request is valid, the system will generate the necessary actions to process checks and respond with a success status code of 202 Accepted, along with the generated process key.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_check [FundingProcessCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def process_checks_with_http_info(vbasoftware_database, funding_process_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.process_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.process_checks"
      end
      # verify the required parameter 'funding_process_check' is set
      if @api_client.config.client_side_validation && funding_process_check.nil?
        fail ArgumentError, "Missing the required parameter 'funding_process_check' when calling ChecksApi.process_checks"
      end
      # resource path
      local_var_path = '/checks-process'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_process_check)

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.process_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#process_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undo Void Check
    # Undo a previously voided check by Check ID.  Returns the VBAProcess Key for log review and verification.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def undo_void_check(vbasoftware_database, check_id, opts = {})
      data, _status_code, _headers = undo_void_check_with_http_info(vbasoftware_database, check_id, opts)
      data
    end

    # Undo Void Check
    # Undo a previously voided check by Check ID.  Returns the VBAProcess Key for log review and verification.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def undo_void_check_with_http_info(vbasoftware_database, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.undo_void_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.undo_void_check"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling ChecksApi.undo_void_check"
      end
      # resource path
      local_var_path = '/checks-undo-void'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'checkId'] = check_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.undo_void_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#undo_void_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Checks
    # Create or Update multiple Checks at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param checks [Array<Checks>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_checks(vbasoftware_database, checks, opts = {})
      data, _status_code, _headers = update_batch_checks_with_http_info(vbasoftware_database, checks, opts)
      data
    end

    # Create or Update Batch Checks
    # Create or Update multiple Checks at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param checks [Array<Checks>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_checks_with_http_info(vbasoftware_database, checks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.update_batch_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.update_batch_checks"
      end
      # verify the required parameter 'checks' is set
      if @api_client.config.client_side_validation && checks.nil?
        fail ArgumentError, "Missing the required parameter 'checks' when calling ChecksApi.update_batch_checks"
      end
      # resource path
      local_var_path = '/checks-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.update_batch_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#update_batch_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Checks
    # Updates a specific Checks.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param checks [Checks] 
    # @param [Hash] opts the optional parameters
    # @return [ChecksVBAResponse]
    def update_checks(vbasoftware_database, check_id, checks, opts = {})
      data, _status_code, _headers = update_checks_with_http_info(vbasoftware_database, check_id, checks, opts)
      data
    end

    # Update Checks
    # Updates a specific Checks.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param checks [Checks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChecksVBAResponse, Integer, Hash)>] ChecksVBAResponse data, response status code and response headers
    def update_checks_with_http_info(vbasoftware_database, check_id, checks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.update_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.update_checks"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling ChecksApi.update_checks"
      end
      # verify the required parameter 'checks' is set
      if @api_client.config.client_side_validation && checks.nil?
        fail ArgumentError, "Missing the required parameter 'checks' when calling ChecksApi.update_checks"
      end
      # resource path
      local_var_path = '/checks/{checkID}'.sub('{' + 'checkID' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(checks)

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.update_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#update_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void Check
    # Voids an existing Check
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param funding_void_check [FundingVoidCheck] 
    # @param [Hash] opts the optional parameters
    # @return [ChecksVBAResponse]
    def void_check(vbasoftware_database, check_id, funding_void_check, opts = {})
      data, _status_code, _headers = void_check_with_http_info(vbasoftware_database, check_id, funding_void_check, opts)
      data
    end

    # Void Check
    # Voids an existing Check
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param funding_void_check [FundingVoidCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChecksVBAResponse, Integer, Hash)>] ChecksVBAResponse data, response status code and response headers
    def void_check_with_http_info(vbasoftware_database, check_id, funding_void_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.void_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.void_check"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling ChecksApi.void_check"
      end
      # verify the required parameter 'funding_void_check' is set
      if @api_client.config.client_side_validation && funding_void_check.nil?
        fail ArgumentError, "Missing the required parameter 'funding_void_check' when calling ChecksApi.void_check"
      end
      # resource path
      local_var_path = '/checks/{checkID}/void'.sub('{' + 'checkID' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_void_check)

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.void_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#void_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void Premium Distribution Check
    # Voids a Premium Distribution Check by Check ID and all associated distribution records.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [ChecksVBAResponse]
    def void_distribution_check(vbasoftware_database, check_id, opts = {})
      data, _status_code, _headers = void_distribution_check_with_http_info(vbasoftware_database, check_id, opts)
      data
    end

    # Void Premium Distribution Check
    # Voids a Premium Distribution Check by Check ID and all associated distribution records.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChecksVBAResponse, Integer, Hash)>] ChecksVBAResponse data, response status code and response headers
    def void_distribution_check_with_http_info(vbasoftware_database, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChecksApi.void_distribution_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ChecksApi.void_distribution_check"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling ChecksApi.void_distribution_check"
      end
      # resource path
      local_var_path = '/checks-void-distribution/{checkId}'.sub('{' + 'checkId' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ChecksApi.void_distribution_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChecksApi#void_distribution_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
