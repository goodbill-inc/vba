=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class SecurityLevelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get SecurityLevel
    # Gets SecurityLevel
    # @param vbasoftware_database [String] Target database
    # @param security_level [Integer] Security Level
    # @param [Hash] opts the optional parameters
    # @return [SecurityLevelVBAResponse]
    def get_security_level(vbasoftware_database, security_level, opts = {})
      data, _status_code, _headers = get_security_level_with_http_info(vbasoftware_database, security_level, opts)
      data
    end

    # Get SecurityLevel
    # Gets SecurityLevel
    # @param vbasoftware_database [String] Target database
    # @param security_level [Integer] Security Level
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityLevelVBAResponse, Integer, Hash)>] SecurityLevelVBAResponse data, response status code and response headers
    def get_security_level_with_http_info(vbasoftware_database, security_level, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityLevelsApi.get_security_level ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SecurityLevelsApi.get_security_level"
      end
      # verify the required parameter 'security_level' is set
      if @api_client.config.client_side_validation && security_level.nil?
        fail ArgumentError, "Missing the required parameter 'security_level' when calling SecurityLevelsApi.get_security_level"
      end
      # resource path
      local_var_path = '/security-levels/{securityLevel}'.sub('{' + 'securityLevel' + '}', CGI.escape(security_level.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SecurityLevelVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SecurityLevelsApi.get_security_level",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityLevelsApi#get_security_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SecurityLevel
    # Lists all SecurityLevel 
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [SecurityLevelListVBAResponse]
    def list_security_level(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_security_level_with_http_info(vbasoftware_database, opts)
      data
    end

    # List SecurityLevel
    # Lists all SecurityLevel 
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityLevelListVBAResponse, Integer, Hash)>] SecurityLevelListVBAResponse data, response status code and response headers
    def list_security_level_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SecurityLevelsApi.list_security_level ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SecurityLevelsApi.list_security_level"
      end
      # resource path
      local_var_path = '/security-levels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SecurityLevelListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SecurityLevelsApi.list_security_level",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityLevelsApi#list_security_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
