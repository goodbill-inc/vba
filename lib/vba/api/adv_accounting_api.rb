=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvAccountingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Claim Account Funding
    # Submit a list of Payor/Account information to be funded based on configured parameters.  Returns whether there are invalid entries in your list that were skipped during processing.
    # @param vbasoftware_database [String] Target database
    # @param fundaccountbalancelist [Array<FUNDACCOUNTBALANCELIST>] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanVBAResponse]
    def accounting_fund_request(vbasoftware_database, fundaccountbalancelist, opts = {})
      data, _status_code, _headers = accounting_fund_request_with_http_info(vbasoftware_database, fundaccountbalancelist, opts)
      data
    end

    # Claim Account Funding
    # Submit a list of Payor/Account information to be funded based on configured parameters.  Returns whether there are invalid entries in your list that were skipped during processing.
    # @param vbasoftware_database [String] Target database
    # @param fundaccountbalancelist [Array<FUNDACCOUNTBALANCELIST>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanVBAResponse, Integer, Hash)>] BooleanVBAResponse data, response status code and response headers
    def accounting_fund_request_with_http_info(vbasoftware_database, fundaccountbalancelist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.accounting_fund_request ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.accounting_fund_request"
      end
      # verify the required parameter 'fundaccountbalancelist' is set
      if @api_client.config.client_side_validation && fundaccountbalancelist.nil?
        fail ArgumentError, "Missing the required parameter 'fundaccountbalancelist' when calling AdvAccountingApi.accounting_fund_request"
      end
      # resource path
      local_var_path = '/accounting-fund-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fundaccountbalancelist)

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.accounting_fund_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#accounting_fund_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Funding to Deposit
    # Creates Funding items and attaches them to an existing Deposit.
    # @param vbasoftware_database [String] Target database
    # @param deposit_key [Integer] Deposit Key
    # @param funding [Array<Funding>] 
    # @param [Hash] opts the optional parameters
    # @return [FundingDepositVBAResponse]
    def add_funding_deposit(vbasoftware_database, deposit_key, funding, opts = {})
      data, _status_code, _headers = add_funding_deposit_with_http_info(vbasoftware_database, deposit_key, funding, opts)
      data
    end

    # Add Funding to Deposit
    # Creates Funding items and attaches them to an existing Deposit.
    # @param vbasoftware_database [String] Target database
    # @param deposit_key [Integer] Deposit Key
    # @param funding [Array<Funding>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingDepositVBAResponse, Integer, Hash)>] FundingDepositVBAResponse data, response status code and response headers
    def add_funding_deposit_with_http_info(vbasoftware_database, deposit_key, funding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.add_funding_deposit ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.add_funding_deposit"
      end
      # verify the required parameter 'deposit_key' is set
      if @api_client.config.client_side_validation && deposit_key.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_key' when calling AdvAccountingApi.add_funding_deposit"
      end
      # verify the required parameter 'funding' is set
      if @api_client.config.client_side_validation && funding.nil?
        fail ArgumentError, "Missing the required parameter 'funding' when calling AdvAccountingApi.add_funding_deposit"
      end
      # resource path
      local_var_path = '/funding-deposits/{depositKey}/add-funding'.sub('{' + 'depositKey' + '}', CGI.escape(deposit_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingDepositVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.add_funding_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#add_funding_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Reconciliation
    # Creates a new FundingReconcile along with attaching any Checks/Deposits identified.
    # @param vbasoftware_database [String] Target database
    # @param funding_statement [FundingStatement] 
    # @param [Hash] opts the optional parameters
    # @return [FundingReconcileVBAResponse]
    def add_reconciliation(vbasoftware_database, funding_statement, opts = {})
      data, _status_code, _headers = add_reconciliation_with_http_info(vbasoftware_database, funding_statement, opts)
      data
    end

    # Add Reconciliation
    # Creates a new FundingReconcile along with attaching any Checks/Deposits identified.
    # @param vbasoftware_database [String] Target database
    # @param funding_statement [FundingStatement] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingReconcileVBAResponse, Integer, Hash)>] FundingReconcileVBAResponse data, response status code and response headers
    def add_reconciliation_with_http_info(vbasoftware_database, funding_statement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.add_reconciliation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.add_reconciliation"
      end
      # verify the required parameter 'funding_statement' is set
      if @api_client.config.client_side_validation && funding_statement.nil?
        fail ArgumentError, "Missing the required parameter 'funding_statement' when calling AdvAccountingApi.add_reconciliation"
      end
      # resource path
      local_var_path = '/funding-reconciliation-add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_statement)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingReconcileVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.add_reconciliation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#add_reconciliation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Claim Refund
    # Process a Claim Refund creating the necessary Backout and Reentry claims and adding Claim Reference values.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_claim_refund [FundingProcessClaimRefund] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def claim_refund(vbasoftware_database, funding_process_claim_refund, opts = {})
      claim_refund_with_http_info(vbasoftware_database, funding_process_claim_refund, opts)
      nil
    end

    # Claim Refund
    # Process a Claim Refund creating the necessary Backout and Reentry claims and adding Claim Reference values.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_claim_refund [FundingProcessClaimRefund] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def claim_refund_with_http_info(vbasoftware_database, funding_process_claim_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.claim_refund ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.claim_refund"
      end
      # verify the required parameter 'funding_process_claim_refund' is set
      if @api_client.config.client_side_validation && funding_process_claim_refund.nil?
        fail ArgumentError, "Missing the required parameter 'funding_process_claim_refund' when calling AdvAccountingApi.claim_refund"
      end
      # resource path
      local_var_path = '/accounting-claim-refund'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_process_claim_refund)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.claim_refund",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#claim_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get FundingAccount Balance
    # Gets FundingAccount balance details
    # @param vbasoftware_database [String] Target database
    # @param account_key [Integer] Account Key
    # @param [Hash] opts the optional parameters
    # @return [FundingAccountBalanceVBAResponse]
    def get_funding_account_balance(vbasoftware_database, account_key, opts = {})
      data, _status_code, _headers = get_funding_account_balance_with_http_info(vbasoftware_database, account_key, opts)
      data
    end

    # Get FundingAccount Balance
    # Gets FundingAccount balance details
    # @param vbasoftware_database [String] Target database
    # @param account_key [Integer] Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingAccountBalanceVBAResponse, Integer, Hash)>] FundingAccountBalanceVBAResponse data, response status code and response headers
    def get_funding_account_balance_with_http_info(vbasoftware_database, account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.get_funding_account_balance ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.get_funding_account_balance"
      end
      # verify the required parameter 'account_key' is set
      if @api_client.config.client_side_validation && account_key.nil?
        fail ArgumentError, "Missing the required parameter 'account_key' when calling AdvAccountingApi.get_funding_account_balance"
      end
      # resource path
      local_var_path = '/funding-accounts/{accountKey}/account-balance'.sub('{' + 'accountKey' + '}', CGI.escape(account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingAccountBalanceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.get_funding_account_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#get_funding_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Name and Address Information
    # Using Send Check To and a dynamic Pay To ID, get the delivery information for a potential check.
    # @param vbasoftware_database [String] Target database
    # @param funding_name_on_check [FundingNameOnCheck] 
    # @param [Hash] opts the optional parameters
    # @return [FundingNameOnCheckVBAResponse]
    def get_name_on_check(vbasoftware_database, funding_name_on_check, opts = {})
      data, _status_code, _headers = get_name_on_check_with_http_info(vbasoftware_database, funding_name_on_check, opts)
      data
    end

    # Get Name and Address Information
    # Using Send Check To and a dynamic Pay To ID, get the delivery information for a potential check.
    # @param vbasoftware_database [String] Target database
    # @param funding_name_on_check [FundingNameOnCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingNameOnCheckVBAResponse, Integer, Hash)>] FundingNameOnCheckVBAResponse data, response status code and response headers
    def get_name_on_check_with_http_info(vbasoftware_database, funding_name_on_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.get_name_on_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.get_name_on_check"
      end
      # verify the required parameter 'funding_name_on_check' is set
      if @api_client.config.client_side_validation && funding_name_on_check.nil?
        fail ArgumentError, "Missing the required parameter 'funding_name_on_check' when calling AdvAccountingApi.get_name_on_check"
      end
      # resource path
      local_var_path = '/checks-name-on-check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_name_on_check)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingNameOnCheckVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.get_name_on_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#get_name_on_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PayorAccount Balance
    # Gets PayorAccount Balance details
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [FundingAccountBalanceVBAResponse]
    def get_payor_account_balance(vbasoftware_database, payor_account_key, opts = {})
      data, _status_code, _headers = get_payor_account_balance_with_http_info(vbasoftware_database, payor_account_key, opts)
      data
    end

    # Get PayorAccount Balance
    # Gets PayorAccount Balance details
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingAccountBalanceVBAResponse, Integer, Hash)>] FundingAccountBalanceVBAResponse data, response status code and response headers
    def get_payor_account_balance_with_http_info(vbasoftware_database, payor_account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.get_payor_account_balance ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.get_payor_account_balance"
      end
      # verify the required parameter 'payor_account_key' is set
      if @api_client.config.client_side_validation && payor_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account_key' when calling AdvAccountingApi.get_payor_account_balance"
      end
      # resource path
      local_var_path = '/payor-accounts/{payorAccountKey}/account-balance'.sub('{' + 'payorAccountKey' + '}', CGI.escape(payor_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingAccountBalanceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.get_payor_account_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#get_payor_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hold Funds
    # Lower the existing funding item by the hold amount and create a new funding for the hold amount.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param hold_amount [Float] 
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def hold_funds(vbasoftware_database, funding_key, hold_amount, opts = {})
      data, _status_code, _headers = hold_funds_with_http_info(vbasoftware_database, funding_key, hold_amount, opts)
      data
    end

    # Hold Funds
    # Lower the existing funding item by the hold amount and create a new funding for the hold amount.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param hold_amount [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def hold_funds_with_http_info(vbasoftware_database, funding_key, hold_amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.hold_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.hold_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling AdvAccountingApi.hold_funds"
      end
      # verify the required parameter 'hold_amount' is set
      if @api_client.config.client_side_validation && hold_amount.nil?
        fail ArgumentError, "Missing the required parameter 'hold_amount' when calling AdvAccountingApi.hold_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/hold'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['holdAmount'] = hold_amount

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.hold_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#hold_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mass Update Claim Funded Status
    # Pass in a list of claims and what Claim_Funded_Status to update that claim to and have it updated in mass without iterating through claim records.
    # @param vbasoftware_database [String] Target database
    # @param vba_update_claim_funded_status [Array<VBAUpdateClaimFundedStatus>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mass_update_claim_funded_status(vbasoftware_database, vba_update_claim_funded_status, opts = {})
      mass_update_claim_funded_status_with_http_info(vbasoftware_database, vba_update_claim_funded_status, opts)
      nil
    end

    # Mass Update Claim Funded Status
    # Pass in a list of claims and what Claim_Funded_Status to update that claim to and have it updated in mass without iterating through claim records.
    # @param vbasoftware_database [String] Target database
    # @param vba_update_claim_funded_status [Array<VBAUpdateClaimFundedStatus>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mass_update_claim_funded_status_with_http_info(vbasoftware_database, vba_update_claim_funded_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.mass_update_claim_funded_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.mass_update_claim_funded_status"
      end
      # verify the required parameter 'vba_update_claim_funded_status' is set
      if @api_client.config.client_side_validation && vba_update_claim_funded_status.nil?
        fail ArgumentError, "Missing the required parameter 'vba_update_claim_funded_status' when calling AdvAccountingApi.mass_update_claim_funded_status"
      end
      # resource path
      local_var_path = '/accounting-update-claim-funded-status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_update_claim_funded_status)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.mass_update_claim_funded_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#mass_update_claim_funded_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process Checks
    # Initiates the process of Check Processing. If the request is valid, the system will generate the necessary actions to process checks and respond with a success status code of 202 Accepted, along with the generated process key.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_check [FundingProcessCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def process_checks(vbasoftware_database, funding_process_check, opts = {})
      data, _status_code, _headers = process_checks_with_http_info(vbasoftware_database, funding_process_check, opts)
      data
    end

    # Process Checks
    # Initiates the process of Check Processing. If the request is valid, the system will generate the necessary actions to process checks and respond with a success status code of 202 Accepted, along with the generated process key.
    # @param vbasoftware_database [String] Target database
    # @param funding_process_check [FundingProcessCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def process_checks_with_http_info(vbasoftware_database, funding_process_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.process_checks ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.process_checks"
      end
      # verify the required parameter 'funding_process_check' is set
      if @api_client.config.client_side_validation && funding_process_check.nil?
        fail ArgumentError, "Missing the required parameter 'funding_process_check' when calling AdvAccountingApi.process_checks"
      end
      # resource path
      local_var_path = '/checks-process'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_process_check)

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.process_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#process_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reacllocate Funds
    # Change the Payor ID and Account Key of an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def reallocate_funds(vbasoftware_database, funding_key, payor_id, account_key, opts = {})
      data, _status_code, _headers = reallocate_funds_with_http_info(vbasoftware_database, funding_key, payor_id, account_key, opts)
      data
    end

    # Reacllocate Funds
    # Change the Payor ID and Account Key of an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def reallocate_funds_with_http_info(vbasoftware_database, funding_key, payor_id, account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.reallocate_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.reallocate_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling AdvAccountingApi.reallocate_funds"
      end
      # verify the required parameter 'payor_id' is set
      if @api_client.config.client_side_validation && payor_id.nil?
        fail ArgumentError, "Missing the required parameter 'payor_id' when calling AdvAccountingApi.reallocate_funds"
      end
      # verify the required parameter 'account_key' is set
      if @api_client.config.client_side_validation && account_key.nil?
        fail ArgumentError, "Missing the required parameter 'account_key' when calling AdvAccountingApi.reallocate_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/payors/{payorId}/accounts/{accountKey}/reallocate'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s)).sub('{' + 'payorId' + '}', CGI.escape(payor_id.to_s)).sub('{' + 'accountKey' + '}', CGI.escape(account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.reallocate_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#reallocate_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reconcile Funds
    # Reconcile all Deposits, Checks, and Funding associated with this Reconciliation as well as creating offset debits and credits.
    # @param vbasoftware_database [String] Target database
    # @param funding_statement [FundingStatement] 
    # @param [Hash] opts the optional parameters
    # @return [FundingReconcileVBAResponse]
    def reconcile_funds(vbasoftware_database, funding_statement, opts = {})
      data, _status_code, _headers = reconcile_funds_with_http_info(vbasoftware_database, funding_statement, opts)
      data
    end

    # Reconcile Funds
    # Reconcile all Deposits, Checks, and Funding associated with this Reconciliation as well as creating offset debits and credits.
    # @param vbasoftware_database [String] Target database
    # @param funding_statement [FundingStatement] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingReconcileVBAResponse, Integer, Hash)>] FundingReconcileVBAResponse data, response status code and response headers
    def reconcile_funds_with_http_info(vbasoftware_database, funding_statement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.reconcile_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.reconcile_funds"
      end
      # verify the required parameter 'funding_statement' is set
      if @api_client.config.client_side_validation && funding_statement.nil?
        fail ArgumentError, "Missing the required parameter 'funding_statement' when calling AdvAccountingApi.reconcile_funds"
      end
      # resource path
      local_var_path = '/funding-reconciliation-reconcile-funds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_statement)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingReconcileVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.reconcile_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#reconcile_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transfer Funds
    # Transfer funds from one account to another.  Additionally, can auto-create a premium distribution if a Funding_Key of 0 is sent.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param funding_transfer_funds [FundingTransferFunds] 
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def transfer_funds(vbasoftware_database, funding_key, funding_transfer_funds, opts = {})
      data, _status_code, _headers = transfer_funds_with_http_info(vbasoftware_database, funding_key, funding_transfer_funds, opts)
      data
    end

    # Transfer Funds
    # Transfer funds from one account to another.  Additionally, can auto-create a premium distribution if a Funding_Key of 0 is sent.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param funding_transfer_funds [FundingTransferFunds] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def transfer_funds_with_http_info(vbasoftware_database, funding_key, funding_transfer_funds, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.transfer_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.transfer_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling AdvAccountingApi.transfer_funds"
      end
      # verify the required parameter 'funding_transfer_funds' is set
      if @api_client.config.client_side_validation && funding_transfer_funds.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transfer_funds' when calling AdvAccountingApi.transfer_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/transfer'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_transfer_funds)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.transfer_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#transfer_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undo Void Check
    # Undo a previously voided check by Check ID.  Returns the VBAProcess Key for log review and verification.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def undo_void_check(vbasoftware_database, check_id, opts = {})
      data, _status_code, _headers = undo_void_check_with_http_info(vbasoftware_database, check_id, opts)
      data
    end

    # Undo Void Check
    # Undo a previously voided check by Check ID.  Returns the VBAProcess Key for log review and verification.
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def undo_void_check_with_http_info(vbasoftware_database, check_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.undo_void_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.undo_void_check"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling AdvAccountingApi.undo_void_check"
      end
      # resource path
      local_var_path = '/checks-undo-void'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'checkId'] = check_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.undo_void_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#undo_void_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void Check
    # Voids an existing Check
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param funding_void_check [FundingVoidCheck] 
    # @param [Hash] opts the optional parameters
    # @return [ChecksVBAResponse]
    def void_check(vbasoftware_database, check_id, funding_void_check, opts = {})
      data, _status_code, _headers = void_check_with_http_info(vbasoftware_database, check_id, funding_void_check, opts)
      data
    end

    # Void Check
    # Voids an existing Check
    # @param vbasoftware_database [String] Target database
    # @param check_id [Integer] Check ID
    # @param funding_void_check [FundingVoidCheck] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChecksVBAResponse, Integer, Hash)>] ChecksVBAResponse data, response status code and response headers
    def void_check_with_http_info(vbasoftware_database, check_id, funding_void_check, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.void_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.void_check"
      end
      # verify the required parameter 'check_id' is set
      if @api_client.config.client_side_validation && check_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_id' when calling AdvAccountingApi.void_check"
      end
      # verify the required parameter 'funding_void_check' is set
      if @api_client.config.client_side_validation && funding_void_check.nil?
        fail ArgumentError, "Missing the required parameter 'funding_void_check' when calling AdvAccountingApi.void_check"
      end
      # resource path
      local_var_path = '/checks/{checkID}/void'.sub('{' + 'checkID' + '}', CGI.escape(check_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_void_check)

      # return_type
      return_type = opts[:debug_return_type] || 'ChecksVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.void_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#void_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void Funds
    # Void an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def void_funds(vbasoftware_database, funding_key, opts = {})
      data, _status_code, _headers = void_funds_with_http_info(vbasoftware_database, funding_key, opts)
      data
    end

    # Void Funds
    # Void an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def void_funds_with_http_info(vbasoftware_database, funding_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvAccountingApi.void_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvAccountingApi.void_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling AdvAccountingApi.void_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/void'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvAccountingApi.void_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvAccountingApi#void_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
