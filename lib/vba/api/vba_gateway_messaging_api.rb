=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class VBAGatewayMessagingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a Message wihtin a VBAGateway MessageThread
    # Create a Message wihtin a VBAGateway MessageThread. This operation will insert the new message into the VBAGateway database that is paired with this VBASoftwre database.
    # @param vbasoftware_database [String] Target database
    # @param message_thread_key [Integer] MessageThread_Key
    # @param messages [Messages] 
    # @param [Hash] opts the optional parameters
    # @return [MessagesVBAResponse]
    def create_vba_gateway_message(vbasoftware_database, message_thread_key, messages, opts = {})
      data, _status_code, _headers = create_vba_gateway_message_with_http_info(vbasoftware_database, message_thread_key, messages, opts)
      data
    end

    # Create a Message wihtin a VBAGateway MessageThread
    # Create a Message wihtin a VBAGateway MessageThread. This operation will insert the new message into the VBAGateway database that is paired with this VBASoftwre database.
    # @param vbasoftware_database [String] Target database
    # @param message_thread_key [Integer] MessageThread_Key
    # @param messages [Messages] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessagesVBAResponse, Integer, Hash)>] MessagesVBAResponse data, response status code and response headers
    def create_vba_gateway_message_with_http_info(vbasoftware_database, message_thread_key, messages, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VBAGatewayMessagingApi.create_vba_gateway_message ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling VBAGatewayMessagingApi.create_vba_gateway_message"
      end
      # verify the required parameter 'message_thread_key' is set
      if @api_client.config.client_side_validation && message_thread_key.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_key' when calling VBAGatewayMessagingApi.create_vba_gateway_message"
      end
      # verify the required parameter 'messages' is set
      if @api_client.config.client_side_validation && messages.nil?
        fail ArgumentError, "Missing the required parameter 'messages' when calling VBAGatewayMessagingApi.create_vba_gateway_message"
      end
      # resource path
      local_var_path = '/vbagateway-message-threads/{MessageThread_Key}/messages'.sub('{' + 'MessageThread_Key' + '}', CGI.escape(message_thread_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(messages)

      # return_type
      return_type = opts[:debug_return_type] || 'MessagesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VBAGatewayMessagingApi.create_vba_gateway_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VBAGatewayMessagingApi#create_vba_gateway_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific MessageAttachment
    # Retrieves a specific MessageAttachment by its MessageAttachment_Key from the VBAGateway database.
    # @param vbasoftware_database [String] Target database
    # @param message_attachment_key [Integer] MessageAttachment_Key
    # @param [Hash] opts the optional parameters
    # @return [MessageAttachmentVBAResponse]
    def get_vba_gateway_message_attachment(vbasoftware_database, message_attachment_key, opts = {})
      data, _status_code, _headers = get_vba_gateway_message_attachment_with_http_info(vbasoftware_database, message_attachment_key, opts)
      data
    end

    # Get a specific MessageAttachment
    # Retrieves a specific MessageAttachment by its MessageAttachment_Key from the VBAGateway database.
    # @param vbasoftware_database [String] Target database
    # @param message_attachment_key [Integer] MessageAttachment_Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageAttachmentVBAResponse, Integer, Hash)>] MessageAttachmentVBAResponse data, response status code and response headers
    def get_vba_gateway_message_attachment_with_http_info(vbasoftware_database, message_attachment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VBAGatewayMessagingApi.get_vba_gateway_message_attachment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling VBAGatewayMessagingApi.get_vba_gateway_message_attachment"
      end
      # verify the required parameter 'message_attachment_key' is set
      if @api_client.config.client_side_validation && message_attachment_key.nil?
        fail ArgumentError, "Missing the required parameter 'message_attachment_key' when calling VBAGatewayMessagingApi.get_vba_gateway_message_attachment"
      end
      # resource path
      local_var_path = '/vbagateway-message-attachments/{MessageAttachment_Key}'.sub('{' + 'MessageAttachment_Key' + '}', CGI.escape(message_attachment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageAttachmentVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VBAGatewayMessagingApi.get_vba_gateway_message_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VBAGatewayMessagingApi#get_vba_gateway_message_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VBAGateway MessageThread
    # Gets VBAGateway MessageThread by key
    # @param vbasoftware_database [String] Target database
    # @param message_thread_key [Integer] MessageThread_Key
    # @param [Hash] opts the optional parameters
    # @return [MessageThreadVBAResponse]
    def get_vba_gateway_message_thread(vbasoftware_database, message_thread_key, opts = {})
      data, _status_code, _headers = get_vba_gateway_message_thread_with_http_info(vbasoftware_database, message_thread_key, opts)
      data
    end

    # Get VBAGateway MessageThread
    # Gets VBAGateway MessageThread by key
    # @param vbasoftware_database [String] Target database
    # @param message_thread_key [Integer] MessageThread_Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageThreadVBAResponse, Integer, Hash)>] MessageThreadVBAResponse data, response status code and response headers
    def get_vba_gateway_message_thread_with_http_info(vbasoftware_database, message_thread_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VBAGatewayMessagingApi.get_vba_gateway_message_thread ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling VBAGatewayMessagingApi.get_vba_gateway_message_thread"
      end
      # verify the required parameter 'message_thread_key' is set
      if @api_client.config.client_side_validation && message_thread_key.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_key' when calling VBAGatewayMessagingApi.get_vba_gateway_message_thread"
      end
      # resource path
      local_var_path = '/vbagateway-message-threads/{MessageThread_Key}'.sub('{' + 'MessageThread_Key' + '}', CGI.escape(message_thread_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageThreadVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VBAGatewayMessagingApi.get_vba_gateway_message_thread",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VBAGatewayMessagingApi#get_vba_gateway_message_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update VBAGateway MessageThread
    # Update VBAGateway MessageThread by key
    # @param vbasoftware_database [String] Target database
    # @param message_thread_key [Integer] MessageThread_Key
    # @param message_thread [MessageThread] 
    # @param [Hash] opts the optional parameters
    # @return [MessageThreadVBAResponse]
    def update_vba_gateway_message_thread(vbasoftware_database, message_thread_key, message_thread, opts = {})
      data, _status_code, _headers = update_vba_gateway_message_thread_with_http_info(vbasoftware_database, message_thread_key, message_thread, opts)
      data
    end

    # Update VBAGateway MessageThread
    # Update VBAGateway MessageThread by key
    # @param vbasoftware_database [String] Target database
    # @param message_thread_key [Integer] MessageThread_Key
    # @param message_thread [MessageThread] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageThreadVBAResponse, Integer, Hash)>] MessageThreadVBAResponse data, response status code and response headers
    def update_vba_gateway_message_thread_with_http_info(vbasoftware_database, message_thread_key, message_thread, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VBAGatewayMessagingApi.update_vba_gateway_message_thread ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling VBAGatewayMessagingApi.update_vba_gateway_message_thread"
      end
      # verify the required parameter 'message_thread_key' is set
      if @api_client.config.client_side_validation && message_thread_key.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread_key' when calling VBAGatewayMessagingApi.update_vba_gateway_message_thread"
      end
      # verify the required parameter 'message_thread' is set
      if @api_client.config.client_side_validation && message_thread.nil?
        fail ArgumentError, "Missing the required parameter 'message_thread' when calling VBAGatewayMessagingApi.update_vba_gateway_message_thread"
      end
      # resource path
      local_var_path = '/vbagateway-message-threads/{MessageThread_Key}'.sub('{' + 'MessageThread_Key' + '}', CGI.escape(message_thread_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(message_thread)

      # return_type
      return_type = opts[:debug_return_type] || 'MessageThreadVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VBAGatewayMessagingApi.update_vba_gateway_message_thread",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VBAGatewayMessagingApi#update_vba_gateway_message_thread\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VBAGateway Request and Transpose to key/value pairs
    # Gets VBAGateway Request in real-time and converts the request into key/value pairs.  VBAGateway requests may have different keys based on the request type.
    # @param vbasoftware_database [String] Target database
    # @param request_key [Integer] Request_Key
    # @param [Hash] opts the optional parameters
    # @return [TransposeRequestMetaDataResultListVBAResponse]
    def v_ba_gateway_transpose_request(vbasoftware_database, request_key, opts = {})
      data, _status_code, _headers = v_ba_gateway_transpose_request_with_http_info(vbasoftware_database, request_key, opts)
      data
    end

    # Get VBAGateway Request and Transpose to key/value pairs
    # Gets VBAGateway Request in real-time and converts the request into key/value pairs.  VBAGateway requests may have different keys based on the request type.
    # @param vbasoftware_database [String] Target database
    # @param request_key [Integer] Request_Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransposeRequestMetaDataResultListVBAResponse, Integer, Hash)>] TransposeRequestMetaDataResultListVBAResponse data, response status code and response headers
    def v_ba_gateway_transpose_request_with_http_info(vbasoftware_database, request_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VBAGatewayMessagingApi.v_ba_gateway_transpose_request ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling VBAGatewayMessagingApi.v_ba_gateway_transpose_request"
      end
      # verify the required parameter 'request_key' is set
      if @api_client.config.client_side_validation && request_key.nil?
        fail ArgumentError, "Missing the required parameter 'request_key' when calling VBAGatewayMessagingApi.v_ba_gateway_transpose_request"
      end
      # resource path
      local_var_path = '/vbagateway-requests/{Request_Key}/transpose'.sub('{' + 'Request_Key' + '}', CGI.escape(request_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransposeRequestMetaDataResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VBAGatewayMessagingApi.v_ba_gateway_transpose_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VBAGatewayMessagingApi#v_ba_gateway_transpose_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
