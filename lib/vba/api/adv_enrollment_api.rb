=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvEnrollmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Change Subscriber ID
    # Changes a Subscriber ID globally
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param change_subscriber_id_request [ChangeSubscriberIDRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def changesubscriber_id(vbasoftware_database, subscriber_id, change_subscriber_id_request, opts = {})
      changesubscriber_id_with_http_info(vbasoftware_database, subscriber_id, change_subscriber_id_request, opts)
      nil
    end

    # Change Subscriber ID
    # Changes a Subscriber ID globally
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param change_subscriber_id_request [ChangeSubscriberIDRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def changesubscriber_id_with_http_info(vbasoftware_database, subscriber_id, change_subscriber_id_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.changesubscriber_id ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.changesubscriber_id"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.changesubscriber_id"
      end
      # verify the required parameter 'change_subscriber_id_request' is set
      if @api_client.config.client_side_validation && change_subscriber_id_request.nil?
        fail ArgumentError, "Missing the required parameter 'change_subscriber_id_request' when calling AdvEnrollmentApi.changesubscriber_id"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/change-id'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(change_subscriber_id_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.changesubscriber_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#changesubscriber_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Benefit Inquiry
    # Get a consolidated payload of benefit information, accumulator information, and eligility.
    # @param vbasoftware_database [String] Target database
    # @param vba_benefit_inquiry_request [VBABenefitInquiryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [VBABenefitInquiryVBAResponse]
    def enrollment_benefit_inquiry(vbasoftware_database, vba_benefit_inquiry_request, opts = {})
      data, _status_code, _headers = enrollment_benefit_inquiry_with_http_info(vbasoftware_database, vba_benefit_inquiry_request, opts)
      data
    end

    # Benefit Inquiry
    # Get a consolidated payload of benefit information, accumulator information, and eligility.
    # @param vbasoftware_database [String] Target database
    # @param vba_benefit_inquiry_request [VBABenefitInquiryRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBABenefitInquiryVBAResponse, Integer, Hash)>] VBABenefitInquiryVBAResponse data, response status code and response headers
    def enrollment_benefit_inquiry_with_http_info(vbasoftware_database, vba_benefit_inquiry_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.enrollment_benefit_inquiry ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.enrollment_benefit_inquiry"
      end
      # verify the required parameter 'vba_benefit_inquiry_request' is set
      if @api_client.config.client_side_validation && vba_benefit_inquiry_request.nil?
        fail ArgumentError, "Missing the required parameter 'vba_benefit_inquiry_request' when calling AdvEnrollmentApi.enrollment_benefit_inquiry"
      end
      # resource path
      local_var_path = '/enrollment-benefit-inquiry'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_benefit_inquiry_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VBABenefitInquiryVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.enrollment_benefit_inquiry",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#enrollment_benefit_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Process Automation for ID Card Requests
    # Takes a list of IDCardRequest_Key values and verifies those against configured process automation settings.
    # @param vbasoftware_database [String] Target database
    # @param id_card_request_report_series_config [IDCardRequestReportSeriesConfig] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def i_d_card_request_report_series(vbasoftware_database, id_card_request_report_series_config, opts = {})
      data, _status_code, _headers = i_d_card_request_report_series_with_http_info(vbasoftware_database, id_card_request_report_series_config, opts)
      data
    end

    # Set Process Automation for ID Card Requests
    # Takes a list of IDCardRequest_Key values and verifies those against configured process automation settings.
    # @param vbasoftware_database [String] Target database
    # @param id_card_request_report_series_config [IDCardRequestReportSeriesConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def i_d_card_request_report_series_with_http_info(vbasoftware_database, id_card_request_report_series_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.i_d_card_request_report_series ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.i_d_card_request_report_series"
      end
      # verify the required parameter 'id_card_request_report_series_config' is set
      if @api_client.config.client_side_validation && id_card_request_report_series_config.nil?
        fail ArgumentError, "Missing the required parameter 'id_card_request_report_series_config' when calling AdvEnrollmentApi.i_d_card_request_report_series"
      end
      # resource path
      local_var_path = '/idcardrequest-process-automation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(id_card_request_report_series_config)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.i_d_card_request_report_series",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#i_d_card_request_report_series\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Billing Adjustments for Disenroll
    # List of Billing Adjustments that would be created based on a Subscriber being disenrolled on the As of Date.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentDisenrollAdjustmentListVBAResponse]
    def list_disenroll_adjustment(vbasoftware_database, subscriber_id, as_of_date, opts = {})
      data, _status_code, _headers = list_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, as_of_date, opts)
      data
    end

    # List Billing Adjustments for Disenroll
    # List of Billing Adjustments that would be created based on a Subscriber being disenrolled on the As of Date.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentDisenrollAdjustmentListVBAResponse, Integer, Hash)>] EnrollmentDisenrollAdjustmentListVBAResponse data, response status code and response headers
    def list_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.list_disenroll_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.list_disenroll_adjustment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.list_disenroll_adjustment"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling AdvEnrollmentApi.list_disenroll_adjustment"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/as-of-date/{asOfDate}/disenroll-adjustments'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'asOfDate' + '}', CGI.escape(as_of_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentDisenrollAdjustmentListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.list_disenroll_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#list_disenroll_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Waiting Period Details
    # List of Waiting Period configuration based on the passed in settings (group, division, plan, and/or hire date).
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [Time] :hire_date Hire Date
    # @return [EnrollmentWaitingPeriodByHireDateListVBAResponse]
    def list_enrollment_waiting_period_by_hire_date(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_enrollment_waiting_period_by_hire_date_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Waiting Period Details
    # List of Waiting Period configuration based on the passed in settings (group, division, plan, and/or hire date).
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Group ID
    # @option opts [String] :division_id Division ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [Time] :hire_date Hire Date
    # @return [Array<(EnrollmentWaitingPeriodByHireDateListVBAResponse, Integer, Hash)>] EnrollmentWaitingPeriodByHireDateListVBAResponse data, response status code and response headers
    def list_enrollment_waiting_period_by_hire_date_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.list_enrollment_waiting_period_by_hire_date ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.list_enrollment_waiting_period_by_hire_date"
      end
      # resource path
      local_var_path = '/enrollment-waiting-period-by-hire-date'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupID'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'divisionID'] = opts[:'division_id'] if !opts[:'division_id'].nil?
      query_params[:'planID'] = opts[:'plan_id'] if !opts[:'plan_id'].nil?
      query_params[:'hireDate'] = opts[:'hire_date'] if !opts[:'hire_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentWaitingPeriodByHireDateListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.list_enrollment_waiting_period_by_hire_date",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#list_enrollment_waiting_period_by_hire_date\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Member Disenroll
    # Disenrolls a Member from an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_disenroll [EnrollmentDisenroll] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def member_disenroll(vbasoftware_database, subscriber_id, member_seq, enrollment_disenroll, opts = {})
      data, _status_code, _headers = member_disenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_disenroll, opts)
      data
    end

    # Member Disenroll
    # Disenrolls a Member from an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_disenroll [EnrollmentDisenroll] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def member_disenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_disenroll, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.member_disenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.member_disenroll"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.member_disenroll"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling AdvEnrollmentApi.member_disenroll"
      end
      # verify the required parameter 'enrollment_disenroll' is set
      if @api_client.config.client_side_validation && enrollment_disenroll.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_disenroll' when calling AdvEnrollmentApi.member_disenroll"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/disenroll'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_disenroll)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.member_disenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#member_disenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Member Re-enroll
    # Re-enrolls a Member to an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessVBAResponse]
    def member_reenroll(vbasoftware_database, subscriber_id, member_seq, enrollment_reenroll, opts = {})
      data, _status_code, _headers = member_reenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_reenroll, opts)
      data
    end

    # Member Re-enroll
    # Re-enrolls a Member to an Enrollment.  A VBAProcess object is returned representing the process state. See VBAProcess area for more information.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param enrollment_reenroll [EnrollmentReenroll] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessVBAResponse, Integer, Hash)>] VBAProcessVBAResponse data, response status code and response headers
    def member_reenroll_with_http_info(vbasoftware_database, subscriber_id, member_seq, enrollment_reenroll, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.member_reenroll ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.member_reenroll"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.member_reenroll"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling AdvEnrollmentApi.member_reenroll"
      end
      # verify the required parameter 'enrollment_reenroll' is set
      if @api_client.config.client_side_validation && enrollment_reenroll.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_reenroll' when calling AdvEnrollmentApi.member_reenroll"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/reenroll'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_reenroll)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.member_reenroll",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#member_reenroll\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recalculate Member Teeth
    # Recalculate All Teeth for a given Subscriber and Member.  Pass the requestingUserId if this request is being made on behalf of another User.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requesting_user_id Requesting User
    # @return [nil]
    def recalculate_member_teeth(vbasoftware_database, subscriber_id, member_seq, opts = {})
      recalculate_member_teeth_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts)
      nil
    end

    # Recalculate Member Teeth
    # Recalculate All Teeth for a given Subscriber and Member.  Pass the requestingUserId if this request is being made on behalf of another User.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param member_seq [String] Member Seq
    # @param [Hash] opts the optional parameters
    # @option opts [String] :requesting_user_id Requesting User
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def recalculate_member_teeth_with_http_info(vbasoftware_database, subscriber_id, member_seq, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.recalculate_member_teeth ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.recalculate_member_teeth"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.recalculate_member_teeth"
      end
      # verify the required parameter 'member_seq' is set
      if @api_client.config.client_side_validation && member_seq.nil?
        fail ArgumentError, "Missing the required parameter 'member_seq' when calling AdvEnrollmentApi.recalculate_member_teeth"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/members/{memberSeq}/recalculate-teeth'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'memberSeq' + '}', CGI.escape(member_seq.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestingUserId'] = opts[:'requesting_user_id'] if !opts[:'requesting_user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.recalculate_member_teeth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#recalculate_member_teeth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscriber Add Enrollment
    # Adds enrollments to an existing subscriber. Can add enrollment for the subscriber or subscriber + all members.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param add_enrollment_request [AddEnrollmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_add_enrollment(vbasoftware_database, subscriber_id, add_enrollment_request, opts = {})
      subscriber_add_enrollment_with_http_info(vbasoftware_database, subscriber_id, add_enrollment_request, opts)
      nil
    end

    # Subscriber Add Enrollment
    # Adds enrollments to an existing subscriber. Can add enrollment for the subscriber or subscriber + all members.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param add_enrollment_request [AddEnrollmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_add_enrollment_with_http_info(vbasoftware_database, subscriber_id, add_enrollment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.subscriber_add_enrollment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.subscriber_add_enrollment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.subscriber_add_enrollment"
      end
      # verify the required parameter 'add_enrollment_request' is set
      if @api_client.config.client_side_validation && add_enrollment_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_enrollment_request' when calling AdvEnrollmentApi.subscriber_add_enrollment"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/add-enrollment'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_enrollment_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.subscriber_add_enrollment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#subscriber_add_enrollment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscriber Division Transfer
    # Transfer a Subscriber Enrollment from one Division to another.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param current_enroll_end_date [Time] Current Enrollment End Date
    # @param new_enroll_start_date [Time] New Enrollment Start Date
    # @param new_enroll_division_id [String] New Enrollment DivisionID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_division_transfer(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, current_enroll_end_date, new_enroll_start_date, new_enroll_division_id, opts = {})
      subscriber_division_transfer_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, current_enroll_end_date, new_enroll_start_date, new_enroll_division_id, opts)
      nil
    end

    # Subscriber Division Transfer
    # Transfer a Subscriber Enrollment from one Division to another.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param group_coverage_start [Time] Group Coverage Start
    # @param start_date [Time] Start Date
    # @param current_enroll_end_date [Time] Current Enrollment End Date
    # @param new_enroll_start_date [Time] New Enrollment Start Date
    # @param new_enroll_division_id [String] New Enrollment DivisionID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_division_transfer_with_http_info(vbasoftware_database, subscriber_id, group_id, division_id, group_coverage_start, start_date, current_enroll_end_date, new_enroll_start_date, new_enroll_division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.subscriber_division_transfer ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'group_coverage_start' is set
      if @api_client.config.client_side_validation && group_coverage_start.nil?
        fail ArgumentError, "Missing the required parameter 'group_coverage_start' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'current_enroll_end_date' is set
      if @api_client.config.client_side_validation && current_enroll_end_date.nil?
        fail ArgumentError, "Missing the required parameter 'current_enroll_end_date' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'new_enroll_start_date' is set
      if @api_client.config.client_side_validation && new_enroll_start_date.nil?
        fail ArgumentError, "Missing the required parameter 'new_enroll_start_date' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # verify the required parameter 'new_enroll_division_id' is set
      if @api_client.config.client_side_validation && new_enroll_division_id.nil?
        fail ArgumentError, "Missing the required parameter 'new_enroll_division_id' when calling AdvEnrollmentApi.subscriber_division_transfer"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/division-transfer/{groupID}/{divisionID}/{groupCoverageStart}/{startDate}/{currentEnrollEndDate}/{newEnrollStartDate}/{newEnrollDivisionID}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s)).sub('{' + 'groupCoverageStart' + '}', CGI.escape(group_coverage_start.to_s)).sub('{' + 'startDate' + '}', CGI.escape(start_date.to_s)).sub('{' + 'currentEnrollEndDate' + '}', CGI.escape(current_enroll_end_date.to_s)).sub('{' + 'newEnrollStartDate' + '}', CGI.escape(new_enroll_start_date.to_s)).sub('{' + 'newEnrollDivisionID' + '}', CGI.escape(new_enroll_division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.subscriber_division_transfer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#subscriber_division_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recalculate Subscriber Accumulators
    # Recalculate Accumulators for a given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_recalc_accum(vbasoftware_database, subscriber_id, opts = {})
      subscriber_recalc_accum_with_http_info(vbasoftware_database, subscriber_id, opts)
      nil
    end

    # Recalculate Subscriber Accumulators
    # Recalculate Accumulators for a given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_recalc_accum_with_http_info(vbasoftware_database, subscriber_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.subscriber_recalc_accum ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.subscriber_recalc_accum"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.subscriber_recalc_accum"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/recalculate-accumulators'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.subscriber_recalc_accum",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#subscriber_recalc_accum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscriber Policy Surrender
    # Surrender an existing Policy under the Policy & Forfeiture area.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param cash_value [Float] Cash Value
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_surrender_policy(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, cash_value, opts = {})
      subscriber_surrender_policy_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, cash_value, opts)
      nil
    end

    # Subscriber Policy Surrender
    # Surrender an existing Policy under the Policy &amp; Forfeiture area.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param cash_value [Float] Cash Value
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_surrender_policy_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, cash_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvEnrollmentApi.subscriber_surrender_policy ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvEnrollmentApi.subscriber_surrender_policy"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvEnrollmentApi.subscriber_surrender_policy"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling AdvEnrollmentApi.subscriber_surrender_policy"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling AdvEnrollmentApi.subscriber_surrender_policy"
      end
      # verify the required parameter 'policy_number' is set
      if @api_client.config.client_side_validation && policy_number.nil?
        fail ArgumentError, "Missing the required parameter 'policy_number' when calling AdvEnrollmentApi.subscriber_surrender_policy"
      end
      # verify the required parameter 'cash_value' is set
      if @api_client.config.client_side_validation && cash_value.nil?
        fail ArgumentError, "Missing the required parameter 'cash_value' when calling AdvEnrollmentApi.subscriber_surrender_policy"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/surrender-policy/{planID}/{benefitCode}/{policyNumber}/{cashValue}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s)).sub('{' + 'policyNumber' + '}', CGI.escape(policy_number.to_s)).sub('{' + 'cashValue' + '}', CGI.escape(cash_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvEnrollmentApi.subscriber_surrender_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvEnrollmentApi#subscriber_surrender_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
