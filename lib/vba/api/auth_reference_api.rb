=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AuthReferenceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create AuthReference
    # Creates a new AuthReference from an existing Auth
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param auth_reference [AuthReference] 
    # @param [Hash] opts the optional parameters
    # @return [AuthReferenceVBAResponse]
    def create_auth_reference(vbasoftware_database, original_auth_number, auth_reference, opts = {})
      data, _status_code, _headers = create_auth_reference_with_http_info(vbasoftware_database, original_auth_number, auth_reference, opts)
      data
    end

    # Create AuthReference
    # Creates a new AuthReference from an existing Auth
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param auth_reference [AuthReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthReferenceVBAResponse, Integer, Hash)>] AuthReferenceVBAResponse data, response status code and response headers
    def create_auth_reference_with_http_info(vbasoftware_database, original_auth_number, auth_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReferenceApi.create_auth_reference ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReferenceApi.create_auth_reference"
      end
      # verify the required parameter 'original_auth_number' is set
      if @api_client.config.client_side_validation && original_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'original_auth_number' when calling AuthReferenceApi.create_auth_reference"
      end
      # verify the required parameter 'auth_reference' is set
      if @api_client.config.client_side_validation && auth_reference.nil?
        fail ArgumentError, "Missing the required parameter 'auth_reference' when calling AuthReferenceApi.create_auth_reference"
      end
      # resource path
      local_var_path = '/auths/{originalAuthNumber}/references'.sub('{' + 'originalAuthNumber' + '}', CGI.escape(original_auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_reference)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReferenceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReferenceApi.create_auth_reference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReferenceApi#create_auth_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete AuthReference
    # Deletes an AuthReference
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param referenced_auth_number [String] Referenced Auth Number
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_auth_reference(vbasoftware_database, original_auth_number, referenced_auth_number, opts = {})
      delete_auth_reference_with_http_info(vbasoftware_database, original_auth_number, referenced_auth_number, opts)
      nil
    end

    # Delete AuthReference
    # Deletes an AuthReference
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param referenced_auth_number [String] Referenced Auth Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_auth_reference_with_http_info(vbasoftware_database, original_auth_number, referenced_auth_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReferenceApi.delete_auth_reference ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReferenceApi.delete_auth_reference"
      end
      # verify the required parameter 'original_auth_number' is set
      if @api_client.config.client_side_validation && original_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'original_auth_number' when calling AuthReferenceApi.delete_auth_reference"
      end
      # verify the required parameter 'referenced_auth_number' is set
      if @api_client.config.client_side_validation && referenced_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'referenced_auth_number' when calling AuthReferenceApi.delete_auth_reference"
      end
      # resource path
      local_var_path = '/auths/{originalAuthNumber}/references/{referencedAuthNumber}'.sub('{' + 'originalAuthNumber' + '}', CGI.escape(original_auth_number.to_s)).sub('{' + 'referencedAuthNumber' + '}', CGI.escape(referenced_auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReferenceApi.delete_auth_reference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReferenceApi#delete_auth_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get AuthReference
    # Gets AuthReference
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param referenced_auth_number [String] Referenced Auth Number
    # @param [Hash] opts the optional parameters
    # @return [AuthReferenceVBAResponse]
    def get_auth_reference(vbasoftware_database, original_auth_number, referenced_auth_number, opts = {})
      data, _status_code, _headers = get_auth_reference_with_http_info(vbasoftware_database, original_auth_number, referenced_auth_number, opts)
      data
    end

    # Get AuthReference
    # Gets AuthReference
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param referenced_auth_number [String] Referenced Auth Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthReferenceVBAResponse, Integer, Hash)>] AuthReferenceVBAResponse data, response status code and response headers
    def get_auth_reference_with_http_info(vbasoftware_database, original_auth_number, referenced_auth_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReferenceApi.get_auth_reference ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReferenceApi.get_auth_reference"
      end
      # verify the required parameter 'original_auth_number' is set
      if @api_client.config.client_side_validation && original_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'original_auth_number' when calling AuthReferenceApi.get_auth_reference"
      end
      # verify the required parameter 'referenced_auth_number' is set
      if @api_client.config.client_side_validation && referenced_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'referenced_auth_number' when calling AuthReferenceApi.get_auth_reference"
      end
      # resource path
      local_var_path = '/auths/{originalAuthNumber}/references/{referencedAuthNumber}'.sub('{' + 'originalAuthNumber' + '}', CGI.escape(original_auth_number.to_s)).sub('{' + 'referencedAuthNumber' + '}', CGI.escape(referenced_auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReferenceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReferenceApi.get_auth_reference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReferenceApi#get_auth_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List AuthReferences
    # Lists all AuthReference for an existing Auth
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param [Hash] opts the optional parameters
    # @return [AuthListVBAResponse]
    def list_auth_reference_for_auth(vbasoftware_database, original_auth_number, opts = {})
      data, _status_code, _headers = list_auth_reference_for_auth_with_http_info(vbasoftware_database, original_auth_number, opts)
      data
    end

    # List AuthReferences
    # Lists all AuthReference for an existing Auth
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthListVBAResponse, Integer, Hash)>] AuthListVBAResponse data, response status code and response headers
    def list_auth_reference_for_auth_with_http_info(vbasoftware_database, original_auth_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReferenceApi.list_auth_reference_for_auth ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReferenceApi.list_auth_reference_for_auth"
      end
      # verify the required parameter 'original_auth_number' is set
      if @api_client.config.client_side_validation && original_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'original_auth_number' when calling AuthReferenceApi.list_auth_reference_for_auth"
      end
      # resource path
      local_var_path = '/auths/{originalAuthNumber}/references'.sub('{' + 'originalAuthNumber' + '}', CGI.escape(original_auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReferenceApi.list_auth_reference_for_auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReferenceApi#list_auth_reference_for_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update AuthReference
    # Updates a specific AuthReference.
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param referenced_auth_number [String] Referenced Auth Number
    # @param auth_reference [AuthReference] 
    # @param [Hash] opts the optional parameters
    # @return [AuthReferenceVBAResponse]
    def update_auth_reference(vbasoftware_database, original_auth_number, referenced_auth_number, auth_reference, opts = {})
      data, _status_code, _headers = update_auth_reference_with_http_info(vbasoftware_database, original_auth_number, referenced_auth_number, auth_reference, opts)
      data
    end

    # Update AuthReference
    # Updates a specific AuthReference.
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param referenced_auth_number [String] Referenced Auth Number
    # @param auth_reference [AuthReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthReferenceVBAResponse, Integer, Hash)>] AuthReferenceVBAResponse data, response status code and response headers
    def update_auth_reference_with_http_info(vbasoftware_database, original_auth_number, referenced_auth_number, auth_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReferenceApi.update_auth_reference ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReferenceApi.update_auth_reference"
      end
      # verify the required parameter 'original_auth_number' is set
      if @api_client.config.client_side_validation && original_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'original_auth_number' when calling AuthReferenceApi.update_auth_reference"
      end
      # verify the required parameter 'referenced_auth_number' is set
      if @api_client.config.client_side_validation && referenced_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'referenced_auth_number' when calling AuthReferenceApi.update_auth_reference"
      end
      # verify the required parameter 'auth_reference' is set
      if @api_client.config.client_side_validation && auth_reference.nil?
        fail ArgumentError, "Missing the required parameter 'auth_reference' when calling AuthReferenceApi.update_auth_reference"
      end
      # resource path
      local_var_path = '/auths/{originalAuthNumber}/references/{referencedAuthNumber}'.sub('{' + 'originalAuthNumber' + '}', CGI.escape(original_auth_number.to_s)).sub('{' + 'referencedAuthNumber' + '}', CGI.escape(referenced_auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_reference)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReferenceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReferenceApi.update_auth_reference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReferenceApi#update_auth_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Batch AuthReference
    # Updates a multiple AuthReference.
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param auth_reference [Array<AuthReference>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_auth_reference(vbasoftware_database, original_auth_number, auth_reference, opts = {})
      data, _status_code, _headers = update_batch_auth_reference_with_http_info(vbasoftware_database, original_auth_number, auth_reference, opts)
      data
    end

    # Update Batch AuthReference
    # Updates a multiple AuthReference.
    # @param vbasoftware_database [String] Target database
    # @param original_auth_number [String] Original Auth Number
    # @param auth_reference [Array<AuthReference>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_auth_reference_with_http_info(vbasoftware_database, original_auth_number, auth_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReferenceApi.update_batch_auth_reference ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReferenceApi.update_batch_auth_reference"
      end
      # verify the required parameter 'original_auth_number' is set
      if @api_client.config.client_side_validation && original_auth_number.nil?
        fail ArgumentError, "Missing the required parameter 'original_auth_number' when calling AuthReferenceApi.update_batch_auth_reference"
      end
      # verify the required parameter 'auth_reference' is set
      if @api_client.config.client_side_validation && auth_reference.nil?
        fail ArgumentError, "Missing the required parameter 'auth_reference' when calling AuthReferenceApi.update_batch_auth_reference"
      end
      # resource path
      local_var_path = '/auths/{originalAuthNumber}/references-batch'.sub('{' + 'originalAuthNumber' + '}', CGI.escape(original_auth_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_reference)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReferenceApi.update_batch_auth_reference",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReferenceApi#update_batch_auth_reference\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
