=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ReinsuranceContractsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy and existing ReinsContract to a new ReinsContract
    # Copy everything from an existing contract to a new Contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_existing [ReinsServiceAddFromExisting] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def add_contract_from_existing(vbasoftware_database, reins_service_add_from_existing, opts = {})
      data, _status_code, _headers = add_contract_from_existing_with_http_info(vbasoftware_database, reins_service_add_from_existing, opts)
      data
    end

    # Copy and existing ReinsContract to a new ReinsContract
    # Copy everything from an existing contract to a new Contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_existing [ReinsServiceAddFromExisting] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def add_contract_from_existing_with_http_info(vbasoftware_database, reins_service_add_from_existing, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.add_contract_from_existing ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.add_contract_from_existing"
      end
      # verify the required parameter 'reins_service_add_from_existing' is set
      if @api_client.config.client_side_validation && reins_service_add_from_existing.nil?
        fail ArgumentError, "Missing the required parameter 'reins_service_add_from_existing' when calling ReinsuranceContractsApi.add_contract_from_existing"
      end
      # resource path
      local_var_path = '/reinsurance-contract-copy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_service_add_from_existing)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.add_contract_from_existing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#add_contract_from_existing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add ReinsContract from a Template ReinsContract
    # Take the information from a template and apply it to one or more new contracts based on that template contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_template [ReinsServiceAddFromTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def add_contract_from_template(vbasoftware_database, reins_service_add_from_template, opts = {})
      data, _status_code, _headers = add_contract_from_template_with_http_info(vbasoftware_database, reins_service_add_from_template, opts)
      data
    end

    # Add ReinsContract from a Template ReinsContract
    # Take the information from a template and apply it to one or more new contracts based on that template contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_service_add_from_template [ReinsServiceAddFromTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def add_contract_from_template_with_http_info(vbasoftware_database, reins_service_add_from_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.add_contract_from_template ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.add_contract_from_template"
      end
      # verify the required parameter 'reins_service_add_from_template' is set
      if @api_client.config.client_side_validation && reins_service_add_from_template.nil?
        fail ArgumentError, "Missing the required parameter 'reins_service_add_from_template' when calling ReinsuranceContractsApi.add_contract_from_template"
      end
      # resource path
      local_var_path = '/reinsurance-contract-add-from-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_service_add_from_template)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.add_contract_from_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#add_contract_from_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create ReinsContract
    # Creates a new ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param reins_contract [ReinsContract] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def create_reins_contract(vbasoftware_database, reins_contract, opts = {})
      data, _status_code, _headers = create_reins_contract_with_http_info(vbasoftware_database, reins_contract, opts)
      data
    end

    # Create ReinsContract
    # Creates a new ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param reins_contract [ReinsContract] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def create_reins_contract_with_http_info(vbasoftware_database, reins_contract, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.create_reins_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.create_reins_contract"
      end
      # verify the required parameter 'reins_contract' is set
      if @api_client.config.client_side_validation && reins_contract.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract' when calling ReinsuranceContractsApi.create_reins_contract"
      end
      # resource path
      local_var_path = '/reinsurance-contracts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_contract)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.create_reins_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#create_reins_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ReinsContract
    # Deletes an ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_reins_contract(vbasoftware_database, reins_contract_key, opts = {})
      delete_reins_contract_with_http_info(vbasoftware_database, reins_contract_key, opts)
      nil
    end

    # Delete ReinsContract
    # Deletes an ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_reins_contract_with_http_info(vbasoftware_database, reins_contract_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.delete_reins_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.delete_reins_contract"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractsApi.delete_reins_contract"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.delete_reins_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#delete_reins_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Level Transactions for this Contract
    # Based on submitted information, generate reinsurance level transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Int32VBAResponse]
    def generate_reins_level_transaction(vbasoftware_database, reins_contract_key, opts = {})
      data, _status_code, _headers = generate_reins_level_transaction_with_http_info(vbasoftware_database, reins_contract_key, opts)
      data
    end

    # Generate Level Transactions for this Contract
    # Based on submitted information, generate reinsurance level transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Int32VBAResponse, Integer, Hash)>] Int32VBAResponse data, response status code and response headers
    def generate_reins_level_transaction_with_http_info(vbasoftware_database, reins_contract_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.generate_reins_level_transaction ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.generate_reins_level_transaction"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractsApi.generate_reins_level_transaction"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/generate-level-transaction'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Int32VBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.generate_reins_level_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#generate_reins_level_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Transactions for this Contract
    # Based on submitted information, generate reinsurance transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param auto_apply_deductible [Boolean] Auto Apply Deductible
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subscriber_id Subscriber ID
    # @option opts [String] :member_seq Member Sequence
    # @return [GenerateReinsTransactionVBAResponse]
    def generate_reins_transaction(vbasoftware_database, reins_contract_key, auto_apply_deductible, opts = {})
      data, _status_code, _headers = generate_reins_transaction_with_http_info(vbasoftware_database, reins_contract_key, auto_apply_deductible, opts)
      data
    end

    # Generate Transactions for this Contract
    # Based on submitted information, generate reinsurance transactions for this contract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param auto_apply_deductible [Boolean] Auto Apply Deductible
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subscriber_id Subscriber ID
    # @option opts [String] :member_seq Member Sequence
    # @return [Array<(GenerateReinsTransactionVBAResponse, Integer, Hash)>] GenerateReinsTransactionVBAResponse data, response status code and response headers
    def generate_reins_transaction_with_http_info(vbasoftware_database, reins_contract_key, auto_apply_deductible, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.generate_reins_transaction ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.generate_reins_transaction"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractsApi.generate_reins_transaction"
      end
      # verify the required parameter 'auto_apply_deductible' is set
      if @api_client.config.client_side_validation && auto_apply_deductible.nil?
        fail ArgumentError, "Missing the required parameter 'auto_apply_deductible' when calling ReinsuranceContractsApi.generate_reins_transaction"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/generate-transaction'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'autoApplyDeductible'] = auto_apply_deductible
      query_params[:'subscriberId'] = opts[:'subscriber_id'] if !opts[:'subscriber_id'].nil?
      query_params[:'memberSeq'] = opts[:'member_seq'] if !opts[:'member_seq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateReinsTransactionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.generate_reins_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#generate_reins_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ReinsContract
    # Gets ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def get_reins_contract(vbasoftware_database, reins_contract_key, opts = {})
      data, _status_code, _headers = get_reins_contract_with_http_info(vbasoftware_database, reins_contract_key, opts)
      data
    end

    # Get ReinsContract
    # Gets ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def get_reins_contract_with_http_info(vbasoftware_database, reins_contract_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.get_reins_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.get_reins_contract"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractsApi.get_reins_contract"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.get_reins_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#get_reins_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ReinsContract
    # Lists all ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [ReinsContractListVBAResponse]
    def list_reins_contract(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_reins_contract_with_http_info(vbasoftware_database, opts)
      data
    end

    # List ReinsContract
    # Lists all ReinsContract
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(ReinsContractListVBAResponse, Integer, Hash)>] ReinsContractListVBAResponse data, response status code and response headers
    def list_reins_contract_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.list_reins_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.list_reins_contract"
      end
      # resource path
      local_var_path = '/reinsurance-contracts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.list_reins_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#list_reins_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch ReinsContract
    # Create or Update multiple ReinsContract at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract [Array<ReinsContract>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_reins_contract(vbasoftware_database, reins_contract, opts = {})
      data, _status_code, _headers = update_batch_reins_contract_with_http_info(vbasoftware_database, reins_contract, opts)
      data
    end

    # Create or Update Batch ReinsContract
    # Create or Update multiple ReinsContract at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract [Array<ReinsContract>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_reins_contract_with_http_info(vbasoftware_database, reins_contract, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.update_batch_reins_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.update_batch_reins_contract"
      end
      # verify the required parameter 'reins_contract' is set
      if @api_client.config.client_side_validation && reins_contract.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract' when calling ReinsuranceContractsApi.update_batch_reins_contract"
      end
      # resource path
      local_var_path = '/reinsurance-contracts-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_contract)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.update_batch_reins_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#update_batch_reins_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update ReinsContract
    # Updates a specific ReinsContract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract [ReinsContract] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractVBAResponse]
    def update_reins_contract(vbasoftware_database, reins_contract_key, reins_contract, opts = {})
      data, _status_code, _headers = update_reins_contract_with_http_info(vbasoftware_database, reins_contract_key, reins_contract, opts)
      data
    end

    # Update ReinsContract
    # Updates a specific ReinsContract.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract [ReinsContract] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractVBAResponse, Integer, Hash)>] ReinsContractVBAResponse data, response status code and response headers
    def update_reins_contract_with_http_info(vbasoftware_database, reins_contract_key, reins_contract, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractsApi.update_reins_contract ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractsApi.update_reins_contract"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractsApi.update_reins_contract"
      end
      # verify the required parameter 'reins_contract' is set
      if @api_client.config.client_side_validation && reins_contract.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract' when calling ReinsuranceContractsApi.update_reins_contract"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_contract)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractsApi.update_reins_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractsApi#update_reins_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
