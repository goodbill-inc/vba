=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvGroupDivisionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy a GroupDivision
    # Copy a specific GroupDivision to a new GroupDivision
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param copy_group_division [CopyGroupDivision] 
    # @param [Hash] opts the optional parameters
    # @return [GroupDivisionVBAResponse]
    def copy_group_division(vbasoftware_database, group_id, division_id, copy_group_division, opts = {})
      data, _status_code, _headers = copy_group_division_with_http_info(vbasoftware_database, group_id, division_id, copy_group_division, opts)
      data
    end

    # Copy a GroupDivision
    # Copy a specific GroupDivision to a new GroupDivision
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param copy_group_division [CopyGroupDivision] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupDivisionVBAResponse, Integer, Hash)>] GroupDivisionVBAResponse data, response status code and response headers
    def copy_group_division_with_http_info(vbasoftware_database, group_id, division_id, copy_group_division, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupDivisionsApi.copy_group_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupDivisionsApi.copy_group_division"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupDivisionsApi.copy_group_division"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvGroupDivisionsApi.copy_group_division"
      end
      # verify the required parameter 'copy_group_division' is set
      if @api_client.config.client_side_validation && copy_group_division.nil?
        fail ArgumentError, "Missing the required parameter 'copy_group_division' when calling AdvGroupDivisionsApi.copy_group_division"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/copy'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(copy_group_division)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupDivisionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupDivisionsApi.copy_group_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupDivisionsApi#copy_group_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group enrollment summary information
    # Gets enrollment summary for the given group id and division id. 
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param [Hash] opts the optional parameters
    # @return [VBAGroupContractEnrollmentSummaryListVBAResponse]
    def get_group_division_enrollment_summary(vbasoftware_database, group_id, division_id, opts = {})
      data, _status_code, _headers = get_group_division_enrollment_summary_with_http_info(vbasoftware_database, group_id, division_id, opts)
      data
    end

    # Get Group enrollment summary information
    # Gets enrollment summary for the given group id and division id. 
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAGroupContractEnrollmentSummaryListVBAResponse, Integer, Hash)>] VBAGroupContractEnrollmentSummaryListVBAResponse data, response status code and response headers
    def get_group_division_enrollment_summary_with_http_info(vbasoftware_database, group_id, division_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvGroupDivisionsApi.get_group_division_enrollment_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvGroupDivisionsApi.get_group_division_enrollment_summary"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvGroupDivisionsApi.get_group_division_enrollment_summary"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvGroupDivisionsApi.get_group_division_enrollment_summary"
      end
      # resource path
      local_var_path = '/groups/{groupID}/divisions/{divisionID}/enrollment-summary'.sub('{' + 'groupID' + '}', CGI.escape(group_id.to_s)).sub('{' + 'divisionID' + '}', CGI.escape(division_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAGroupContractEnrollmentSummaryListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvGroupDivisionsApi.get_group_division_enrollment_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvGroupDivisionsApi#get_group_division_enrollment_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
