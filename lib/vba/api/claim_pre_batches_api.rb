=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ClaimPreBatchesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create ClaimPreBatch
    # Creates a new ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch [ClaimPreBatch] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimPreBatchVBAResponse]
    def create_claim_pre_batch(vbasoftware_database, claim_pre_batch, opts = {})
      data, _status_code, _headers = create_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch, opts)
      data
    end

    # Create ClaimPreBatch
    # Creates a new ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch [ClaimPreBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimPreBatchVBAResponse, Integer, Hash)>] ClaimPreBatchVBAResponse data, response status code and response headers
    def create_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPreBatchesApi.create_claim_pre_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPreBatchesApi.create_claim_pre_batch"
      end
      # verify the required parameter 'claim_pre_batch' is set
      if @api_client.config.client_side_validation && claim_pre_batch.nil?
        fail ArgumentError, "Missing the required parameter 'claim_pre_batch' when calling ClaimPreBatchesApi.create_claim_pre_batch"
      end
      # resource path
      local_var_path = '/claim-prebatches'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_pre_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPreBatchVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPreBatchesApi.create_claim_pre_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPreBatchesApi#create_claim_pre_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ClaimPreBatch
    # Deletes an ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch_key [Integer] ClaimPreBatch Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_claim_pre_batch(vbasoftware_database, claim_pre_batch_key, opts = {})
      delete_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch_key, opts)
      nil
    end

    # Delete ClaimPreBatch
    # Deletes an ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch_key [Integer] ClaimPreBatch Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPreBatchesApi.delete_claim_pre_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPreBatchesApi.delete_claim_pre_batch"
      end
      # verify the required parameter 'claim_pre_batch_key' is set
      if @api_client.config.client_side_validation && claim_pre_batch_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_pre_batch_key' when calling ClaimPreBatchesApi.delete_claim_pre_batch"
      end
      # resource path
      local_var_path = '/claim-prebatches/{ClaimPreBatch_Key}'.sub('{' + 'ClaimPreBatch_Key' + '}', CGI.escape(claim_pre_batch_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPreBatchesApi.delete_claim_pre_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPreBatchesApi#delete_claim_pre_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ClaimPreBatch
    # Gets ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch_key [Integer] ClaimPreBatch Key
    # @param [Hash] opts the optional parameters
    # @return [ClaimPreBatchVBAResponse]
    def get_claim_pre_batch(vbasoftware_database, claim_pre_batch_key, opts = {})
      data, _status_code, _headers = get_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch_key, opts)
      data
    end

    # Get ClaimPreBatch
    # Gets ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch_key [Integer] ClaimPreBatch Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimPreBatchVBAResponse, Integer, Hash)>] ClaimPreBatchVBAResponse data, response status code and response headers
    def get_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPreBatchesApi.get_claim_pre_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPreBatchesApi.get_claim_pre_batch"
      end
      # verify the required parameter 'claim_pre_batch_key' is set
      if @api_client.config.client_side_validation && claim_pre_batch_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_pre_batch_key' when calling ClaimPreBatchesApi.get_claim_pre_batch"
      end
      # resource path
      local_var_path = '/claim-prebatches/{ClaimPreBatch_Key}'.sub('{' + 'ClaimPreBatch_Key' + '}', CGI.escape(claim_pre_batch_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPreBatchVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPreBatchesApi.get_claim_pre_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPreBatchesApi#get_claim_pre_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ClaimPreBatch
    # Lists all ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :batch_number Batch Number
    # @option opts [Integer] :batch_claim Batch Claim
    # @return [ClaimPreBatchListVBAResponse]
    def list_claim_pre_batch(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_claim_pre_batch_with_http_info(vbasoftware_database, opts)
      data
    end

    # List ClaimPreBatch
    # Lists all ClaimPreBatch
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @option opts [Integer] :batch_number Batch Number
    # @option opts [Integer] :batch_claim Batch Claim
    # @return [Array<(ClaimPreBatchListVBAResponse, Integer, Hash)>] ClaimPreBatchListVBAResponse data, response status code and response headers
    def list_claim_pre_batch_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPreBatchesApi.list_claim_pre_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPreBatchesApi.list_claim_pre_batch"
      end
      # resource path
      local_var_path = '/claim-prebatches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'batchNumber'] = opts[:'batch_number'] if !opts[:'batch_number'].nil?
      query_params[:'batchClaim'] = opts[:'batch_claim'] if !opts[:'batch_claim'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPreBatchListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPreBatchesApi.list_claim_pre_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPreBatchesApi#list_claim_pre_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch ClaimPreBatch
    # Create or Update multiple ClaimPreBatch at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch [Array<ClaimPreBatch>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_claim_pre_batch(vbasoftware_database, claim_pre_batch, opts = {})
      data, _status_code, _headers = update_batch_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch, opts)
      data
    end

    # Create or Update Batch ClaimPreBatch
    # Create or Update multiple ClaimPreBatch at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch [Array<ClaimPreBatch>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPreBatchesApi.update_batch_claim_pre_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPreBatchesApi.update_batch_claim_pre_batch"
      end
      # verify the required parameter 'claim_pre_batch' is set
      if @api_client.config.client_side_validation && claim_pre_batch.nil?
        fail ArgumentError, "Missing the required parameter 'claim_pre_batch' when calling ClaimPreBatchesApi.update_batch_claim_pre_batch"
      end
      # resource path
      local_var_path = '/claim-prebatches-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_pre_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPreBatchesApi.update_batch_claim_pre_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPreBatchesApi#update_batch_claim_pre_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update ClaimPreBatch
    # Updates a specific ClaimPreBatch.
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch_key [Integer] ClaimPreBatch Key
    # @param claim_pre_batch [ClaimPreBatch] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimPreBatchVBAResponse]
    def update_claim_pre_batch(vbasoftware_database, claim_pre_batch_key, claim_pre_batch, opts = {})
      data, _status_code, _headers = update_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch_key, claim_pre_batch, opts)
      data
    end

    # Update ClaimPreBatch
    # Updates a specific ClaimPreBatch.
    # @param vbasoftware_database [String] Target database
    # @param claim_pre_batch_key [Integer] ClaimPreBatch Key
    # @param claim_pre_batch [ClaimPreBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimPreBatchVBAResponse, Integer, Hash)>] ClaimPreBatchVBAResponse data, response status code and response headers
    def update_claim_pre_batch_with_http_info(vbasoftware_database, claim_pre_batch_key, claim_pre_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimPreBatchesApi.update_claim_pre_batch ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimPreBatchesApi.update_claim_pre_batch"
      end
      # verify the required parameter 'claim_pre_batch_key' is set
      if @api_client.config.client_side_validation && claim_pre_batch_key.nil?
        fail ArgumentError, "Missing the required parameter 'claim_pre_batch_key' when calling ClaimPreBatchesApi.update_claim_pre_batch"
      end
      # verify the required parameter 'claim_pre_batch' is set
      if @api_client.config.client_side_validation && claim_pre_batch.nil?
        fail ArgumentError, "Missing the required parameter 'claim_pre_batch' when calling ClaimPreBatchesApi.update_claim_pre_batch"
      end
      # resource path
      local_var_path = '/claim-prebatches/{ClaimPreBatch_Key}'.sub('{' + 'ClaimPreBatch_Key' + '}', CGI.escape(claim_pre_batch_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim_pre_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimPreBatchVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimPreBatchesApi.update_claim_pre_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimPreBatchesApi#update_claim_pre_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
