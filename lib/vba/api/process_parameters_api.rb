=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ProcessParametersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create VBAProcessParameter
    # Creates a new VBAProcessParameter
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param vba_process_parameter [VBAProcessParameter] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessParameterVBAResponse]
    def create_vba_process_parameter(vbasoftware_database, v_ba_process_key, v_ba_process_type, vba_process_parameter, opts = {})
      data, _status_code, _headers = create_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, vba_process_parameter, opts)
      data
    end

    # Create VBAProcessParameter
    # Creates a new VBAProcessParameter
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param vba_process_parameter [VBAProcessParameter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessParameterVBAResponse, Integer, Hash)>] VBAProcessParameterVBAResponse data, response status code and response headers
    def create_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, vba_process_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessParametersApi.create_vba_process_parameter ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProcessParametersApi.create_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_key' is set
      if @api_client.config.client_side_validation && v_ba_process_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_key' when calling ProcessParametersApi.create_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_type' is set
      if @api_client.config.client_side_validation && v_ba_process_type.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_type' when calling ProcessParametersApi.create_vba_process_parameter"
      end
      # verify the required parameter 'vba_process_parameter' is set
      if @api_client.config.client_side_validation && vba_process_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'vba_process_parameter' when calling ProcessParametersApi.create_vba_process_parameter"
      end
      # resource path
      local_var_path = '/vbaprocesses/{vBAProcessKey}/types/{vBAProcessType}/parameters'.sub('{' + 'vBAProcessKey' + '}', CGI.escape(v_ba_process_key.to_s)).sub('{' + 'vBAProcessType' + '}', CGI.escape(v_ba_process_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_process_parameter)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessParameterVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProcessParametersApi.create_vba_process_parameter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessParametersApi#create_vba_process_parameter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete VBAProcessParameter
    # Deletes an VBAProcessParameter
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param v_ba_process_parameter_key [Integer] VBAProcessParameter Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_vba_process_parameter(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, opts = {})
      delete_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, opts)
      nil
    end

    # Delete VBAProcessParameter
    # Deletes an VBAProcessParameter
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param v_ba_process_parameter_key [Integer] VBAProcessParameter Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessParametersApi.delete_vba_process_parameter ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProcessParametersApi.delete_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_key' is set
      if @api_client.config.client_side_validation && v_ba_process_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_key' when calling ProcessParametersApi.delete_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_type' is set
      if @api_client.config.client_side_validation && v_ba_process_type.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_type' when calling ProcessParametersApi.delete_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_parameter_key' is set
      if @api_client.config.client_side_validation && v_ba_process_parameter_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_parameter_key' when calling ProcessParametersApi.delete_vba_process_parameter"
      end
      # resource path
      local_var_path = '/vbaprocesses/{vBAProcessKey}/types/{vBAProcessType}/parameters/{vBAProcessParameterKey}'.sub('{' + 'vBAProcessKey' + '}', CGI.escape(v_ba_process_key.to_s)).sub('{' + 'vBAProcessType' + '}', CGI.escape(v_ba_process_type.to_s)).sub('{' + 'vBAProcessParameterKey' + '}', CGI.escape(v_ba_process_parameter_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProcessParametersApi.delete_vba_process_parameter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessParametersApi#delete_vba_process_parameter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VBAProcessParameter
    # Gets VBAProcessParameter
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param v_ba_process_parameter_key [Integer] VBAProcessParameter Key
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessParameterVBAResponse]
    def get_vba_process_parameter(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, opts = {})
      data, _status_code, _headers = get_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, opts)
      data
    end

    # Get VBAProcessParameter
    # Gets VBAProcessParameter
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param v_ba_process_parameter_key [Integer] VBAProcessParameter Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessParameterVBAResponse, Integer, Hash)>] VBAProcessParameterVBAResponse data, response status code and response headers
    def get_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessParametersApi.get_vba_process_parameter ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProcessParametersApi.get_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_key' is set
      if @api_client.config.client_side_validation && v_ba_process_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_key' when calling ProcessParametersApi.get_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_type' is set
      if @api_client.config.client_side_validation && v_ba_process_type.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_type' when calling ProcessParametersApi.get_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_parameter_key' is set
      if @api_client.config.client_side_validation && v_ba_process_parameter_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_parameter_key' when calling ProcessParametersApi.get_vba_process_parameter"
      end
      # resource path
      local_var_path = '/vbaprocesses/{vBAProcessKey}/types/{vBAProcessType}/parameters/{vBAProcessParameterKey}'.sub('{' + 'vBAProcessKey' + '}', CGI.escape(v_ba_process_key.to_s)).sub('{' + 'vBAProcessType' + '}', CGI.escape(v_ba_process_type.to_s)).sub('{' + 'vBAProcessParameterKey' + '}', CGI.escape(v_ba_process_parameter_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessParameterVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProcessParametersApi.get_vba_process_parameter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessParametersApi#get_vba_process_parameter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Batch VBAProcessParameter
    # Updates a multiple VBAProcessParameter.
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param vba_process_parameter [Array<VBAProcessParameter>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_vba_process_parameter(vbasoftware_database, v_ba_process_key, v_ba_process_type, vba_process_parameter, opts = {})
      data, _status_code, _headers = update_batch_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, vba_process_parameter, opts)
      data
    end

    # Update Batch VBAProcessParameter
    # Updates a multiple VBAProcessParameter.
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param vba_process_parameter [Array<VBAProcessParameter>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, vba_process_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessParametersApi.update_batch_vba_process_parameter ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProcessParametersApi.update_batch_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_key' is set
      if @api_client.config.client_side_validation && v_ba_process_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_key' when calling ProcessParametersApi.update_batch_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_type' is set
      if @api_client.config.client_side_validation && v_ba_process_type.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_type' when calling ProcessParametersApi.update_batch_vba_process_parameter"
      end
      # verify the required parameter 'vba_process_parameter' is set
      if @api_client.config.client_side_validation && vba_process_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'vba_process_parameter' when calling ProcessParametersApi.update_batch_vba_process_parameter"
      end
      # resource path
      local_var_path = '/vbaprocesses/{vBAProcessKey}/types/{vBAProcessType}/parameters-batch'.sub('{' + 'vBAProcessKey' + '}', CGI.escape(v_ba_process_key.to_s)).sub('{' + 'vBAProcessType' + '}', CGI.escape(v_ba_process_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_process_parameter)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProcessParametersApi.update_batch_vba_process_parameter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessParametersApi#update_batch_vba_process_parameter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update VBAProcessParameter
    # Updates a specific VBAProcessParameter.
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param v_ba_process_parameter_key [Integer] VBAProcessParameter Key
    # @param vba_process_parameter [VBAProcessParameter] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessParameterVBAResponse]
    def update_vba_process_parameter(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, vba_process_parameter, opts = {})
      data, _status_code, _headers = update_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, vba_process_parameter, opts)
      data
    end

    # Update VBAProcessParameter
    # Updates a specific VBAProcessParameter.
    # @param vbasoftware_database [String] Target database
    # @param v_ba_process_key [Integer] VBAProcess Key
    # @param v_ba_process_type [String] VBAProcess Type
    # @param v_ba_process_parameter_key [Integer] VBAProcessParameter Key
    # @param vba_process_parameter [VBAProcessParameter] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessParameterVBAResponse, Integer, Hash)>] VBAProcessParameterVBAResponse data, response status code and response headers
    def update_vba_process_parameter_with_http_info(vbasoftware_database, v_ba_process_key, v_ba_process_type, v_ba_process_parameter_key, vba_process_parameter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessParametersApi.update_vba_process_parameter ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ProcessParametersApi.update_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_key' is set
      if @api_client.config.client_side_validation && v_ba_process_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_key' when calling ProcessParametersApi.update_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_type' is set
      if @api_client.config.client_side_validation && v_ba_process_type.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_type' when calling ProcessParametersApi.update_vba_process_parameter"
      end
      # verify the required parameter 'v_ba_process_parameter_key' is set
      if @api_client.config.client_side_validation && v_ba_process_parameter_key.nil?
        fail ArgumentError, "Missing the required parameter 'v_ba_process_parameter_key' when calling ProcessParametersApi.update_vba_process_parameter"
      end
      # verify the required parameter 'vba_process_parameter' is set
      if @api_client.config.client_side_validation && vba_process_parameter.nil?
        fail ArgumentError, "Missing the required parameter 'vba_process_parameter' when calling ProcessParametersApi.update_vba_process_parameter"
      end
      # resource path
      local_var_path = '/vbaprocesses/{vBAProcessKey}/types/{vBAProcessType}/parameters/{vBAProcessParameterKey}'.sub('{' + 'vBAProcessKey' + '}', CGI.escape(v_ba_process_key.to_s)).sub('{' + 'vBAProcessType' + '}', CGI.escape(v_ba_process_type.to_s)).sub('{' + 'vBAProcessParameterKey' + '}', CGI.escape(v_ba_process_parameter_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_process_parameter)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessParameterVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ProcessParametersApi.update_vba_process_parameter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessParametersApi#update_vba_process_parameter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
