=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class BenefitsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Benefit
    # Creates a new Benefit
    # @param vbasoftware_database [String] Target database
    # @param benefit_codes [BenefitCodes] 
    # @param [Hash] opts the optional parameters
    # @return [BenefitCodesVBAResponse]
    def create_benefit(vbasoftware_database, benefit_codes, opts = {})
      data, _status_code, _headers = create_benefit_with_http_info(vbasoftware_database, benefit_codes, opts)
      data
    end

    # Create Benefit
    # Creates a new Benefit
    # @param vbasoftware_database [String] Target database
    # @param benefit_codes [BenefitCodes] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BenefitCodesVBAResponse, Integer, Hash)>] BenefitCodesVBAResponse data, response status code and response headers
    def create_benefit_with_http_info(vbasoftware_database, benefit_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.create_benefit ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.create_benefit"
      end
      # verify the required parameter 'benefit_codes' is set
      if @api_client.config.client_side_validation && benefit_codes.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_codes' when calling BenefitsApi.create_benefit"
      end
      # resource path
      local_var_path = '/benefits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(benefit_codes)

      # return_type
      return_type = opts[:debug_return_type] || 'BenefitCodesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.create_benefit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#create_benefit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Benefit
    # Deletes a specific Benefit by Benefit Code
    # @param vbasoftware_database [String] Target database
    # @param benefit_code [String] Benefit Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_benefit_codes(vbasoftware_database, benefit_code, opts = {})
      delete_benefit_codes_with_http_info(vbasoftware_database, benefit_code, opts)
      nil
    end

    # Delete a Benefit
    # Deletes a specific Benefit by Benefit Code
    # @param vbasoftware_database [String] Target database
    # @param benefit_code [String] Benefit Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_benefit_codes_with_http_info(vbasoftware_database, benefit_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.delete_benefit_codes ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.delete_benefit_codes"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling BenefitsApi.delete_benefit_codes"
      end
      # resource path
      local_var_path = '/benefits/{benefitCode}'.sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.delete_benefit_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#delete_benefit_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Benefit
    # Gets a specific Benefit by Benefit Code
    # @param vbasoftware_database [String] Target database
    # @param benefit_code [String] Benefit Code
    # @param [Hash] opts the optional parameters
    # @return [BenefitCodesVBAResponse]
    def get_benefit(vbasoftware_database, benefit_code, opts = {})
      data, _status_code, _headers = get_benefit_with_http_info(vbasoftware_database, benefit_code, opts)
      data
    end

    # Get a Benefit
    # Gets a specific Benefit by Benefit Code
    # @param vbasoftware_database [String] Target database
    # @param benefit_code [String] Benefit Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(BenefitCodesVBAResponse, Integer, Hash)>] BenefitCodesVBAResponse data, response status code and response headers
    def get_benefit_with_http_info(vbasoftware_database, benefit_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.get_benefit ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.get_benefit"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling BenefitsApi.get_benefit"
      end
      # resource path
      local_var_path = '/benefits/{benefitCode}'.sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BenefitCodesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.get_benefit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#get_benefit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Levels
    # List of all Benefit Levels with Key, Display and Description
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_levels(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_levels_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Levels
    # List of all Benefit Levels with Key, Display and Description
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_levels_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_levels ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_levels"
      end
      # resource path
      local_var_path = '/benefit-levels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_levels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_levels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Plan Dental Designation Types
    # List of all Benefit Plan Dental Designation Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_plan_dental_designation_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_plan_dental_designation_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Plan Dental Designation Types
    # List of all Benefit Plan Dental Designation Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_plan_dental_designation_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_plan_dental_designation_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_plan_dental_designation_types"
      end
      # resource path
      local_var_path = '/benefit-plan-dental-designation-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_plan_dental_designation_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_plan_dental_designation_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Plan Maximum Scope Types
    # List of all Benefit Plan Maximum Coverage Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_plan_maximum_coverage_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_plan_maximum_coverage_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Plan Maximum Scope Types
    # List of all Benefit Plan Maximum Coverage Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_plan_maximum_coverage_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_plan_maximum_coverage_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_plan_maximum_coverage_types"
      end
      # resource path
      local_var_path = '/benefit-plan-maximum-coverage-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_plan_maximum_coverage_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_plan_maximum_coverage_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Plan Maximum Network Types
    # List of all Benefit Plan Maximum Network Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_plan_maximum_network_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_plan_maximum_network_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Plan Maximum Network Types
    # List of all Benefit Plan Maximum Network Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_plan_maximum_network_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_plan_maximum_network_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_plan_maximum_network_types"
      end
      # resource path
      local_var_path = '/benefit-plan-maximum-network-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_plan_maximum_network_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_plan_maximum_network_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Plan Maximum Per Types
    # List of all Benefit Plan Maximum Per Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_plan_maximum_per_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_plan_maximum_per_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Plan Maximum Per Types
    # List of all Benefit Plan Maximum Per Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_plan_maximum_per_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_plan_maximum_per_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_plan_maximum_per_types"
      end
      # resource path
      local_var_path = '/benefit-plan-maximum-per-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_plan_maximum_per_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_plan_maximum_per_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Plan Maximum Types
    # List of all Benefit Plan Maximum Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_plan_maximum_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_plan_maximum_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Plan Maximum Types
    # List of all Benefit Plan Maximum Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_plan_maximum_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_plan_maximum_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_plan_maximum_types"
      end
      # resource path
      local_var_path = '/benefit-plan-maximum-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_plan_maximum_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_plan_maximum_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Riders
    # Lists all Benefits that are Riders on a specific Plan
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] PlanId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [BenefitCodesListVBAResponse]
    def list_benefit_plan_riders(vbasoftware_database, plan_id, opts = {})
      data, _status_code, _headers = list_benefit_plan_riders_with_http_info(vbasoftware_database, plan_id, opts)
      data
    end

    # List Benefit Riders
    # Lists all Benefits that are Riders on a specific Plan
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] PlanId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(BenefitCodesListVBAResponse, Integer, Hash)>] BenefitCodesListVBAResponse data, response status code and response headers
    def list_benefit_plan_riders_with_http_info(vbasoftware_database, plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_plan_riders ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_plan_riders"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling BenefitsApi.list_benefit_plan_riders"
      end
      # resource path
      local_var_path = '/plans/{planId}/benefits/riders'.sub('{' + 'planId' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BenefitCodesListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_plan_riders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_plan_riders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Rate Max Types
    # List all Benefit Rate Max Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_rate_max_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_rate_max_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Rate Max Types
    # List all Benefit Rate Max Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_rate_max_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_rate_max_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_rate_max_types"
      end
      # resource path
      local_var_path = '/benefit-rate-max-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_rate_max_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_rate_max_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefit Rate Types
    # List all Benefit Rate Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_benefit_rate_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefit_rate_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefit Rate Types
    # List all Benefit Rate Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_benefit_rate_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefit_rate_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefit_rate_types"
      end
      # resource path
      local_var_path = '/benefit-rate-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefit_rate_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefit_rate_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Benefits
    # Lists all Benefits with optional Benefit Category
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :benefit_category Filter
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [BenefitCodesListVBAResponse]
    def list_benefits(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_benefits_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Benefits
    # Lists all Benefits with optional Benefit Category
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :benefit_category Filter
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(BenefitCodesListVBAResponse, Integer, Hash)>] BenefitCodesListVBAResponse data, response status code and response headers
    def list_benefits_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_benefits ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_benefits"
      end
      # resource path
      local_var_path = '/benefits'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'benefitCategory'] = opts[:'benefit_category'] if !opts[:'benefit_category'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BenefitCodesListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_benefits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_benefits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Out of Pocket (OOP) Calculations
    # List all Out of Pocket (OOP) Calculation key/value pairings.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_out_of_pocket_calculations(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_out_of_pocket_calculations_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Out of Pocket (OOP) Calculations
    # List all Out of Pocket (OOP) Calculation key/value pairings.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_out_of_pocket_calculations_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_out_of_pocket_calculations ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_out_of_pocket_calculations"
      end
      # resource path
      local_var_path = '/oop-calculations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_out_of_pocket_calculations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_out_of_pocket_calculations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Out of Pocket (OOP) Types
    # List all Out of Pocket (OOP) Type key/value pairings.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_out_of_pocket_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_out_of_pocket_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Out of Pocket (OOP) Types
    # List all Out of Pocket (OOP) Type key/value pairings.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_out_of_pocket_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_out_of_pocket_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_out_of_pocket_types"
      end
      # resource path
      local_var_path = '/oop-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_out_of_pocket_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_out_of_pocket_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Plan Benefit Amount Types
    # List Plan Benefit Amount Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_plan_benefit_amount_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_plan_benefit_amount_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Plan Benefit Amount Types
    # List Plan Benefit Amount Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_plan_benefit_amount_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_plan_benefit_amount_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_plan_benefit_amount_types"
      end
      # resource path
      local_var_path = '/plan-benefit-amount-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_plan_benefit_amount_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_plan_benefit_amount_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Plan Benefit Co-Pay Per Types
    # List Plan Benefit Co-Pay Per Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [StringStaticOptionListVBAResponse]
    def list_plan_benefit_co_pay_per_types(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_plan_benefit_co_pay_per_types_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Plan Benefit Co-Pay Per Types
    # List Plan Benefit Co-Pay Per Types
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringStaticOptionListVBAResponse, Integer, Hash)>] StringStaticOptionListVBAResponse data, response status code and response headers
    def list_plan_benefit_co_pay_per_types_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.list_plan_benefit_co_pay_per_types ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.list_plan_benefit_co_pay_per_types"
      end
      # resource path
      local_var_path = '/plan-benefit-co-pay-per-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringStaticOptionListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.list_plan_benefit_co_pay_per_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#list_plan_benefit_co_pay_per_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch of Benefits
    # Create or Update multiple Benefits at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param benefit_codes [Array<BenefitCodes>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_benefits(vbasoftware_database, benefit_codes, opts = {})
      data, _status_code, _headers = update_batch_benefits_with_http_info(vbasoftware_database, benefit_codes, opts)
      data
    end

    # Create or Update Batch of Benefits
    # Create or Update multiple Benefits at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param benefit_codes [Array<BenefitCodes>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_benefits_with_http_info(vbasoftware_database, benefit_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.update_batch_benefits ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.update_batch_benefits"
      end
      # verify the required parameter 'benefit_codes' is set
      if @api_client.config.client_side_validation && benefit_codes.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_codes' when calling BenefitsApi.update_batch_benefits"
      end
      # resource path
      local_var_path = '/benefits-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(benefit_codes)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.update_batch_benefits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#update_batch_benefits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Benefit
    # Updates a specific Benefit
    # @param vbasoftware_database [String] Target database
    # @param benefit_code [String] Benefit Code
    # @param benefit_codes [BenefitCodes] 
    # @param [Hash] opts the optional parameters
    # @return [BenefitCodesVBAResponse]
    def update_benefit(vbasoftware_database, benefit_code, benefit_codes, opts = {})
      data, _status_code, _headers = update_benefit_with_http_info(vbasoftware_database, benefit_code, benefit_codes, opts)
      data
    end

    # Update Benefit
    # Updates a specific Benefit
    # @param vbasoftware_database [String] Target database
    # @param benefit_code [String] Benefit Code
    # @param benefit_codes [BenefitCodes] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BenefitCodesVBAResponse, Integer, Hash)>] BenefitCodesVBAResponse data, response status code and response headers
    def update_benefit_with_http_info(vbasoftware_database, benefit_code, benefit_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BenefitsApi.update_benefit ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling BenefitsApi.update_benefit"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling BenefitsApi.update_benefit"
      end
      # verify the required parameter 'benefit_codes' is set
      if @api_client.config.client_side_validation && benefit_codes.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_codes' when calling BenefitsApi.update_benefit"
      end
      # resource path
      local_var_path = '/benefits/{benefitCode}'.sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(benefit_codes)

      # return_type
      return_type = opts[:debug_return_type] || 'BenefitCodesVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"BenefitsApi.update_benefit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BenefitsApi#update_benefit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
