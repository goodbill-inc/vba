=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ReinsuranceContractTransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply Agg. Spec. Deductible ReinsContractTrans
    # Using this option will reset all aggregate deductible applied amounts for claims on this transaction. Aggregate Deductible amount is then applied to claims in service date order until Aggregate Specific Deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_agg_spec_ded_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      apply_agg_spec_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Apply Agg. Spec. Deductible ReinsContractTrans
    # Using this option will reset all aggregate deductible applied amounts for claims on this transaction. Aggregate Deductible amount is then applied to claims in service date order until Aggregate Specific Deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_agg_spec_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.apply_agg_spec_ded_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.apply_agg_spec_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.apply_agg_spec_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.apply_agg_spec_ded_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/apply-agg-spec-deductible'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.apply_agg_spec_ded_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#apply_agg_spec_ded_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply Deductible ReinsContractTrans
    # This option will reset all deductible applied amounts for claims on this transaction.  Specific or Lasered Deductible amount is then applied to claims in service date order until deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_ded_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      apply_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Apply Deductible ReinsContractTrans
    # This option will reset all deductible applied amounts for claims on this transaction.  Specific or Lasered Deductible amount is then applied to claims in service date order until deductible is met.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_ded_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.apply_ded_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.apply_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.apply_ded_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.apply_ded_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/apply-deductible'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.apply_ded_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#apply_ded_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply Reimbursement ReinsContractTrans
    # Using this option will reset all reimbursement applied amounts for claims on this transaction. Received Reimbursement amount is then applied to claims in service date order until reimbursement amount is used.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_reimbursement_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      apply_reimbursement_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Apply Reimbursement ReinsContractTrans
    # Using this option will reset all reimbursement applied amounts for claims on this transaction. Received Reimbursement amount is then applied to claims in service date order until reimbursement amount is used.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_reimbursement_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.apply_reimbursement_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.apply_reimbursement_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.apply_reimbursement_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.apply_reimbursement_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/apply-reimbursement'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.apply_reimbursement_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#apply_reimbursement_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculate ReinsContractTrans
    # Based on information existing in the ReinsTrans records and the attached ReinsTransClaim records, calculate the header information and return result.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [VBAReinsContractTransAmountVBAResponse]
    def calculate_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      data, _status_code, _headers = calculate_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      data
    end

    # Calculate ReinsContractTrans
    # Based on information existing in the ReinsTrans records and the attached ReinsTransClaim records, calculate the header information and return result.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAReinsContractTransAmountVBAResponse, Integer, Hash)>] VBAReinsContractTransAmountVBAResponse data, response status code and response headers
    def calculate_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.calculate_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.calculate_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.calculate_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.calculate_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/calculate'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAReinsContractTransAmountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.calculate_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#calculate_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create ReinsContractTrans
    # Creates a new ReinsContractTrans
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans [ReinsContractTrans] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractTransVBAResponse]
    def create_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans, opts = {})
      data, _status_code, _headers = create_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans, opts)
      data
    end

    # Create ReinsContractTrans
    # Creates a new ReinsContractTrans
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans [ReinsContractTrans] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractTransVBAResponse, Integer, Hash)>] ReinsContractTransVBAResponse data, response status code and response headers
    def create_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.create_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.create_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.create_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans' is set
      if @api_client.config.client_side_validation && reins_contract_trans.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans' when calling ReinsuranceContractTransactionsApi.create_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_contract_trans)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractTransVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.create_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#create_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ReinsContractTrans
    # Deletes an ReinsContractTrans
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      delete_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Delete ReinsContractTrans
    # Deletes an ReinsContractTrans
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.delete_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.delete_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.delete_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.delete_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.delete_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#delete_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ReinsContractTrans
    # Gets ReinsContractTrans
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractTransVBAResponse]
    def get_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      data, _status_code, _headers = get_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      data
    end

    # Get ReinsContractTrans
    # Gets ReinsContractTrans
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractTransVBAResponse, Integer, Hash)>] ReinsContractTransVBAResponse data, response status code and response headers
    def get_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.get_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.get_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.get_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.get_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractTransVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.get_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#get_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ReinsContractTrans
    # Lists all ReinsContractTrans for the given reinsContractKey
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [ReinsContractTransListVBAResponse]
    def list_reins_contract_trans(vbasoftware_database, reins_contract_key, opts = {})
      data, _status_code, _headers = list_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, opts)
      data
    end

    # List ReinsContractTrans
    # Lists all ReinsContractTrans for the given reinsContractKey
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(ReinsContractTransListVBAResponse, Integer, Hash)>] ReinsContractTransListVBAResponse data, response status code and response headers
    def list_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.list_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.list_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.list_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractTransListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.list_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#list_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ReinsContractTransClaim Info
    # List all Claims attached to this Reinsurance Transaction along with some associated claim information and amount summaries.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [VBAReinsContractTransClaimListVBAResponse]
    def list_vba_reins_contract_trans_claim(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      data, _status_code, _headers = list_vba_reins_contract_trans_claim_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      data
    end

    # List ReinsContractTransClaim Info
    # List all Claims attached to this Reinsurance Transaction along with some associated claim information and amount summaries.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAReinsContractTransClaimListVBAResponse, Integer, Hash)>] VBAReinsContractTransClaimListVBAResponse data, response status code and response headers
    def list_vba_reins_contract_trans_claim_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_claim"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_claim"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_claim"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/claim-info'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAReinsContractTransClaimListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#list_vba_reins_contract_trans_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Calculated ReinsContractTransClaim
    # List all Reimbursements attached to this Reinsurance Transaction along with some associated funding information and amount summaries.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [VBAReinsContractTransReimburseListVBAResponse]
    def list_vba_reins_contract_trans_reimburse(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      data, _status_code, _headers = list_vba_reins_contract_trans_reimburse_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      data
    end

    # List Calculated ReinsContractTransClaim
    # List all Reimbursements attached to this Reinsurance Transaction along with some associated funding information and amount summaries.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAReinsContractTransReimburseListVBAResponse, Integer, Hash)>] VBAReinsContractTransReimburseListVBAResponse data, response status code and response headers
    def list_vba_reins_contract_trans_reimburse_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_reimburse ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_reimburse"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_reimburse"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_reimburse"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/reimburse-info'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAReinsContractTransReimburseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.list_vba_reins_contract_trans_reimburse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#list_vba_reins_contract_trans_reimburse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ReinsContractTrans
    # Lists all ReinsContractTransactions in a Summary for the given reinsContractKey
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [VBAReinsContractTransactionSummaryListVBAResponse]
    def list_vba_reins_contract_transaction_summary(vbasoftware_database, reins_contract_key, opts = {})
      data, _status_code, _headers = list_vba_reins_contract_transaction_summary_with_http_info(vbasoftware_database, reins_contract_key, opts)
      data
    end

    # List ReinsContractTrans
    # Lists all ReinsContractTransactions in a Summary for the given reinsContractKey
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAReinsContractTransactionSummaryListVBAResponse, Integer, Hash)>] VBAReinsContractTransactionSummaryListVBAResponse data, response status code and response headers
    def list_vba_reins_contract_transaction_summary_with_http_info(vbasoftware_database, reins_contract_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.list_vba_reins_contract_transaction_summary ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_transaction_summary"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.list_vba_reins_contract_transaction_summary"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions-summary'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAReinsContractTransactionSummaryListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.list_vba_reins_contract_transaction_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#list_vba_reins_contract_transaction_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset ReinsContractTrans
    # For all claims attached to this Reinsurance Transaction, reset the various applied amounts (Reimbursed, Not Covered, etc.).
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      reset_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts)
      nil
    end

    # Reset ReinsContractTrans
    # For all claims attached to this Reinsurance Transaction, reset the various applied amounts (Reimbursed, Not Covered, etc.).
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.reset_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.reset_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.reset_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.reset_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}/reset'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.reset_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#reset_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch ReinsContractTrans
    # Create or Update multiple ReinsContractTrans at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans [Array<ReinsContractTrans>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans, opts = {})
      data, _status_code, _headers = update_batch_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans, opts)
      data
    end

    # Create or Update Batch ReinsContractTrans
    # Create or Update multiple ReinsContractTrans at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans [Array<ReinsContractTrans>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.update_batch_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.update_batch_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.update_batch_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans' is set
      if @api_client.config.client_side_validation && reins_contract_trans.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans' when calling ReinsuranceContractTransactionsApi.update_batch_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions-batch'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_contract_trans)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.update_batch_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#update_batch_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update ReinsContractTrans
    # Updates a specific ReinsContractTrans.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param reins_contract_trans [ReinsContractTrans] 
    # @param [Hash] opts the optional parameters
    # @return [ReinsContractTransVBAResponse]
    def update_reins_contract_trans(vbasoftware_database, reins_contract_key, reins_contract_trans_key, reins_contract_trans, opts = {})
      data, _status_code, _headers = update_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, reins_contract_trans, opts)
      data
    end

    # Update ReinsContractTrans
    # Updates a specific ReinsContractTrans.
    # @param vbasoftware_database [String] Target database
    # @param reins_contract_key [Integer] ReinsContract Key
    # @param reins_contract_trans_key [Integer] ReinsContractTrans Key
    # @param reins_contract_trans [ReinsContractTrans] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReinsContractTransVBAResponse, Integer, Hash)>] ReinsContractTransVBAResponse data, response status code and response headers
    def update_reins_contract_trans_with_http_info(vbasoftware_database, reins_contract_key, reins_contract_trans_key, reins_contract_trans, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReinsuranceContractTransactionsApi.update_reins_contract_trans ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ReinsuranceContractTransactionsApi.update_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_key' is set
      if @api_client.config.client_side_validation && reins_contract_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_key' when calling ReinsuranceContractTransactionsApi.update_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans_key' is set
      if @api_client.config.client_side_validation && reins_contract_trans_key.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans_key' when calling ReinsuranceContractTransactionsApi.update_reins_contract_trans"
      end
      # verify the required parameter 'reins_contract_trans' is set
      if @api_client.config.client_side_validation && reins_contract_trans.nil?
        fail ArgumentError, "Missing the required parameter 'reins_contract_trans' when calling ReinsuranceContractTransactionsApi.update_reins_contract_trans"
      end
      # resource path
      local_var_path = '/reinsurance-contracts/{reinsContractKey}/transactions/{reinsContractTransKey}'.sub('{' + 'reinsContractKey' + '}', CGI.escape(reins_contract_key.to_s)).sub('{' + 'reinsContractTransKey' + '}', CGI.escape(reins_contract_trans_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reins_contract_trans)

      # return_type
      return_type = opts[:debug_return_type] || 'ReinsContractTransVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ReinsuranceContractTransactionsApi.update_reins_contract_trans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReinsuranceContractTransactionsApi#update_reins_contract_trans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
