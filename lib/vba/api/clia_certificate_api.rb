=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class CLIACertificateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create CLIACertificate
    # Creates a new CLIACertificate
    # @param vbasoftware_database [String] Target database
    # @param clia_certificate [CLIACertificate] 
    # @param [Hash] opts the optional parameters
    # @return [CLIACertificateVBAResponse]
    def create_clia_certificate(vbasoftware_database, clia_certificate, opts = {})
      data, _status_code, _headers = create_clia_certificate_with_http_info(vbasoftware_database, clia_certificate, opts)
      data
    end

    # Create CLIACertificate
    # Creates a new CLIACertificate
    # @param vbasoftware_database [String] Target database
    # @param clia_certificate [CLIACertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CLIACertificateVBAResponse, Integer, Hash)>] CLIACertificateVBAResponse data, response status code and response headers
    def create_clia_certificate_with_http_info(vbasoftware_database, clia_certificate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CLIACertificateApi.create_clia_certificate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CLIACertificateApi.create_clia_certificate"
      end
      # verify the required parameter 'clia_certificate' is set
      if @api_client.config.client_side_validation && clia_certificate.nil?
        fail ArgumentError, "Missing the required parameter 'clia_certificate' when calling CLIACertificateApi.create_clia_certificate"
      end
      # resource path
      local_var_path = '/clia-certificates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clia_certificate)

      # return_type
      return_type = opts[:debug_return_type] || 'CLIACertificateVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CLIACertificateApi.create_clia_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CLIACertificateApi#create_clia_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete CLIACertificate
    # Deletes an CLIACertificate
    # @param vbasoftware_database [String] Target database
    # @param certificate_id [Integer] Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_clia_certificate(vbasoftware_database, certificate_id, opts = {})
      delete_clia_certificate_with_http_info(vbasoftware_database, certificate_id, opts)
      nil
    end

    # Delete CLIACertificate
    # Deletes an CLIACertificate
    # @param vbasoftware_database [String] Target database
    # @param certificate_id [Integer] Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_clia_certificate_with_http_info(vbasoftware_database, certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CLIACertificateApi.delete_clia_certificate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CLIACertificateApi.delete_clia_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling CLIACertificateApi.delete_clia_certificate"
      end
      # resource path
      local_var_path = '/clia-certificates/{certificateId}'.sub('{' + 'certificateId' + '}', CGI.escape(certificate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CLIACertificateApi.delete_clia_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CLIACertificateApi#delete_clia_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CLIACertificate
    # Gets CLIACertificate
    # @param vbasoftware_database [String] Target database
    # @param certificate_id [Integer] Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [CLIACertificateVBAResponse]
    def get_clia_certificate(vbasoftware_database, certificate_id, opts = {})
      data, _status_code, _headers = get_clia_certificate_with_http_info(vbasoftware_database, certificate_id, opts)
      data
    end

    # Get CLIACertificate
    # Gets CLIACertificate
    # @param vbasoftware_database [String] Target database
    # @param certificate_id [Integer] Certificate ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CLIACertificateVBAResponse, Integer, Hash)>] CLIACertificateVBAResponse data, response status code and response headers
    def get_clia_certificate_with_http_info(vbasoftware_database, certificate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CLIACertificateApi.get_clia_certificate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CLIACertificateApi.get_clia_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling CLIACertificateApi.get_clia_certificate"
      end
      # resource path
      local_var_path = '/clia-certificates/{certificateId}'.sub('{' + 'certificateId' + '}', CGI.escape(certificate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CLIACertificateVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CLIACertificateApi.get_clia_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CLIACertificateApi#get_clia_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CLIACertificate
    # Lists all CLIACertificate given a specific 
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [CLIACertificateListVBAResponse]
    def list_clia_certificates(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_clia_certificates_with_http_info(vbasoftware_database, opts)
      data
    end

    # List CLIACertificate
    # Lists all CLIACertificate given a specific 
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(CLIACertificateListVBAResponse, Integer, Hash)>] CLIACertificateListVBAResponse data, response status code and response headers
    def list_clia_certificates_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CLIACertificateApi.list_clia_certificates ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CLIACertificateApi.list_clia_certificates"
      end
      # resource path
      local_var_path = '/clia-certificates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CLIACertificateListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CLIACertificateApi.list_clia_certificates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CLIACertificateApi#list_clia_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch CLIACertificate
    # Create or Update multiple CLIACertificate at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param clia_certificate [Array<CLIACertificate>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_clia_certificate(vbasoftware_database, clia_certificate, opts = {})
      data, _status_code, _headers = update_batch_clia_certificate_with_http_info(vbasoftware_database, clia_certificate, opts)
      data
    end

    # Create or Update Batch CLIACertificate
    # Create or Update multiple CLIACertificate at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param clia_certificate [Array<CLIACertificate>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_clia_certificate_with_http_info(vbasoftware_database, clia_certificate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CLIACertificateApi.update_batch_clia_certificate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CLIACertificateApi.update_batch_clia_certificate"
      end
      # verify the required parameter 'clia_certificate' is set
      if @api_client.config.client_side_validation && clia_certificate.nil?
        fail ArgumentError, "Missing the required parameter 'clia_certificate' when calling CLIACertificateApi.update_batch_clia_certificate"
      end
      # resource path
      local_var_path = '/clia-certificates-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clia_certificate)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CLIACertificateApi.update_batch_clia_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CLIACertificateApi#update_batch_clia_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update CLIACertificate
    # Updates a specific CLIACertificate.
    # @param vbasoftware_database [String] Target database
    # @param certificate_id [Integer] Certificate ID
    # @param clia_certificate [CLIACertificate] 
    # @param [Hash] opts the optional parameters
    # @return [CLIACertificateVBAResponse]
    def update_clia_certificate(vbasoftware_database, certificate_id, clia_certificate, opts = {})
      data, _status_code, _headers = update_clia_certificate_with_http_info(vbasoftware_database, certificate_id, clia_certificate, opts)
      data
    end

    # Update CLIACertificate
    # Updates a specific CLIACertificate.
    # @param vbasoftware_database [String] Target database
    # @param certificate_id [Integer] Certificate ID
    # @param clia_certificate [CLIACertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CLIACertificateVBAResponse, Integer, Hash)>] CLIACertificateVBAResponse data, response status code and response headers
    def update_clia_certificate_with_http_info(vbasoftware_database, certificate_id, clia_certificate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CLIACertificateApi.update_clia_certificate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CLIACertificateApi.update_clia_certificate"
      end
      # verify the required parameter 'certificate_id' is set
      if @api_client.config.client_side_validation && certificate_id.nil?
        fail ArgumentError, "Missing the required parameter 'certificate_id' when calling CLIACertificateApi.update_clia_certificate"
      end
      # verify the required parameter 'clia_certificate' is set
      if @api_client.config.client_side_validation && clia_certificate.nil?
        fail ArgumentError, "Missing the required parameter 'clia_certificate' when calling CLIACertificateApi.update_clia_certificate"
      end
      # resource path
      local_var_path = '/clia-certificates/{certificateId}'.sub('{' + 'certificateId' + '}', CGI.escape(certificate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clia_certificate)

      # return_type
      return_type = opts[:debug_return_type] || 'CLIACertificateVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CLIACertificateApi.update_clia_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CLIACertificateApi#update_clia_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
