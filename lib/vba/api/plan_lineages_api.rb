=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PlanLineagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PlanLineage
    # Creates a new PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage [PlanLineage] 
    # @param [Hash] opts the optional parameters
    # @return [PlanLineageVBAResponse]
    def create_plan_lineage(vbasoftware_database, plan_id, plan_lineage, opts = {})
      data, _status_code, _headers = create_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage, opts)
      data
    end

    # Create PlanLineage
    # Creates a new PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage [PlanLineage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanLineageVBAResponse, Integer, Hash)>] PlanLineageVBAResponse data, response status code and response headers
    def create_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlanLineagesApi.create_plan_lineage ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlanLineagesApi.create_plan_lineage"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlanLineagesApi.create_plan_lineage"
      end
      # verify the required parameter 'plan_lineage' is set
      if @api_client.config.client_side_validation && plan_lineage.nil?
        fail ArgumentError, "Missing the required parameter 'plan_lineage' when calling PlanLineagesApi.create_plan_lineage"
      end
      # resource path
      local_var_path = '/plans/{planID}/lineages'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plan_lineage)

      # return_type
      return_type = opts[:debug_return_type] || 'PlanLineageVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlanLineagesApi.create_plan_lineage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlanLineagesApi#create_plan_lineage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PlanLineage
    # Deletes an PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage_id [String] Plan Lineage ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_plan_lineage(vbasoftware_database, plan_id, plan_lineage_id, opts = {})
      delete_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage_id, opts)
      nil
    end

    # Delete PlanLineage
    # Deletes an PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage_id [String] Plan Lineage ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlanLineagesApi.delete_plan_lineage ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlanLineagesApi.delete_plan_lineage"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlanLineagesApi.delete_plan_lineage"
      end
      # verify the required parameter 'plan_lineage_id' is set
      if @api_client.config.client_side_validation && plan_lineage_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_lineage_id' when calling PlanLineagesApi.delete_plan_lineage"
      end
      # resource path
      local_var_path = '/plans/{planID}/lineages/{planLineageID}'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'planLineageID' + '}', CGI.escape(plan_lineage_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlanLineagesApi.delete_plan_lineage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlanLineagesApi#delete_plan_lineage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PlanLineage
    # Gets PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage_id [String] Plan Lineage ID
    # @param [Hash] opts the optional parameters
    # @return [PlanLineageVBAResponse]
    def get_plan_lineage(vbasoftware_database, plan_id, plan_lineage_id, opts = {})
      data, _status_code, _headers = get_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage_id, opts)
      data
    end

    # Get PlanLineage
    # Gets PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage_id [String] Plan Lineage ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanLineageVBAResponse, Integer, Hash)>] PlanLineageVBAResponse data, response status code and response headers
    def get_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlanLineagesApi.get_plan_lineage ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlanLineagesApi.get_plan_lineage"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlanLineagesApi.get_plan_lineage"
      end
      # verify the required parameter 'plan_lineage_id' is set
      if @api_client.config.client_side_validation && plan_lineage_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_lineage_id' when calling PlanLineagesApi.get_plan_lineage"
      end
      # resource path
      local_var_path = '/plans/{planID}/lineages/{planLineageID}'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'planLineageID' + '}', CGI.escape(plan_lineage_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlanLineageVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlanLineagesApi.get_plan_lineage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlanLineagesApi#get_plan_lineage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PlanLineage
    # Lists all PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [PlanLineageListVBAResponse]
    def list_plan_lineage(vbasoftware_database, plan_id, opts = {})
      data, _status_code, _headers = list_plan_lineage_with_http_info(vbasoftware_database, plan_id, opts)
      data
    end

    # List PlanLineage
    # Lists all PlanLineage
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanLineageListVBAResponse, Integer, Hash)>] PlanLineageListVBAResponse data, response status code and response headers
    def list_plan_lineage_with_http_info(vbasoftware_database, plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlanLineagesApi.list_plan_lineage ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlanLineagesApi.list_plan_lineage"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlanLineagesApi.list_plan_lineage"
      end
      # resource path
      local_var_path = '/plans/{planID}/lineages'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlanLineageListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlanLineagesApi.list_plan_lineage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlanLineagesApi#list_plan_lineage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PlanLineage
    # Create or Update multiple PlanLineage at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage [Array<PlanLineage>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_plan_lineage(vbasoftware_database, plan_id, plan_lineage, opts = {})
      data, _status_code, _headers = update_batch_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage, opts)
      data
    end

    # Create or Update Batch PlanLineage
    # Create or Update multiple PlanLineage at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage [Array<PlanLineage>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlanLineagesApi.update_batch_plan_lineage ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlanLineagesApi.update_batch_plan_lineage"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlanLineagesApi.update_batch_plan_lineage"
      end
      # verify the required parameter 'plan_lineage' is set
      if @api_client.config.client_side_validation && plan_lineage.nil?
        fail ArgumentError, "Missing the required parameter 'plan_lineage' when calling PlanLineagesApi.update_batch_plan_lineage"
      end
      # resource path
      local_var_path = '/plans/{planID}/lineages'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plan_lineage)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlanLineagesApi.update_batch_plan_lineage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlanLineagesApi#update_batch_plan_lineage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PlanLineage
    # Updates a specific PlanLineage.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage_id [String] Plan Lineage ID
    # @param plan_lineage [PlanLineage] 
    # @param [Hash] opts the optional parameters
    # @return [PlanLineageVBAResponse]
    def update_plan_lineage(vbasoftware_database, plan_id, plan_lineage_id, plan_lineage, opts = {})
      data, _status_code, _headers = update_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage_id, plan_lineage, opts)
      data
    end

    # Update PlanLineage
    # Updates a specific PlanLineage.
    # @param vbasoftware_database [String] Target database
    # @param plan_id [String] Plan ID
    # @param plan_lineage_id [String] Plan Lineage ID
    # @param plan_lineage [PlanLineage] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlanLineageVBAResponse, Integer, Hash)>] PlanLineageVBAResponse data, response status code and response headers
    def update_plan_lineage_with_http_info(vbasoftware_database, plan_id, plan_lineage_id, plan_lineage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlanLineagesApi.update_plan_lineage ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PlanLineagesApi.update_plan_lineage"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlanLineagesApi.update_plan_lineage"
      end
      # verify the required parameter 'plan_lineage_id' is set
      if @api_client.config.client_side_validation && plan_lineage_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_lineage_id' when calling PlanLineagesApi.update_plan_lineage"
      end
      # verify the required parameter 'plan_lineage' is set
      if @api_client.config.client_side_validation && plan_lineage.nil?
        fail ArgumentError, "Missing the required parameter 'plan_lineage' when calling PlanLineagesApi.update_plan_lineage"
      end
      # resource path
      local_var_path = '/plans/{planID}/lineages/{planLineageID}'.sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'planLineageID' + '}', CGI.escape(plan_lineage_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(plan_lineage)

      # return_type
      return_type = opts[:debug_return_type] || 'PlanLineageVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PlanLineagesApi.update_plan_lineage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlanLineagesApi#update_plan_lineage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
