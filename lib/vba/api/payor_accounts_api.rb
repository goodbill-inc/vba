=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class PayorAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create PayorAccount
    # Creates a new PayorAccount
    # @param vbasoftware_database [String] Target database
    # @param payor_account [PayorAccount] 
    # @param [Hash] opts the optional parameters
    # @return [PayorAccountVBAResponse]
    def create_payor_account(vbasoftware_database, payor_account, opts = {})
      data, _status_code, _headers = create_payor_account_with_http_info(vbasoftware_database, payor_account, opts)
      data
    end

    # Create PayorAccount
    # Creates a new PayorAccount
    # @param vbasoftware_database [String] Target database
    # @param payor_account [PayorAccount] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayorAccountVBAResponse, Integer, Hash)>] PayorAccountVBAResponse data, response status code and response headers
    def create_payor_account_with_http_info(vbasoftware_database, payor_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.create_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.create_payor_account"
      end
      # verify the required parameter 'payor_account' is set
      if @api_client.config.client_side_validation && payor_account.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account' when calling PayorAccountsApi.create_payor_account"
      end
      # resource path
      local_var_path = '/payor-accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payor_account)

      # return_type
      return_type = opts[:debug_return_type] || 'PayorAccountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.create_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#create_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete PayorAccount
    # Deletes an PayorAccount
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_payor_account(vbasoftware_database, payor_account_key, opts = {})
      delete_payor_account_with_http_info(vbasoftware_database, payor_account_key, opts)
      nil
    end

    # Delete PayorAccount
    # Deletes an PayorAccount
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_payor_account_with_http_info(vbasoftware_database, payor_account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.delete_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.delete_payor_account"
      end
      # verify the required parameter 'payor_account_key' is set
      if @api_client.config.client_side_validation && payor_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account_key' when calling PayorAccountsApi.delete_payor_account"
      end
      # resource path
      local_var_path = '/payor-accounts/{payorAccountKey}'.sub('{' + 'payorAccountKey' + '}', CGI.escape(payor_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.delete_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#delete_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PayorAccount
    # Gets PayorAccount
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [PayorAccountVBAResponse]
    def get_payor_account(vbasoftware_database, payor_account_key, opts = {})
      data, _status_code, _headers = get_payor_account_with_http_info(vbasoftware_database, payor_account_key, opts)
      data
    end

    # Get PayorAccount
    # Gets PayorAccount
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayorAccountVBAResponse, Integer, Hash)>] PayorAccountVBAResponse data, response status code and response headers
    def get_payor_account_with_http_info(vbasoftware_database, payor_account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.get_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.get_payor_account"
      end
      # verify the required parameter 'payor_account_key' is set
      if @api_client.config.client_side_validation && payor_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account_key' when calling PayorAccountsApi.get_payor_account"
      end
      # resource path
      local_var_path = '/payor-accounts/{payorAccountKey}'.sub('{' + 'payorAccountKey' + '}', CGI.escape(payor_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PayorAccountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.get_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#get_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PayorAccount Balance
    # Gets PayorAccount Balance details
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [FundingAccountBalanceVBAResponse]
    def get_payor_account_balance(vbasoftware_database, payor_account_key, opts = {})
      data, _status_code, _headers = get_payor_account_balance_with_http_info(vbasoftware_database, payor_account_key, opts)
      data
    end

    # Get PayorAccount Balance
    # Gets PayorAccount Balance details
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingAccountBalanceVBAResponse, Integer, Hash)>] FundingAccountBalanceVBAResponse data, response status code and response headers
    def get_payor_account_balance_with_http_info(vbasoftware_database, payor_account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.get_payor_account_balance ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.get_payor_account_balance"
      end
      # verify the required parameter 'payor_account_key' is set
      if @api_client.config.client_side_validation && payor_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account_key' when calling PayorAccountsApi.get_payor_account_balance"
      end
      # resource path
      local_var_path = '/payor-accounts/{payorAccountKey}/account-balance'.sub('{' + 'payorAccountKey' + '}', CGI.escape(payor_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingAccountBalanceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.get_payor_account_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#get_payor_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PayorAccount
    # Lists PayorAccounts with optional Payor_ID filter.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :payor_id Payor ID
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [PayorAccountListVBAResponse]
    def list_payor_account(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_payor_account_with_http_info(vbasoftware_database, opts)
      data
    end

    # List PayorAccount
    # Lists PayorAccounts with optional Payor_ID filter.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :payor_id Payor ID
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(PayorAccountListVBAResponse, Integer, Hash)>] PayorAccountListVBAResponse data, response status code and response headers
    def list_payor_account_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.list_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.list_payor_account"
      end
      # resource path
      local_var_path = '/payor-accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'payorID'] = opts[:'payor_id'] if !opts[:'payor_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PayorAccountListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.list_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#list_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Payor Accounts for Check Processing
    # Gets a list of Payor Accounts for Check Processing
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [VBAPayorAccountCheckProcessingVBAResponse]
    def list_payor_account_check_processing(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_payor_account_check_processing_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Payor Accounts for Check Processing
    # Gets a list of Payor Accounts for Check Processing
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAPayorAccountCheckProcessingVBAResponse, Integer, Hash)>] VBAPayorAccountCheckProcessingVBAResponse data, response status code and response headers
    def list_payor_account_check_processing_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.list_payor_account_check_processing ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.list_payor_account_check_processing"
      end
      # resource path
      local_var_path = '/payor-accounts/check-processing'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAPayorAccountCheckProcessingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.list_payor_account_check_processing",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#list_payor_account_check_processing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Claims Information from a Payor's Funding Account
    # List Claims Information from a Payor's Funding Account
    # @param vbasoftware_database [String] Target database
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Payor&#39;s Funding Account Key
    # @param [Hash] opts the optional parameters
    # @return [VBAFundingAccountClaimInfoListVBAResponse]
    def list_payor_funding_account_claims_information(vbasoftware_database, payor_id, account_key, opts = {})
      data, _status_code, _headers = list_payor_funding_account_claims_information_with_http_info(vbasoftware_database, payor_id, account_key, opts)
      data
    end

    # List Claims Information from a Payor&#39;s Funding Account
    # List Claims Information from a Payor&#39;s Funding Account
    # @param vbasoftware_database [String] Target database
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Payor&#39;s Funding Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAFundingAccountClaimInfoListVBAResponse, Integer, Hash)>] VBAFundingAccountClaimInfoListVBAResponse data, response status code and response headers
    def list_payor_funding_account_claims_information_with_http_info(vbasoftware_database, payor_id, account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.list_payor_funding_account_claims_information ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.list_payor_funding_account_claims_information"
      end
      # verify the required parameter 'payor_id' is set
      if @api_client.config.client_side_validation && payor_id.nil?
        fail ArgumentError, "Missing the required parameter 'payor_id' when calling PayorAccountsApi.list_payor_funding_account_claims_information"
      end
      # verify the required parameter 'account_key' is set
      if @api_client.config.client_side_validation && account_key.nil?
        fail ArgumentError, "Missing the required parameter 'account_key' when calling PayorAccountsApi.list_payor_funding_account_claims_information"
      end
      # resource path
      local_var_path = '/payor/{payorId}/funding-accounts/{accountKey}/claims-info'.sub('{' + 'payorId' + '}', CGI.escape(payor_id.to_s)).sub('{' + 'accountKey' + '}', CGI.escape(account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAFundingAccountClaimInfoListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.list_payor_funding_account_claims_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#list_payor_funding_account_claims_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch PayorAccount
    # Create or Update multiple PayorAccount at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param payor_account [Array<PayorAccount>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_payor_account(vbasoftware_database, payor_account, opts = {})
      data, _status_code, _headers = update_batch_payor_account_with_http_info(vbasoftware_database, payor_account, opts)
      data
    end

    # Create or Update Batch PayorAccount
    # Create or Update multiple PayorAccount at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param payor_account [Array<PayorAccount>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_payor_account_with_http_info(vbasoftware_database, payor_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.update_batch_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.update_batch_payor_account"
      end
      # verify the required parameter 'payor_account' is set
      if @api_client.config.client_side_validation && payor_account.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account' when calling PayorAccountsApi.update_batch_payor_account"
      end
      # resource path
      local_var_path = '/payor-accounts-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payor_account)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.update_batch_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#update_batch_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update PayorAccount
    # Updates a specific PayorAccount.
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param payor_account [PayorAccount] 
    # @param [Hash] opts the optional parameters
    # @return [PayorAccountVBAResponse]
    def update_payor_account(vbasoftware_database, payor_account_key, payor_account, opts = {})
      data, _status_code, _headers = update_payor_account_with_http_info(vbasoftware_database, payor_account_key, payor_account, opts)
      data
    end

    # Update PayorAccount
    # Updates a specific PayorAccount.
    # @param vbasoftware_database [String] Target database
    # @param payor_account_key [Integer] Payor Account Key
    # @param payor_account [PayorAccount] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayorAccountVBAResponse, Integer, Hash)>] PayorAccountVBAResponse data, response status code and response headers
    def update_payor_account_with_http_info(vbasoftware_database, payor_account_key, payor_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayorAccountsApi.update_payor_account ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling PayorAccountsApi.update_payor_account"
      end
      # verify the required parameter 'payor_account_key' is set
      if @api_client.config.client_side_validation && payor_account_key.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account_key' when calling PayorAccountsApi.update_payor_account"
      end
      # verify the required parameter 'payor_account' is set
      if @api_client.config.client_side_validation && payor_account.nil?
        fail ArgumentError, "Missing the required parameter 'payor_account' when calling PayorAccountsApi.update_payor_account"
      end
      # resource path
      local_var_path = '/payor-accounts/{payorAccountKey}'.sub('{' + 'payorAccountKey' + '}', CGI.escape(payor_account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payor_account)

      # return_type
      return_type = opts[:debug_return_type] || 'PayorAccountVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"PayorAccountsApi.update_payor_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayorAccountsApi#update_payor_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
