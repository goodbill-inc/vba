=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class CapitationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Capitation Generate
    # Generates Capitation records and attaches those to a new Capitation Transaction based on entered criteria.
    # @param vbasoftware_database [String] Target database
    # @param capitation_generate [CapitationGenerate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def capitation_generate(vbasoftware_database, capitation_generate, opts = {})
      capitation_generate_with_http_info(vbasoftware_database, capitation_generate, opts)
      nil
    end

    # Capitation Generate
    # Generates Capitation records and attaches those to a new Capitation Transaction based on entered criteria.
    # @param vbasoftware_database [String] Target database
    # @param capitation_generate [CapitationGenerate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def capitation_generate_with_http_info(vbasoftware_database, capitation_generate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.capitation_generate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.capitation_generate"
      end
      # verify the required parameter 'capitation_generate' is set
      if @api_client.config.client_side_validation && capitation_generate.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_generate' when calling CapitationsApi.capitation_generate"
      end
      # resource path
      local_var_path = '/capitation-generate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capitation_generate)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.capitation_generate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#capitation_generate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Capitation Generate Assign
    # Takes selected unassigned list of CapitationKeys and a valid Payee, and attaches them to a newly created Capitation Transaction.
    # @param vbasoftware_database [String] Target database
    # @param capitation_generate [CapitationGenerate] 
    # @param [Hash] opts the optional parameters
    # @return [CapitationTransactionVBAResponse]
    def capitation_generate_assign(vbasoftware_database, capitation_generate, opts = {})
      data, _status_code, _headers = capitation_generate_assign_with_http_info(vbasoftware_database, capitation_generate, opts)
      data
    end

    # Capitation Generate Assign
    # Takes selected unassigned list of CapitationKeys and a valid Payee, and attaches them to a newly created Capitation Transaction.
    # @param vbasoftware_database [String] Target database
    # @param capitation_generate [CapitationGenerate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapitationTransactionVBAResponse, Integer, Hash)>] CapitationTransactionVBAResponse data, response status code and response headers
    def capitation_generate_assign_with_http_info(vbasoftware_database, capitation_generate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.capitation_generate_assign ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.capitation_generate_assign"
      end
      # verify the required parameter 'capitation_generate' is set
      if @api_client.config.client_side_validation && capitation_generate.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_generate' when calling CapitationsApi.capitation_generate_assign"
      end
      # resource path
      local_var_path = '/capitation-generate-assign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capitation_generate)

      # return_type
      return_type = opts[:debug_return_type] || 'CapitationTransactionVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.capitation_generate_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#capitation_generate_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Capitation Generate Set Unassigned
    # Takes existing unassigned capitation records and attaches them to the chosen Provider on a newly created Capitation Transaction.
    # @param vbasoftware_database [String] Target database
    # @param capitation_generate [CapitationGenerate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def capitation_generate_set_unassigned(vbasoftware_database, capitation_generate, opts = {})
      capitation_generate_set_unassigned_with_http_info(vbasoftware_database, capitation_generate, opts)
      nil
    end

    # Capitation Generate Set Unassigned
    # Takes existing unassigned capitation records and attaches them to the chosen Provider on a newly created Capitation Transaction.
    # @param vbasoftware_database [String] Target database
    # @param capitation_generate [CapitationGenerate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def capitation_generate_set_unassigned_with_http_info(vbasoftware_database, capitation_generate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.capitation_generate_set_unassigned ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.capitation_generate_set_unassigned"
      end
      # verify the required parameter 'capitation_generate' is set
      if @api_client.config.client_side_validation && capitation_generate.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_generate' when calling CapitationsApi.capitation_generate_set_unassigned"
      end
      # resource path
      local_var_path = '/capitation-generate-set-unassigned'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capitation_generate)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.capitation_generate_set_unassigned",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#capitation_generate_set_unassigned\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Capitation
    # Creates a new Capitation
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation [Capitation] 
    # @param [Hash] opts the optional parameters
    # @return [CapitationVBAResponse]
    def create_capitation(vbasoftware_database, capitation_transaction_key, capitation, opts = {})
      data, _status_code, _headers = create_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation, opts)
      data
    end

    # Create Capitation
    # Creates a new Capitation
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation [Capitation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapitationVBAResponse, Integer, Hash)>] CapitationVBAResponse data, response status code and response headers
    def create_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.create_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.create_capitation"
      end
      # verify the required parameter 'capitation_transaction_key' is set
      if @api_client.config.client_side_validation && capitation_transaction_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_transaction_key' when calling CapitationsApi.create_capitation"
      end
      # verify the required parameter 'capitation' is set
      if @api_client.config.client_side_validation && capitation.nil?
        fail ArgumentError, "Missing the required parameter 'capitation' when calling CapitationsApi.create_capitation"
      end
      # resource path
      local_var_path = '/capitation-transactions/{capitationTransactionKey}/capitations'.sub('{' + 'capitationTransactionKey' + '}', CGI.escape(capitation_transaction_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capitation)

      # return_type
      return_type = opts[:debug_return_type] || 'CapitationVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.create_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#create_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Capitation
    # Deletes an Capitation
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation_key [Integer] Capitation Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_capitation(vbasoftware_database, capitation_transaction_key, capitation_key, opts = {})
      delete_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation_key, opts)
      nil
    end

    # Delete Capitation
    # Deletes an Capitation
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation_key [Integer] Capitation Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.delete_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.delete_capitation"
      end
      # verify the required parameter 'capitation_transaction_key' is set
      if @api_client.config.client_side_validation && capitation_transaction_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_transaction_key' when calling CapitationsApi.delete_capitation"
      end
      # verify the required parameter 'capitation_key' is set
      if @api_client.config.client_side_validation && capitation_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_key' when calling CapitationsApi.delete_capitation"
      end
      # resource path
      local_var_path = '/capitation-transactions/{capitationTransactionKey}/capitations/{capitationKey}'.sub('{' + 'capitationTransactionKey' + '}', CGI.escape(capitation_transaction_key.to_s)).sub('{' + 'capitationKey' + '}', CGI.escape(capitation_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.delete_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#delete_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Capitation
    # Gets Capitation
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation_key [Integer] Capitation Key
    # @param [Hash] opts the optional parameters
    # @return [CapitationVBAResponse]
    def get_capitation(vbasoftware_database, capitation_transaction_key, capitation_key, opts = {})
      data, _status_code, _headers = get_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation_key, opts)
      data
    end

    # Get Capitation
    # Gets Capitation
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation_key [Integer] Capitation Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapitationVBAResponse, Integer, Hash)>] CapitationVBAResponse data, response status code and response headers
    def get_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.get_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.get_capitation"
      end
      # verify the required parameter 'capitation_transaction_key' is set
      if @api_client.config.client_side_validation && capitation_transaction_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_transaction_key' when calling CapitationsApi.get_capitation"
      end
      # verify the required parameter 'capitation_key' is set
      if @api_client.config.client_side_validation && capitation_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_key' when calling CapitationsApi.get_capitation"
      end
      # resource path
      local_var_path = '/capitation-transactions/{capitationTransactionKey}/capitations/{capitationKey}'.sub('{' + 'capitationTransactionKey' + '}', CGI.escape(capitation_transaction_key.to_s)).sub('{' + 'capitationKey' + '}', CGI.escape(capitation_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CapitationVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.get_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#get_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Capitation
    # Lists all Capitation for the given capitationTransactionKey
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [CapitationListVBAResponse]
    def list_capitation(vbasoftware_database, capitation_transaction_key, opts = {})
      data, _status_code, _headers = list_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, opts)
      data
    end

    # List Capitation
    # Lists all Capitation for the given capitationTransactionKey
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(CapitationListVBAResponse, Integer, Hash)>] CapitationListVBAResponse data, response status code and response headers
    def list_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.list_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.list_capitation"
      end
      # verify the required parameter 'capitation_transaction_key' is set
      if @api_client.config.client_side_validation && capitation_transaction_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_transaction_key' when calling CapitationsApi.list_capitation"
      end
      # resource path
      local_var_path = '/capitation-transactions/{capitationTransactionKey}/capitations'.sub('{' + 'capitationTransactionKey' + '}', CGI.escape(capitation_transaction_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CapitationListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.list_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#list_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Unassigned Capitation
    # Lists all Capitation that is currently not assigned to a Capitation Transaction
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [CapitationListVBAResponse]
    def list_unassigned_capitation(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_unassigned_capitation_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Unassigned Capitation
    # Lists all Capitation that is currently not assigned to a Capitation Transaction
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(CapitationListVBAResponse, Integer, Hash)>] CapitationListVBAResponse data, response status code and response headers
    def list_unassigned_capitation_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.list_unassigned_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.list_unassigned_capitation"
      end
      # resource path
      local_var_path = '/unassigned-capitations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CapitationListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.list_unassigned_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#list_unassigned_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Capitation
    # Create or Update multiple Capitation at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation [Array<Capitation>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_capitation(vbasoftware_database, capitation_transaction_key, capitation, opts = {})
      data, _status_code, _headers = update_batch_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation, opts)
      data
    end

    # Create or Update Batch Capitation
    # Create or Update multiple Capitation at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation [Array<Capitation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.update_batch_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.update_batch_capitation"
      end
      # verify the required parameter 'capitation_transaction_key' is set
      if @api_client.config.client_side_validation && capitation_transaction_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_transaction_key' when calling CapitationsApi.update_batch_capitation"
      end
      # verify the required parameter 'capitation' is set
      if @api_client.config.client_side_validation && capitation.nil?
        fail ArgumentError, "Missing the required parameter 'capitation' when calling CapitationsApi.update_batch_capitation"
      end
      # resource path
      local_var_path = '/capitation-transactions/{capitationTransactionKey}/capitations-batch'.sub('{' + 'capitationTransactionKey' + '}', CGI.escape(capitation_transaction_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capitation)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.update_batch_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#update_batch_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Capitation
    # Updates a specific Capitation.
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation_key [Integer] Capitation Key
    # @param capitation [Capitation] 
    # @param [Hash] opts the optional parameters
    # @return [CapitationVBAResponse]
    def update_capitation(vbasoftware_database, capitation_transaction_key, capitation_key, capitation, opts = {})
      data, _status_code, _headers = update_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation_key, capitation, opts)
      data
    end

    # Update Capitation
    # Updates a specific Capitation.
    # @param vbasoftware_database [String] Target database
    # @param capitation_transaction_key [Integer] CapitationTransaction Key
    # @param capitation_key [Integer] Capitation Key
    # @param capitation [Capitation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapitationVBAResponse, Integer, Hash)>] CapitationVBAResponse data, response status code and response headers
    def update_capitation_with_http_info(vbasoftware_database, capitation_transaction_key, capitation_key, capitation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapitationsApi.update_capitation ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling CapitationsApi.update_capitation"
      end
      # verify the required parameter 'capitation_transaction_key' is set
      if @api_client.config.client_side_validation && capitation_transaction_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_transaction_key' when calling CapitationsApi.update_capitation"
      end
      # verify the required parameter 'capitation_key' is set
      if @api_client.config.client_side_validation && capitation_key.nil?
        fail ArgumentError, "Missing the required parameter 'capitation_key' when calling CapitationsApi.update_capitation"
      end
      # verify the required parameter 'capitation' is set
      if @api_client.config.client_side_validation && capitation.nil?
        fail ArgumentError, "Missing the required parameter 'capitation' when calling CapitationsApi.update_capitation"
      end
      # resource path
      local_var_path = '/capitation-transactions/{capitationTransactionKey}/capitations/{capitationKey}'.sub('{' + 'capitationTransactionKey' + '}', CGI.escape(capitation_transaction_key.to_s)).sub('{' + 'capitationKey' + '}', CGI.escape(capitation_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(capitation)

      # return_type
      return_type = opts[:debug_return_type] || 'CapitationVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"CapitationsApi.update_capitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapitationsApi#update_capitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
