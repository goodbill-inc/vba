=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AuthReviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create AuthReview
    # Creates a new AuthReview.
    # @param vbasoftware_database [String] Target database
    # @param auth_review [AuthReview] 
    # @param [Hash] opts the optional parameters
    # @return [AuthReviewVBAResponse]
    def create_auth_review(vbasoftware_database, auth_review, opts = {})
      data, _status_code, _headers = create_auth_review_with_http_info(vbasoftware_database, auth_review, opts)
      data
    end

    # Create AuthReview
    # Creates a new AuthReview.
    # @param vbasoftware_database [String] Target database
    # @param auth_review [AuthReview] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthReviewVBAResponse, Integer, Hash)>] AuthReviewVBAResponse data, response status code and response headers
    def create_auth_review_with_http_info(vbasoftware_database, auth_review, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReviewApi.create_auth_review ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReviewApi.create_auth_review"
      end
      # verify the required parameter 'auth_review' is set
      if @api_client.config.client_side_validation && auth_review.nil?
        fail ArgumentError, "Missing the required parameter 'auth_review' when calling AuthReviewApi.create_auth_review"
      end
      # resource path
      local_var_path = '/auth-reviews'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_review)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReviewVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReviewApi.create_auth_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReviewApi#create_auth_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete AuthReview
    # Deletes an AuthReview
    # @param vbasoftware_database [String] Target database
    # @param auth_review_key [Integer] AuthReview Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_auth_review(vbasoftware_database, auth_review_key, opts = {})
      delete_auth_review_with_http_info(vbasoftware_database, auth_review_key, opts)
      nil
    end

    # Delete AuthReview
    # Deletes an AuthReview
    # @param vbasoftware_database [String] Target database
    # @param auth_review_key [Integer] AuthReview Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_auth_review_with_http_info(vbasoftware_database, auth_review_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReviewApi.delete_auth_review ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReviewApi.delete_auth_review"
      end
      # verify the required parameter 'auth_review_key' is set
      if @api_client.config.client_side_validation && auth_review_key.nil?
        fail ArgumentError, "Missing the required parameter 'auth_review_key' when calling AuthReviewApi.delete_auth_review"
      end
      # resource path
      local_var_path = '/auth-reviews/{authReviewKey}'.sub('{' + 'authReviewKey' + '}', CGI.escape(auth_review_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReviewApi.delete_auth_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReviewApi#delete_auth_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get AuthReview
    # Gets AuthReview
    # @param vbasoftware_database [String] Target database
    # @param auth_review_key [Integer] AuthReview Key
    # @param [Hash] opts the optional parameters
    # @return [AuthReviewVBAResponse]
    def get_auth_review(vbasoftware_database, auth_review_key, opts = {})
      data, _status_code, _headers = get_auth_review_with_http_info(vbasoftware_database, auth_review_key, opts)
      data
    end

    # Get AuthReview
    # Gets AuthReview
    # @param vbasoftware_database [String] Target database
    # @param auth_review_key [Integer] AuthReview Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthReviewVBAResponse, Integer, Hash)>] AuthReviewVBAResponse data, response status code and response headers
    def get_auth_review_with_http_info(vbasoftware_database, auth_review_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReviewApi.get_auth_review ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReviewApi.get_auth_review"
      end
      # verify the required parameter 'auth_review_key' is set
      if @api_client.config.client_side_validation && auth_review_key.nil?
        fail ArgumentError, "Missing the required parameter 'auth_review_key' when calling AuthReviewApi.get_auth_review"
      end
      # resource path
      local_var_path = '/auth-reviews/{authReviewKey}'.sub('{' + 'authReviewKey' + '}', CGI.escape(auth_review_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReviewVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReviewApi.get_auth_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReviewApi#get_auth_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List AuthReviews
    # Lists all AuthReviews
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_number Auth Number
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [AuthReviewListVBAResponse]
    def list_auth_reviews(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_auth_reviews_with_http_info(vbasoftware_database, opts)
      data
    end

    # List AuthReviews
    # Lists all AuthReviews
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_number Auth Number
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(AuthReviewListVBAResponse, Integer, Hash)>] AuthReviewListVBAResponse data, response status code and response headers
    def list_auth_reviews_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReviewApi.list_auth_reviews ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReviewApi.list_auth_reviews"
      end
      # resource path
      local_var_path = '/auth-reviews'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authNumber'] = opts[:'auth_number'] if !opts[:'auth_number'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReviewListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReviewApi.list_auth_reviews",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReviewApi#list_auth_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update AuthReview
    # Updates a specific AuthReview.
    # @param vbasoftware_database [String] Target database
    # @param auth_review_key [Integer] AuthReview Key
    # @param auth_review [AuthReview] 
    # @param [Hash] opts the optional parameters
    # @return [AuthReviewVBAResponse]
    def update_auth_review(vbasoftware_database, auth_review_key, auth_review, opts = {})
      data, _status_code, _headers = update_auth_review_with_http_info(vbasoftware_database, auth_review_key, auth_review, opts)
      data
    end

    # Update AuthReview
    # Updates a specific AuthReview.
    # @param vbasoftware_database [String] Target database
    # @param auth_review_key [Integer] AuthReview Key
    # @param auth_review [AuthReview] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthReviewVBAResponse, Integer, Hash)>] AuthReviewVBAResponse data, response status code and response headers
    def update_auth_review_with_http_info(vbasoftware_database, auth_review_key, auth_review, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReviewApi.update_auth_review ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReviewApi.update_auth_review"
      end
      # verify the required parameter 'auth_review_key' is set
      if @api_client.config.client_side_validation && auth_review_key.nil?
        fail ArgumentError, "Missing the required parameter 'auth_review_key' when calling AuthReviewApi.update_auth_review"
      end
      # verify the required parameter 'auth_review' is set
      if @api_client.config.client_side_validation && auth_review.nil?
        fail ArgumentError, "Missing the required parameter 'auth_review' when calling AuthReviewApi.update_auth_review"
      end
      # resource path
      local_var_path = '/auth-reviews/{authReviewKey}'.sub('{' + 'authReviewKey' + '}', CGI.escape(auth_review_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_review)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthReviewVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReviewApi.update_auth_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReviewApi#update_auth_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Batch AuthReview
    # Updates a multiple AuthReview.
    # @param vbasoftware_database [String] Target database
    # @param auth_review [Array<AuthReview>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_auth_review(vbasoftware_database, auth_review, opts = {})
      data, _status_code, _headers = update_batch_auth_review_with_http_info(vbasoftware_database, auth_review, opts)
      data
    end

    # Update Batch AuthReview
    # Updates a multiple AuthReview.
    # @param vbasoftware_database [String] Target database
    # @param auth_review [Array<AuthReview>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_auth_review_with_http_info(vbasoftware_database, auth_review, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthReviewApi.update_batch_auth_review ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AuthReviewApi.update_batch_auth_review"
      end
      # verify the required parameter 'auth_review' is set
      if @api_client.config.client_side_validation && auth_review.nil?
        fail ArgumentError, "Missing the required parameter 'auth_review' when calling AuthReviewApi.update_batch_auth_review"
      end
      # resource path
      local_var_path = '/auth-reviews-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(auth_review)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AuthReviewApi.update_batch_auth_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthReviewApi#update_batch_auth_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
