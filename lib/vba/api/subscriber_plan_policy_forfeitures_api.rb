=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class SubscriberPlanPolicyForfeituresApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create SubscriberForfeitureStatus
    # Creates a new SubscriberForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param subscriber_forfeiture_status [SubscriberForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [SubscriberForfeitureStatusVBAResponse]
    def create_subscriber_forfeiture_status(vbasoftware_database, subscriber_forfeiture_status, opts = {})
      data, _status_code, _headers = create_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_forfeiture_status, opts)
      data
    end

    # Create SubscriberForfeitureStatus
    # Creates a new SubscriberForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param subscriber_forfeiture_status [SubscriberForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriberForfeitureStatusVBAResponse, Integer, Hash)>] SubscriberForfeitureStatusVBAResponse data, response status code and response headers
    def create_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_forfeiture_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberPlanPolicyForfeituresApi.create_subscriber_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberPlanPolicyForfeituresApi.create_subscriber_forfeiture_status"
      end
      # verify the required parameter 'subscriber_forfeiture_status' is set
      if @api_client.config.client_side_validation && subscriber_forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_forfeiture_status' when calling SubscriberPlanPolicyForfeituresApi.create_subscriber_forfeiture_status"
      end
      # resource path
      local_var_path = '/subscriber-forfeiture-status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(subscriber_forfeiture_status)

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriberForfeitureStatusVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberPlanPolicyForfeituresApi.create_subscriber_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberPlanPolicyForfeituresApi#create_subscriber_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SubscriberForfeitureStatus
    # Deletes an SubscriberForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param forfeiture_status [String] Forfeiture Status
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subscriber_forfeiture_status(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, opts = {})
      delete_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, opts)
      nil
    end

    # Delete SubscriberForfeitureStatus
    # Deletes an SubscriberForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param forfeiture_status [String] Forfeiture Status
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # verify the required parameter 'policy_number' is set
      if @api_client.config.client_side_validation && policy_number.nil?
        fail ArgumentError, "Missing the required parameter 'policy_number' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # verify the required parameter 'effective_date' is set
      if @api_client.config.client_side_validation && effective_date.nil?
        fail ArgumentError, "Missing the required parameter 'effective_date' when calling SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status"
      end
      # resource path
      local_var_path = '/subscriber-forfeiture-status/{subscriberID}/{planID}/{benefitCode}/{policyNumber}/{forfeitureStatus}/{effectiveDate}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s)).sub('{' + 'policyNumber' + '}', CGI.escape(policy_number.to_s)).sub('{' + 'forfeitureStatus' + '}', CGI.escape(forfeiture_status.to_s)).sub('{' + 'effectiveDate' + '}', CGI.escape(effective_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberPlanPolicyForfeituresApi.delete_subscriber_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberPlanPolicyForfeituresApi#delete_subscriber_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SubscriberForfeitureStatus
    # Gets SubscriberForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param forfeiture_status [String] Forfeiture Status
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [SubscriberForfeitureStatusVBAResponse]
    def get_subscriber_forfeiture_status(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, opts = {})
      data, _status_code, _headers = get_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, opts)
      data
    end

    # Get SubscriberForfeitureStatus
    # Gets SubscriberForfeitureStatus
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param forfeiture_status [String] Forfeiture Status
    # @param effective_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriberForfeitureStatusVBAResponse, Integer, Hash)>] SubscriberForfeitureStatusVBAResponse data, response status code and response headers
    def get_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # verify the required parameter 'policy_number' is set
      if @api_client.config.client_side_validation && policy_number.nil?
        fail ArgumentError, "Missing the required parameter 'policy_number' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # verify the required parameter 'effective_date' is set
      if @api_client.config.client_side_validation && effective_date.nil?
        fail ArgumentError, "Missing the required parameter 'effective_date' when calling SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status"
      end
      # resource path
      local_var_path = '/subscriber-forfeiture-status/{subscriberID}/{planID}/{benefitCode}/{policyNumber}/{forfeitureStatus}/{effectiveDate}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s)).sub('{' + 'policyNumber' + '}', CGI.escape(policy_number.to_s)).sub('{' + 'forfeitureStatus' + '}', CGI.escape(forfeiture_status.to_s)).sub('{' + 'effectiveDate' + '}', CGI.escape(effective_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriberForfeitureStatusVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberPlanPolicyForfeituresApi.get_subscriber_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberPlanPolicyForfeituresApi#get_subscriber_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SubscriberForfeitureStatus
    # Lists all SubscriberForfeitureStatus for the given filters: subscriberID and planID and benefitCode and policyNumber and forfeitureStatus and effectiveDate
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subscriber_id Subscriber ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :benefit_code Benefit Code
    # @option opts [String] :policy_number Policy Number
    # @option opts [String] :forfeiture_status Forfeiture Status
    # @option opts [Time] :effective_date Effective Date
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [SubscriberForfeitureStatusListVBAResponse]
    def list_subscriber_forfeiture_status(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_subscriber_forfeiture_status_with_http_info(vbasoftware_database, opts)
      data
    end

    # List SubscriberForfeitureStatus
    # Lists all SubscriberForfeitureStatus for the given filters: subscriberID and planID and benefitCode and policyNumber and forfeitureStatus and effectiveDate
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subscriber_id Subscriber ID
    # @option opts [String] :plan_id Plan ID
    # @option opts [String] :benefit_code Benefit Code
    # @option opts [String] :policy_number Policy Number
    # @option opts [String] :forfeiture_status Forfeiture Status
    # @option opts [Time] :effective_date Effective Date
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(SubscriberForfeitureStatusListVBAResponse, Integer, Hash)>] SubscriberForfeitureStatusListVBAResponse data, response status code and response headers
    def list_subscriber_forfeiture_status_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberPlanPolicyForfeituresApi.list_subscriber_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberPlanPolicyForfeituresApi.list_subscriber_forfeiture_status"
      end
      # resource path
      local_var_path = '/subscriber-forfeiture-status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subscriberID'] = opts[:'subscriber_id'] if !opts[:'subscriber_id'].nil?
      query_params[:'planID'] = opts[:'plan_id'] if !opts[:'plan_id'].nil?
      query_params[:'benefitCode'] = opts[:'benefit_code'] if !opts[:'benefit_code'].nil?
      query_params[:'policyNumber'] = opts[:'policy_number'] if !opts[:'policy_number'].nil?
      query_params[:'forfeitureStatus'] = opts[:'forfeiture_status'] if !opts[:'forfeiture_status'].nil?
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriberForfeitureStatusListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberPlanPolicyForfeituresApi.list_subscriber_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberPlanPolicyForfeituresApi#list_subscriber_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscriber Policy Forfeiture
    # Forfeits a Policy for a given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param enrollment_policy_forfeiture [EnrollmentPolicyForfeiture] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscriber_policy_forfeiture(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, enrollment_policy_forfeiture, opts = {})
      subscriber_policy_forfeiture_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, enrollment_policy_forfeiture, opts)
      nil
    end

    # Subscriber Policy Forfeiture
    # Forfeits a Policy for a given Subscriber ID
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param enrollment_policy_forfeiture [EnrollmentPolicyForfeiture] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def subscriber_policy_forfeiture_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, enrollment_policy_forfeiture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture"
      end
      # verify the required parameter 'policy_number' is set
      if @api_client.config.client_side_validation && policy_number.nil?
        fail ArgumentError, "Missing the required parameter 'policy_number' when calling SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture"
      end
      # verify the required parameter 'enrollment_policy_forfeiture' is set
      if @api_client.config.client_side_validation && enrollment_policy_forfeiture.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_policy_forfeiture' when calling SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/plans/{planID}/benefits/{benefitCode}/policies/{policyNumber}/forfeiture'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s)).sub('{' + 'policyNumber' + '}', CGI.escape(policy_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_policy_forfeiture)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberPlanPolicyForfeituresApi.subscriber_policy_forfeiture",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberPlanPolicyForfeituresApi#subscriber_policy_forfeiture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SubscriberForfeitureStatus
    # Updates a specific SubscriberForfeitureStatus.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param forfeiture_status [String] Forfeiture Status
    # @param effective_date [Time] Effective Date
    # @param subscriber_forfeiture_status [SubscriberForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [SubscriberForfeitureStatusVBAResponse]
    def update_subscriber_forfeiture_status(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, subscriber_forfeiture_status, opts = {})
      data, _status_code, _headers = update_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, subscriber_forfeiture_status, opts)
      data
    end

    # Update SubscriberForfeitureStatus
    # Updates a specific SubscriberForfeitureStatus.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param plan_id [String] Plan ID
    # @param benefit_code [String] Benefit Code
    # @param policy_number [String] Policy Number
    # @param forfeiture_status [String] Forfeiture Status
    # @param effective_date [Time] Effective Date
    # @param subscriber_forfeiture_status [SubscriberForfeitureStatus] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriberForfeitureStatusVBAResponse, Integer, Hash)>] SubscriberForfeitureStatusVBAResponse data, response status code and response headers
    def update_subscriber_forfeiture_status_with_http_info(vbasoftware_database, subscriber_id, plan_id, benefit_code, policy_number, forfeiture_status, effective_date, subscriber_forfeiture_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'benefit_code' is set
      if @api_client.config.client_side_validation && benefit_code.nil?
        fail ArgumentError, "Missing the required parameter 'benefit_code' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'policy_number' is set
      if @api_client.config.client_side_validation && policy_number.nil?
        fail ArgumentError, "Missing the required parameter 'policy_number' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'forfeiture_status' is set
      if @api_client.config.client_side_validation && forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'forfeiture_status' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'effective_date' is set
      if @api_client.config.client_side_validation && effective_date.nil?
        fail ArgumentError, "Missing the required parameter 'effective_date' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # verify the required parameter 'subscriber_forfeiture_status' is set
      if @api_client.config.client_side_validation && subscriber_forfeiture_status.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_forfeiture_status' when calling SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status"
      end
      # resource path
      local_var_path = '/subscriber-forfeiture-status/{subscriberID}/{planID}/{benefitCode}/{policyNumber}/{forfeitureStatus}/{effectiveDate}'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'planID' + '}', CGI.escape(plan_id.to_s)).sub('{' + 'benefitCode' + '}', CGI.escape(benefit_code.to_s)).sub('{' + 'policyNumber' + '}', CGI.escape(policy_number.to_s)).sub('{' + 'forfeitureStatus' + '}', CGI.escape(forfeiture_status.to_s)).sub('{' + 'effectiveDate' + '}', CGI.escape(effective_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(subscriber_forfeiture_status)

      # return_type
      return_type = opts[:debug_return_type] || 'SubscriberForfeitureStatusVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"SubscriberPlanPolicyForfeituresApi.update_subscriber_forfeiture_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubscriberPlanPolicyForfeituresApi#update_subscriber_forfeiture_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
