=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class AdvBillingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Rate from Template
    # Create a new Premium Rate based on the selected Template Rate.
    # @param vbasoftware_database [String] Target database
    # @param prem_rate_key [Integer] PremRate Key
    # @param billing_add_rate_from_template_config [BillingAddRateFromTemplateConfig] 
    # @param [Hash] opts the optional parameters
    # @return [PremRateVBAResponse]
    def add_prem_rate_from_template(vbasoftware_database, prem_rate_key, billing_add_rate_from_template_config, opts = {})
      data, _status_code, _headers = add_prem_rate_from_template_with_http_info(vbasoftware_database, prem_rate_key, billing_add_rate_from_template_config, opts)
      data
    end

    # Add Rate from Template
    # Create a new Premium Rate based on the selected Template Rate.
    # @param vbasoftware_database [String] Target database
    # @param prem_rate_key [Integer] PremRate Key
    # @param billing_add_rate_from_template_config [BillingAddRateFromTemplateConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremRateVBAResponse, Integer, Hash)>] PremRateVBAResponse data, response status code and response headers
    def add_prem_rate_from_template_with_http_info(vbasoftware_database, prem_rate_key, billing_add_rate_from_template_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.add_prem_rate_from_template ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.add_prem_rate_from_template"
      end
      # verify the required parameter 'prem_rate_key' is set
      if @api_client.config.client_side_validation && prem_rate_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_rate_key' when calling AdvBillingApi.add_prem_rate_from_template"
      end
      # verify the required parameter 'billing_add_rate_from_template_config' is set
      if @api_client.config.client_side_validation && billing_add_rate_from_template_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_add_rate_from_template_config' when calling AdvBillingApi.add_prem_rate_from_template"
      end
      # resource path
      local_var_path = '/premium-rates/{premRateKey}/add-from-template'.sub('{' + 'premRateKey' + '}', CGI.escape(prem_rate_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_add_rate_from_template_config)

      # return_type
      return_type = opts[:debug_return_type] || 'PremRateVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.add_prem_rate_from_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#add_prem_rate_from_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Apply Payment Category
    # Using the ListPremApplyPaymentCategory Operation to get a list of payments and additional configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_config [BillingApplyPaymentConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_apply_payment_category(vbasoftware_database, billing_apply_payment_config, opts = {})
      billing_apply_payment_category_with_http_info(vbasoftware_database, billing_apply_payment_config, opts)
      nil
    end

    # Billing Apply Payment Category
    # Using the ListPremApplyPaymentCategory Operation to get a list of payments and additional configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_config [BillingApplyPaymentConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_apply_payment_category_with_http_info(vbasoftware_database, billing_apply_payment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.billing_apply_payment_category ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.billing_apply_payment_category"
      end
      # verify the required parameter 'billing_apply_payment_config' is set
      if @api_client.config.client_side_validation && billing_apply_payment_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_apply_payment_config' when calling AdvBillingApi.billing_apply_payment_category"
      end
      # resource path
      local_var_path = '/billing-apply-payment-category'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_apply_payment_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.billing_apply_payment_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#billing_apply_payment_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Apply Payment On Account Category
    # Using the PremPaymentOnAccount List as a basis for configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_on_account_config [BillingApplyPaymentOnAccountConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_apply_payment_on_account_category(vbasoftware_database, billing_apply_payment_on_account_config, opts = {})
      billing_apply_payment_on_account_category_with_http_info(vbasoftware_database, billing_apply_payment_on_account_config, opts)
      nil
    end

    # Billing Apply Payment On Account Category
    # Using the PremPaymentOnAccount List as a basis for configuration, have On Accout and PremPayment information updated.
    # @param vbasoftware_database [String] Target database
    # @param billing_apply_payment_on_account_config [BillingApplyPaymentOnAccountConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_apply_payment_on_account_category_with_http_info(vbasoftware_database, billing_apply_payment_on_account_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.billing_apply_payment_on_account_category ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.billing_apply_payment_on_account_category"
      end
      # verify the required parameter 'billing_apply_payment_on_account_config' is set
      if @api_client.config.client_side_validation && billing_apply_payment_on_account_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_apply_payment_on_account_config' when calling AdvBillingApi.billing_apply_payment_on_account_category"
      end
      # resource path
      local_var_path = '/billing-apply-payment-on-account-category'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_apply_payment_on_account_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.billing_apply_payment_on_account_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#billing_apply_payment_on_account_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Auto-Apply
    # Auto Apply Payment based on specified configuration options.
    # @param vbasoftware_database [String] Target database
    # @param billing_auto_apply_config [BillingAutoApplyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_auto_apply(vbasoftware_database, billing_auto_apply_config, opts = {})
      billing_auto_apply_with_http_info(vbasoftware_database, billing_auto_apply_config, opts)
      nil
    end

    # Billing Auto-Apply
    # Auto Apply Payment based on specified configuration options.
    # @param vbasoftware_database [String] Target database
    # @param billing_auto_apply_config [BillingAutoApplyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_auto_apply_with_http_info(vbasoftware_database, billing_auto_apply_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.billing_auto_apply ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.billing_auto_apply"
      end
      # verify the required parameter 'billing_auto_apply_config' is set
      if @api_client.config.client_side_validation && billing_auto_apply_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_auto_apply_config' when calling AdvBillingApi.billing_auto_apply"
      end
      # resource path
      local_var_path = '/billing-auto-apply'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_auto_apply_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.billing_auto_apply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#billing_auto_apply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Premium Rates
    # Take a list of Rates and a set of configuration options and change those rates.
    # @param vbasoftware_database [String] Target database
    # @param billing_rate_modify_config [BillingRateModifyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_rate_change(vbasoftware_database, billing_rate_modify_config, opts = {})
      billing_rate_change_with_http_info(vbasoftware_database, billing_rate_modify_config, opts)
      nil
    end

    # Change Premium Rates
    # Take a list of Rates and a set of configuration options and change those rates.
    # @param vbasoftware_database [String] Target database
    # @param billing_rate_modify_config [BillingRateModifyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_rate_change_with_http_info(vbasoftware_database, billing_rate_modify_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.billing_rate_change ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.billing_rate_change"
      end
      # verify the required parameter 'billing_rate_modify_config' is set
      if @api_client.config.client_side_validation && billing_rate_modify_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_rate_modify_config' when calling AdvBillingApi.billing_rate_change"
      end
      # resource path
      local_var_path = '/billing-rate-change'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_rate_modify_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.billing_rate_change",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#billing_rate_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy Premium Rates
    # Take a list of Rates and a set of configuration options and copy those rates.
    # @param vbasoftware_database [String] Target database
    # @param billing_rate_modify_config [BillingRateModifyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_rate_copy(vbasoftware_database, billing_rate_modify_config, opts = {})
      billing_rate_copy_with_http_info(vbasoftware_database, billing_rate_modify_config, opts)
      nil
    end

    # Copy Premium Rates
    # Take a list of Rates and a set of configuration options and copy those rates.
    # @param vbasoftware_database [String] Target database
    # @param billing_rate_modify_config [BillingRateModifyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_rate_copy_with_http_info(vbasoftware_database, billing_rate_modify_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.billing_rate_copy ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.billing_rate_copy"
      end
      # verify the required parameter 'billing_rate_modify_config' is set
      if @api_client.config.client_side_validation && billing_rate_modify_config.nil?
        fail ArgumentError, "Missing the required parameter 'billing_rate_modify_config' when calling AdvBillingApi.billing_rate_copy"
      end
      # resource path
      local_var_path = '/billing-rate-copy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_rate_modify_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.billing_rate_copy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#billing_rate_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Billing Refund
    # Generate the necessary Billing adjustments for an Invoice refund and create a Distribution if needed.
    # @param vbasoftware_database [String] Target database
    # @param billing_refund [BillingRefund] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def billing_refund(vbasoftware_database, billing_refund, opts = {})
      billing_refund_with_http_info(vbasoftware_database, billing_refund, opts)
      nil
    end

    # Billing Refund
    # Generate the necessary Billing adjustments for an Invoice refund and create a Distribution if needed.
    # @param vbasoftware_database [String] Target database
    # @param billing_refund [BillingRefund] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def billing_refund_with_http_info(vbasoftware_database, billing_refund, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.billing_refund ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.billing_refund"
      end
      # verify the required parameter 'billing_refund' is set
      if @api_client.config.client_side_validation && billing_refund.nil?
        fail ArgumentError, "Missing the required parameter 'billing_refund' when calling AdvBillingApi.billing_refund"
      end
      # resource path
      local_var_path = '/billing-refund'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_refund)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.billing_refund",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#billing_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finalize Invoice
    # This will finalize the selected Invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def finalize_invoice(vbasoftware_database, invoice_key, opts = {})
      finalize_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Finalize Invoice
    # This will finalize the selected Invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def finalize_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.finalize_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.finalize_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.finalize_invoice"
      end
      # resource path
      local_var_path = '/invoice-finalize/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.finalize_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#finalize_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Invoice with additional options
    # This process will delete an invoice and remove attached records, update or delete adjustments based on selected options.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param delete_additional_invoices [Boolean] Delete Additional Invoices
    # @param keep_manual_adjustments [Boolean] Keep Manual Adjustments
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def full_delete_invoice(vbasoftware_database, invoice_key, delete_additional_invoices, keep_manual_adjustments, opts = {})
      full_delete_invoice_with_http_info(vbasoftware_database, invoice_key, delete_additional_invoices, keep_manual_adjustments, opts)
      nil
    end

    # Delete an Invoice with additional options
    # This process will delete an invoice and remove attached records, update or delete adjustments based on selected options.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param delete_additional_invoices [Boolean] Delete Additional Invoices
    # @param keep_manual_adjustments [Boolean] Keep Manual Adjustments
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def full_delete_invoice_with_http_info(vbasoftware_database, invoice_key, delete_additional_invoices, keep_manual_adjustments, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.full_delete_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.full_delete_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.full_delete_invoice"
      end
      # verify the required parameter 'delete_additional_invoices' is set
      if @api_client.config.client_side_validation && delete_additional_invoices.nil?
        fail ArgumentError, "Missing the required parameter 'delete_additional_invoices' when calling AdvBillingApi.full_delete_invoice"
      end
      # verify the required parameter 'keep_manual_adjustments' is set
      if @api_client.config.client_side_validation && keep_manual_adjustments.nil?
        fail ArgumentError, "Missing the required parameter 'keep_manual_adjustments' when calling AdvBillingApi.full_delete_invoice"
      end
      # resource path
      local_var_path = '/invoice-full-delete/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deleteAdditionalInvoices'] = delete_additional_invoices
      query_params[:'keepManualAdjustments'] = keep_manual_adjustments

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.full_delete_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#full_delete_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Premium Distributions
    # Generate the Premium Distributions for the selected Group and As of Date.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_prem_distribution(vbasoftware_database, group_id, as_of_date, opts = {})
      generate_prem_distribution_with_http_info(vbasoftware_database, group_id, as_of_date, opts)
      nil
    end

    # Create Premium Distributions
    # Generate the Premium Distributions for the selected Group and As of Date.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_prem_distribution_with_http_info(vbasoftware_database, group_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_distribution ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_distribution"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvBillingApi.generate_prem_distribution"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling AdvBillingApi.generate_prem_distribution"
      end
      # resource path
      local_var_path = '/premium-distributions-generate/{groupId}/{asOfDate}'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s)).sub('{' + 'asOfDate' + '}', CGI.escape(as_of_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_distribution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_distribution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Premium Distributions Checks
    # Generate the Premium Distribution Checks for the selected Payor and Payee.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param check_number [String] Check Number
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_prem_distribution_check(vbasoftware_database, payee_id, payor_id, account_key, check_number, opts = {})
      generate_prem_distribution_check_with_http_info(vbasoftware_database, payee_id, payor_id, account_key, check_number, opts)
      nil
    end

    # Create Premium Distributions Checks
    # Generate the Premium Distribution Checks for the selected Payor and Payee.
    # @param vbasoftware_database [String] Target database
    # @param payee_id [String] Payee ID
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param check_number [String] Check Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_prem_distribution_check_with_http_info(vbasoftware_database, payee_id, payor_id, account_key, check_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_distribution_check ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'payee_id' is set
      if @api_client.config.client_side_validation && payee_id.nil?
        fail ArgumentError, "Missing the required parameter 'payee_id' when calling AdvBillingApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'payor_id' is set
      if @api_client.config.client_side_validation && payor_id.nil?
        fail ArgumentError, "Missing the required parameter 'payor_id' when calling AdvBillingApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'account_key' is set
      if @api_client.config.client_side_validation && account_key.nil?
        fail ArgumentError, "Missing the required parameter 'account_key' when calling AdvBillingApi.generate_prem_distribution_check"
      end
      # verify the required parameter 'check_number' is set
      if @api_client.config.client_side_validation && check_number.nil?
        fail ArgumentError, "Missing the required parameter 'check_number' when calling AdvBillingApi.generate_prem_distribution_check"
      end
      # resource path
      local_var_path = '/premium-distributions-generate-check/{payeeId}/{payorId}/{accountKey}/{checkNumber}'.sub('{' + 'payeeId' + '}', CGI.escape(payee_id.to_s)).sub('{' + 'payorId' + '}', CGI.escape(payor_id.to_s)).sub('{' + 'accountKey' + '}', CGI.escape(account_key.to_s)).sub('{' + 'checkNumber' + '}', CGI.escape(check_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_distribution_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_distribution_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Division Invoice
    # Creates a new Premium Billing Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_division(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Division Invoice
    # Creates a new Premium Billing Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_division"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_division"
      end
      # resource path
      local_var_path = '/generate-division-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Group Invoice
    # Creates a new Premium Billing Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_group(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Group Invoice
    # Creates a new Premium Billing Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_group ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_group"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_group"
      end
      # resource path
      local_var_path = '/generate-group-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Group and Division Invoice
    # Creates a new Premium Billing Invoice the selected Group for any Division with the Group Invoice Level AND a separate Invoice for each Division flagged as Division Invoice Level.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_prem_invoice_group_division(vbasoftware_database, generate_prem_invoice, opts = {})
      generate_prem_invoice_group_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      nil
    end

    # Generate Group and Division Invoice
    # Creates a new Premium Billing Invoice the selected Group for any Division with the Group Invoice Level AND a separate Invoice for each Division flagged as Division Invoice Level.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_prem_invoice_group_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_group_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_group_division"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_group_division"
      end
      # resource path
      local_var_path = '/generate-group-division-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_group_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_group_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate GroupDivisionCaptive Invoice
    # Creates a new Premium Billing Invoice for the selected GroupDivisionCaptive.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_group_division_captive(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_group_division_captive_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate GroupDivisionCaptive Invoice
    # Creates a new Premium Billing Invoice for the selected GroupDivisionCaptive.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_group_division_captive_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_group_division_captive ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_group_division_captive"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_group_division_captive"
      end
      # resource path
      local_var_path = '/generate-group-division-captive-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_group_division_captive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_group_division_captive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Self-Admin Division Invoice
    # Creates a new Self-Admin Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_self_admin_division(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_self_admin_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Self-Admin Division Invoice
    # Creates a new Self-Admin Invoice for the selected Group/Division.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_self_admin_division_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_self_admin_division ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_self_admin_division"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_self_admin_division"
      end
      # resource path
      local_var_path = '/generate-self-admin-division-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_self_admin_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_self_admin_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Self-Admin Group Invoice
    # Creates a new Self-Admin Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_self_admin_group(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_self_admin_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Self-Admin Group Invoice
    # Creates a new Self-Admin Invoice for the selected Group.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_self_admin_group_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_self_admin_group ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_self_admin_group"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_self_admin_group"
      end
      # resource path
      local_var_path = '/generate-self-admin-group-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_self_admin_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_self_admin_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Subscriber Invoice
    # Creates a new Premium Billing Invoice for the selected Subscriber.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceVBAResponse]
    def generate_prem_invoice_subscriber(vbasoftware_database, generate_prem_invoice, opts = {})
      data, _status_code, _headers = generate_prem_invoice_subscriber_with_http_info(vbasoftware_database, generate_prem_invoice, opts)
      data
    end

    # Generate Subscriber Invoice
    # Creates a new Premium Billing Invoice for the selected Subscriber.
    # @param vbasoftware_database [String] Target database
    # @param generate_prem_invoice [GeneratePremInvoice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceVBAResponse, Integer, Hash)>] PremInvoiceVBAResponse data, response status code and response headers
    def generate_prem_invoice_subscriber_with_http_info(vbasoftware_database, generate_prem_invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.generate_prem_invoice_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.generate_prem_invoice_subscriber"
      end
      # verify the required parameter 'generate_prem_invoice' is set
      if @api_client.config.client_side_validation && generate_prem_invoice.nil?
        fail ArgumentError, "Missing the required parameter 'generate_prem_invoice' when calling AdvBillingApi.generate_prem_invoice_subscriber"
      end
      # resource path
      local_var_path = '/generate-subscriber-invoice'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_prem_invoice)

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.generate_prem_invoice_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#generate_prem_invoice_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear Applied on Invoice
    # Clear Applied data on invoice.  Delete received records.  Update Received Amounts.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def invoice_clear_applied(vbasoftware_database, invoice_key, opts = {})
      invoice_clear_applied_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Clear Applied on Invoice
    # Clear Applied data on invoice.  Delete received records.  Update Received Amounts.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def invoice_clear_applied_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.invoice_clear_applied ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.invoice_clear_applied"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.invoice_clear_applied"
      end
      # resource path
      local_var_path = '/invoice-clear-applied/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.invoice_clear_applied",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#invoice_clear_applied\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Billing Adjustments for Disenroll
    # List of Billing Adjustments that would be created based on a Subscriber being disenrolled on the As of Date.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentDisenrollAdjustmentListVBAResponse]
    def list_disenroll_adjustment(vbasoftware_database, subscriber_id, as_of_date, opts = {})
      data, _status_code, _headers = list_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, as_of_date, opts)
      data
    end

    # List Billing Adjustments for Disenroll
    # List of Billing Adjustments that would be created based on a Subscriber being disenrolled on the As of Date.
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param as_of_date [Time] As of Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentDisenrollAdjustmentListVBAResponse, Integer, Hash)>] EnrollmentDisenrollAdjustmentListVBAResponse data, response status code and response headers
    def list_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, as_of_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.list_disenroll_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.list_disenroll_adjustment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvBillingApi.list_disenroll_adjustment"
      end
      # verify the required parameter 'as_of_date' is set
      if @api_client.config.client_side_validation && as_of_date.nil?
        fail ArgumentError, "Missing the required parameter 'as_of_date' when calling AdvBillingApi.list_disenroll_adjustment"
      end
      # resource path
      local_var_path = '/subscribers/{subscriberID}/as-of-date/{asOfDate}/disenroll-adjustments'.sub('{' + 'subscriberID' + '}', CGI.escape(subscriber_id.to_s)).sub('{' + 'asOfDate' + '}', CGI.escape(as_of_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentDisenrollAdjustmentListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.list_disenroll_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#list_disenroll_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Premium for Payment Application
    # List Invoice Detail that can have premimum applied based on payment information and applied payment category.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param invoice_level [String] Invoice Level
    # @param [Hash] opts the optional parameters
    # @return [PremApplyPaymentCategoryResultListVBAResponse]
    def list_prem_apply_payment_category(vbasoftware_database, group_id, division_id, subscriber_id, invoice_level, opts = {})
      data, _status_code, _headers = list_prem_apply_payment_category_with_http_info(vbasoftware_database, group_id, division_id, subscriber_id, invoice_level, opts)
      data
    end

    # List Premium for Payment Application
    # List Invoice Detail that can have premimum applied based on payment information and applied payment category.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param invoice_level [String] Invoice Level
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremApplyPaymentCategoryResultListVBAResponse, Integer, Hash)>] PremApplyPaymentCategoryResultListVBAResponse data, response status code and response headers
    def list_prem_apply_payment_category_with_http_info(vbasoftware_database, group_id, division_id, subscriber_id, invoice_level, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.list_prem_apply_payment_category ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvBillingApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvBillingApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvBillingApi.list_prem_apply_payment_category"
      end
      # verify the required parameter 'invoice_level' is set
      if @api_client.config.client_side_validation && invoice_level.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_level' when calling AdvBillingApi.list_prem_apply_payment_category"
      end
      # resource path
      local_var_path = '/list-apply-payment-category'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupID'] = group_id
      query_params[:'divisionID'] = division_id
      query_params[:'subscriberID'] = subscriber_id
      query_params[:'invoiceLevel'] = invoice_level

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremApplyPaymentCategoryResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.list_prem_apply_payment_category",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#list_prem_apply_payment_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Invoices to be Generated
    # List of Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceGenerateInvListListVBAResponse]
    def list_prem_invoice_generate(vbasoftware_database, invoice_date, opts = {})
      data, _status_code, _headers = list_prem_invoice_generate_with_http_info(vbasoftware_database, invoice_date, opts)
      data
    end

    # List Invoices to be Generated
    # List of Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceGenerateInvListListVBAResponse, Integer, Hash)>] PremInvoiceGenerateInvListListVBAResponse data, response status code and response headers
    def list_prem_invoice_generate_with_http_info(vbasoftware_database, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.list_prem_invoice_generate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.list_prem_invoice_generate"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling AdvBillingApi.list_prem_invoice_generate"
      end
      # resource path
      local_var_path = '/list-generate-bill/{invoiceDate}'.sub('{' + 'invoiceDate' + '}', CGI.escape(invoice_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceGenerateInvListListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.list_prem_invoice_generate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#list_prem_invoice_generate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Self-Admin Invoices to be Generated
    # List of Self-Admin Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [PremInvoiceGenerateSelfAdminInvListListVBAResponse]
    def list_prem_invoice_generate_self_admin(vbasoftware_database, invoice_date, opts = {})
      data, _status_code, _headers = list_prem_invoice_generate_self_admin_with_http_info(vbasoftware_database, invoice_date, opts)
      data
    end

    # List Self-Admin Invoices to be Generated
    # List of Self-Admin Invoices to be generated based on the selected Invoice Date.
    # @param vbasoftware_database [String] Target database
    # @param invoice_date [Time] Invoice Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(PremInvoiceGenerateSelfAdminInvListListVBAResponse, Integer, Hash)>] PremInvoiceGenerateSelfAdminInvListListVBAResponse data, response status code and response headers
    def list_prem_invoice_generate_self_admin_with_http_info(vbasoftware_database, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.list_prem_invoice_generate_self_admin ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.list_prem_invoice_generate_self_admin"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling AdvBillingApi.list_prem_invoice_generate_self_admin"
      end
      # resource path
      local_var_path = '/list-generate-self-admin/{invoiceDate}'.sub('{' + 'invoiceDate' + '}', CGI.escape(invoice_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PremInvoiceGenerateSelfAdminInvListListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.list_prem_invoice_generate_self_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#list_prem_invoice_generate_self_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Retro Adjustments
    # List Retro Adjustments based on a provided Group, Division, Subscriber, and Eff Date.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param eff_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [GetTempRetroPremInvoiceAdjustmentsResultListVBAResponse]
    def list_retro_adjustment(vbasoftware_database, group_id, division_id, subscriber_id, eff_date, opts = {})
      data, _status_code, _headers = list_retro_adjustment_with_http_info(vbasoftware_database, group_id, division_id, subscriber_id, eff_date, opts)
      data
    end

    # List Retro Adjustments
    # List Retro Adjustments based on a provided Group, Division, Subscriber, and Eff Date.
    # @param vbasoftware_database [String] Target database
    # @param group_id [String] Group ID
    # @param division_id [String] Division ID
    # @param subscriber_id [String] Subscriber ID
    # @param eff_date [Time] Effective Date
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTempRetroPremInvoiceAdjustmentsResultListVBAResponse, Integer, Hash)>] GetTempRetroPremInvoiceAdjustmentsResultListVBAResponse data, response status code and response headers
    def list_retro_adjustment_with_http_info(vbasoftware_database, group_id, division_id, subscriber_id, eff_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.list_retro_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.list_retro_adjustment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdvBillingApi.list_retro_adjustment"
      end
      # verify the required parameter 'division_id' is set
      if @api_client.config.client_side_validation && division_id.nil?
        fail ArgumentError, "Missing the required parameter 'division_id' when calling AdvBillingApi.list_retro_adjustment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvBillingApi.list_retro_adjustment"
      end
      # verify the required parameter 'eff_date' is set
      if @api_client.config.client_side_validation && eff_date.nil?
        fail ArgumentError, "Missing the required parameter 'eff_date' when calling AdvBillingApi.list_retro_adjustment"
      end
      # resource path
      local_var_path = '/list-retro-adjustment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'groupId'] = group_id
      query_params[:'divisionId'] = division_id
      query_params[:'subscriberId'] = subscriber_id
      query_params[:'effDate'] = eff_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTempRetroPremInvoiceAdjustmentsResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.list_retro_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#list_retro_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Subscriber Disenroll Adjustments
    # List Disenroll Adjustments based on a provided Subscriber ID and As of Date (Disenroll Date).
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param eff_date [Time] Effective Date
    # @param show_closed [Boolean] Show Closed
    # @param [Hash] opts the optional parameters
    # @return [GetSubscriberDisenrollAdjustmentsResultListVBAResponse]
    def list_subscriber_disenroll_adjustment(vbasoftware_database, subscriber_id, eff_date, show_closed, opts = {})
      data, _status_code, _headers = list_subscriber_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, eff_date, show_closed, opts)
      data
    end

    # List Subscriber Disenroll Adjustments
    # List Disenroll Adjustments based on a provided Subscriber ID and As of Date (Disenroll Date).
    # @param vbasoftware_database [String] Target database
    # @param subscriber_id [String] Subscriber ID
    # @param eff_date [Time] Effective Date
    # @param show_closed [Boolean] Show Closed
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSubscriberDisenrollAdjustmentsResultListVBAResponse, Integer, Hash)>] GetSubscriberDisenrollAdjustmentsResultListVBAResponse data, response status code and response headers
    def list_subscriber_disenroll_adjustment_with_http_info(vbasoftware_database, subscriber_id, eff_date, show_closed, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.list_subscriber_disenroll_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.list_subscriber_disenroll_adjustment"
      end
      # verify the required parameter 'subscriber_id' is set
      if @api_client.config.client_side_validation && subscriber_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscriber_id' when calling AdvBillingApi.list_subscriber_disenroll_adjustment"
      end
      # verify the required parameter 'eff_date' is set
      if @api_client.config.client_side_validation && eff_date.nil?
        fail ArgumentError, "Missing the required parameter 'eff_date' when calling AdvBillingApi.list_subscriber_disenroll_adjustment"
      end
      # verify the required parameter 'show_closed' is set
      if @api_client.config.client_side_validation && show_closed.nil?
        fail ArgumentError, "Missing the required parameter 'show_closed' when calling AdvBillingApi.list_subscriber_disenroll_adjustment"
      end
      # resource path
      local_var_path = '/list-subscriber-disenroll-adjustment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subscriberId'] = subscriber_id
      query_params[:'effDate'] = eff_date
      query_params[:'showClosed'] = show_closed

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSubscriberDisenrollAdjustmentsResultListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.list_subscriber_disenroll_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#list_subscriber_disenroll_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Header Adjustment
    # PremInvoice Apply Payments by Header Adjustment
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_header_adjustment(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_header_adjustment_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Header Adjustment
    # PremInvoice Apply Payments by Header Adjustment
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_header_adjustment_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_apply_payment_header_adjustment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_apply_payment_header_adjustment"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling AdvBillingApi.prem_invoice_apply_payment_header_adjustment"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-adj'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_apply_payment_header_adjustment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_apply_payment_header_adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments for Self-Admin
    # PremInvoice Apply Payments for Self-Admin
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_self_admin(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_self_admin_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments for Self-Admin
    # PremInvoice Apply Payments for Self-Admin
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_self_admin_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_apply_payment_self_admin ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_apply_payment_self_admin"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling AdvBillingApi.prem_invoice_apply_payment_self_admin"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-self-admin'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_apply_payment_self_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_apply_payment_self_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Subscriber
    # PremInvoice Apply Payments by Subscriber
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_subscriber(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_subscriber_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Subscriber
    # PremInvoice Apply Payments by Subscriber
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_subscriber_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_apply_payment_subscriber ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_apply_payment_subscriber"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling AdvBillingApi.prem_invoice_apply_payment_subscriber"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-sub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_apply_payment_subscriber",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_apply_payment_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Subscriber and Payor ID
    # PremInvoice Apply Payments by Subscriber and Payor ID
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_subscriber_payor_id(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_subscriber_payor_id_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Subscriber and Payor ID
    # PremInvoice Apply Payments by Subscriber and Payor ID
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_subscriber_payor_id_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_apply_payment_subscriber_payor_id ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_apply_payment_subscriber_payor_id"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling AdvBillingApi.prem_invoice_apply_payment_subscriber_payor_id"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-sub-payor_id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_apply_payment_subscriber_payor_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_apply_payment_subscriber_payor_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Apply Payments by Subscriber and Plan Type
    # PremInvoice Apply Payments by Subscriber and Plan Type
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_apply_payment_subscriber_plan_type(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      prem_invoice_apply_payment_subscriber_plan_type_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts)
      nil
    end

    # PremInvoice Apply Payments by Subscriber and Plan Type
    # PremInvoice Apply Payments by Subscriber and Plan Type
    # @param vbasoftware_database [String] Target database
    # @param prem_invoice_apply_payment [PremInvoiceApplyPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_apply_payment_subscriber_plan_type_with_http_info(vbasoftware_database, prem_invoice_apply_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_apply_payment_subscriber_plan_type ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_apply_payment_subscriber_plan_type"
      end
      # verify the required parameter 'prem_invoice_apply_payment' is set
      if @api_client.config.client_side_validation && prem_invoice_apply_payment.nil?
        fail ArgumentError, "Missing the required parameter 'prem_invoice_apply_payment' when calling AdvBillingApi.prem_invoice_apply_payment_subscriber_plan_type"
      end
      # resource path
      local_var_path = '/premium-invoice-apply-payment-sub-plan-type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prem_invoice_apply_payment)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_apply_payment_subscriber_plan_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_apply_payment_subscriber_plan_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Auto-Apply
    # Auto-Apply all payements to the selected invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_auto_apply(vbasoftware_database, invoice_key, opts = {})
      prem_invoice_auto_apply_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # PremInvoice Auto-Apply
    # Auto-Apply all payements to the selected invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_auto_apply_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_auto_apply ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_auto_apply"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.prem_invoice_auto_apply"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/auto-apply'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_auto_apply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_auto_apply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PremInvoice Auto-Apply for Self-Admin
    # Auto-Apply all payements to the selected Self-Admin invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def prem_invoice_auto_apply_self_admin(vbasoftware_database, invoice_key, opts = {})
      prem_invoice_auto_apply_self_admin_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # PremInvoice Auto-Apply for Self-Admin
    # Auto-Apply all payements to the selected Self-Admin invoice.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def prem_invoice_auto_apply_self_admin_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.prem_invoice_auto_apply_self_admin ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.prem_invoice_auto_apply_self_admin"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.prem_invoice_auto_apply_self_admin"
      end
      # resource path
      local_var_path = '/premium-invoices/{invoiceKey}/auto-apply-self-admin'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.prem_invoice_auto_apply_self_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#prem_invoice_auto_apply_self_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process or Check Invoice Tolerance
    # Given an Invoice and amount due, either check if an Invoice falls withing Tolerance range to performan a write-off, or go ahead and perform the write-off.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param amount_due [Float] Amount Due
    # @param verify_only [Boolean] Verify Only
    # @param [Hash] opts the optional parameters
    # @return [BooleanVBAResponse]
    def process_invoice_tolerance(vbasoftware_database, invoice_key, amount_due, verify_only, opts = {})
      data, _status_code, _headers = process_invoice_tolerance_with_http_info(vbasoftware_database, invoice_key, amount_due, verify_only, opts)
      data
    end

    # Process or Check Invoice Tolerance
    # Given an Invoice and amount due, either check if an Invoice falls withing Tolerance range to performan a write-off, or go ahead and perform the write-off.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param amount_due [Float] Amount Due
    # @param verify_only [Boolean] Verify Only
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanVBAResponse, Integer, Hash)>] BooleanVBAResponse data, response status code and response headers
    def process_invoice_tolerance_with_http_info(vbasoftware_database, invoice_key, amount_due, verify_only, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.process_invoice_tolerance ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.process_invoice_tolerance"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.process_invoice_tolerance"
      end
      # verify the required parameter 'amount_due' is set
      if @api_client.config.client_side_validation && amount_due.nil?
        fail ArgumentError, "Missing the required parameter 'amount_due' when calling AdvBillingApi.process_invoice_tolerance"
      end
      # verify the required parameter 'verify_only' is set
      if @api_client.config.client_side_validation && verify_only.nil?
        fail ArgumentError, "Missing the required parameter 'verify_only' when calling AdvBillingApi.process_invoice_tolerance"
      end
      # resource path
      local_var_path = '/process-invoice-tolerance/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'amountDue'] = amount_due
      query_params[:'verifyOnly'] = verify_only

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.process_invoice_tolerance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#process_invoice_tolerance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process Payment File
    # Import a defined Payment File in .csv format to then have payments created and, optionally, attached to invoices.
    # @param vbasoftware_database [String] Target database
    # @param vba_process_payment_file [VBAProcessPaymentFile] 
    # @param [Hash] opts the optional parameters
    # @return [VBAProcessPaymentFileResponseVBAResponse]
    def process_payment_file(vbasoftware_database, vba_process_payment_file, opts = {})
      data, _status_code, _headers = process_payment_file_with_http_info(vbasoftware_database, vba_process_payment_file, opts)
      data
    end

    # Process Payment File
    # Import a defined Payment File in .csv format to then have payments created and, optionally, attached to invoices.
    # @param vbasoftware_database [String] Target database
    # @param vba_process_payment_file [VBAProcessPaymentFile] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAProcessPaymentFileResponseVBAResponse, Integer, Hash)>] VBAProcessPaymentFileResponseVBAResponse data, response status code and response headers
    def process_payment_file_with_http_info(vbasoftware_database, vba_process_payment_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.process_payment_file ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.process_payment_file"
      end
      # verify the required parameter 'vba_process_payment_file' is set
      if @api_client.config.client_side_validation && vba_process_payment_file.nil?
        fail ArgumentError, "Missing the required parameter 'vba_process_payment_file' when calling AdvBillingApi.process_payment_file"
      end
      # resource path
      local_var_path = '/process-payment-file'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vba_process_payment_file)

      # return_type
      return_type = opts[:debug_return_type] || 'VBAProcessPaymentFileResponseVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.process_payment_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#process_payment_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Regenerate Invoice
    # This will delete the invoice, remove attached adjustments, payments, etc. Then Regenerate the Invoice using the same Invoice Key.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def regenerate_invoice(vbasoftware_database, invoice_key, opts = {})
      regenerate_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Regenerate Invoice
    # This will delete the invoice, remove attached adjustments, payments, etc. Then Regenerate the Invoice using the same Invoice Key.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def regenerate_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.regenerate_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.regenerate_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.regenerate_invoice"
      end
      # resource path
      local_var_path = '/invoice-regenerate/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.regenerate_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#regenerate_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Invoice Process Automation
    # This will trigger Generate Invoice Process Automation.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def report_series_process_generate_invoice(vbasoftware_database, invoice_key, opts = {})
      report_series_process_generate_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Generate Invoice Process Automation
    # This will trigger Generate Invoice Process Automation.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_series_process_generate_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.report_series_process_generate_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.report_series_process_generate_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.report_series_process_generate_invoice"
      end
      # resource path
      local_var_path = '/report-series-process-generate-invoice/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.report_series_process_generate_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#report_series_process_generate_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset Self-Admin Invoice
    # Reset a Self-Admin Invoice removing received amounts, adjustments applied, etc.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_self_admin_invoice(vbasoftware_database, invoice_key, opts = {})
      reset_self_admin_invoice_with_http_info(vbasoftware_database, invoice_key, opts)
      nil
    end

    # Reset Self-Admin Invoice
    # Reset a Self-Admin Invoice removing received amounts, adjustments applied, etc.
    # @param vbasoftware_database [String] Target database
    # @param invoice_key [Integer] Invoice Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_self_admin_invoice_with_http_info(vbasoftware_database, invoice_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.reset_self_admin_invoice ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.reset_self_admin_invoice"
      end
      # verify the required parameter 'invoice_key' is set
      if @api_client.config.client_side_validation && invoice_key.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_key' when calling AdvBillingApi.reset_self_admin_invoice"
      end
      # resource path
      local_var_path = '/reset-self-admin-invoice/{invoiceKey}'.sub('{' + 'invoiceKey' + '}', CGI.escape(invoice_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.reset_self_admin_invoice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#reset_self_admin_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undo an Applied Premium Payment
    # Based on the supplied PremPayment_Key, remove this payment from any invoice it is attached, and then recalc the received on each affected invoice.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def undo_premium_payment(vbasoftware_database, prem_payment_key, opts = {})
      undo_premium_payment_with_http_info(vbasoftware_database, prem_payment_key, opts)
      nil
    end

    # Undo an Applied Premium Payment
    # Based on the supplied PremPayment_Key, remove this payment from any invoice it is attached, and then recalc the received on each affected invoice.
    # @param vbasoftware_database [String] Target database
    # @param prem_payment_key [Integer] PremPayment Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def undo_premium_payment_with_http_info(vbasoftware_database, prem_payment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvBillingApi.undo_premium_payment ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling AdvBillingApi.undo_premium_payment"
      end
      # verify the required parameter 'prem_payment_key' is set
      if @api_client.config.client_side_validation && prem_payment_key.nil?
        fail ArgumentError, "Missing the required parameter 'prem_payment_key' when calling AdvBillingApi.undo_premium_payment"
      end
      # resource path
      local_var_path = '/undo-premium-payment/{premPaymentKey}'.sub('{' + 'premPaymentKey' + '}', CGI.escape(prem_payment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"AdvBillingApi.undo_premium_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvBillingApi#undo_premium_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
