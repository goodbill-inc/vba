=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class ClaimsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Claim
    # Creates a new Claim
    # @param vbasoftware_database [String] Target database
    # @param claim [Claim] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimVBAResponse]
    def create_claim(vbasoftware_database, claim, opts = {})
      data, _status_code, _headers = create_claim_with_http_info(vbasoftware_database, claim, opts)
      data
    end

    # Create Claim
    # Creates a new Claim
    # @param vbasoftware_database [String] Target database
    # @param claim [Claim] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimVBAResponse, Integer, Hash)>] ClaimVBAResponse data, response status code and response headers
    def create_claim_with_http_info(vbasoftware_database, claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimsApi.create_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimsApi.create_claim"
      end
      # verify the required parameter 'claim' is set
      if @api_client.config.client_side_validation && claim.nil?
        fail ArgumentError, "Missing the required parameter 'claim' when calling ClaimsApi.create_claim"
      end
      # resource path
      local_var_path = '/claims'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimsApi.create_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimsApi#create_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Claim
    # Deletes an Claim
    # @param vbasoftware_database [String] Target database
    # @param claim_number [Integer] Claim Number
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_claim(vbasoftware_database, claim_number, opts = {})
      delete_claim_with_http_info(vbasoftware_database, claim_number, opts)
      nil
    end

    # Delete Claim
    # Deletes an Claim
    # @param vbasoftware_database [String] Target database
    # @param claim_number [Integer] Claim Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_claim_with_http_info(vbasoftware_database, claim_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimsApi.delete_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimsApi.delete_claim"
      end
      # verify the required parameter 'claim_number' is set
      if @api_client.config.client_side_validation && claim_number.nil?
        fail ArgumentError, "Missing the required parameter 'claim_number' when calling ClaimsApi.delete_claim"
      end
      # resource path
      local_var_path = '/claims/{claimNumber}'.sub('{' + 'claimNumber' + '}', CGI.escape(claim_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimsApi.delete_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimsApi#delete_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Claim
    # Gets Claim
    # @param vbasoftware_database [String] Target database
    # @param claim_number [Integer] Claim Number
    # @param [Hash] opts the optional parameters
    # @return [ClaimVBAResponse]
    def get_claim(vbasoftware_database, claim_number, opts = {})
      data, _status_code, _headers = get_claim_with_http_info(vbasoftware_database, claim_number, opts)
      data
    end

    # Get Claim
    # Gets Claim
    # @param vbasoftware_database [String] Target database
    # @param claim_number [Integer] Claim Number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimVBAResponse, Integer, Hash)>] ClaimVBAResponse data, response status code and response headers
    def get_claim_with_http_info(vbasoftware_database, claim_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimsApi.get_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimsApi.get_claim"
      end
      # verify the required parameter 'claim_number' is set
      if @api_client.config.client_side_validation && claim_number.nil?
        fail ArgumentError, "Missing the required parameter 'claim_number' when calling ClaimsApi.get_claim"
      end
      # resource path
      local_var_path = '/claims/{claimNumber}'.sub('{' + 'claimNumber' + '}', CGI.escape(claim_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimsApi.get_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimsApi#get_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List ClaimTimeline
    # Lists all ClaimTimeline
    # @param vbasoftware_database [String] Target database
    # @param batch_id [Integer] Batch ID
    # @param batch_claim_id [Integer] Batch Claim ID
    # @param [Hash] opts the optional parameters
    # @return [VBAClaimTimelineListVBAResponse]
    def list_claim_timeline(vbasoftware_database, batch_id, batch_claim_id, opts = {})
      data, _status_code, _headers = list_claim_timeline_with_http_info(vbasoftware_database, batch_id, batch_claim_id, opts)
      data
    end

    # List ClaimTimeline
    # Lists all ClaimTimeline
    # @param vbasoftware_database [String] Target database
    # @param batch_id [Integer] Batch ID
    # @param batch_claim_id [Integer] Batch Claim ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VBAClaimTimelineListVBAResponse, Integer, Hash)>] VBAClaimTimelineListVBAResponse data, response status code and response headers
    def list_claim_timeline_with_http_info(vbasoftware_database, batch_id, batch_claim_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimsApi.list_claim_timeline ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimsApi.list_claim_timeline"
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling ClaimsApi.list_claim_timeline"
      end
      # verify the required parameter 'batch_claim_id' is set
      if @api_client.config.client_side_validation && batch_claim_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_claim_id' when calling ClaimsApi.list_claim_timeline"
      end
      # resource path
      local_var_path = '/claim-timeline'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'batch-id'] = batch_id
      query_params[:'batch-claim-id'] = batch_claim_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VBAClaimTimelineListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimsApi.list_claim_timeline",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimsApi#list_claim_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Claim
    # Create or Update multiple Claim at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param claim [Array<Claim>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_claim(vbasoftware_database, claim, opts = {})
      data, _status_code, _headers = update_batch_claim_with_http_info(vbasoftware_database, claim, opts)
      data
    end

    # Create or Update Batch Claim
    # Create or Update multiple Claim at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param claim [Array<Claim>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_claim_with_http_info(vbasoftware_database, claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimsApi.update_batch_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimsApi.update_batch_claim"
      end
      # verify the required parameter 'claim' is set
      if @api_client.config.client_side_validation && claim.nil?
        fail ArgumentError, "Missing the required parameter 'claim' when calling ClaimsApi.update_batch_claim"
      end
      # resource path
      local_var_path = '/claims-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimsApi.update_batch_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimsApi#update_batch_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Claim
    # Updates a specific Claim.
    # @param vbasoftware_database [String] Target database
    # @param claim_number [Integer] Claim Number
    # @param claim [Claim] 
    # @param [Hash] opts the optional parameters
    # @return [ClaimVBAResponse]
    def update_claim(vbasoftware_database, claim_number, claim, opts = {})
      data, _status_code, _headers = update_claim_with_http_info(vbasoftware_database, claim_number, claim, opts)
      data
    end

    # Update Claim
    # Updates a specific Claim.
    # @param vbasoftware_database [String] Target database
    # @param claim_number [Integer] Claim Number
    # @param claim [Claim] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClaimVBAResponse, Integer, Hash)>] ClaimVBAResponse data, response status code and response headers
    def update_claim_with_http_info(vbasoftware_database, claim_number, claim, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClaimsApi.update_claim ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling ClaimsApi.update_claim"
      end
      # verify the required parameter 'claim_number' is set
      if @api_client.config.client_side_validation && claim_number.nil?
        fail ArgumentError, "Missing the required parameter 'claim_number' when calling ClaimsApi.update_claim"
      end
      # verify the required parameter 'claim' is set
      if @api_client.config.client_side_validation && claim.nil?
        fail ArgumentError, "Missing the required parameter 'claim' when calling ClaimsApi.update_claim"
      end
      # resource path
      local_var_path = '/claims/{claimNumber}'.sub('{' + 'claimNumber' + '}', CGI.escape(claim_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(claim)

      # return_type
      return_type = opts[:debug_return_type] || 'ClaimVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"ClaimsApi.update_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClaimsApi#update_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
