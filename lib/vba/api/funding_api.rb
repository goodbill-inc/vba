=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class FundingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Funding
    # Creates a new Funding
    # @param vbasoftware_database [String] Target database
    # @param funding [Funding] 
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def create_funding(vbasoftware_database, funding, opts = {})
      data, _status_code, _headers = create_funding_with_http_info(vbasoftware_database, funding, opts)
      data
    end

    # Create Funding
    # Creates a new Funding
    # @param vbasoftware_database [String] Target database
    # @param funding [Funding] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def create_funding_with_http_info(vbasoftware_database, funding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.create_funding ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.create_funding"
      end
      # verify the required parameter 'funding' is set
      if @api_client.config.client_side_validation && funding.nil?
        fail ArgumentError, "Missing the required parameter 'funding' when calling FundingApi.create_funding"
      end
      # resource path
      local_var_path = '/funding'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.create_funding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#create_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Funding
    # Deletes an Funding
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_funding(vbasoftware_database, funding_key, opts = {})
      delete_funding_with_http_info(vbasoftware_database, funding_key, opts)
      nil
    end

    # Delete Funding
    # Deletes an Funding
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_funding_with_http_info(vbasoftware_database, funding_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.delete_funding ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.delete_funding"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.delete_funding"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.delete_funding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#delete_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Funding
    # Gets Funding
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def get_funding(vbasoftware_database, funding_key, opts = {})
      data, _status_code, _headers = get_funding_with_http_info(vbasoftware_database, funding_key, opts)
      data
    end

    # Get Funding
    # Gets Funding
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def get_funding_with_http_info(vbasoftware_database, funding_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_funding ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.get_funding"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.get_funding"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.get_funding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hold Funds
    # Lower the existing funding item by the hold amount and create a new funding for the hold amount.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param hold_amount [Float] 
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def hold_funds(vbasoftware_database, funding_key, hold_amount, opts = {})
      data, _status_code, _headers = hold_funds_with_http_info(vbasoftware_database, funding_key, hold_amount, opts)
      data
    end

    # Hold Funds
    # Lower the existing funding item by the hold amount and create a new funding for the hold amount.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param hold_amount [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def hold_funds_with_http_info(vbasoftware_database, funding_key, hold_amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.hold_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.hold_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.hold_funds"
      end
      # verify the required parameter 'hold_amount' is set
      if @api_client.config.client_side_validation && hold_amount.nil?
        fail ArgumentError, "Missing the required parameter 'hold_amount' when calling FundingApi.hold_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/hold'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['holdAmount'] = hold_amount

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.hold_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#hold_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Funding
    # Lists all Funding
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [FundingListVBAResponse]
    def list_funding(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_funding_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Funding
    # Lists all Funding
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(FundingListVBAResponse, Integer, Hash)>] FundingListVBAResponse data, response status code and response headers
    def list_funding_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.list_funding ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.list_funding"
      end
      # resource path
      local_var_path = '/funding'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.list_funding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#list_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reacllocate Funds
    # Change the Payor ID and Account Key of an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def reallocate_funds(vbasoftware_database, funding_key, payor_id, account_key, opts = {})
      data, _status_code, _headers = reallocate_funds_with_http_info(vbasoftware_database, funding_key, payor_id, account_key, opts)
      data
    end

    # Reacllocate Funds
    # Change the Payor ID and Account Key of an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param payor_id [String] Payor ID
    # @param account_key [Integer] Account Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def reallocate_funds_with_http_info(vbasoftware_database, funding_key, payor_id, account_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.reallocate_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.reallocate_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.reallocate_funds"
      end
      # verify the required parameter 'payor_id' is set
      if @api_client.config.client_side_validation && payor_id.nil?
        fail ArgumentError, "Missing the required parameter 'payor_id' when calling FundingApi.reallocate_funds"
      end
      # verify the required parameter 'account_key' is set
      if @api_client.config.client_side_validation && account_key.nil?
        fail ArgumentError, "Missing the required parameter 'account_key' when calling FundingApi.reallocate_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/payors/{payorId}/accounts/{accountKey}/reallocate'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s)).sub('{' + 'payorId' + '}', CGI.escape(payor_id.to_s)).sub('{' + 'accountKey' + '}', CGI.escape(account_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.reallocate_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#reallocate_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transfer Funds
    # Transfer funds from one account to another.  Additionally, can auto-create a premium distribution if a Funding_Key of 0 is sent.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param funding_transfer_funds [FundingTransferFunds] 
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def transfer_funds(vbasoftware_database, funding_key, funding_transfer_funds, opts = {})
      data, _status_code, _headers = transfer_funds_with_http_info(vbasoftware_database, funding_key, funding_transfer_funds, opts)
      data
    end

    # Transfer Funds
    # Transfer funds from one account to another.  Additionally, can auto-create a premium distribution if a Funding_Key of 0 is sent.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param funding_transfer_funds [FundingTransferFunds] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def transfer_funds_with_http_info(vbasoftware_database, funding_key, funding_transfer_funds, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.transfer_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.transfer_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.transfer_funds"
      end
      # verify the required parameter 'funding_transfer_funds' is set
      if @api_client.config.client_side_validation && funding_transfer_funds.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transfer_funds' when calling FundingApi.transfer_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/transfer'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding_transfer_funds)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.transfer_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#transfer_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch Funding
    # Create or Update multiple Funding at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param funding [Array<Funding>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_funding(vbasoftware_database, funding, opts = {})
      data, _status_code, _headers = update_batch_funding_with_http_info(vbasoftware_database, funding, opts)
      data
    end

    # Create or Update Batch Funding
    # Create or Update multiple Funding at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param funding [Array<Funding>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_funding_with_http_info(vbasoftware_database, funding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_batch_funding ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.update_batch_funding"
      end
      # verify the required parameter 'funding' is set
      if @api_client.config.client_side_validation && funding.nil?
        fail ArgumentError, "Missing the required parameter 'funding' when calling FundingApi.update_batch_funding"
      end
      # resource path
      local_var_path = '/funding-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.update_batch_funding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_batch_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Funding
    # Updates a specific Funding.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param funding [Funding] 
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def update_funding(vbasoftware_database, funding_key, funding, opts = {})
      data, _status_code, _headers = update_funding_with_http_info(vbasoftware_database, funding_key, funding, opts)
      data
    end

    # Update Funding
    # Updates a specific Funding.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param funding [Funding] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def update_funding_with_http_info(vbasoftware_database, funding_key, funding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_funding ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.update_funding"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.update_funding"
      end
      # verify the required parameter 'funding' is set
      if @api_client.config.client_side_validation && funding.nil?
        fail ArgumentError, "Missing the required parameter 'funding' when calling FundingApi.update_funding"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(funding)

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.update_funding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void Funds
    # Void an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [FundingVBAResponse]
    def void_funds(vbasoftware_database, funding_key, opts = {})
      data, _status_code, _headers = void_funds_with_http_info(vbasoftware_database, funding_key, opts)
      data
    end

    # Void Funds
    # Void an existing funding item.
    # @param vbasoftware_database [String] Target database
    # @param funding_key [Integer] Funding Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingVBAResponse, Integer, Hash)>] FundingVBAResponse data, response status code and response headers
    def void_funds_with_http_info(vbasoftware_database, funding_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.void_funds ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FundingApi.void_funds"
      end
      # verify the required parameter 'funding_key' is set
      if @api_client.config.client_side_validation && funding_key.nil?
        fail ArgumentError, "Missing the required parameter 'funding_key' when calling FundingApi.void_funds"
      end
      # resource path
      local_var_path = '/funding/{fundingKey}/void'.sub('{' + 'fundingKey' + '}', CGI.escape(funding_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FundingVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FundingApi.void_funds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#void_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
