=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Vba
  class FeeSchedulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy Fee Schedule
    # Copy an existing Fee Schedule to a new Fee Schedule.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched_copy [FeeSchedCopy] 
    # @param [Hash] opts the optional parameters
    # @return [FeeSchedVBAResponse]
    def copy_fee_schedule(vbasoftware_database, fee_sched_copy, opts = {})
      data, _status_code, _headers = copy_fee_schedule_with_http_info(vbasoftware_database, fee_sched_copy, opts)
      data
    end

    # Copy Fee Schedule
    # Copy an existing Fee Schedule to a new Fee Schedule.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched_copy [FeeSchedCopy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeSchedVBAResponse, Integer, Hash)>] FeeSchedVBAResponse data, response status code and response headers
    def copy_fee_schedule_with_http_info(vbasoftware_database, fee_sched_copy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.copy_fee_schedule ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.copy_fee_schedule"
      end
      # verify the required parameter 'fee_sched_copy' is set
      if @api_client.config.client_side_validation && fee_sched_copy.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched_copy' when calling FeeSchedulesApi.copy_fee_schedule"
      end
      # resource path
      local_var_path = '/fee-schedule-copy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_sched_copy)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeSchedVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.copy_fee_schedule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#copy_fee_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy Fee Schedule and Adjust Discount
    # Copy an existing Fee Schedule to a new Fee Schedule and adjust the resulting discount in the new Fee Schedule.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched_copy [FeeSchedCopy] 
    # @param [Hash] opts the optional parameters
    # @return [FeeSchedVBAResponse]
    def copy_fee_schedule_adj_disc(vbasoftware_database, fee_sched_copy, opts = {})
      data, _status_code, _headers = copy_fee_schedule_adj_disc_with_http_info(vbasoftware_database, fee_sched_copy, opts)
      data
    end

    # Copy Fee Schedule and Adjust Discount
    # Copy an existing Fee Schedule to a new Fee Schedule and adjust the resulting discount in the new Fee Schedule.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched_copy [FeeSchedCopy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeSchedVBAResponse, Integer, Hash)>] FeeSchedVBAResponse data, response status code and response headers
    def copy_fee_schedule_adj_disc_with_http_info(vbasoftware_database, fee_sched_copy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.copy_fee_schedule_adj_disc ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.copy_fee_schedule_adj_disc"
      end
      # verify the required parameter 'fee_sched_copy' is set
      if @api_client.config.client_side_validation && fee_sched_copy.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched_copy' when calling FeeSchedulesApi.copy_fee_schedule_adj_disc"
      end
      # resource path
      local_var_path = '/fee-schedule-copy-adj-disc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_sched_copy)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeSchedVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.copy_fee_schedule_adj_disc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#copy_fee_schedule_adj_disc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create FeeSched
    # Creates a new FeeSched
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [FeeSched] 
    # @param [Hash] opts the optional parameters
    # @return [FeeSchedVBAResponse]
    def create_fee_sched(vbasoftware_database, fee_sched, opts = {})
      data, _status_code, _headers = create_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts)
      data
    end

    # Create FeeSched
    # Creates a new FeeSched
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [FeeSched] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeSchedVBAResponse, Integer, Hash)>] FeeSchedVBAResponse data, response status code and response headers
    def create_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.create_fee_sched ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.create_fee_sched"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling FeeSchedulesApi.create_fee_sched"
      end
      # resource path
      local_var_path = '/fee-schedules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_sched)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeSchedVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.create_fee_sched",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#create_fee_sched\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete FeeSched
    # Deletes an FeeSched
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_fee_sched(vbasoftware_database, fee_sched, opts = {})
      delete_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts)
      nil
    end

    # Delete FeeSched
    # Deletes an FeeSched
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.delete_fee_sched ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.delete_fee_sched"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling FeeSchedulesApi.delete_fee_sched"
      end
      # resource path
      local_var_path = '/fee-schedules/{feeSched}'.sub('{' + 'feeSched' + '}', CGI.escape(fee_sched.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.delete_fee_sched",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#delete_fee_sched\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get FeeSched
    # Gets FeeSched
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [FeeSchedVBAResponse]
    def get_fee_sched(vbasoftware_database, fee_sched, opts = {})
      data, _status_code, _headers = get_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts)
      data
    end

    # Get FeeSched
    # Gets FeeSched
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [String] Fee Sched
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeSchedVBAResponse, Integer, Hash)>] FeeSchedVBAResponse data, response status code and response headers
    def get_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.get_fee_sched ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.get_fee_sched"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling FeeSchedulesApi.get_fee_sched"
      end
      # resource path
      local_var_path = '/fee-schedules/{feeSched}'.sub('{' + 'feeSched' + '}', CGI.escape(fee_sched.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeeSchedVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.get_fee_sched",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#get_fee_sched\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List FeeSched
    # Lists all FeeSched
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [FeeSchedListVBAResponse]
    def list_fee_sched(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_fee_sched_with_http_info(vbasoftware_database, opts)
      data
    end

    # List FeeSched
    # Lists all FeeSched
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page (default to 1)
    # @option opts [Integer] :page_size Page Size (default to 100)
    # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
    # @return [Array<(FeeSchedListVBAResponse, Integer, Hash)>] FeeSchedListVBAResponse data, response status code and response headers
    def list_fee_sched_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.list_fee_sched ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.list_fee_sched"
      end
      # resource path
      local_var_path = '/fee-schedules'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeeSchedListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.list_fee_sched",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#list_fee_sched\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Usual and Customary Rates
    # Lists all UC Rates based on provided criteria.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :claim_type Claim Type
    # @option opts [Time] :service_date Service Date
    # @option opts [String] :zip_start Zip Code From
    # @option opts [String] :zip_end Zip Code Thru
    # @option opts [String] :proc_start Procedure Code From
    # @option opts [String] :proc_end Procedure Code Thru
    # @option opts [String] :modifier Modifier
    # @option opts [Integer] :percentile Percentile
    # @return [UsualCustomaryRateAllPercentileListVBAResponse]
    def list_uc_rate(vbasoftware_database, opts = {})
      data, _status_code, _headers = list_uc_rate_with_http_info(vbasoftware_database, opts)
      data
    end

    # List Usual and Customary Rates
    # Lists all UC Rates based on provided criteria.
    # @param vbasoftware_database [String] Target database
    # @param [Hash] opts the optional parameters
    # @option opts [String] :claim_type Claim Type
    # @option opts [Time] :service_date Service Date
    # @option opts [String] :zip_start Zip Code From
    # @option opts [String] :zip_end Zip Code Thru
    # @option opts [String] :proc_start Procedure Code From
    # @option opts [String] :proc_end Procedure Code Thru
    # @option opts [String] :modifier Modifier
    # @option opts [Integer] :percentile Percentile
    # @return [Array<(UsualCustomaryRateAllPercentileListVBAResponse, Integer, Hash)>] UsualCustomaryRateAllPercentileListVBAResponse data, response status code and response headers
    def list_uc_rate_with_http_info(vbasoftware_database, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.list_uc_rate ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.list_uc_rate"
      end
      # resource path
      local_var_path = '/usual-customary-rate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'claimType'] = opts[:'claim_type'] if !opts[:'claim_type'].nil?
      query_params[:'serviceDate'] = opts[:'service_date'] if !opts[:'service_date'].nil?
      query_params[:'zipStart'] = opts[:'zip_start'] if !opts[:'zip_start'].nil?
      query_params[:'zipEnd'] = opts[:'zip_end'] if !opts[:'zip_end'].nil?
      query_params[:'procStart'] = opts[:'proc_start'] if !opts[:'proc_start'].nil?
      query_params[:'procEnd'] = opts[:'proc_end'] if !opts[:'proc_end'].nil?
      query_params[:'modifier'] = opts[:'modifier'] if !opts[:'modifier'].nil?
      query_params[:'percentile'] = opts[:'percentile'] if !opts[:'percentile'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsualCustomaryRateAllPercentileListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.list_uc_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#list_uc_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update Batch FeeSched
    # Create or Update multiple FeeSched at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [Array<FeeSched>] 
    # @param [Hash] opts the optional parameters
    # @return [MultiCodeResponseListVBAResponse]
    def update_batch_fee_sched(vbasoftware_database, fee_sched, opts = {})
      data, _status_code, _headers = update_batch_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts)
      data
    end

    # Create or Update Batch FeeSched
    # Create or Update multiple FeeSched at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [Array<FeeSched>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiCodeResponseListVBAResponse, Integer, Hash)>] MultiCodeResponseListVBAResponse data, response status code and response headers
    def update_batch_fee_sched_with_http_info(vbasoftware_database, fee_sched, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.update_batch_fee_sched ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.update_batch_fee_sched"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling FeeSchedulesApi.update_batch_fee_sched"
      end
      # resource path
      local_var_path = '/fee-schedules-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_sched)

      # return_type
      return_type = opts[:debug_return_type] || 'MultiCodeResponseListVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.update_batch_fee_sched",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#update_batch_fee_sched\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update FeeSched
    # Updates a specific FeeSched.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [String] Fee Sched
    # @param fee_sched2 [FeeSched] 
    # @param [Hash] opts the optional parameters
    # @return [FeeSchedVBAResponse]
    def update_fee_sched(vbasoftware_database, fee_sched, fee_sched2, opts = {})
      data, _status_code, _headers = update_fee_sched_with_http_info(vbasoftware_database, fee_sched, fee_sched2, opts)
      data
    end

    # Update FeeSched
    # Updates a specific FeeSched.
    # @param vbasoftware_database [String] Target database
    # @param fee_sched [String] Fee Sched
    # @param fee_sched2 [FeeSched] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeeSchedVBAResponse, Integer, Hash)>] FeeSchedVBAResponse data, response status code and response headers
    def update_fee_sched_with_http_info(vbasoftware_database, fee_sched, fee_sched2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeeSchedulesApi.update_fee_sched ...'
      end
      # verify the required parameter 'vbasoftware_database' is set
      if @api_client.config.client_side_validation && vbasoftware_database.nil?
        fail ArgumentError, "Missing the required parameter 'vbasoftware_database' when calling FeeSchedulesApi.update_fee_sched"
      end
      # verify the required parameter 'fee_sched' is set
      if @api_client.config.client_side_validation && fee_sched.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched' when calling FeeSchedulesApi.update_fee_sched"
      end
      # verify the required parameter 'fee_sched2' is set
      if @api_client.config.client_side_validation && fee_sched2.nil?
        fail ArgumentError, "Missing the required parameter 'fee_sched2' when calling FeeSchedulesApi.update_fee_sched"
      end
      # resource path
      local_var_path = '/fee-schedules/{feeSched}'.sub('{' + 'feeSched' + '}', CGI.escape(fee_sched.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'vbasoftware-database'] = vbasoftware_database

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fee_sched2)

      # return_type
      return_type = opts[:debug_return_type] || 'FeeSchedVBAResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FeeSchedulesApi.update_fee_sched",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeeSchedulesApi#update_fee_sched\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
