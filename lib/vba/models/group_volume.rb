=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupVolume
    # Unique identifier for each Volume configuration. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_volume_key

    # When configuration is Benefit specific, fill this in. When empty, applies to entire Group/Division/Plan.
    attr_accessor :benefit_code

    # Based on volume type, this settings determines the volume.
    attr_accessor :dist_volume_amount

    # Based on volume type, this settings determines the volume. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :dist_volume_pct

    # When configuration is Division specific, fill this in. When empty, applies to the entire Group.
    attr_accessor :division_id

    # The effective date of the volume setting.
    attr_accessor :effective_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Based on volume type, this settings determines the volume.
    attr_accessor :g_i_volume_max

    # Based on volume type, this settings determines the volume.
    attr_accessor :g_i_volume_min

    # References Groups.Group_ID value on the parent record.
    attr_accessor :group_id

    # When configuration is Plan specific, fill this in. When empty, applies to entire Group/Division.
    attr_accessor :plan_id

    # The term date for this volume setting.
    attr_accessor :term_date

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Based on volume type, this settings determines the volume. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_dist_volume

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume

    # This is a User definable field to name the volume being entered.
    attr_accessor :volume_id

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_max

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_min

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_round_precision

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_round_type

    # This value indicates what setting is used to calculate volume. The fileds that reference this setting are noted and drive the specific volume type. Reference VBASoftware application documentation for detailed explanation.
    attr_accessor :volume_type

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_type_from

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_type_pct

    # Based on volume type, this settings determines the volume.
    attr_accessor :volume_type_thru

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_volume_key' => :'groupVolume_Key',
        :'benefit_code' => :'benefit_Code',
        :'dist_volume_amount' => :'dist_Volume_Amount',
        :'dist_volume_pct' => :'dist_Volume_Pct',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'g_i_volume_max' => :'gI_Volume_Max',
        :'g_i_volume_min' => :'gI_Volume_Min',
        :'group_id' => :'group_ID',
        :'plan_id' => :'plan_ID',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_dist_volume' => :'use_Dist_Volume',
        :'volume' => :'volume',
        :'volume_id' => :'volume_ID',
        :'volume_max' => :'volume_Max',
        :'volume_min' => :'volume_Min',
        :'volume_round_precision' => :'volume_Round_Precision',
        :'volume_round_type' => :'volume_Round_Type',
        :'volume_type' => :'volume_Type',
        :'volume_type_from' => :'volume_Type_From',
        :'volume_type_pct' => :'volume_Type_Pct',
        :'volume_type_thru' => :'volume_Type_Thru'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_volume_key' => :'Integer',
        :'benefit_code' => :'String',
        :'dist_volume_amount' => :'Float',
        :'dist_volume_pct' => :'Boolean',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'g_i_volume_max' => :'Float',
        :'g_i_volume_min' => :'Float',
        :'group_id' => :'String',
        :'plan_id' => :'String',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_dist_volume' => :'Boolean',
        :'volume' => :'Float',
        :'volume_id' => :'String',
        :'volume_max' => :'Float',
        :'volume_min' => :'Float',
        :'volume_round_precision' => :'Integer',
        :'volume_round_type' => :'String',
        :'volume_type' => :'String',
        :'volume_type_from' => :'Integer',
        :'volume_type_pct' => :'Float',
        :'volume_type_thru' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'benefit_code',
        :'dist_volume_amount',
        :'division_id',
        :'effective_date',
        :'entry_user',
        :'g_i_volume_max',
        :'g_i_volume_min',
        :'plan_id',
        :'term_date',
        :'update_user',
        :'volume',
        :'volume_id',
        :'volume_max',
        :'volume_min',
        :'volume_round_precision',
        :'volume_round_type',
        :'volume_type',
        :'volume_type_from',
        :'volume_type_pct',
        :'volume_type_thru'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupVolume` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupVolume`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_volume_key')
        self.group_volume_key = attributes[:'group_volume_key']
      else
        self.group_volume_key = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'dist_volume_amount')
        self.dist_volume_amount = attributes[:'dist_volume_amount']
      end

      if attributes.key?(:'dist_volume_pct')
        self.dist_volume_pct = attributes[:'dist_volume_pct']
      else
        self.dist_volume_pct = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'g_i_volume_max')
        self.g_i_volume_max = attributes[:'g_i_volume_max']
      end

      if attributes.key?(:'g_i_volume_min')
        self.g_i_volume_min = attributes[:'g_i_volume_min']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_dist_volume')
        self.use_dist_volume = attributes[:'use_dist_volume']
      else
        self.use_dist_volume = nil
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'volume_id')
        self.volume_id = attributes[:'volume_id']
      end

      if attributes.key?(:'volume_max')
        self.volume_max = attributes[:'volume_max']
      end

      if attributes.key?(:'volume_min')
        self.volume_min = attributes[:'volume_min']
      end

      if attributes.key?(:'volume_round_precision')
        self.volume_round_precision = attributes[:'volume_round_precision']
      end

      if attributes.key?(:'volume_round_type')
        self.volume_round_type = attributes[:'volume_round_type']
      end

      if attributes.key?(:'volume_type')
        self.volume_type = attributes[:'volume_type']
      end

      if attributes.key?(:'volume_type_from')
        self.volume_type_from = attributes[:'volume_type_from']
      end

      if attributes.key?(:'volume_type_pct')
        self.volume_type_pct = attributes[:'volume_type_pct']
      end

      if attributes.key?(:'volume_type_thru')
        self.volume_type_thru = attributes[:'volume_type_thru']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_volume_key.nil?
        invalid_properties.push('invalid value for "group_volume_key", group_volume_key cannot be nil.')
      end

      if !@benefit_code.nil? && @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if @dist_volume_pct.nil?
        invalid_properties.push('invalid value for "dist_volume_pct", dist_volume_pct cannot be nil.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_dist_volume.nil?
        invalid_properties.push('invalid value for "use_dist_volume", use_dist_volume cannot be nil.')
      end

      if !@volume_id.nil? && @volume_id.to_s.length > 32
        invalid_properties.push('invalid value for "volume_id", the character length must be smaller than or equal to 32.')
      end

      if !@volume_round_type.nil? && @volume_round_type.to_s.length > 16
        invalid_properties.push('invalid value for "volume_round_type", the character length must be smaller than or equal to 16.')
      end

      if !@volume_type.nil? && @volume_type.to_s.length > 16
        invalid_properties.push('invalid value for "volume_type", the character length must be smaller than or equal to 16.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_volume_key.nil?
      return false if !@benefit_code.nil? && @benefit_code.to_s.length > 10
      return false if @dist_volume_pct.nil?
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_dist_volume.nil?
      return false if !@volume_id.nil? && @volume_id.to_s.length > 32
      return false if !@volume_round_type.nil? && @volume_round_type.to_s.length > 16
      return false if !@volume_type.nil? && @volume_type.to_s.length > 16
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_volume_key Value to be assigned
    def group_volume_key=(group_volume_key)
      if group_volume_key.nil?
        fail ArgumentError, 'group_volume_key cannot be nil'
      end

      @group_volume_key = group_volume_key
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if !benefit_code.nil? && benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] dist_volume_pct Value to be assigned
    def dist_volume_pct=(dist_volume_pct)
      if dist_volume_pct.nil?
        fail ArgumentError, 'dist_volume_pct cannot be nil'
      end

      @dist_volume_pct = dist_volume_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_dist_volume Value to be assigned
    def use_dist_volume=(use_dist_volume)
      if use_dist_volume.nil?
        fail ArgumentError, 'use_dist_volume cannot be nil'
      end

      @use_dist_volume = use_dist_volume
    end

    # Custom attribute writer method with validation
    # @param [Object] volume_id Value to be assigned
    def volume_id=(volume_id)
      if !volume_id.nil? && volume_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "volume_id", the character length must be smaller than or equal to 32.'
      end

      @volume_id = volume_id
    end

    # Custom attribute writer method with validation
    # @param [Object] volume_round_type Value to be assigned
    def volume_round_type=(volume_round_type)
      if !volume_round_type.nil? && volume_round_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "volume_round_type", the character length must be smaller than or equal to 16.'
      end

      @volume_round_type = volume_round_type
    end

    # Custom attribute writer method with validation
    # @param [Object] volume_type Value to be assigned
    def volume_type=(volume_type)
      if !volume_type.nil? && volume_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "volume_type", the character length must be smaller than or equal to 16.'
      end

      @volume_type = volume_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_volume_key == o.group_volume_key &&
          benefit_code == o.benefit_code &&
          dist_volume_amount == o.dist_volume_amount &&
          dist_volume_pct == o.dist_volume_pct &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          g_i_volume_max == o.g_i_volume_max &&
          g_i_volume_min == o.g_i_volume_min &&
          group_id == o.group_id &&
          plan_id == o.plan_id &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_dist_volume == o.use_dist_volume &&
          volume == o.volume &&
          volume_id == o.volume_id &&
          volume_max == o.volume_max &&
          volume_min == o.volume_min &&
          volume_round_precision == o.volume_round_precision &&
          volume_round_type == o.volume_round_type &&
          volume_type == o.volume_type &&
          volume_type_from == o.volume_type_from &&
          volume_type_pct == o.volume_type_pct &&
          volume_type_thru == o.volume_type_thru
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_volume_key, benefit_code, dist_volume_amount, dist_volume_pct, division_id, effective_date, entry_date, entry_user, g_i_volume_max, g_i_volume_min, group_id, plan_id, term_date, update_date, update_user, use_dist_volume, volume, volume_id, volume_max, volume_min, volume_round_precision, volume_round_type, volume_type, volume_type_from, volume_type_pct, volume_type_thru].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
