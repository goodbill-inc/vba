=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class AuthReview
    # Unique identifier for each record.
    attr_accessor :auth_review_key

    # Unique identifier assigned to the authorization.
    attr_accessor :auth_number

    # Allows the reviewing User to add any additional information to the review.
    attr_accessor :review_comment

    # Date when the authorization was reviewed.
    attr_accessor :review_date

    # Level of the review. This is configurable in 'Auth Configuration'.
    attr_accessor :review_level

    # Severity of the review. This is configurable in 'Auth Configuration'.
    attr_accessor :review_severity

    # Status of the review. This is configurable in 'Auth Configuration'.
    attr_accessor :review_status

    # Type of the review. This is configurable in 'Auth Configuration'.
    attr_accessor :review_type

    # Urgency type of the review. This is configurable in 'Auth Configuration'.
    attr_accessor :review_urgency_type

    # ID of the User who reviewed the authorization.
    attr_accessor :review_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_review_key' => :'authReview_Key',
        :'auth_number' => :'auth_Number',
        :'review_comment' => :'review_Comment',
        :'review_date' => :'review_Date',
        :'review_level' => :'review_Level',
        :'review_severity' => :'review_Severity',
        :'review_status' => :'review_Status',
        :'review_type' => :'review_Type',
        :'review_urgency_type' => :'review_Urgency_Type',
        :'review_user' => :'review_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_review_key' => :'Integer',
        :'auth_number' => :'String',
        :'review_comment' => :'String',
        :'review_date' => :'Time',
        :'review_level' => :'String',
        :'review_severity' => :'String',
        :'review_status' => :'String',
        :'review_type' => :'String',
        :'review_urgency_type' => :'String',
        :'review_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'review_comment',
        :'review_date',
        :'review_level',
        :'review_severity',
        :'review_status',
        :'review_type',
        :'review_urgency_type',
        :'review_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::AuthReview` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::AuthReview`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_review_key')
        self.auth_review_key = attributes[:'auth_review_key']
      else
        self.auth_review_key = nil
      end

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      else
        self.auth_number = nil
      end

      if attributes.key?(:'review_comment')
        self.review_comment = attributes[:'review_comment']
      end

      if attributes.key?(:'review_date')
        self.review_date = attributes[:'review_date']
      end

      if attributes.key?(:'review_level')
        self.review_level = attributes[:'review_level']
      end

      if attributes.key?(:'review_severity')
        self.review_severity = attributes[:'review_severity']
      end

      if attributes.key?(:'review_status')
        self.review_status = attributes[:'review_status']
      end

      if attributes.key?(:'review_type')
        self.review_type = attributes[:'review_type']
      end

      if attributes.key?(:'review_urgency_type')
        self.review_urgency_type = attributes[:'review_urgency_type']
      end

      if attributes.key?(:'review_user')
        self.review_user = attributes[:'review_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @auth_review_key.nil?
        invalid_properties.push('invalid value for "auth_review_key", auth_review_key cannot be nil.')
      end

      if @auth_number.nil?
        invalid_properties.push('invalid value for "auth_number", auth_number cannot be nil.')
      end

      if @auth_number.to_s.length > 20
        invalid_properties.push('invalid value for "auth_number", the character length must be smaller than or equal to 20.')
      end

      if @auth_number.to_s.length < 1
        invalid_properties.push('invalid value for "auth_number", the character length must be great than or equal to 1.')
      end

      if !@review_comment.nil? && @review_comment.to_s.length > 512
        invalid_properties.push('invalid value for "review_comment", the character length must be smaller than or equal to 512.')
      end

      if !@review_level.nil? && @review_level.to_s.length > 32
        invalid_properties.push('invalid value for "review_level", the character length must be smaller than or equal to 32.')
      end

      if !@review_severity.nil? && @review_severity.to_s.length > 32
        invalid_properties.push('invalid value for "review_severity", the character length must be smaller than or equal to 32.')
      end

      if !@review_status.nil? && @review_status.to_s.length > 32
        invalid_properties.push('invalid value for "review_status", the character length must be smaller than or equal to 32.')
      end

      if !@review_type.nil? && @review_type.to_s.length > 32
        invalid_properties.push('invalid value for "review_type", the character length must be smaller than or equal to 32.')
      end

      if !@review_urgency_type.nil? && @review_urgency_type.to_s.length > 32
        invalid_properties.push('invalid value for "review_urgency_type", the character length must be smaller than or equal to 32.')
      end

      if !@review_user.nil? && @review_user.to_s.length > 20
        invalid_properties.push('invalid value for "review_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @auth_review_key.nil?
      return false if @auth_number.nil?
      return false if @auth_number.to_s.length > 20
      return false if @auth_number.to_s.length < 1
      return false if !@review_comment.nil? && @review_comment.to_s.length > 512
      return false if !@review_level.nil? && @review_level.to_s.length > 32
      return false if !@review_severity.nil? && @review_severity.to_s.length > 32
      return false if !@review_status.nil? && @review_status.to_s.length > 32
      return false if !@review_type.nil? && @review_type.to_s.length > 32
      return false if !@review_urgency_type.nil? && @review_urgency_type.to_s.length > 32
      return false if !@review_user.nil? && @review_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_review_key Value to be assigned
    def auth_review_key=(auth_review_key)
      if auth_review_key.nil?
        fail ArgumentError, 'auth_review_key cannot be nil'
      end

      @auth_review_key = auth_review_key
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if auth_number.nil?
        fail ArgumentError, 'auth_number cannot be nil'
      end

      if auth_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "auth_number", the character length must be smaller than or equal to 20.'
      end

      if auth_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "auth_number", the character length must be great than or equal to 1.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] review_comment Value to be assigned
    def review_comment=(review_comment)
      if !review_comment.nil? && review_comment.to_s.length > 512
        fail ArgumentError, 'invalid value for "review_comment", the character length must be smaller than or equal to 512.'
      end

      @review_comment = review_comment
    end

    # Custom attribute writer method with validation
    # @param [Object] review_level Value to be assigned
    def review_level=(review_level)
      if !review_level.nil? && review_level.to_s.length > 32
        fail ArgumentError, 'invalid value for "review_level", the character length must be smaller than or equal to 32.'
      end

      @review_level = review_level
    end

    # Custom attribute writer method with validation
    # @param [Object] review_severity Value to be assigned
    def review_severity=(review_severity)
      if !review_severity.nil? && review_severity.to_s.length > 32
        fail ArgumentError, 'invalid value for "review_severity", the character length must be smaller than or equal to 32.'
      end

      @review_severity = review_severity
    end

    # Custom attribute writer method with validation
    # @param [Object] review_status Value to be assigned
    def review_status=(review_status)
      if !review_status.nil? && review_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "review_status", the character length must be smaller than or equal to 32.'
      end

      @review_status = review_status
    end

    # Custom attribute writer method with validation
    # @param [Object] review_type Value to be assigned
    def review_type=(review_type)
      if !review_type.nil? && review_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "review_type", the character length must be smaller than or equal to 32.'
      end

      @review_type = review_type
    end

    # Custom attribute writer method with validation
    # @param [Object] review_urgency_type Value to be assigned
    def review_urgency_type=(review_urgency_type)
      if !review_urgency_type.nil? && review_urgency_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "review_urgency_type", the character length must be smaller than or equal to 32.'
      end

      @review_urgency_type = review_urgency_type
    end

    # Custom attribute writer method with validation
    # @param [Object] review_user Value to be assigned
    def review_user=(review_user)
      if !review_user.nil? && review_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "review_user", the character length must be smaller than or equal to 20.'
      end

      @review_user = review_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_review_key == o.auth_review_key &&
          auth_number == o.auth_number &&
          review_comment == o.review_comment &&
          review_date == o.review_date &&
          review_level == o.review_level &&
          review_severity == o.review_severity &&
          review_status == o.review_status &&
          review_type == o.review_type &&
          review_urgency_type == o.review_urgency_type &&
          review_user == o.review_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_review_key, auth_number, review_comment, review_date, review_level, review_severity, review_status, review_type, review_urgency_type, review_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
