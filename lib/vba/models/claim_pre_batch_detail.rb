=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimPreBatchDetail
    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :claim_pre_batch_detail_key

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :ans_i_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :ap_c_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :adjusted_from_adjustment_line

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :adjusted_from_line

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :adjustment_seq

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :auth_number

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :auth_required

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :batch_claim

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :batch_number

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :benefit_code

    # Benefit Rate being applied to this detail line.
    attr_accessor :benefit_rate_applied

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :billed_price

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :brand_indicator

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :buccal

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :co_b_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :co_b_hold

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :co_b_mem_resp

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :claim_seq

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :co_ins_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :co_pay_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :days_supply

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :deductible_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :diagnosis_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :discount_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :dispense_as_written

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :distal

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :drug_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :drug_quantity

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :entry_date

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :entry_user

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :ex_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :ex_code2

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :ex_code3

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :fica

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :facial

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :federal_amount_to_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :federal_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :federal_tax_flat

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :fill_date

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :formulary_indicator

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :incisal

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :interest

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :labial

    # Number added manually to claims and from 837 files and sent outbound on 835 files.
    attr_accessor :line_control_number

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :lingual

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :local_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :mail_order_indicator

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :medicare_amount_to_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :medicare_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :mesial

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :modifier

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :modifier_2

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :modifier_3

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :modifier_4

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :not_covered_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :occlusal

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :oral_cavity_designation_code_1

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :oral_cavity_designation_code_2

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :oral_cavity_designation_code_3

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :oral_cavity_designation_code_4

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :oral_cavity_designation_code_5

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :other_deduction_amount

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :paid_amt

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :partial_loss

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :pharmacy_name

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :place_of_service

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :plan_price

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :premium_deduction

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :prescriber_id

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :prescription_date

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :prescription_number

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :principal

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :procedure_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :procedure_code2

    # QPA (Qualified Payment Amount) values received in upcoming EDI transactions for the NSA (No Surprise Act) mandate.
    attr_accessor :qualifying_payment_amount

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :reason_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :refill_indicator

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :root

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :service_date

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :service_thru

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :soc_sec_amount_to_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :social_security

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :state_amount_to_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :state_tax

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :state_tax_flat

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :state_tax_state

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :status_code

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :svc_count

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :taxable_amount

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :tooth_number

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :uc_r_price

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :unit_dose

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :update_date

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.
    attr_accessor :update_user

    # Archive storage table for tracking initial entry of Claim information. Not to be used externally.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :with_hold_amt

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_pre_batch_detail_key' => :'claimPreBatchDetail_Key',
        :'ans_i_code' => :'ansI_Code',
        :'ap_c_code' => :'apC_Code',
        :'adjusted_from_adjustment_line' => :'adjusted_From_Adjustment_Line',
        :'adjusted_from_line' => :'adjusted_From_Line',
        :'adjustment_seq' => :'adjustment_Seq',
        :'auth_number' => :'auth_Number',
        :'auth_required' => :'auth_Required',
        :'batch_claim' => :'batch_Claim',
        :'batch_number' => :'batch_Number',
        :'benefit_code' => :'benefit_Code',
        :'benefit_rate_applied' => :'benefit_Rate_Applied',
        :'billed_price' => :'billed_Price',
        :'brand_indicator' => :'brand_Indicator',
        :'buccal' => :'buccal',
        :'co_b_amt' => :'coB_Amt',
        :'co_b_hold' => :'coB_Hold',
        :'co_b_mem_resp' => :'coB_Mem_Resp',
        :'claim_seq' => :'claim_Seq',
        :'co_ins_amt' => :'co_Ins_Amt',
        :'co_pay_amt' => :'co_Pay_Amt',
        :'days_supply' => :'days_Supply',
        :'deductible_amt' => :'deductible_Amt',
        :'diagnosis_code' => :'diagnosis_Code',
        :'discount_amt' => :'discount_Amt',
        :'dispense_as_written' => :'dispense_As_Written',
        :'distal' => :'distal',
        :'drug_code' => :'drug_Code',
        :'drug_quantity' => :'drug_Quantity',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'ex_code2' => :'ex_Code2',
        :'ex_code3' => :'ex_Code3',
        :'fica' => :'fica',
        :'facial' => :'facial',
        :'federal_amount_to_tax' => :'federal_Amount_To_Tax',
        :'federal_tax' => :'federal_Tax',
        :'federal_tax_flat' => :'federal_Tax_Flat',
        :'fill_date' => :'fill_Date',
        :'formulary_indicator' => :'formulary_Indicator',
        :'incisal' => :'incisal',
        :'interest' => :'interest',
        :'labial' => :'labial',
        :'line_control_number' => :'line_Control_Number',
        :'lingual' => :'lingual',
        :'local_tax' => :'local_Tax',
        :'mail_order_indicator' => :'mail_Order_Indicator',
        :'medicare_amount_to_tax' => :'medicare_Amount_To_Tax',
        :'medicare_tax' => :'medicare_Tax',
        :'mesial' => :'mesial',
        :'modifier' => :'modifier',
        :'modifier_2' => :'modifier_2',
        :'modifier_3' => :'modifier_3',
        :'modifier_4' => :'modifier_4',
        :'not_covered_amt' => :'not_Covered_Amt',
        :'occlusal' => :'occlusal',
        :'oral_cavity_designation_code_1' => :'oral_Cavity_Designation_Code_1',
        :'oral_cavity_designation_code_2' => :'oral_Cavity_Designation_Code_2',
        :'oral_cavity_designation_code_3' => :'oral_Cavity_Designation_Code_3',
        :'oral_cavity_designation_code_4' => :'oral_Cavity_Designation_Code_4',
        :'oral_cavity_designation_code_5' => :'oral_Cavity_Designation_Code_5',
        :'other_deduction_amount' => :'other_Deduction_Amount',
        :'paid_amt' => :'paid_Amt',
        :'partial_loss' => :'partial_Loss',
        :'pharmacy_name' => :'pharmacy_Name',
        :'place_of_service' => :'place_Of_Service',
        :'plan_price' => :'plan_Price',
        :'premium_deduction' => :'premium_Deduction',
        :'prescriber_id' => :'prescriber_ID',
        :'prescription_date' => :'prescription_Date',
        :'prescription_number' => :'prescription_Number',
        :'principal' => :'principal',
        :'procedure_code' => :'procedure_Code',
        :'procedure_code2' => :'procedure_Code2',
        :'qualifying_payment_amount' => :'qualifying_Payment_Amount',
        :'reason_code' => :'reason_Code',
        :'refill_indicator' => :'refill_Indicator',
        :'root' => :'root',
        :'service_date' => :'service_Date',
        :'service_thru' => :'service_Thru',
        :'soc_sec_amount_to_tax' => :'socSec_Amount_To_Tax',
        :'social_security' => :'social_Security',
        :'state_amount_to_tax' => :'state_Amount_To_Tax',
        :'state_tax' => :'state_Tax',
        :'state_tax_flat' => :'state_Tax_Flat',
        :'state_tax_state' => :'state_Tax_State',
        :'status_code' => :'status_Code',
        :'svc_count' => :'svc_Count',
        :'taxable_amount' => :'taxable_Amount',
        :'tooth_number' => :'tooth_Number',
        :'uc_r_price' => :'ucR_Price',
        :'unit_dose' => :'unit_Dose',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'with_hold_amt' => :'with_Hold_Amt'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_pre_batch_detail_key' => :'Integer',
        :'ans_i_code' => :'String',
        :'ap_c_code' => :'String',
        :'adjusted_from_adjustment_line' => :'String',
        :'adjusted_from_line' => :'String',
        :'adjustment_seq' => :'String',
        :'auth_number' => :'String',
        :'auth_required' => :'String',
        :'batch_claim' => :'Integer',
        :'batch_number' => :'Integer',
        :'benefit_code' => :'String',
        :'benefit_rate_applied' => :'Float',
        :'billed_price' => :'Float',
        :'brand_indicator' => :'String',
        :'buccal' => :'Boolean',
        :'co_b_amt' => :'Float',
        :'co_b_hold' => :'Float',
        :'co_b_mem_resp' => :'Float',
        :'claim_seq' => :'String',
        :'co_ins_amt' => :'Float',
        :'co_pay_amt' => :'Float',
        :'days_supply' => :'Integer',
        :'deductible_amt' => :'Float',
        :'diagnosis_code' => :'String',
        :'discount_amt' => :'Float',
        :'dispense_as_written' => :'Integer',
        :'distal' => :'Boolean',
        :'drug_code' => :'String',
        :'drug_quantity' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'ex_code2' => :'String',
        :'ex_code3' => :'String',
        :'fica' => :'Float',
        :'facial' => :'Boolean',
        :'federal_amount_to_tax' => :'Float',
        :'federal_tax' => :'Float',
        :'federal_tax_flat' => :'Float',
        :'fill_date' => :'Time',
        :'formulary_indicator' => :'String',
        :'incisal' => :'Boolean',
        :'interest' => :'Float',
        :'labial' => :'Boolean',
        :'line_control_number' => :'String',
        :'lingual' => :'Boolean',
        :'local_tax' => :'Float',
        :'mail_order_indicator' => :'String',
        :'medicare_amount_to_tax' => :'Float',
        :'medicare_tax' => :'Float',
        :'mesial' => :'Boolean',
        :'modifier' => :'String',
        :'modifier_2' => :'String',
        :'modifier_3' => :'String',
        :'modifier_4' => :'String',
        :'not_covered_amt' => :'Float',
        :'occlusal' => :'Boolean',
        :'oral_cavity_designation_code_1' => :'String',
        :'oral_cavity_designation_code_2' => :'String',
        :'oral_cavity_designation_code_3' => :'String',
        :'oral_cavity_designation_code_4' => :'String',
        :'oral_cavity_designation_code_5' => :'String',
        :'other_deduction_amount' => :'Float',
        :'paid_amt' => :'Float',
        :'partial_loss' => :'Float',
        :'pharmacy_name' => :'String',
        :'place_of_service' => :'String',
        :'plan_price' => :'Float',
        :'premium_deduction' => :'Float',
        :'prescriber_id' => :'String',
        :'prescription_date' => :'Time',
        :'prescription_number' => :'String',
        :'principal' => :'Float',
        :'procedure_code' => :'String',
        :'procedure_code2' => :'String',
        :'qualifying_payment_amount' => :'Float',
        :'reason_code' => :'Integer',
        :'refill_indicator' => :'Integer',
        :'root' => :'Boolean',
        :'service_date' => :'Time',
        :'service_thru' => :'Time',
        :'soc_sec_amount_to_tax' => :'Float',
        :'social_security' => :'Float',
        :'state_amount_to_tax' => :'Float',
        :'state_tax' => :'Float',
        :'state_tax_flat' => :'Float',
        :'state_tax_state' => :'String',
        :'status_code' => :'String',
        :'svc_count' => :'Float',
        :'taxable_amount' => :'Float',
        :'tooth_number' => :'Integer',
        :'uc_r_price' => :'Float',
        :'unit_dose' => :'Integer',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'with_hold_amt' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ans_i_code',
        :'ap_c_code',
        :'adjusted_from_adjustment_line',
        :'adjusted_from_line',
        :'auth_number',
        :'auth_required',
        :'benefit_code',
        :'benefit_rate_applied',
        :'brand_indicator',
        :'co_b_hold',
        :'co_b_mem_resp',
        :'days_supply',
        :'diagnosis_code',
        :'dispense_as_written',
        :'drug_code',
        :'drug_quantity',
        :'entry_user',
        :'ex_code',
        :'ex_code2',
        :'ex_code3',
        :'federal_amount_to_tax',
        :'federal_tax_flat',
        :'fill_date',
        :'formulary_indicator',
        :'line_control_number',
        :'local_tax',
        :'mail_order_indicator',
        :'medicare_amount_to_tax',
        :'medicare_tax',
        :'modifier',
        :'modifier_2',
        :'modifier_3',
        :'modifier_4',
        :'oral_cavity_designation_code_1',
        :'oral_cavity_designation_code_2',
        :'oral_cavity_designation_code_3',
        :'oral_cavity_designation_code_4',
        :'oral_cavity_designation_code_5',
        :'other_deduction_amount',
        :'pharmacy_name',
        :'place_of_service',
        :'prescriber_id',
        :'prescription_date',
        :'prescription_number',
        :'procedure_code',
        :'procedure_code2',
        :'qualifying_payment_amount',
        :'reason_code',
        :'refill_indicator',
        :'service_date',
        :'service_thru',
        :'soc_sec_amount_to_tax',
        :'state_amount_to_tax',
        :'state_tax_flat',
        :'state_tax_state',
        :'status_code',
        :'svc_count',
        :'taxable_amount',
        :'tooth_number',
        :'unit_dose',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimPreBatchDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimPreBatchDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_pre_batch_detail_key')
        self.claim_pre_batch_detail_key = attributes[:'claim_pre_batch_detail_key']
      else
        self.claim_pre_batch_detail_key = nil
      end

      if attributes.key?(:'ans_i_code')
        self.ans_i_code = attributes[:'ans_i_code']
      end

      if attributes.key?(:'ap_c_code')
        self.ap_c_code = attributes[:'ap_c_code']
      end

      if attributes.key?(:'adjusted_from_adjustment_line')
        self.adjusted_from_adjustment_line = attributes[:'adjusted_from_adjustment_line']
      end

      if attributes.key?(:'adjusted_from_line')
        self.adjusted_from_line = attributes[:'adjusted_from_line']
      end

      if attributes.key?(:'adjustment_seq')
        self.adjustment_seq = attributes[:'adjustment_seq']
      else
        self.adjustment_seq = nil
      end

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      end

      if attributes.key?(:'auth_required')
        self.auth_required = attributes[:'auth_required']
      end

      if attributes.key?(:'batch_claim')
        self.batch_claim = attributes[:'batch_claim']
      else
        self.batch_claim = nil
      end

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'benefit_rate_applied')
        self.benefit_rate_applied = attributes[:'benefit_rate_applied']
      end

      if attributes.key?(:'billed_price')
        self.billed_price = attributes[:'billed_price']
      else
        self.billed_price = nil
      end

      if attributes.key?(:'brand_indicator')
        self.brand_indicator = attributes[:'brand_indicator']
      end

      if attributes.key?(:'buccal')
        self.buccal = attributes[:'buccal']
      else
        self.buccal = nil
      end

      if attributes.key?(:'co_b_amt')
        self.co_b_amt = attributes[:'co_b_amt']
      else
        self.co_b_amt = nil
      end

      if attributes.key?(:'co_b_hold')
        self.co_b_hold = attributes[:'co_b_hold']
      end

      if attributes.key?(:'co_b_mem_resp')
        self.co_b_mem_resp = attributes[:'co_b_mem_resp']
      end

      if attributes.key?(:'claim_seq')
        self.claim_seq = attributes[:'claim_seq']
      else
        self.claim_seq = nil
      end

      if attributes.key?(:'co_ins_amt')
        self.co_ins_amt = attributes[:'co_ins_amt']
      else
        self.co_ins_amt = nil
      end

      if attributes.key?(:'co_pay_amt')
        self.co_pay_amt = attributes[:'co_pay_amt']
      else
        self.co_pay_amt = nil
      end

      if attributes.key?(:'days_supply')
        self.days_supply = attributes[:'days_supply']
      end

      if attributes.key?(:'deductible_amt')
        self.deductible_amt = attributes[:'deductible_amt']
      else
        self.deductible_amt = nil
      end

      if attributes.key?(:'diagnosis_code')
        self.diagnosis_code = attributes[:'diagnosis_code']
      end

      if attributes.key?(:'discount_amt')
        self.discount_amt = attributes[:'discount_amt']
      else
        self.discount_amt = nil
      end

      if attributes.key?(:'dispense_as_written')
        self.dispense_as_written = attributes[:'dispense_as_written']
      end

      if attributes.key?(:'distal')
        self.distal = attributes[:'distal']
      else
        self.distal = nil
      end

      if attributes.key?(:'drug_code')
        self.drug_code = attributes[:'drug_code']
      end

      if attributes.key?(:'drug_quantity')
        self.drug_quantity = attributes[:'drug_quantity']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'ex_code2')
        self.ex_code2 = attributes[:'ex_code2']
      end

      if attributes.key?(:'ex_code3')
        self.ex_code3 = attributes[:'ex_code3']
      end

      if attributes.key?(:'fica')
        self.fica = attributes[:'fica']
      else
        self.fica = nil
      end

      if attributes.key?(:'facial')
        self.facial = attributes[:'facial']
      else
        self.facial = nil
      end

      if attributes.key?(:'federal_amount_to_tax')
        self.federal_amount_to_tax = attributes[:'federal_amount_to_tax']
      end

      if attributes.key?(:'federal_tax')
        self.federal_tax = attributes[:'federal_tax']
      else
        self.federal_tax = nil
      end

      if attributes.key?(:'federal_tax_flat')
        self.federal_tax_flat = attributes[:'federal_tax_flat']
      end

      if attributes.key?(:'fill_date')
        self.fill_date = attributes[:'fill_date']
      end

      if attributes.key?(:'formulary_indicator')
        self.formulary_indicator = attributes[:'formulary_indicator']
      end

      if attributes.key?(:'incisal')
        self.incisal = attributes[:'incisal']
      else
        self.incisal = nil
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      else
        self.interest = nil
      end

      if attributes.key?(:'labial')
        self.labial = attributes[:'labial']
      else
        self.labial = nil
      end

      if attributes.key?(:'line_control_number')
        self.line_control_number = attributes[:'line_control_number']
      end

      if attributes.key?(:'lingual')
        self.lingual = attributes[:'lingual']
      else
        self.lingual = nil
      end

      if attributes.key?(:'local_tax')
        self.local_tax = attributes[:'local_tax']
      end

      if attributes.key?(:'mail_order_indicator')
        self.mail_order_indicator = attributes[:'mail_order_indicator']
      end

      if attributes.key?(:'medicare_amount_to_tax')
        self.medicare_amount_to_tax = attributes[:'medicare_amount_to_tax']
      end

      if attributes.key?(:'medicare_tax')
        self.medicare_tax = attributes[:'medicare_tax']
      end

      if attributes.key?(:'mesial')
        self.mesial = attributes[:'mesial']
      else
        self.mesial = nil
      end

      if attributes.key?(:'modifier')
        self.modifier = attributes[:'modifier']
      end

      if attributes.key?(:'modifier_2')
        self.modifier_2 = attributes[:'modifier_2']
      end

      if attributes.key?(:'modifier_3')
        self.modifier_3 = attributes[:'modifier_3']
      end

      if attributes.key?(:'modifier_4')
        self.modifier_4 = attributes[:'modifier_4']
      end

      if attributes.key?(:'not_covered_amt')
        self.not_covered_amt = attributes[:'not_covered_amt']
      else
        self.not_covered_amt = nil
      end

      if attributes.key?(:'occlusal')
        self.occlusal = attributes[:'occlusal']
      else
        self.occlusal = nil
      end

      if attributes.key?(:'oral_cavity_designation_code_1')
        self.oral_cavity_designation_code_1 = attributes[:'oral_cavity_designation_code_1']
      end

      if attributes.key?(:'oral_cavity_designation_code_2')
        self.oral_cavity_designation_code_2 = attributes[:'oral_cavity_designation_code_2']
      end

      if attributes.key?(:'oral_cavity_designation_code_3')
        self.oral_cavity_designation_code_3 = attributes[:'oral_cavity_designation_code_3']
      end

      if attributes.key?(:'oral_cavity_designation_code_4')
        self.oral_cavity_designation_code_4 = attributes[:'oral_cavity_designation_code_4']
      end

      if attributes.key?(:'oral_cavity_designation_code_5')
        self.oral_cavity_designation_code_5 = attributes[:'oral_cavity_designation_code_5']
      end

      if attributes.key?(:'other_deduction_amount')
        self.other_deduction_amount = attributes[:'other_deduction_amount']
      end

      if attributes.key?(:'paid_amt')
        self.paid_amt = attributes[:'paid_amt']
      else
        self.paid_amt = nil
      end

      if attributes.key?(:'partial_loss')
        self.partial_loss = attributes[:'partial_loss']
      else
        self.partial_loss = nil
      end

      if attributes.key?(:'pharmacy_name')
        self.pharmacy_name = attributes[:'pharmacy_name']
      end

      if attributes.key?(:'place_of_service')
        self.place_of_service = attributes[:'place_of_service']
      end

      if attributes.key?(:'plan_price')
        self.plan_price = attributes[:'plan_price']
      else
        self.plan_price = nil
      end

      if attributes.key?(:'premium_deduction')
        self.premium_deduction = attributes[:'premium_deduction']
      else
        self.premium_deduction = nil
      end

      if attributes.key?(:'prescriber_id')
        self.prescriber_id = attributes[:'prescriber_id']
      end

      if attributes.key?(:'prescription_date')
        self.prescription_date = attributes[:'prescription_date']
      end

      if attributes.key?(:'prescription_number')
        self.prescription_number = attributes[:'prescription_number']
      end

      if attributes.key?(:'principal')
        self.principal = attributes[:'principal']
      else
        self.principal = nil
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'procedure_code2')
        self.procedure_code2 = attributes[:'procedure_code2']
      end

      if attributes.key?(:'qualifying_payment_amount')
        self.qualifying_payment_amount = attributes[:'qualifying_payment_amount']
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'refill_indicator')
        self.refill_indicator = attributes[:'refill_indicator']
      end

      if attributes.key?(:'root')
        self.root = attributes[:'root']
      else
        self.root = nil
      end

      if attributes.key?(:'service_date')
        self.service_date = attributes[:'service_date']
      end

      if attributes.key?(:'service_thru')
        self.service_thru = attributes[:'service_thru']
      end

      if attributes.key?(:'soc_sec_amount_to_tax')
        self.soc_sec_amount_to_tax = attributes[:'soc_sec_amount_to_tax']
      end

      if attributes.key?(:'social_security')
        self.social_security = attributes[:'social_security']
      else
        self.social_security = nil
      end

      if attributes.key?(:'state_amount_to_tax')
        self.state_amount_to_tax = attributes[:'state_amount_to_tax']
      end

      if attributes.key?(:'state_tax')
        self.state_tax = attributes[:'state_tax']
      else
        self.state_tax = nil
      end

      if attributes.key?(:'state_tax_flat')
        self.state_tax_flat = attributes[:'state_tax_flat']
      end

      if attributes.key?(:'state_tax_state')
        self.state_tax_state = attributes[:'state_tax_state']
      end

      if attributes.key?(:'status_code')
        self.status_code = attributes[:'status_code']
      end

      if attributes.key?(:'svc_count')
        self.svc_count = attributes[:'svc_count']
      end

      if attributes.key?(:'taxable_amount')
        self.taxable_amount = attributes[:'taxable_amount']
      end

      if attributes.key?(:'tooth_number')
        self.tooth_number = attributes[:'tooth_number']
      end

      if attributes.key?(:'uc_r_price')
        self.uc_r_price = attributes[:'uc_r_price']
      else
        self.uc_r_price = nil
      end

      if attributes.key?(:'unit_dose')
        self.unit_dose = attributes[:'unit_dose']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'with_hold_amt')
        self.with_hold_amt = attributes[:'with_hold_amt']
      else
        self.with_hold_amt = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_pre_batch_detail_key.nil?
        invalid_properties.push('invalid value for "claim_pre_batch_detail_key", claim_pre_batch_detail_key cannot be nil.')
      end

      if !@ans_i_code.nil? && @ans_i_code.to_s.length > 8
        invalid_properties.push('invalid value for "ans_i_code", the character length must be smaller than or equal to 8.')
      end

      if !@ap_c_code.nil? && @ap_c_code.to_s.length > 8
        invalid_properties.push('invalid value for "ap_c_code", the character length must be smaller than or equal to 8.')
      end

      if !@adjusted_from_adjustment_line.nil? && @adjusted_from_adjustment_line.to_s.length > 3
        invalid_properties.push('invalid value for "adjusted_from_adjustment_line", the character length must be smaller than or equal to 3.')
      end

      if !@adjusted_from_line.nil? && @adjusted_from_line.to_s.length > 2
        invalid_properties.push('invalid value for "adjusted_from_line", the character length must be smaller than or equal to 2.')
      end

      if @adjustment_seq.nil?
        invalid_properties.push('invalid value for "adjustment_seq", adjustment_seq cannot be nil.')
      end

      if @adjustment_seq.to_s.length > 3
        invalid_properties.push('invalid value for "adjustment_seq", the character length must be smaller than or equal to 3.')
      end

      if @adjustment_seq.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_seq", the character length must be great than or equal to 1.')
      end

      if !@auth_number.nil? && @auth_number.to_s.length > 20
        invalid_properties.push('invalid value for "auth_number", the character length must be smaller than or equal to 20.')
      end

      if !@auth_required.nil? && @auth_required.to_s.length > 1
        invalid_properties.push('invalid value for "auth_required", the character length must be smaller than or equal to 1.')
      end

      if @batch_claim.nil?
        invalid_properties.push('invalid value for "batch_claim", batch_claim cannot be nil.')
      end

      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if !@benefit_code.nil? && @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if @billed_price.nil?
        invalid_properties.push('invalid value for "billed_price", billed_price cannot be nil.')
      end

      if !@brand_indicator.nil? && @brand_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "brand_indicator", the character length must be smaller than or equal to 1.')
      end

      if @buccal.nil?
        invalid_properties.push('invalid value for "buccal", buccal cannot be nil.')
      end

      if @co_b_amt.nil?
        invalid_properties.push('invalid value for "co_b_amt", co_b_amt cannot be nil.')
      end

      if @claim_seq.nil?
        invalid_properties.push('invalid value for "claim_seq", claim_seq cannot be nil.')
      end

      if @claim_seq.to_s.length > 2
        invalid_properties.push('invalid value for "claim_seq", the character length must be smaller than or equal to 2.')
      end

      if @claim_seq.to_s.length < 1
        invalid_properties.push('invalid value for "claim_seq", the character length must be great than or equal to 1.')
      end

      if @co_ins_amt.nil?
        invalid_properties.push('invalid value for "co_ins_amt", co_ins_amt cannot be nil.')
      end

      if @co_pay_amt.nil?
        invalid_properties.push('invalid value for "co_pay_amt", co_pay_amt cannot be nil.')
      end

      if @deductible_amt.nil?
        invalid_properties.push('invalid value for "deductible_amt", deductible_amt cannot be nil.')
      end

      if !@diagnosis_code.nil? && @diagnosis_code.to_s.length > 8
        invalid_properties.push('invalid value for "diagnosis_code", the character length must be smaller than or equal to 8.')
      end

      if @discount_amt.nil?
        invalid_properties.push('invalid value for "discount_amt", discount_amt cannot be nil.')
      end

      if @distal.nil?
        invalid_properties.push('invalid value for "distal", distal cannot be nil.')
      end

      if !@drug_code.nil? && @drug_code.to_s.length > 20
        invalid_properties.push('invalid value for "drug_code", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@ex_code2.nil? && @ex_code2.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code2", the character length must be smaller than or equal to 6.')
      end

      if !@ex_code3.nil? && @ex_code3.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code3", the character length must be smaller than or equal to 6.')
      end

      if @fica.nil?
        invalid_properties.push('invalid value for "fica", fica cannot be nil.')
      end

      if @facial.nil?
        invalid_properties.push('invalid value for "facial", facial cannot be nil.')
      end

      if @federal_tax.nil?
        invalid_properties.push('invalid value for "federal_tax", federal_tax cannot be nil.')
      end

      if !@formulary_indicator.nil? && @formulary_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "formulary_indicator", the character length must be smaller than or equal to 1.')
      end

      if @incisal.nil?
        invalid_properties.push('invalid value for "incisal", incisal cannot be nil.')
      end

      if @interest.nil?
        invalid_properties.push('invalid value for "interest", interest cannot be nil.')
      end

      if @labial.nil?
        invalid_properties.push('invalid value for "labial", labial cannot be nil.')
      end

      if !@line_control_number.nil? && @line_control_number.to_s.length > 64
        invalid_properties.push('invalid value for "line_control_number", the character length must be smaller than or equal to 64.')
      end

      if @lingual.nil?
        invalid_properties.push('invalid value for "lingual", lingual cannot be nil.')
      end

      if !@mail_order_indicator.nil? && @mail_order_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "mail_order_indicator", the character length must be smaller than or equal to 1.')
      end

      if @mesial.nil?
        invalid_properties.push('invalid value for "mesial", mesial cannot be nil.')
      end

      if !@modifier.nil? && @modifier.to_s.length > 8
        invalid_properties.push('invalid value for "modifier", the character length must be smaller than or equal to 8.')
      end

      if !@modifier_2.nil? && @modifier_2.to_s.length > 8
        invalid_properties.push('invalid value for "modifier_2", the character length must be smaller than or equal to 8.')
      end

      if !@modifier_3.nil? && @modifier_3.to_s.length > 8
        invalid_properties.push('invalid value for "modifier_3", the character length must be smaller than or equal to 8.')
      end

      if !@modifier_4.nil? && @modifier_4.to_s.length > 8
        invalid_properties.push('invalid value for "modifier_4", the character length must be smaller than or equal to 8.')
      end

      if @not_covered_amt.nil?
        invalid_properties.push('invalid value for "not_covered_amt", not_covered_amt cannot be nil.')
      end

      if @occlusal.nil?
        invalid_properties.push('invalid value for "occlusal", occlusal cannot be nil.')
      end

      if !@oral_cavity_designation_code_1.nil? && @oral_cavity_designation_code_1.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_1", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_2.nil? && @oral_cavity_designation_code_2.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_2", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_3.nil? && @oral_cavity_designation_code_3.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_3", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_4.nil? && @oral_cavity_designation_code_4.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_4", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_5.nil? && @oral_cavity_designation_code_5.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_5", the character length must be smaller than or equal to 3.')
      end

      if @paid_amt.nil?
        invalid_properties.push('invalid value for "paid_amt", paid_amt cannot be nil.')
      end

      if @partial_loss.nil?
        invalid_properties.push('invalid value for "partial_loss", partial_loss cannot be nil.')
      end

      if !@pharmacy_name.nil? && @pharmacy_name.to_s.length > 128
        invalid_properties.push('invalid value for "pharmacy_name", the character length must be smaller than or equal to 128.')
      end

      if !@place_of_service.nil? && @place_of_service.to_s.length > 5
        invalid_properties.push('invalid value for "place_of_service", the character length must be smaller than or equal to 5.')
      end

      if @plan_price.nil?
        invalid_properties.push('invalid value for "plan_price", plan_price cannot be nil.')
      end

      if @premium_deduction.nil?
        invalid_properties.push('invalid value for "premium_deduction", premium_deduction cannot be nil.')
      end

      if !@prescriber_id.nil? && @prescriber_id.to_s.length > 32
        invalid_properties.push('invalid value for "prescriber_id", the character length must be smaller than or equal to 32.')
      end

      if !@prescription_number.nil? && @prescription_number.to_s.length > 50
        invalid_properties.push('invalid value for "prescription_number", the character length must be smaller than or equal to 50.')
      end

      if @principal.nil?
        invalid_properties.push('invalid value for "principal", principal cannot be nil.')
      end

      if !@procedure_code.nil? && @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      if !@procedure_code2.nil? && @procedure_code2.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code2", the character length must be smaller than or equal to 8.')
      end

      if @root.nil?
        invalid_properties.push('invalid value for "root", root cannot be nil.')
      end

      if @social_security.nil?
        invalid_properties.push('invalid value for "social_security", social_security cannot be nil.')
      end

      if @state_tax.nil?
        invalid_properties.push('invalid value for "state_tax", state_tax cannot be nil.')
      end

      if !@state_tax_state.nil? && @state_tax_state.to_s.length > 2
        invalid_properties.push('invalid value for "state_tax_state", the character length must be smaller than or equal to 2.')
      end

      if !@status_code.nil? && @status_code.to_s.length > 1
        invalid_properties.push('invalid value for "status_code", the character length must be smaller than or equal to 1.')
      end

      if @uc_r_price.nil?
        invalid_properties.push('invalid value for "uc_r_price", uc_r_price cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @with_hold_amt.nil?
        invalid_properties.push('invalid value for "with_hold_amt", with_hold_amt cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_pre_batch_detail_key.nil?
      return false if !@ans_i_code.nil? && @ans_i_code.to_s.length > 8
      return false if !@ap_c_code.nil? && @ap_c_code.to_s.length > 8
      return false if !@adjusted_from_adjustment_line.nil? && @adjusted_from_adjustment_line.to_s.length > 3
      return false if !@adjusted_from_line.nil? && @adjusted_from_line.to_s.length > 2
      return false if @adjustment_seq.nil?
      return false if @adjustment_seq.to_s.length > 3
      return false if @adjustment_seq.to_s.length < 1
      return false if !@auth_number.nil? && @auth_number.to_s.length > 20
      return false if !@auth_required.nil? && @auth_required.to_s.length > 1
      return false if @batch_claim.nil?
      return false if @batch_number.nil?
      return false if !@benefit_code.nil? && @benefit_code.to_s.length > 10
      return false if @billed_price.nil?
      return false if !@brand_indicator.nil? && @brand_indicator.to_s.length > 1
      return false if @buccal.nil?
      return false if @co_b_amt.nil?
      return false if @claim_seq.nil?
      return false if @claim_seq.to_s.length > 2
      return false if @claim_seq.to_s.length < 1
      return false if @co_ins_amt.nil?
      return false if @co_pay_amt.nil?
      return false if @deductible_amt.nil?
      return false if !@diagnosis_code.nil? && @diagnosis_code.to_s.length > 8
      return false if @discount_amt.nil?
      return false if @distal.nil?
      return false if !@drug_code.nil? && @drug_code.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@ex_code2.nil? && @ex_code2.to_s.length > 6
      return false if !@ex_code3.nil? && @ex_code3.to_s.length > 6
      return false if @fica.nil?
      return false if @facial.nil?
      return false if @federal_tax.nil?
      return false if !@formulary_indicator.nil? && @formulary_indicator.to_s.length > 1
      return false if @incisal.nil?
      return false if @interest.nil?
      return false if @labial.nil?
      return false if !@line_control_number.nil? && @line_control_number.to_s.length > 64
      return false if @lingual.nil?
      return false if !@mail_order_indicator.nil? && @mail_order_indicator.to_s.length > 1
      return false if @mesial.nil?
      return false if !@modifier.nil? && @modifier.to_s.length > 8
      return false if !@modifier_2.nil? && @modifier_2.to_s.length > 8
      return false if !@modifier_3.nil? && @modifier_3.to_s.length > 8
      return false if !@modifier_4.nil? && @modifier_4.to_s.length > 8
      return false if @not_covered_amt.nil?
      return false if @occlusal.nil?
      return false if !@oral_cavity_designation_code_1.nil? && @oral_cavity_designation_code_1.to_s.length > 3
      return false if !@oral_cavity_designation_code_2.nil? && @oral_cavity_designation_code_2.to_s.length > 3
      return false if !@oral_cavity_designation_code_3.nil? && @oral_cavity_designation_code_3.to_s.length > 3
      return false if !@oral_cavity_designation_code_4.nil? && @oral_cavity_designation_code_4.to_s.length > 3
      return false if !@oral_cavity_designation_code_5.nil? && @oral_cavity_designation_code_5.to_s.length > 3
      return false if @paid_amt.nil?
      return false if @partial_loss.nil?
      return false if !@pharmacy_name.nil? && @pharmacy_name.to_s.length > 128
      return false if !@place_of_service.nil? && @place_of_service.to_s.length > 5
      return false if @plan_price.nil?
      return false if @premium_deduction.nil?
      return false if !@prescriber_id.nil? && @prescriber_id.to_s.length > 32
      return false if !@prescription_number.nil? && @prescription_number.to_s.length > 50
      return false if @principal.nil?
      return false if !@procedure_code.nil? && @procedure_code.to_s.length > 8
      return false if !@procedure_code2.nil? && @procedure_code2.to_s.length > 8
      return false if @root.nil?
      return false if @social_security.nil?
      return false if @state_tax.nil?
      return false if !@state_tax_state.nil? && @state_tax_state.to_s.length > 2
      return false if !@status_code.nil? && @status_code.to_s.length > 1
      return false if @uc_r_price.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @with_hold_amt.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_pre_batch_detail_key Value to be assigned
    def claim_pre_batch_detail_key=(claim_pre_batch_detail_key)
      if claim_pre_batch_detail_key.nil?
        fail ArgumentError, 'claim_pre_batch_detail_key cannot be nil'
      end

      @claim_pre_batch_detail_key = claim_pre_batch_detail_key
    end

    # Custom attribute writer method with validation
    # @param [Object] ans_i_code Value to be assigned
    def ans_i_code=(ans_i_code)
      if !ans_i_code.nil? && ans_i_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "ans_i_code", the character length must be smaller than or equal to 8.'
      end

      @ans_i_code = ans_i_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ap_c_code Value to be assigned
    def ap_c_code=(ap_c_code)
      if !ap_c_code.nil? && ap_c_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "ap_c_code", the character length must be smaller than or equal to 8.'
      end

      @ap_c_code = ap_c_code
    end

    # Custom attribute writer method with validation
    # @param [Object] adjusted_from_adjustment_line Value to be assigned
    def adjusted_from_adjustment_line=(adjusted_from_adjustment_line)
      if !adjusted_from_adjustment_line.nil? && adjusted_from_adjustment_line.to_s.length > 3
        fail ArgumentError, 'invalid value for "adjusted_from_adjustment_line", the character length must be smaller than or equal to 3.'
      end

      @adjusted_from_adjustment_line = adjusted_from_adjustment_line
    end

    # Custom attribute writer method with validation
    # @param [Object] adjusted_from_line Value to be assigned
    def adjusted_from_line=(adjusted_from_line)
      if !adjusted_from_line.nil? && adjusted_from_line.to_s.length > 2
        fail ArgumentError, 'invalid value for "adjusted_from_line", the character length must be smaller than or equal to 2.'
      end

      @adjusted_from_line = adjusted_from_line
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_seq Value to be assigned
    def adjustment_seq=(adjustment_seq)
      if adjustment_seq.nil?
        fail ArgumentError, 'adjustment_seq cannot be nil'
      end

      if adjustment_seq.to_s.length > 3
        fail ArgumentError, 'invalid value for "adjustment_seq", the character length must be smaller than or equal to 3.'
      end

      if adjustment_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_seq", the character length must be great than or equal to 1.'
      end

      @adjustment_seq = adjustment_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if !auth_number.nil? && auth_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "auth_number", the character length must be smaller than or equal to 20.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_required Value to be assigned
    def auth_required=(auth_required)
      if !auth_required.nil? && auth_required.to_s.length > 1
        fail ArgumentError, 'invalid value for "auth_required", the character length must be smaller than or equal to 1.'
      end

      @auth_required = auth_required
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_claim Value to be assigned
    def batch_claim=(batch_claim)
      if batch_claim.nil?
        fail ArgumentError, 'batch_claim cannot be nil'
      end

      @batch_claim = batch_claim
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if !benefit_code.nil? && benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] billed_price Value to be assigned
    def billed_price=(billed_price)
      if billed_price.nil?
        fail ArgumentError, 'billed_price cannot be nil'
      end

      @billed_price = billed_price
    end

    # Custom attribute writer method with validation
    # @param [Object] brand_indicator Value to be assigned
    def brand_indicator=(brand_indicator)
      if !brand_indicator.nil? && brand_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "brand_indicator", the character length must be smaller than or equal to 1.'
      end

      @brand_indicator = brand_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] buccal Value to be assigned
    def buccal=(buccal)
      if buccal.nil?
        fail ArgumentError, 'buccal cannot be nil'
      end

      @buccal = buccal
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_amt Value to be assigned
    def co_b_amt=(co_b_amt)
      if co_b_amt.nil?
        fail ArgumentError, 'co_b_amt cannot be nil'
      end

      @co_b_amt = co_b_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_seq Value to be assigned
    def claim_seq=(claim_seq)
      if claim_seq.nil?
        fail ArgumentError, 'claim_seq cannot be nil'
      end

      if claim_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "claim_seq", the character length must be smaller than or equal to 2.'
      end

      if claim_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "claim_seq", the character length must be great than or equal to 1.'
      end

      @claim_seq = claim_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] co_ins_amt Value to be assigned
    def co_ins_amt=(co_ins_amt)
      if co_ins_amt.nil?
        fail ArgumentError, 'co_ins_amt cannot be nil'
      end

      @co_ins_amt = co_ins_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] co_pay_amt Value to be assigned
    def co_pay_amt=(co_pay_amt)
      if co_pay_amt.nil?
        fail ArgumentError, 'co_pay_amt cannot be nil'
      end

      @co_pay_amt = co_pay_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] deductible_amt Value to be assigned
    def deductible_amt=(deductible_amt)
      if deductible_amt.nil?
        fail ArgumentError, 'deductible_amt cannot be nil'
      end

      @deductible_amt = deductible_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnosis_code Value to be assigned
    def diagnosis_code=(diagnosis_code)
      if !diagnosis_code.nil? && diagnosis_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnosis_code", the character length must be smaller than or equal to 8.'
      end

      @diagnosis_code = diagnosis_code
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_amt Value to be assigned
    def discount_amt=(discount_amt)
      if discount_amt.nil?
        fail ArgumentError, 'discount_amt cannot be nil'
      end

      @discount_amt = discount_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] distal Value to be assigned
    def distal=(distal)
      if distal.nil?
        fail ArgumentError, 'distal cannot be nil'
      end

      @distal = distal
    end

    # Custom attribute writer method with validation
    # @param [Object] drug_code Value to be assigned
    def drug_code=(drug_code)
      if !drug_code.nil? && drug_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "drug_code", the character length must be smaller than or equal to 20.'
      end

      @drug_code = drug_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code2 Value to be assigned
    def ex_code2=(ex_code2)
      if !ex_code2.nil? && ex_code2.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code2", the character length must be smaller than or equal to 6.'
      end

      @ex_code2 = ex_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code3 Value to be assigned
    def ex_code3=(ex_code3)
      if !ex_code3.nil? && ex_code3.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code3", the character length must be smaller than or equal to 6.'
      end

      @ex_code3 = ex_code3
    end

    # Custom attribute writer method with validation
    # @param [Object] fica Value to be assigned
    def fica=(fica)
      if fica.nil?
        fail ArgumentError, 'fica cannot be nil'
      end

      @fica = fica
    end

    # Custom attribute writer method with validation
    # @param [Object] facial Value to be assigned
    def facial=(facial)
      if facial.nil?
        fail ArgumentError, 'facial cannot be nil'
      end

      @facial = facial
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_tax Value to be assigned
    def federal_tax=(federal_tax)
      if federal_tax.nil?
        fail ArgumentError, 'federal_tax cannot be nil'
      end

      @federal_tax = federal_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] formulary_indicator Value to be assigned
    def formulary_indicator=(formulary_indicator)
      if !formulary_indicator.nil? && formulary_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "formulary_indicator", the character length must be smaller than or equal to 1.'
      end

      @formulary_indicator = formulary_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] incisal Value to be assigned
    def incisal=(incisal)
      if incisal.nil?
        fail ArgumentError, 'incisal cannot be nil'
      end

      @incisal = incisal
    end

    # Custom attribute writer method with validation
    # @param [Object] interest Value to be assigned
    def interest=(interest)
      if interest.nil?
        fail ArgumentError, 'interest cannot be nil'
      end

      @interest = interest
    end

    # Custom attribute writer method with validation
    # @param [Object] labial Value to be assigned
    def labial=(labial)
      if labial.nil?
        fail ArgumentError, 'labial cannot be nil'
      end

      @labial = labial
    end

    # Custom attribute writer method with validation
    # @param [Object] line_control_number Value to be assigned
    def line_control_number=(line_control_number)
      if !line_control_number.nil? && line_control_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "line_control_number", the character length must be smaller than or equal to 64.'
      end

      @line_control_number = line_control_number
    end

    # Custom attribute writer method with validation
    # @param [Object] lingual Value to be assigned
    def lingual=(lingual)
      if lingual.nil?
        fail ArgumentError, 'lingual cannot be nil'
      end

      @lingual = lingual
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_order_indicator Value to be assigned
    def mail_order_indicator=(mail_order_indicator)
      if !mail_order_indicator.nil? && mail_order_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "mail_order_indicator", the character length must be smaller than or equal to 1.'
      end

      @mail_order_indicator = mail_order_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] mesial Value to be assigned
    def mesial=(mesial)
      if mesial.nil?
        fail ArgumentError, 'mesial cannot be nil'
      end

      @mesial = mesial
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier Value to be assigned
    def modifier=(modifier)
      if !modifier.nil? && modifier.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier", the character length must be smaller than or equal to 8.'
      end

      @modifier = modifier
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier_2 Value to be assigned
    def modifier_2=(modifier_2)
      if !modifier_2.nil? && modifier_2.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier_2", the character length must be smaller than or equal to 8.'
      end

      @modifier_2 = modifier_2
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier_3 Value to be assigned
    def modifier_3=(modifier_3)
      if !modifier_3.nil? && modifier_3.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier_3", the character length must be smaller than or equal to 8.'
      end

      @modifier_3 = modifier_3
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier_4 Value to be assigned
    def modifier_4=(modifier_4)
      if !modifier_4.nil? && modifier_4.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier_4", the character length must be smaller than or equal to 8.'
      end

      @modifier_4 = modifier_4
    end

    # Custom attribute writer method with validation
    # @param [Object] not_covered_amt Value to be assigned
    def not_covered_amt=(not_covered_amt)
      if not_covered_amt.nil?
        fail ArgumentError, 'not_covered_amt cannot be nil'
      end

      @not_covered_amt = not_covered_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] occlusal Value to be assigned
    def occlusal=(occlusal)
      if occlusal.nil?
        fail ArgumentError, 'occlusal cannot be nil'
      end

      @occlusal = occlusal
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_1 Value to be assigned
    def oral_cavity_designation_code_1=(oral_cavity_designation_code_1)
      if !oral_cavity_designation_code_1.nil? && oral_cavity_designation_code_1.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_1", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_1 = oral_cavity_designation_code_1
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_2 Value to be assigned
    def oral_cavity_designation_code_2=(oral_cavity_designation_code_2)
      if !oral_cavity_designation_code_2.nil? && oral_cavity_designation_code_2.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_2", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_2 = oral_cavity_designation_code_2
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_3 Value to be assigned
    def oral_cavity_designation_code_3=(oral_cavity_designation_code_3)
      if !oral_cavity_designation_code_3.nil? && oral_cavity_designation_code_3.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_3", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_3 = oral_cavity_designation_code_3
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_4 Value to be assigned
    def oral_cavity_designation_code_4=(oral_cavity_designation_code_4)
      if !oral_cavity_designation_code_4.nil? && oral_cavity_designation_code_4.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_4", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_4 = oral_cavity_designation_code_4
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_5 Value to be assigned
    def oral_cavity_designation_code_5=(oral_cavity_designation_code_5)
      if !oral_cavity_designation_code_5.nil? && oral_cavity_designation_code_5.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_5", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_5 = oral_cavity_designation_code_5
    end

    # Custom attribute writer method with validation
    # @param [Object] paid_amt Value to be assigned
    def paid_amt=(paid_amt)
      if paid_amt.nil?
        fail ArgumentError, 'paid_amt cannot be nil'
      end

      @paid_amt = paid_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_loss Value to be assigned
    def partial_loss=(partial_loss)
      if partial_loss.nil?
        fail ArgumentError, 'partial_loss cannot be nil'
      end

      @partial_loss = partial_loss
    end

    # Custom attribute writer method with validation
    # @param [Object] pharmacy_name Value to be assigned
    def pharmacy_name=(pharmacy_name)
      if !pharmacy_name.nil? && pharmacy_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "pharmacy_name", the character length must be smaller than or equal to 128.'
      end

      @pharmacy_name = pharmacy_name
    end

    # Custom attribute writer method with validation
    # @param [Object] place_of_service Value to be assigned
    def place_of_service=(place_of_service)
      if !place_of_service.nil? && place_of_service.to_s.length > 5
        fail ArgumentError, 'invalid value for "place_of_service", the character length must be smaller than or equal to 5.'
      end

      @place_of_service = place_of_service
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_price Value to be assigned
    def plan_price=(plan_price)
      if plan_price.nil?
        fail ArgumentError, 'plan_price cannot be nil'
      end

      @plan_price = plan_price
    end

    # Custom attribute writer method with validation
    # @param [Object] premium_deduction Value to be assigned
    def premium_deduction=(premium_deduction)
      if premium_deduction.nil?
        fail ArgumentError, 'premium_deduction cannot be nil'
      end

      @premium_deduction = premium_deduction
    end

    # Custom attribute writer method with validation
    # @param [Object] prescriber_id Value to be assigned
    def prescriber_id=(prescriber_id)
      if !prescriber_id.nil? && prescriber_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "prescriber_id", the character length must be smaller than or equal to 32.'
      end

      @prescriber_id = prescriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] prescription_number Value to be assigned
    def prescription_number=(prescription_number)
      if !prescription_number.nil? && prescription_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "prescription_number", the character length must be smaller than or equal to 50.'
      end

      @prescription_number = prescription_number
    end

    # Custom attribute writer method with validation
    # @param [Object] principal Value to be assigned
    def principal=(principal)
      if principal.nil?
        fail ArgumentError, 'principal cannot be nil'
      end

      @principal = principal
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if !procedure_code.nil? && procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      @procedure_code = procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code2 Value to be assigned
    def procedure_code2=(procedure_code2)
      if !procedure_code2.nil? && procedure_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code2", the character length must be smaller than or equal to 8.'
      end

      @procedure_code2 = procedure_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] root Value to be assigned
    def root=(root)
      if root.nil?
        fail ArgumentError, 'root cannot be nil'
      end

      @root = root
    end

    # Custom attribute writer method with validation
    # @param [Object] social_security Value to be assigned
    def social_security=(social_security)
      if social_security.nil?
        fail ArgumentError, 'social_security cannot be nil'
      end

      @social_security = social_security
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax Value to be assigned
    def state_tax=(state_tax)
      if state_tax.nil?
        fail ArgumentError, 'state_tax cannot be nil'
      end

      @state_tax = state_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax_state Value to be assigned
    def state_tax_state=(state_tax_state)
      if !state_tax_state.nil? && state_tax_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state_tax_state", the character length must be smaller than or equal to 2.'
      end

      @state_tax_state = state_tax_state
    end

    # Custom attribute writer method with validation
    # @param [Object] status_code Value to be assigned
    def status_code=(status_code)
      if !status_code.nil? && status_code.to_s.length > 1
        fail ArgumentError, 'invalid value for "status_code", the character length must be smaller than or equal to 1.'
      end

      @status_code = status_code
    end

    # Custom attribute writer method with validation
    # @param [Object] uc_r_price Value to be assigned
    def uc_r_price=(uc_r_price)
      if uc_r_price.nil?
        fail ArgumentError, 'uc_r_price cannot be nil'
      end

      @uc_r_price = uc_r_price
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] with_hold_amt Value to be assigned
    def with_hold_amt=(with_hold_amt)
      if with_hold_amt.nil?
        fail ArgumentError, 'with_hold_amt cannot be nil'
      end

      @with_hold_amt = with_hold_amt
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_pre_batch_detail_key == o.claim_pre_batch_detail_key &&
          ans_i_code == o.ans_i_code &&
          ap_c_code == o.ap_c_code &&
          adjusted_from_adjustment_line == o.adjusted_from_adjustment_line &&
          adjusted_from_line == o.adjusted_from_line &&
          adjustment_seq == o.adjustment_seq &&
          auth_number == o.auth_number &&
          auth_required == o.auth_required &&
          batch_claim == o.batch_claim &&
          batch_number == o.batch_number &&
          benefit_code == o.benefit_code &&
          benefit_rate_applied == o.benefit_rate_applied &&
          billed_price == o.billed_price &&
          brand_indicator == o.brand_indicator &&
          buccal == o.buccal &&
          co_b_amt == o.co_b_amt &&
          co_b_hold == o.co_b_hold &&
          co_b_mem_resp == o.co_b_mem_resp &&
          claim_seq == o.claim_seq &&
          co_ins_amt == o.co_ins_amt &&
          co_pay_amt == o.co_pay_amt &&
          days_supply == o.days_supply &&
          deductible_amt == o.deductible_amt &&
          diagnosis_code == o.diagnosis_code &&
          discount_amt == o.discount_amt &&
          dispense_as_written == o.dispense_as_written &&
          distal == o.distal &&
          drug_code == o.drug_code &&
          drug_quantity == o.drug_quantity &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          ex_code2 == o.ex_code2 &&
          ex_code3 == o.ex_code3 &&
          fica == o.fica &&
          facial == o.facial &&
          federal_amount_to_tax == o.federal_amount_to_tax &&
          federal_tax == o.federal_tax &&
          federal_tax_flat == o.federal_tax_flat &&
          fill_date == o.fill_date &&
          formulary_indicator == o.formulary_indicator &&
          incisal == o.incisal &&
          interest == o.interest &&
          labial == o.labial &&
          line_control_number == o.line_control_number &&
          lingual == o.lingual &&
          local_tax == o.local_tax &&
          mail_order_indicator == o.mail_order_indicator &&
          medicare_amount_to_tax == o.medicare_amount_to_tax &&
          medicare_tax == o.medicare_tax &&
          mesial == o.mesial &&
          modifier == o.modifier &&
          modifier_2 == o.modifier_2 &&
          modifier_3 == o.modifier_3 &&
          modifier_4 == o.modifier_4 &&
          not_covered_amt == o.not_covered_amt &&
          occlusal == o.occlusal &&
          oral_cavity_designation_code_1 == o.oral_cavity_designation_code_1 &&
          oral_cavity_designation_code_2 == o.oral_cavity_designation_code_2 &&
          oral_cavity_designation_code_3 == o.oral_cavity_designation_code_3 &&
          oral_cavity_designation_code_4 == o.oral_cavity_designation_code_4 &&
          oral_cavity_designation_code_5 == o.oral_cavity_designation_code_5 &&
          other_deduction_amount == o.other_deduction_amount &&
          paid_amt == o.paid_amt &&
          partial_loss == o.partial_loss &&
          pharmacy_name == o.pharmacy_name &&
          place_of_service == o.place_of_service &&
          plan_price == o.plan_price &&
          premium_deduction == o.premium_deduction &&
          prescriber_id == o.prescriber_id &&
          prescription_date == o.prescription_date &&
          prescription_number == o.prescription_number &&
          principal == o.principal &&
          procedure_code == o.procedure_code &&
          procedure_code2 == o.procedure_code2 &&
          qualifying_payment_amount == o.qualifying_payment_amount &&
          reason_code == o.reason_code &&
          refill_indicator == o.refill_indicator &&
          root == o.root &&
          service_date == o.service_date &&
          service_thru == o.service_thru &&
          soc_sec_amount_to_tax == o.soc_sec_amount_to_tax &&
          social_security == o.social_security &&
          state_amount_to_tax == o.state_amount_to_tax &&
          state_tax == o.state_tax &&
          state_tax_flat == o.state_tax_flat &&
          state_tax_state == o.state_tax_state &&
          status_code == o.status_code &&
          svc_count == o.svc_count &&
          taxable_amount == o.taxable_amount &&
          tooth_number == o.tooth_number &&
          uc_r_price == o.uc_r_price &&
          unit_dose == o.unit_dose &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          with_hold_amt == o.with_hold_amt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_pre_batch_detail_key, ans_i_code, ap_c_code, adjusted_from_adjustment_line, adjusted_from_line, adjustment_seq, auth_number, auth_required, batch_claim, batch_number, benefit_code, benefit_rate_applied, billed_price, brand_indicator, buccal, co_b_amt, co_b_hold, co_b_mem_resp, claim_seq, co_ins_amt, co_pay_amt, days_supply, deductible_amt, diagnosis_code, discount_amt, dispense_as_written, distal, drug_code, drug_quantity, entry_date, entry_user, ex_code, ex_code2, ex_code3, fica, facial, federal_amount_to_tax, federal_tax, federal_tax_flat, fill_date, formulary_indicator, incisal, interest, labial, line_control_number, lingual, local_tax, mail_order_indicator, medicare_amount_to_tax, medicare_tax, mesial, modifier, modifier_2, modifier_3, modifier_4, not_covered_amt, occlusal, oral_cavity_designation_code_1, oral_cavity_designation_code_2, oral_cavity_designation_code_3, oral_cavity_designation_code_4, oral_cavity_designation_code_5, other_deduction_amount, paid_amt, partial_loss, pharmacy_name, place_of_service, plan_price, premium_deduction, prescriber_id, prescription_date, prescription_number, principal, procedure_code, procedure_code2, qualifying_payment_amount, reason_code, refill_indicator, root, service_date, service_thru, soc_sec_amount_to_tax, social_security, state_amount_to_tax, state_tax, state_tax_flat, state_tax_state, status_code, svc_count, taxable_amount, tooth_number, uc_r_price, unit_dose, update_date, update_user, with_hold_amt].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
