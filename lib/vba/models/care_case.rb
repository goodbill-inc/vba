=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CareCase
    # Identifier of the case.
    attr_accessor :case_key

    # User Managed field: Date of next Appointment
    attr_accessor :appointment_date

    # User managed field: Date when the case was assessed.
    attr_accessor :assessment_date

    # Identifies the type care associated with the case.
    attr_accessor :care_plan_key

    # Who or what Entity the Case was assigned to.
    attr_accessor :case_assign_type

    # Day when the case ended.
    attr_accessor :case_end_date

    # Identifier of the case.
    attr_accessor :case_id

    # Identifies the priority of the case. 'Case Priorities' are configured within 'Care Management Configuration'.
    attr_accessor :case_priority

    # Identifies the reason of the case. 'Case Reasons' are configured within 'Care Management Configuration'.
    attr_accessor :case_reason

    # User Managed field used when Auto Assigning cases.
    attr_accessor :case_score

    # Day when the case began.
    attr_accessor :case_start_date

    # Identifies the status of the case. 'Case Statuses' are configured within 'Care Management Configuration'.
    attr_accessor :case_status

    # ID of the Division associated with the case.
    attr_accessor :division_id

    # User Managed field for whether or not to contact member.
    attr_accessor :do_not_contact

    # User Managed field: Date elegibility verified
    attr_accessor :eligibility_verified

    # User Managed field: Comment about Eligibility verification.
    attr_accessor :eligibility_verified_comment

    # The identifier of the case close reason.
    attr_accessor :case_close_reason

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # ID of the Group associated with the case.
    attr_accessor :group_id

    # Sequential identifier of the Member associated with the case.
    attr_accessor :member_seq

    # ID of the Provider associated with the case.
    attr_accessor :provider_id

    # ID of the Subscriber associated with the case.
    attr_accessor :subscriber_id

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'case_key' => :'case_Key',
        :'appointment_date' => :'appointment_Date',
        :'assessment_date' => :'assessment_Date',
        :'care_plan_key' => :'carePlan_Key',
        :'case_assign_type' => :'case_Assign_Type',
        :'case_end_date' => :'case_End_Date',
        :'case_id' => :'case_ID',
        :'case_priority' => :'case_Priority',
        :'case_reason' => :'case_Reason',
        :'case_score' => :'case_Score',
        :'case_start_date' => :'case_Start_Date',
        :'case_status' => :'case_Status',
        :'division_id' => :'division_ID',
        :'do_not_contact' => :'do_Not_Contact',
        :'eligibility_verified' => :'eligibility_Verified',
        :'eligibility_verified_comment' => :'eligibility_Verified_Comment',
        :'case_close_reason' => :'case_Close_Reason',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'member_seq' => :'member_Seq',
        :'provider_id' => :'provider_ID',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'case_key' => :'Integer',
        :'appointment_date' => :'Time',
        :'assessment_date' => :'Time',
        :'care_plan_key' => :'Integer',
        :'case_assign_type' => :'String',
        :'case_end_date' => :'Time',
        :'case_id' => :'String',
        :'case_priority' => :'Integer',
        :'case_reason' => :'String',
        :'case_score' => :'Float',
        :'case_start_date' => :'Time',
        :'case_status' => :'String',
        :'division_id' => :'String',
        :'do_not_contact' => :'Boolean',
        :'eligibility_verified' => :'Time',
        :'eligibility_verified_comment' => :'String',
        :'case_close_reason' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'member_seq' => :'String',
        :'provider_id' => :'String',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'appointment_date',
        :'assessment_date',
        :'case_assign_type',
        :'case_end_date',
        :'case_id',
        :'case_priority',
        :'case_reason',
        :'case_score',
        :'case_start_date',
        :'case_status',
        :'division_id',
        :'eligibility_verified',
        :'eligibility_verified_comment',
        :'case_close_reason',
        :'entry_user',
        :'group_id',
        :'member_seq',
        :'provider_id',
        :'subscriber_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CareCase` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CareCase`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'case_key')
        self.case_key = attributes[:'case_key']
      else
        self.case_key = nil
      end

      if attributes.key?(:'appointment_date')
        self.appointment_date = attributes[:'appointment_date']
      end

      if attributes.key?(:'assessment_date')
        self.assessment_date = attributes[:'assessment_date']
      end

      if attributes.key?(:'care_plan_key')
        self.care_plan_key = attributes[:'care_plan_key']
      else
        self.care_plan_key = nil
      end

      if attributes.key?(:'case_assign_type')
        self.case_assign_type = attributes[:'case_assign_type']
      end

      if attributes.key?(:'case_end_date')
        self.case_end_date = attributes[:'case_end_date']
      end

      if attributes.key?(:'case_id')
        self.case_id = attributes[:'case_id']
      end

      if attributes.key?(:'case_priority')
        self.case_priority = attributes[:'case_priority']
      end

      if attributes.key?(:'case_reason')
        self.case_reason = attributes[:'case_reason']
      end

      if attributes.key?(:'case_score')
        self.case_score = attributes[:'case_score']
      end

      if attributes.key?(:'case_start_date')
        self.case_start_date = attributes[:'case_start_date']
      end

      if attributes.key?(:'case_status')
        self.case_status = attributes[:'case_status']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'do_not_contact')
        self.do_not_contact = attributes[:'do_not_contact']
      else
        self.do_not_contact = nil
      end

      if attributes.key?(:'eligibility_verified')
        self.eligibility_verified = attributes[:'eligibility_verified']
      end

      if attributes.key?(:'eligibility_verified_comment')
        self.eligibility_verified_comment = attributes[:'eligibility_verified_comment']
      end

      if attributes.key?(:'case_close_reason')
        self.case_close_reason = attributes[:'case_close_reason']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @case_key.nil?
        invalid_properties.push('invalid value for "case_key", case_key cannot be nil.')
      end

      if @care_plan_key.nil?
        invalid_properties.push('invalid value for "care_plan_key", care_plan_key cannot be nil.')
      end

      if !@case_assign_type.nil? && @case_assign_type.to_s.length > 16
        invalid_properties.push('invalid value for "case_assign_type", the character length must be smaller than or equal to 16.')
      end

      if !@case_id.nil? && @case_id.to_s.length > 64
        invalid_properties.push('invalid value for "case_id", the character length must be smaller than or equal to 64.')
      end

      if !@case_reason.nil? && @case_reason.to_s.length > 32
        invalid_properties.push('invalid value for "case_reason", the character length must be smaller than or equal to 32.')
      end

      if !@case_status.nil? && @case_status.to_s.length > 8
        invalid_properties.push('invalid value for "case_status", the character length must be smaller than or equal to 8.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @do_not_contact.nil?
        invalid_properties.push('invalid value for "do_not_contact", do_not_contact cannot be nil.')
      end

      if !@eligibility_verified_comment.nil? && @eligibility_verified_comment.to_s.length > 512
        invalid_properties.push('invalid value for "eligibility_verified_comment", the character length must be smaller than or equal to 512.')
      end

      if !@case_close_reason.nil? && @case_close_reason.to_s.length > 32
        invalid_properties.push('invalid value for "case_close_reason", the character length must be smaller than or equal to 32.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @case_key.nil?
      return false if @care_plan_key.nil?
      return false if !@case_assign_type.nil? && @case_assign_type.to_s.length > 16
      return false if !@case_id.nil? && @case_id.to_s.length > 64
      return false if !@case_reason.nil? && @case_reason.to_s.length > 32
      return false if !@case_status.nil? && @case_status.to_s.length > 8
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if @do_not_contact.nil?
      return false if !@eligibility_verified_comment.nil? && @eligibility_verified_comment.to_s.length > 512
      return false if !@case_close_reason.nil? && @case_close_reason.to_s.length > 32
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] case_key Value to be assigned
    def case_key=(case_key)
      if case_key.nil?
        fail ArgumentError, 'case_key cannot be nil'
      end

      @case_key = case_key
    end

    # Custom attribute writer method with validation
    # @param [Object] care_plan_key Value to be assigned
    def care_plan_key=(care_plan_key)
      if care_plan_key.nil?
        fail ArgumentError, 'care_plan_key cannot be nil'
      end

      @care_plan_key = care_plan_key
    end

    # Custom attribute writer method with validation
    # @param [Object] case_assign_type Value to be assigned
    def case_assign_type=(case_assign_type)
      if !case_assign_type.nil? && case_assign_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "case_assign_type", the character length must be smaller than or equal to 16.'
      end

      @case_assign_type = case_assign_type
    end

    # Custom attribute writer method with validation
    # @param [Object] case_id Value to be assigned
    def case_id=(case_id)
      if !case_id.nil? && case_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "case_id", the character length must be smaller than or equal to 64.'
      end

      @case_id = case_id
    end

    # Custom attribute writer method with validation
    # @param [Object] case_reason Value to be assigned
    def case_reason=(case_reason)
      if !case_reason.nil? && case_reason.to_s.length > 32
        fail ArgumentError, 'invalid value for "case_reason", the character length must be smaller than or equal to 32.'
      end

      @case_reason = case_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] case_status Value to be assigned
    def case_status=(case_status)
      if !case_status.nil? && case_status.to_s.length > 8
        fail ArgumentError, 'invalid value for "case_status", the character length must be smaller than or equal to 8.'
      end

      @case_status = case_status
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] do_not_contact Value to be assigned
    def do_not_contact=(do_not_contact)
      if do_not_contact.nil?
        fail ArgumentError, 'do_not_contact cannot be nil'
      end

      @do_not_contact = do_not_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] eligibility_verified_comment Value to be assigned
    def eligibility_verified_comment=(eligibility_verified_comment)
      if !eligibility_verified_comment.nil? && eligibility_verified_comment.to_s.length > 512
        fail ArgumentError, 'invalid value for "eligibility_verified_comment", the character length must be smaller than or equal to 512.'
      end

      @eligibility_verified_comment = eligibility_verified_comment
    end

    # Custom attribute writer method with validation
    # @param [Object] case_close_reason Value to be assigned
    def case_close_reason=(case_close_reason)
      if !case_close_reason.nil? && case_close_reason.to_s.length > 32
        fail ArgumentError, 'invalid value for "case_close_reason", the character length must be smaller than or equal to 32.'
      end

      @case_close_reason = case_close_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          case_key == o.case_key &&
          appointment_date == o.appointment_date &&
          assessment_date == o.assessment_date &&
          care_plan_key == o.care_plan_key &&
          case_assign_type == o.case_assign_type &&
          case_end_date == o.case_end_date &&
          case_id == o.case_id &&
          case_priority == o.case_priority &&
          case_reason == o.case_reason &&
          case_score == o.case_score &&
          case_start_date == o.case_start_date &&
          case_status == o.case_status &&
          division_id == o.division_id &&
          do_not_contact == o.do_not_contact &&
          eligibility_verified == o.eligibility_verified &&
          eligibility_verified_comment == o.eligibility_verified_comment &&
          case_close_reason == o.case_close_reason &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          member_seq == o.member_seq &&
          provider_id == o.provider_id &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [case_key, appointment_date, assessment_date, care_plan_key, case_assign_type, case_end_date, case_id, case_priority, case_reason, case_score, case_start_date, case_status, division_id, do_not_contact, eligibility_verified, eligibility_verified_comment, case_close_reason, entry_date, entry_user, group_id, member_seq, provider_id, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
