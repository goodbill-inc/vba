=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Auth
    # Unique identifier assigned to the authorization.
    attr_accessor :auth_number

    # Date when authorization usage begins/began.
    attr_accessor :actual_from

    # Location where the authorization was used.
    attr_accessor :actual_location

    # Date when authorization usage ends/ended.
    attr_accessor :actual_thru

    # No longer in use. This would track if an Auth had been adjusted to increase the number of approved visits. This is now done through the Auth Adjustment process where a new Auth is created referencing the original Auth.
    attr_accessor :additional_visits

    # Total approved amount that has been used.
    attr_accessor :amount_actual

    # Approved amount of the authorization.
    attr_accessor :amount_approved

    # Denied amount of the authorization.
    attr_accessor :amount_denied

    # Requested amount of the authorization.
    attr_accessor :amount_requested

    # User that either approved, pended, or denied the authorization.
    attr_accessor :approved_by

    # Date when the authorization was approved, denied, or pended as specified by the status field.
    attr_accessor :approved_date

    # Authorization frequency that is/was approved.
    attr_accessor :approved_frequency

    # Date when the authorization approval starts/started.
    attr_accessor :approved_from

    # Approved location of the authorization.
    attr_accessor :approved_location

    # Date when the authorization approval expires/expired.
    attr_accessor :approved_thru

    # User that the authorization was assigned to.
    attr_accessor :assigned_user

    # Information field used in custom reporting.
    attr_accessor :audit_flag

    # Code that indicates the authorization status.
    attr_accessor :auth_code

    # Indicates the type of authorization. Auth types can be configured within 'Auth Configuration'.
    attr_accessor :auth_type

    # Check this box to indicate that the authorization is related to an automotive accident.
    attr_accessor :auto_accident

    # No longer in use.
    attr_accessor :body_code_id

    # ID of the Care Manager associated with the auth.
    attr_accessor :care_manager_key

    # Informational field used to identify the case index.
    attr_accessor :case_index_actual

    # Informational field used to identify the case index.
    attr_accessor :case_index_approved

    # Informational field used to identify the case index.
    attr_accessor :case_index_denied

    # Informational field used to identify the case index.
    attr_accessor :case_index_requested

    # Informational field used to house the case number.
    attr_accessor :case_number

    # No longer in use.
    attr_accessor :city_code_id

    # Field no longer used. This is repalced by the Status field.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :closed

    # Identifies the category of the selected DRG Code.
    attr_accessor :dr_g_category

    # Specifies a DRG code that is to be associated with the authorization.
    attr_accessor :dr_g_code

    # Identifies that the authoization is associated with a claim that is affecting the patient's daily living.
    attr_accessor :daily_living

    # Date when the authorization denial starts/started.
    attr_accessor :denied_from

    # Date when the authorization denial expires/expired.
    attr_accessor :denied_thru

    # Date when the patient was discharged.
    attr_accessor :discharge_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Unique identifier assigned to the Provider associated with the Auth. This field can be populated by right-clicking and selecting 'Lookup' from the context menu.
    attr_accessor :federal_id

    # Indicates that the Auth was Initiated via IVR.
    attr_accessor :iv_r_flag

    # Date when the injury occurred.
    attr_accessor :injury_date

    # Sequential identifier assigned to the Member.
    attr_accessor :member_seq

    # Information field used in custom reporting.
    attr_accessor :monthly_amount

    # Field no longer used. For Notes/Comments/Narrative information you would use the Note Services area.
    attr_accessor :narrative

    # Indicates that the associated authorization is a new authorization or an extension of the original authorization.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :new_or_extended

    # Field that allows the User to add any additional information to the authorization.
    attr_accessor :notes

    # ID of the Provider who ordered this auth.
    attr_accessor :ordered_by_id

    # Name of the Provider who ordered this auth.
    attr_accessor :ordered_by_name

    # Information field used in custom reporting.
    attr_accessor :other_coverage_primary

    # Check this box to indicate that the associated Member has other insurance.
    attr_accessor :other_insurance

    # ID of the Payee associated with the auth.
    attr_accessor :payee_id

    # Unique identifier assigned to the plan.
    attr_accessor :plan_id

    # This field is no longer used as it has been replaced by the the Auth Adjustment process where an AuthReference record is created instead.
    attr_accessor :previous_auth

    # Check this box to indicate that previous treatment had been administered.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :previous_treatment

    # References Prior Auth
    attr_accessor :prior_auth

    # Unique identifier assigned to the Provider associated with the Auth. This field can be populated by right-clicking and selecting 'Lookup' from the context menu.
    attr_accessor :provider_id

    # Identifies that the authoization is associated with a claim where the patient is experiencing radiating pain.
    attr_accessor :radiating_pain

    # Identifies that the authoization is associated with a claim that is affecting the patient's range of motion.
    attr_accessor :range_of_motion

    # Date when the authorization was received.
    attr_accessor :received_date

    # Unique identifier assigned to the Provider who is referring. This field can be populated by right-clicking and selecting 'Lookup' from the context menu.
    attr_accessor :referred_by_id

    # Name of the referring Provider. This field is automatically populated by the 'Referred By ID' field.
    attr_accessor :referred_by_name

    # Information field used in custom reporting.
    attr_accessor :region

    # Date when the Reinsurance Notification report was run. Process automation will be prompted to send the auth reinsurance notification on this date.
    attr_accessor :reins_notification_date

    # Authorization frequency that is/was requested.
    attr_accessor :requested_frequency

    # Date when the authorization is/was requested to be effective.
    attr_accessor :requested_from

    # Requested location of the authorization.
    attr_accessor :requested_location

    # Date when the authorization is/was requested to expire.
    attr_accessor :requested_thru

    # Code used to identify the service type associated with the authorization.
    attr_accessor :service_code

    # Type of service associated with the authorization.
    attr_accessor :service_type

    # Identifies the current status of the authorization.
    attr_accessor :status

    # Unique identifier assigned to the Subscriber associated with the Auth. This field can be populated by right-clicking and selecting 'Lookup' from the context menu.
    attr_accessor :subscriber_id

    # Indicates if the Treatment Plan was downloaded from the application.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :t_plan_down_loaded

    # Indicates the date the Treatment Plan was downloaded from the application.
    attr_accessor :t_plan_down_loaded_date

    # Indicates the user what downloaded the Treatment Plan from the application.
    attr_accessor :t_plan_down_loaded_user

    # Flag indicating if this Auth has been printed as a Treatment Plan.
    attr_accessor :t_plan_printed

    # The date this Auth has been printed as a Treatment Plan.
    attr_accessor :t_plan_printed_date

    # No longer in use.
    attr_accessor :total_actual

    # No longer in use.
    attr_accessor :total_approved

    # No longer in use.
    attr_accessor :total_requested

    # No longer in use.
    attr_accessor :total_unit_type

    # Indicates the type of treatment that is being authorized.
    attr_accessor :treatment_type

    # No longer in use.
    attr_accessor :type_of_service

    # Unit type that is used for the associated service. Unit types can be configured in 'Auth Configuration'.
    attr_accessor :unit_type

    # Total number of approved units that have been used.
    attr_accessor :units_actual

    # Number of units approved as part of the authorization.
    attr_accessor :units_approved

    # Number of units denied as part of the authorization.
    attr_accessor :units_denied

    # Number of units requested as part of the authorization.
    attr_accessor :units_requested

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Check this box to indicate that the authorization request is urgent.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :urgent

    # Number of visits used as part of the authorization.
    attr_accessor :visits_actual

    # Number of visits approved as part of the authorization.
    attr_accessor :visits_approved

    # Number of visits requested as part of the authorization.
    attr_accessor :visits_requested

    # Number of visits that have been used up to the current date.
    attr_accessor :visits_to_date

    # Check this box to indicate that the authorization is related to work.
    attr_accessor :work_related

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_number' => :'auth_Number',
        :'actual_from' => :'actual_From',
        :'actual_location' => :'actual_Location',
        :'actual_thru' => :'actual_Thru',
        :'additional_visits' => :'additional_Visits',
        :'amount_actual' => :'amount_Actual',
        :'amount_approved' => :'amount_Approved',
        :'amount_denied' => :'amount_Denied',
        :'amount_requested' => :'amount_Requested',
        :'approved_by' => :'approved_By',
        :'approved_date' => :'approved_Date',
        :'approved_frequency' => :'approved_Frequency',
        :'approved_from' => :'approved_From',
        :'approved_location' => :'approved_Location',
        :'approved_thru' => :'approved_Thru',
        :'assigned_user' => :'assigned_User',
        :'audit_flag' => :'audit_Flag',
        :'auth_code' => :'auth_Code',
        :'auth_type' => :'auth_Type',
        :'auto_accident' => :'auto_Accident',
        :'body_code_id' => :'bodyCode_ID',
        :'care_manager_key' => :'careManager_Key',
        :'case_index_actual' => :'case_Index_Actual',
        :'case_index_approved' => :'case_Index_Approved',
        :'case_index_denied' => :'case_Index_Denied',
        :'case_index_requested' => :'case_Index_Requested',
        :'case_number' => :'case_Number',
        :'city_code_id' => :'cityCode_ID',
        :'closed' => :'closed',
        :'dr_g_category' => :'drG_Category',
        :'dr_g_code' => :'drG_Code',
        :'daily_living' => :'daily_Living',
        :'denied_from' => :'denied_From',
        :'denied_thru' => :'denied_Thru',
        :'discharge_date' => :'discharge_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'federal_id' => :'federal_ID',
        :'iv_r_flag' => :'ivR_Flag',
        :'injury_date' => :'injury_Date',
        :'member_seq' => :'member_Seq',
        :'monthly_amount' => :'monthly_Amount',
        :'narrative' => :'narrative',
        :'new_or_extended' => :'new_Or_Extended',
        :'notes' => :'notes',
        :'ordered_by_id' => :'ordered_By_ID',
        :'ordered_by_name' => :'ordered_By_Name',
        :'other_coverage_primary' => :'other_Coverage_Primary',
        :'other_insurance' => :'other_Insurance',
        :'payee_id' => :'payee_ID',
        :'plan_id' => :'plan_ID',
        :'previous_auth' => :'previous_Auth',
        :'previous_treatment' => :'previous_Treatment',
        :'prior_auth' => :'prior_Auth',
        :'provider_id' => :'provider_ID',
        :'radiating_pain' => :'radiating_Pain',
        :'range_of_motion' => :'range_Of_Motion',
        :'received_date' => :'received_Date',
        :'referred_by_id' => :'referred_By_ID',
        :'referred_by_name' => :'referred_By_Name',
        :'region' => :'region',
        :'reins_notification_date' => :'reinsNotification_Date',
        :'requested_frequency' => :'requested_Frequency',
        :'requested_from' => :'requested_From',
        :'requested_location' => :'requested_Location',
        :'requested_thru' => :'requested_Thru',
        :'service_code' => :'service_Code',
        :'service_type' => :'service_Type',
        :'status' => :'status',
        :'subscriber_id' => :'subscriber_ID',
        :'t_plan_down_loaded' => :'tPlan_DownLoaded',
        :'t_plan_down_loaded_date' => :'tPlan_DownLoaded_Date',
        :'t_plan_down_loaded_user' => :'tPlan_DownLoaded_User',
        :'t_plan_printed' => :'tPlan_Printed',
        :'t_plan_printed_date' => :'tPlan_Printed_Date',
        :'total_actual' => :'total_Actual',
        :'total_approved' => :'total_Approved',
        :'total_requested' => :'total_Requested',
        :'total_unit_type' => :'total_Unit_Type',
        :'treatment_type' => :'treatment_Type',
        :'type_of_service' => :'type_Of_Service',
        :'unit_type' => :'unit_Type',
        :'units_actual' => :'units_Actual',
        :'units_approved' => :'units_Approved',
        :'units_denied' => :'units_Denied',
        :'units_requested' => :'units_Requested',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'urgent' => :'urgent',
        :'visits_actual' => :'visits_Actual',
        :'visits_approved' => :'visits_Approved',
        :'visits_requested' => :'visits_Requested',
        :'visits_to_date' => :'visits_To_Date',
        :'work_related' => :'work_Related'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_number' => :'String',
        :'actual_from' => :'Time',
        :'actual_location' => :'String',
        :'actual_thru' => :'Time',
        :'additional_visits' => :'Float',
        :'amount_actual' => :'Float',
        :'amount_approved' => :'Float',
        :'amount_denied' => :'Float',
        :'amount_requested' => :'Float',
        :'approved_by' => :'String',
        :'approved_date' => :'Time',
        :'approved_frequency' => :'String',
        :'approved_from' => :'Time',
        :'approved_location' => :'String',
        :'approved_thru' => :'Time',
        :'assigned_user' => :'String',
        :'audit_flag' => :'String',
        :'auth_code' => :'String',
        :'auth_type' => :'String',
        :'auto_accident' => :'String',
        :'body_code_id' => :'String',
        :'care_manager_key' => :'Integer',
        :'case_index_actual' => :'String',
        :'case_index_approved' => :'String',
        :'case_index_denied' => :'String',
        :'case_index_requested' => :'String',
        :'case_number' => :'String',
        :'city_code_id' => :'String',
        :'closed' => :'Boolean',
        :'dr_g_category' => :'String',
        :'dr_g_code' => :'String',
        :'daily_living' => :'Integer',
        :'denied_from' => :'Time',
        :'denied_thru' => :'Time',
        :'discharge_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'federal_id' => :'String',
        :'iv_r_flag' => :'String',
        :'injury_date' => :'Time',
        :'member_seq' => :'String',
        :'monthly_amount' => :'Float',
        :'narrative' => :'String',
        :'new_or_extended' => :'Boolean',
        :'notes' => :'String',
        :'ordered_by_id' => :'String',
        :'ordered_by_name' => :'String',
        :'other_coverage_primary' => :'String',
        :'other_insurance' => :'String',
        :'payee_id' => :'String',
        :'plan_id' => :'String',
        :'previous_auth' => :'String',
        :'previous_treatment' => :'Boolean',
        :'prior_auth' => :'String',
        :'provider_id' => :'String',
        :'radiating_pain' => :'Integer',
        :'range_of_motion' => :'Integer',
        :'received_date' => :'Time',
        :'referred_by_id' => :'String',
        :'referred_by_name' => :'String',
        :'region' => :'String',
        :'reins_notification_date' => :'Time',
        :'requested_frequency' => :'String',
        :'requested_from' => :'Time',
        :'requested_location' => :'String',
        :'requested_thru' => :'Time',
        :'service_code' => :'String',
        :'service_type' => :'String',
        :'status' => :'String',
        :'subscriber_id' => :'String',
        :'t_plan_down_loaded' => :'Boolean',
        :'t_plan_down_loaded_date' => :'Time',
        :'t_plan_down_loaded_user' => :'String',
        :'t_plan_printed' => :'String',
        :'t_plan_printed_date' => :'Time',
        :'total_actual' => :'Float',
        :'total_approved' => :'Float',
        :'total_requested' => :'Float',
        :'total_unit_type' => :'String',
        :'treatment_type' => :'String',
        :'type_of_service' => :'String',
        :'unit_type' => :'String',
        :'units_actual' => :'Float',
        :'units_approved' => :'Float',
        :'units_denied' => :'Float',
        :'units_requested' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'urgent' => :'Boolean',
        :'visits_actual' => :'Float',
        :'visits_approved' => :'Float',
        :'visits_requested' => :'Float',
        :'visits_to_date' => :'Float',
        :'work_related' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'auth_number',
        :'actual_from',
        :'actual_location',
        :'actual_thru',
        :'additional_visits',
        :'amount_actual',
        :'amount_approved',
        :'amount_denied',
        :'amount_requested',
        :'approved_by',
        :'approved_date',
        :'approved_frequency',
        :'approved_from',
        :'approved_location',
        :'approved_thru',
        :'assigned_user',
        :'audit_flag',
        :'auth_code',
        :'auth_type',
        :'auto_accident',
        :'body_code_id',
        :'care_manager_key',
        :'case_index_actual',
        :'case_index_approved',
        :'case_index_denied',
        :'case_index_requested',
        :'case_number',
        :'city_code_id',
        :'dr_g_category',
        :'dr_g_code',
        :'daily_living',
        :'denied_from',
        :'denied_thru',
        :'discharge_date',
        :'entry_user',
        :'federal_id',
        :'iv_r_flag',
        :'injury_date',
        :'member_seq',
        :'monthly_amount',
        :'narrative',
        :'notes',
        :'ordered_by_id',
        :'ordered_by_name',
        :'other_coverage_primary',
        :'other_insurance',
        :'payee_id',
        :'plan_id',
        :'previous_auth',
        :'prior_auth',
        :'provider_id',
        :'radiating_pain',
        :'range_of_motion',
        :'received_date',
        :'referred_by_id',
        :'referred_by_name',
        :'region',
        :'reins_notification_date',
        :'requested_frequency',
        :'requested_from',
        :'requested_location',
        :'requested_thru',
        :'service_code',
        :'service_type',
        :'status',
        :'subscriber_id',
        :'t_plan_down_loaded_date',
        :'t_plan_down_loaded_user',
        :'t_plan_printed_date',
        :'total_actual',
        :'total_approved',
        :'total_requested',
        :'total_unit_type',
        :'treatment_type',
        :'type_of_service',
        :'unit_type',
        :'units_actual',
        :'units_approved',
        :'units_denied',
        :'units_requested',
        :'update_user',
        :'visits_actual',
        :'visits_approved',
        :'visits_requested',
        :'visits_to_date',
        :'work_related'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Auth` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Auth`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      end

      if attributes.key?(:'actual_from')
        self.actual_from = attributes[:'actual_from']
      end

      if attributes.key?(:'actual_location')
        self.actual_location = attributes[:'actual_location']
      end

      if attributes.key?(:'actual_thru')
        self.actual_thru = attributes[:'actual_thru']
      end

      if attributes.key?(:'additional_visits')
        self.additional_visits = attributes[:'additional_visits']
      end

      if attributes.key?(:'amount_actual')
        self.amount_actual = attributes[:'amount_actual']
      end

      if attributes.key?(:'amount_approved')
        self.amount_approved = attributes[:'amount_approved']
      end

      if attributes.key?(:'amount_denied')
        self.amount_denied = attributes[:'amount_denied']
      end

      if attributes.key?(:'amount_requested')
        self.amount_requested = attributes[:'amount_requested']
      end

      if attributes.key?(:'approved_by')
        self.approved_by = attributes[:'approved_by']
      end

      if attributes.key?(:'approved_date')
        self.approved_date = attributes[:'approved_date']
      end

      if attributes.key?(:'approved_frequency')
        self.approved_frequency = attributes[:'approved_frequency']
      end

      if attributes.key?(:'approved_from')
        self.approved_from = attributes[:'approved_from']
      end

      if attributes.key?(:'approved_location')
        self.approved_location = attributes[:'approved_location']
      end

      if attributes.key?(:'approved_thru')
        self.approved_thru = attributes[:'approved_thru']
      end

      if attributes.key?(:'assigned_user')
        self.assigned_user = attributes[:'assigned_user']
      end

      if attributes.key?(:'audit_flag')
        self.audit_flag = attributes[:'audit_flag']
      end

      if attributes.key?(:'auth_code')
        self.auth_code = attributes[:'auth_code']
      end

      if attributes.key?(:'auth_type')
        self.auth_type = attributes[:'auth_type']
      end

      if attributes.key?(:'auto_accident')
        self.auto_accident = attributes[:'auto_accident']
      end

      if attributes.key?(:'body_code_id')
        self.body_code_id = attributes[:'body_code_id']
      end

      if attributes.key?(:'care_manager_key')
        self.care_manager_key = attributes[:'care_manager_key']
      end

      if attributes.key?(:'case_index_actual')
        self.case_index_actual = attributes[:'case_index_actual']
      end

      if attributes.key?(:'case_index_approved')
        self.case_index_approved = attributes[:'case_index_approved']
      end

      if attributes.key?(:'case_index_denied')
        self.case_index_denied = attributes[:'case_index_denied']
      end

      if attributes.key?(:'case_index_requested')
        self.case_index_requested = attributes[:'case_index_requested']
      end

      if attributes.key?(:'case_number')
        self.case_number = attributes[:'case_number']
      end

      if attributes.key?(:'city_code_id')
        self.city_code_id = attributes[:'city_code_id']
      end

      if attributes.key?(:'closed')
        self.closed = attributes[:'closed']
      else
        self.closed = nil
      end

      if attributes.key?(:'dr_g_category')
        self.dr_g_category = attributes[:'dr_g_category']
      end

      if attributes.key?(:'dr_g_code')
        self.dr_g_code = attributes[:'dr_g_code']
      end

      if attributes.key?(:'daily_living')
        self.daily_living = attributes[:'daily_living']
      end

      if attributes.key?(:'denied_from')
        self.denied_from = attributes[:'denied_from']
      end

      if attributes.key?(:'denied_thru')
        self.denied_thru = attributes[:'denied_thru']
      end

      if attributes.key?(:'discharge_date')
        self.discharge_date = attributes[:'discharge_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'iv_r_flag')
        self.iv_r_flag = attributes[:'iv_r_flag']
      end

      if attributes.key?(:'injury_date')
        self.injury_date = attributes[:'injury_date']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'monthly_amount')
        self.monthly_amount = attributes[:'monthly_amount']
      end

      if attributes.key?(:'narrative')
        self.narrative = attributes[:'narrative']
      end

      if attributes.key?(:'new_or_extended')
        self.new_or_extended = attributes[:'new_or_extended']
      else
        self.new_or_extended = nil
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'ordered_by_id')
        self.ordered_by_id = attributes[:'ordered_by_id']
      end

      if attributes.key?(:'ordered_by_name')
        self.ordered_by_name = attributes[:'ordered_by_name']
      end

      if attributes.key?(:'other_coverage_primary')
        self.other_coverage_primary = attributes[:'other_coverage_primary']
      end

      if attributes.key?(:'other_insurance')
        self.other_insurance = attributes[:'other_insurance']
      end

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'previous_auth')
        self.previous_auth = attributes[:'previous_auth']
      end

      if attributes.key?(:'previous_treatment')
        self.previous_treatment = attributes[:'previous_treatment']
      else
        self.previous_treatment = nil
      end

      if attributes.key?(:'prior_auth')
        self.prior_auth = attributes[:'prior_auth']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'radiating_pain')
        self.radiating_pain = attributes[:'radiating_pain']
      end

      if attributes.key?(:'range_of_motion')
        self.range_of_motion = attributes[:'range_of_motion']
      end

      if attributes.key?(:'received_date')
        self.received_date = attributes[:'received_date']
      end

      if attributes.key?(:'referred_by_id')
        self.referred_by_id = attributes[:'referred_by_id']
      end

      if attributes.key?(:'referred_by_name')
        self.referred_by_name = attributes[:'referred_by_name']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'reins_notification_date')
        self.reins_notification_date = attributes[:'reins_notification_date']
      end

      if attributes.key?(:'requested_frequency')
        self.requested_frequency = attributes[:'requested_frequency']
      end

      if attributes.key?(:'requested_from')
        self.requested_from = attributes[:'requested_from']
      end

      if attributes.key?(:'requested_location')
        self.requested_location = attributes[:'requested_location']
      end

      if attributes.key?(:'requested_thru')
        self.requested_thru = attributes[:'requested_thru']
      end

      if attributes.key?(:'service_code')
        self.service_code = attributes[:'service_code']
      end

      if attributes.key?(:'service_type')
        self.service_type = attributes[:'service_type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'t_plan_down_loaded')
        self.t_plan_down_loaded = attributes[:'t_plan_down_loaded']
      else
        self.t_plan_down_loaded = nil
      end

      if attributes.key?(:'t_plan_down_loaded_date')
        self.t_plan_down_loaded_date = attributes[:'t_plan_down_loaded_date']
      end

      if attributes.key?(:'t_plan_down_loaded_user')
        self.t_plan_down_loaded_user = attributes[:'t_plan_down_loaded_user']
      end

      if attributes.key?(:'t_plan_printed')
        self.t_plan_printed = attributes[:'t_plan_printed']
      else
        self.t_plan_printed = nil
      end

      if attributes.key?(:'t_plan_printed_date')
        self.t_plan_printed_date = attributes[:'t_plan_printed_date']
      end

      if attributes.key?(:'total_actual')
        self.total_actual = attributes[:'total_actual']
      end

      if attributes.key?(:'total_approved')
        self.total_approved = attributes[:'total_approved']
      end

      if attributes.key?(:'total_requested')
        self.total_requested = attributes[:'total_requested']
      end

      if attributes.key?(:'total_unit_type')
        self.total_unit_type = attributes[:'total_unit_type']
      end

      if attributes.key?(:'treatment_type')
        self.treatment_type = attributes[:'treatment_type']
      end

      if attributes.key?(:'type_of_service')
        self.type_of_service = attributes[:'type_of_service']
      end

      if attributes.key?(:'unit_type')
        self.unit_type = attributes[:'unit_type']
      end

      if attributes.key?(:'units_actual')
        self.units_actual = attributes[:'units_actual']
      end

      if attributes.key?(:'units_approved')
        self.units_approved = attributes[:'units_approved']
      end

      if attributes.key?(:'units_denied')
        self.units_denied = attributes[:'units_denied']
      end

      if attributes.key?(:'units_requested')
        self.units_requested = attributes[:'units_requested']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'urgent')
        self.urgent = attributes[:'urgent']
      else
        self.urgent = nil
      end

      if attributes.key?(:'visits_actual')
        self.visits_actual = attributes[:'visits_actual']
      end

      if attributes.key?(:'visits_approved')
        self.visits_approved = attributes[:'visits_approved']
      end

      if attributes.key?(:'visits_requested')
        self.visits_requested = attributes[:'visits_requested']
      end

      if attributes.key?(:'visits_to_date')
        self.visits_to_date = attributes[:'visits_to_date']
      end

      if attributes.key?(:'work_related')
        self.work_related = attributes[:'work_related']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@auth_number.nil? && @auth_number.to_s.length > 20
        invalid_properties.push('invalid value for "auth_number", the character length must be smaller than or equal to 20.')
      end

      if !@actual_location.nil? && @actual_location.to_s.length > 4
        invalid_properties.push('invalid value for "actual_location", the character length must be smaller than or equal to 4.')
      end

      if !@approved_by.nil? && @approved_by.to_s.length > 50
        invalid_properties.push('invalid value for "approved_by", the character length must be smaller than or equal to 50.')
      end

      if !@approved_frequency.nil? && @approved_frequency.to_s.length > 16
        invalid_properties.push('invalid value for "approved_frequency", the character length must be smaller than or equal to 16.')
      end

      if !@approved_location.nil? && @approved_location.to_s.length > 4
        invalid_properties.push('invalid value for "approved_location", the character length must be smaller than or equal to 4.')
      end

      if !@assigned_user.nil? && @assigned_user.to_s.length > 20
        invalid_properties.push('invalid value for "assigned_user", the character length must be smaller than or equal to 20.')
      end

      if !@audit_flag.nil? && @audit_flag.to_s.length > 1
        invalid_properties.push('invalid value for "audit_flag", the character length must be smaller than or equal to 1.')
      end

      if !@auth_code.nil? && @auth_code.to_s.length > 8
        invalid_properties.push('invalid value for "auth_code", the character length must be smaller than or equal to 8.')
      end

      if !@auth_type.nil? && @auth_type.to_s.length > 8
        invalid_properties.push('invalid value for "auth_type", the character length must be smaller than or equal to 8.')
      end

      if !@auto_accident.nil? && @auto_accident.to_s.length > 1
        invalid_properties.push('invalid value for "auto_accident", the character length must be smaller than or equal to 1.')
      end

      if !@body_code_id.nil? && @body_code_id.to_s.length > 8
        invalid_properties.push('invalid value for "body_code_id", the character length must be smaller than or equal to 8.')
      end

      if !@case_index_actual.nil? && @case_index_actual.to_s.length > 2
        invalid_properties.push('invalid value for "case_index_actual", the character length must be smaller than or equal to 2.')
      end

      if !@case_index_approved.nil? && @case_index_approved.to_s.length > 2
        invalid_properties.push('invalid value for "case_index_approved", the character length must be smaller than or equal to 2.')
      end

      if !@case_index_denied.nil? && @case_index_denied.to_s.length > 2
        invalid_properties.push('invalid value for "case_index_denied", the character length must be smaller than or equal to 2.')
      end

      if !@case_index_requested.nil? && @case_index_requested.to_s.length > 2
        invalid_properties.push('invalid value for "case_index_requested", the character length must be smaller than or equal to 2.')
      end

      if !@case_number.nil? && @case_number.to_s.length > 64
        invalid_properties.push('invalid value for "case_number", the character length must be smaller than or equal to 64.')
      end

      if !@city_code_id.nil? && @city_code_id.to_s.length > 8
        invalid_properties.push('invalid value for "city_code_id", the character length must be smaller than or equal to 8.')
      end

      if @closed.nil?
        invalid_properties.push('invalid value for "closed", closed cannot be nil.')
      end

      if !@dr_g_category.nil? && @dr_g_category.to_s.length > 8
        invalid_properties.push('invalid value for "dr_g_category", the character length must be smaller than or equal to 8.')
      end

      if !@dr_g_code.nil? && @dr_g_code.to_s.length > 8
        invalid_properties.push('invalid value for "dr_g_code", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@iv_r_flag.nil? && @iv_r_flag.to_s.length > 1
        invalid_properties.push('invalid value for "iv_r_flag", the character length must be smaller than or equal to 1.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @new_or_extended.nil?
        invalid_properties.push('invalid value for "new_or_extended", new_or_extended cannot be nil.')
      end

      if !@ordered_by_id.nil? && @ordered_by_id.to_s.length > 20
        invalid_properties.push('invalid value for "ordered_by_id", the character length must be smaller than or equal to 20.')
      end

      if !@ordered_by_name.nil? && @ordered_by_name.to_s.length > 512
        invalid_properties.push('invalid value for "ordered_by_name", the character length must be smaller than or equal to 512.')
      end

      if !@other_coverage_primary.nil? && @other_coverage_primary.to_s.length > 1
        invalid_properties.push('invalid value for "other_coverage_primary", the character length must be smaller than or equal to 1.')
      end

      if !@other_insurance.nil? && @other_insurance.to_s.length > 2
        invalid_properties.push('invalid value for "other_insurance", the character length must be smaller than or equal to 2.')
      end

      if !@payee_id.nil? && @payee_id.to_s.length > 20
        invalid_properties.push('invalid value for "payee_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@previous_auth.nil? && @previous_auth.to_s.length > 20
        invalid_properties.push('invalid value for "previous_auth", the character length must be smaller than or equal to 20.')
      end

      if @previous_treatment.nil?
        invalid_properties.push('invalid value for "previous_treatment", previous_treatment cannot be nil.')
      end

      if !@prior_auth.nil? && @prior_auth.to_s.length > 20
        invalid_properties.push('invalid value for "prior_auth", the character length must be smaller than or equal to 20.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@referred_by_id.nil? && @referred_by_id.to_s.length > 20
        invalid_properties.push('invalid value for "referred_by_id", the character length must be smaller than or equal to 20.')
      end

      if !@referred_by_name.nil? && @referred_by_name.to_s.length > 512
        invalid_properties.push('invalid value for "referred_by_name", the character length must be smaller than or equal to 512.')
      end

      if !@region.nil? && @region.to_s.length > 1
        invalid_properties.push('invalid value for "region", the character length must be smaller than or equal to 1.')
      end

      if !@requested_frequency.nil? && @requested_frequency.to_s.length > 16
        invalid_properties.push('invalid value for "requested_frequency", the character length must be smaller than or equal to 16.')
      end

      if !@requested_location.nil? && @requested_location.to_s.length > 4
        invalid_properties.push('invalid value for "requested_location", the character length must be smaller than or equal to 4.')
      end

      if !@service_code.nil? && @service_code.to_s.length > 5
        invalid_properties.push('invalid value for "service_code", the character length must be smaller than or equal to 5.')
      end

      if !@service_type.nil? && @service_type.to_s.length > 10
        invalid_properties.push('invalid value for "service_type", the character length must be smaller than or equal to 10.')
      end

      if !@status.nil? && @status.to_s.length > 8
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 8.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @t_plan_down_loaded.nil?
        invalid_properties.push('invalid value for "t_plan_down_loaded", t_plan_down_loaded cannot be nil.')
      end

      if !@t_plan_down_loaded_user.nil? && @t_plan_down_loaded_user.to_s.length > 20
        invalid_properties.push('invalid value for "t_plan_down_loaded_user", the character length must be smaller than or equal to 20.')
      end

      if @t_plan_printed.nil?
        invalid_properties.push('invalid value for "t_plan_printed", t_plan_printed cannot be nil.')
      end

      if @t_plan_printed.to_s.length > 1
        invalid_properties.push('invalid value for "t_plan_printed", the character length must be smaller than or equal to 1.')
      end

      if @t_plan_printed.to_s.length < 1
        invalid_properties.push('invalid value for "t_plan_printed", the character length must be great than or equal to 1.')
      end

      if !@total_unit_type.nil? && @total_unit_type.to_s.length > 16
        invalid_properties.push('invalid value for "total_unit_type", the character length must be smaller than or equal to 16.')
      end

      if !@treatment_type.nil? && @treatment_type.to_s.length > 8
        invalid_properties.push('invalid value for "treatment_type", the character length must be smaller than or equal to 8.')
      end

      if !@type_of_service.nil? && @type_of_service.to_s.length > 5
        invalid_properties.push('invalid value for "type_of_service", the character length must be smaller than or equal to 5.')
      end

      if !@unit_type.nil? && @unit_type.to_s.length > 16
        invalid_properties.push('invalid value for "unit_type", the character length must be smaller than or equal to 16.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @urgent.nil?
        invalid_properties.push('invalid value for "urgent", urgent cannot be nil.')
      end

      if !@work_related.nil? && @work_related.to_s.length > 1
        invalid_properties.push('invalid value for "work_related", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@auth_number.nil? && @auth_number.to_s.length > 20
      return false if !@actual_location.nil? && @actual_location.to_s.length > 4
      return false if !@approved_by.nil? && @approved_by.to_s.length > 50
      return false if !@approved_frequency.nil? && @approved_frequency.to_s.length > 16
      return false if !@approved_location.nil? && @approved_location.to_s.length > 4
      return false if !@assigned_user.nil? && @assigned_user.to_s.length > 20
      return false if !@audit_flag.nil? && @audit_flag.to_s.length > 1
      return false if !@auth_code.nil? && @auth_code.to_s.length > 8
      return false if !@auth_type.nil? && @auth_type.to_s.length > 8
      return false if !@auto_accident.nil? && @auto_accident.to_s.length > 1
      return false if !@body_code_id.nil? && @body_code_id.to_s.length > 8
      return false if !@case_index_actual.nil? && @case_index_actual.to_s.length > 2
      return false if !@case_index_approved.nil? && @case_index_approved.to_s.length > 2
      return false if !@case_index_denied.nil? && @case_index_denied.to_s.length > 2
      return false if !@case_index_requested.nil? && @case_index_requested.to_s.length > 2
      return false if !@case_number.nil? && @case_number.to_s.length > 64
      return false if !@city_code_id.nil? && @city_code_id.to_s.length > 8
      return false if @closed.nil?
      return false if !@dr_g_category.nil? && @dr_g_category.to_s.length > 8
      return false if !@dr_g_code.nil? && @dr_g_code.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if !@iv_r_flag.nil? && @iv_r_flag.to_s.length > 1
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if @new_or_extended.nil?
      return false if !@ordered_by_id.nil? && @ordered_by_id.to_s.length > 20
      return false if !@ordered_by_name.nil? && @ordered_by_name.to_s.length > 512
      return false if !@other_coverage_primary.nil? && @other_coverage_primary.to_s.length > 1
      return false if !@other_insurance.nil? && @other_insurance.to_s.length > 2
      return false if !@payee_id.nil? && @payee_id.to_s.length > 20
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@previous_auth.nil? && @previous_auth.to_s.length > 20
      return false if @previous_treatment.nil?
      return false if !@prior_auth.nil? && @prior_auth.to_s.length > 20
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@referred_by_id.nil? && @referred_by_id.to_s.length > 20
      return false if !@referred_by_name.nil? && @referred_by_name.to_s.length > 512
      return false if !@region.nil? && @region.to_s.length > 1
      return false if !@requested_frequency.nil? && @requested_frequency.to_s.length > 16
      return false if !@requested_location.nil? && @requested_location.to_s.length > 4
      return false if !@service_code.nil? && @service_code.to_s.length > 5
      return false if !@service_type.nil? && @service_type.to_s.length > 10
      return false if !@status.nil? && @status.to_s.length > 8
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if @t_plan_down_loaded.nil?
      return false if !@t_plan_down_loaded_user.nil? && @t_plan_down_loaded_user.to_s.length > 20
      return false if @t_plan_printed.nil?
      return false if @t_plan_printed.to_s.length > 1
      return false if @t_plan_printed.to_s.length < 1
      return false if !@total_unit_type.nil? && @total_unit_type.to_s.length > 16
      return false if !@treatment_type.nil? && @treatment_type.to_s.length > 8
      return false if !@type_of_service.nil? && @type_of_service.to_s.length > 5
      return false if !@unit_type.nil? && @unit_type.to_s.length > 16
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @urgent.nil?
      return false if !@work_related.nil? && @work_related.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if !auth_number.nil? && auth_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "auth_number", the character length must be smaller than or equal to 20.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] actual_location Value to be assigned
    def actual_location=(actual_location)
      if !actual_location.nil? && actual_location.to_s.length > 4
        fail ArgumentError, 'invalid value for "actual_location", the character length must be smaller than or equal to 4.'
      end

      @actual_location = actual_location
    end

    # Custom attribute writer method with validation
    # @param [Object] approved_by Value to be assigned
    def approved_by=(approved_by)
      if !approved_by.nil? && approved_by.to_s.length > 50
        fail ArgumentError, 'invalid value for "approved_by", the character length must be smaller than or equal to 50.'
      end

      @approved_by = approved_by
    end

    # Custom attribute writer method with validation
    # @param [Object] approved_frequency Value to be assigned
    def approved_frequency=(approved_frequency)
      if !approved_frequency.nil? && approved_frequency.to_s.length > 16
        fail ArgumentError, 'invalid value for "approved_frequency", the character length must be smaller than or equal to 16.'
      end

      @approved_frequency = approved_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] approved_location Value to be assigned
    def approved_location=(approved_location)
      if !approved_location.nil? && approved_location.to_s.length > 4
        fail ArgumentError, 'invalid value for "approved_location", the character length must be smaller than or equal to 4.'
      end

      @approved_location = approved_location
    end

    # Custom attribute writer method with validation
    # @param [Object] assigned_user Value to be assigned
    def assigned_user=(assigned_user)
      if !assigned_user.nil? && assigned_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "assigned_user", the character length must be smaller than or equal to 20.'
      end

      @assigned_user = assigned_user
    end

    # Custom attribute writer method with validation
    # @param [Object] audit_flag Value to be assigned
    def audit_flag=(audit_flag)
      if !audit_flag.nil? && audit_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "audit_flag", the character length must be smaller than or equal to 1.'
      end

      @audit_flag = audit_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_code Value to be assigned
    def auth_code=(auth_code)
      if !auth_code.nil? && auth_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "auth_code", the character length must be smaller than or equal to 8.'
      end

      @auth_code = auth_code
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_type Value to be assigned
    def auth_type=(auth_type)
      if !auth_type.nil? && auth_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "auth_type", the character length must be smaller than or equal to 8.'
      end

      @auth_type = auth_type
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_accident Value to be assigned
    def auto_accident=(auto_accident)
      if !auto_accident.nil? && auto_accident.to_s.length > 1
        fail ArgumentError, 'invalid value for "auto_accident", the character length must be smaller than or equal to 1.'
      end

      @auto_accident = auto_accident
    end

    # Custom attribute writer method with validation
    # @param [Object] body_code_id Value to be assigned
    def body_code_id=(body_code_id)
      if !body_code_id.nil? && body_code_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "body_code_id", the character length must be smaller than or equal to 8.'
      end

      @body_code_id = body_code_id
    end

    # Custom attribute writer method with validation
    # @param [Object] case_index_actual Value to be assigned
    def case_index_actual=(case_index_actual)
      if !case_index_actual.nil? && case_index_actual.to_s.length > 2
        fail ArgumentError, 'invalid value for "case_index_actual", the character length must be smaller than or equal to 2.'
      end

      @case_index_actual = case_index_actual
    end

    # Custom attribute writer method with validation
    # @param [Object] case_index_approved Value to be assigned
    def case_index_approved=(case_index_approved)
      if !case_index_approved.nil? && case_index_approved.to_s.length > 2
        fail ArgumentError, 'invalid value for "case_index_approved", the character length must be smaller than or equal to 2.'
      end

      @case_index_approved = case_index_approved
    end

    # Custom attribute writer method with validation
    # @param [Object] case_index_denied Value to be assigned
    def case_index_denied=(case_index_denied)
      if !case_index_denied.nil? && case_index_denied.to_s.length > 2
        fail ArgumentError, 'invalid value for "case_index_denied", the character length must be smaller than or equal to 2.'
      end

      @case_index_denied = case_index_denied
    end

    # Custom attribute writer method with validation
    # @param [Object] case_index_requested Value to be assigned
    def case_index_requested=(case_index_requested)
      if !case_index_requested.nil? && case_index_requested.to_s.length > 2
        fail ArgumentError, 'invalid value for "case_index_requested", the character length must be smaller than or equal to 2.'
      end

      @case_index_requested = case_index_requested
    end

    # Custom attribute writer method with validation
    # @param [Object] case_number Value to be assigned
    def case_number=(case_number)
      if !case_number.nil? && case_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "case_number", the character length must be smaller than or equal to 64.'
      end

      @case_number = case_number
    end

    # Custom attribute writer method with validation
    # @param [Object] city_code_id Value to be assigned
    def city_code_id=(city_code_id)
      if !city_code_id.nil? && city_code_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "city_code_id", the character length must be smaller than or equal to 8.'
      end

      @city_code_id = city_code_id
    end

    # Custom attribute writer method with validation
    # @param [Object] closed Value to be assigned
    def closed=(closed)
      if closed.nil?
        fail ArgumentError, 'closed cannot be nil'
      end

      @closed = closed
    end

    # Custom attribute writer method with validation
    # @param [Object] dr_g_category Value to be assigned
    def dr_g_category=(dr_g_category)
      if !dr_g_category.nil? && dr_g_category.to_s.length > 8
        fail ArgumentError, 'invalid value for "dr_g_category", the character length must be smaller than or equal to 8.'
      end

      @dr_g_category = dr_g_category
    end

    # Custom attribute writer method with validation
    # @param [Object] dr_g_code Value to be assigned
    def dr_g_code=(dr_g_code)
      if !dr_g_code.nil? && dr_g_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "dr_g_code", the character length must be smaller than or equal to 8.'
      end

      @dr_g_code = dr_g_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] iv_r_flag Value to be assigned
    def iv_r_flag=(iv_r_flag)
      if !iv_r_flag.nil? && iv_r_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "iv_r_flag", the character length must be smaller than or equal to 1.'
      end

      @iv_r_flag = iv_r_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] new_or_extended Value to be assigned
    def new_or_extended=(new_or_extended)
      if new_or_extended.nil?
        fail ArgumentError, 'new_or_extended cannot be nil'
      end

      @new_or_extended = new_or_extended
    end

    # Custom attribute writer method with validation
    # @param [Object] ordered_by_id Value to be assigned
    def ordered_by_id=(ordered_by_id)
      if !ordered_by_id.nil? && ordered_by_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "ordered_by_id", the character length must be smaller than or equal to 20.'
      end

      @ordered_by_id = ordered_by_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ordered_by_name Value to be assigned
    def ordered_by_name=(ordered_by_name)
      if !ordered_by_name.nil? && ordered_by_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "ordered_by_name", the character length must be smaller than or equal to 512.'
      end

      @ordered_by_name = ordered_by_name
    end

    # Custom attribute writer method with validation
    # @param [Object] other_coverage_primary Value to be assigned
    def other_coverage_primary=(other_coverage_primary)
      if !other_coverage_primary.nil? && other_coverage_primary.to_s.length > 1
        fail ArgumentError, 'invalid value for "other_coverage_primary", the character length must be smaller than or equal to 1.'
      end

      @other_coverage_primary = other_coverage_primary
    end

    # Custom attribute writer method with validation
    # @param [Object] other_insurance Value to be assigned
    def other_insurance=(other_insurance)
      if !other_insurance.nil? && other_insurance.to_s.length > 2
        fail ArgumentError, 'invalid value for "other_insurance", the character length must be smaller than or equal to 2.'
      end

      @other_insurance = other_insurance
    end

    # Custom attribute writer method with validation
    # @param [Object] payee_id Value to be assigned
    def payee_id=(payee_id)
      if !payee_id.nil? && payee_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payee_id", the character length must be smaller than or equal to 20.'
      end

      @payee_id = payee_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] previous_auth Value to be assigned
    def previous_auth=(previous_auth)
      if !previous_auth.nil? && previous_auth.to_s.length > 20
        fail ArgumentError, 'invalid value for "previous_auth", the character length must be smaller than or equal to 20.'
      end

      @previous_auth = previous_auth
    end

    # Custom attribute writer method with validation
    # @param [Object] previous_treatment Value to be assigned
    def previous_treatment=(previous_treatment)
      if previous_treatment.nil?
        fail ArgumentError, 'previous_treatment cannot be nil'
      end

      @previous_treatment = previous_treatment
    end

    # Custom attribute writer method with validation
    # @param [Object] prior_auth Value to be assigned
    def prior_auth=(prior_auth)
      if !prior_auth.nil? && prior_auth.to_s.length > 20
        fail ArgumentError, 'invalid value for "prior_auth", the character length must be smaller than or equal to 20.'
      end

      @prior_auth = prior_auth
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] referred_by_id Value to be assigned
    def referred_by_id=(referred_by_id)
      if !referred_by_id.nil? && referred_by_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "referred_by_id", the character length must be smaller than or equal to 20.'
      end

      @referred_by_id = referred_by_id
    end

    # Custom attribute writer method with validation
    # @param [Object] referred_by_name Value to be assigned
    def referred_by_name=(referred_by_name)
      if !referred_by_name.nil? && referred_by_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "referred_by_name", the character length must be smaller than or equal to 512.'
      end

      @referred_by_name = referred_by_name
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if !region.nil? && region.to_s.length > 1
        fail ArgumentError, 'invalid value for "region", the character length must be smaller than or equal to 1.'
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] requested_frequency Value to be assigned
    def requested_frequency=(requested_frequency)
      if !requested_frequency.nil? && requested_frequency.to_s.length > 16
        fail ArgumentError, 'invalid value for "requested_frequency", the character length must be smaller than or equal to 16.'
      end

      @requested_frequency = requested_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] requested_location Value to be assigned
    def requested_location=(requested_location)
      if !requested_location.nil? && requested_location.to_s.length > 4
        fail ArgumentError, 'invalid value for "requested_location", the character length must be smaller than or equal to 4.'
      end

      @requested_location = requested_location
    end

    # Custom attribute writer method with validation
    # @param [Object] service_code Value to be assigned
    def service_code=(service_code)
      if !service_code.nil? && service_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "service_code", the character length must be smaller than or equal to 5.'
      end

      @service_code = service_code
    end

    # Custom attribute writer method with validation
    # @param [Object] service_type Value to be assigned
    def service_type=(service_type)
      if !service_type.nil? && service_type.to_s.length > 10
        fail ArgumentError, 'invalid value for "service_type", the character length must be smaller than or equal to 10.'
      end

      @service_type = service_type
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.length > 8
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 8.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] t_plan_down_loaded Value to be assigned
    def t_plan_down_loaded=(t_plan_down_loaded)
      if t_plan_down_loaded.nil?
        fail ArgumentError, 't_plan_down_loaded cannot be nil'
      end

      @t_plan_down_loaded = t_plan_down_loaded
    end

    # Custom attribute writer method with validation
    # @param [Object] t_plan_down_loaded_user Value to be assigned
    def t_plan_down_loaded_user=(t_plan_down_loaded_user)
      if !t_plan_down_loaded_user.nil? && t_plan_down_loaded_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "t_plan_down_loaded_user", the character length must be smaller than or equal to 20.'
      end

      @t_plan_down_loaded_user = t_plan_down_loaded_user
    end

    # Custom attribute writer method with validation
    # @param [Object] t_plan_printed Value to be assigned
    def t_plan_printed=(t_plan_printed)
      if t_plan_printed.nil?
        fail ArgumentError, 't_plan_printed cannot be nil'
      end

      if t_plan_printed.to_s.length > 1
        fail ArgumentError, 'invalid value for "t_plan_printed", the character length must be smaller than or equal to 1.'
      end

      if t_plan_printed.to_s.length < 1
        fail ArgumentError, 'invalid value for "t_plan_printed", the character length must be great than or equal to 1.'
      end

      @t_plan_printed = t_plan_printed
    end

    # Custom attribute writer method with validation
    # @param [Object] total_unit_type Value to be assigned
    def total_unit_type=(total_unit_type)
      if !total_unit_type.nil? && total_unit_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "total_unit_type", the character length must be smaller than or equal to 16.'
      end

      @total_unit_type = total_unit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] treatment_type Value to be assigned
    def treatment_type=(treatment_type)
      if !treatment_type.nil? && treatment_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "treatment_type", the character length must be smaller than or equal to 8.'
      end

      @treatment_type = treatment_type
    end

    # Custom attribute writer method with validation
    # @param [Object] type_of_service Value to be assigned
    def type_of_service=(type_of_service)
      if !type_of_service.nil? && type_of_service.to_s.length > 5
        fail ArgumentError, 'invalid value for "type_of_service", the character length must be smaller than or equal to 5.'
      end

      @type_of_service = type_of_service
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_type Value to be assigned
    def unit_type=(unit_type)
      if !unit_type.nil? && unit_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "unit_type", the character length must be smaller than or equal to 16.'
      end

      @unit_type = unit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] urgent Value to be assigned
    def urgent=(urgent)
      if urgent.nil?
        fail ArgumentError, 'urgent cannot be nil'
      end

      @urgent = urgent
    end

    # Custom attribute writer method with validation
    # @param [Object] work_related Value to be assigned
    def work_related=(work_related)
      if !work_related.nil? && work_related.to_s.length > 1
        fail ArgumentError, 'invalid value for "work_related", the character length must be smaller than or equal to 1.'
      end

      @work_related = work_related
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_number == o.auth_number &&
          actual_from == o.actual_from &&
          actual_location == o.actual_location &&
          actual_thru == o.actual_thru &&
          additional_visits == o.additional_visits &&
          amount_actual == o.amount_actual &&
          amount_approved == o.amount_approved &&
          amount_denied == o.amount_denied &&
          amount_requested == o.amount_requested &&
          approved_by == o.approved_by &&
          approved_date == o.approved_date &&
          approved_frequency == o.approved_frequency &&
          approved_from == o.approved_from &&
          approved_location == o.approved_location &&
          approved_thru == o.approved_thru &&
          assigned_user == o.assigned_user &&
          audit_flag == o.audit_flag &&
          auth_code == o.auth_code &&
          auth_type == o.auth_type &&
          auto_accident == o.auto_accident &&
          body_code_id == o.body_code_id &&
          care_manager_key == o.care_manager_key &&
          case_index_actual == o.case_index_actual &&
          case_index_approved == o.case_index_approved &&
          case_index_denied == o.case_index_denied &&
          case_index_requested == o.case_index_requested &&
          case_number == o.case_number &&
          city_code_id == o.city_code_id &&
          closed == o.closed &&
          dr_g_category == o.dr_g_category &&
          dr_g_code == o.dr_g_code &&
          daily_living == o.daily_living &&
          denied_from == o.denied_from &&
          denied_thru == o.denied_thru &&
          discharge_date == o.discharge_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          federal_id == o.federal_id &&
          iv_r_flag == o.iv_r_flag &&
          injury_date == o.injury_date &&
          member_seq == o.member_seq &&
          monthly_amount == o.monthly_amount &&
          narrative == o.narrative &&
          new_or_extended == o.new_or_extended &&
          notes == o.notes &&
          ordered_by_id == o.ordered_by_id &&
          ordered_by_name == o.ordered_by_name &&
          other_coverage_primary == o.other_coverage_primary &&
          other_insurance == o.other_insurance &&
          payee_id == o.payee_id &&
          plan_id == o.plan_id &&
          previous_auth == o.previous_auth &&
          previous_treatment == o.previous_treatment &&
          prior_auth == o.prior_auth &&
          provider_id == o.provider_id &&
          radiating_pain == o.radiating_pain &&
          range_of_motion == o.range_of_motion &&
          received_date == o.received_date &&
          referred_by_id == o.referred_by_id &&
          referred_by_name == o.referred_by_name &&
          region == o.region &&
          reins_notification_date == o.reins_notification_date &&
          requested_frequency == o.requested_frequency &&
          requested_from == o.requested_from &&
          requested_location == o.requested_location &&
          requested_thru == o.requested_thru &&
          service_code == o.service_code &&
          service_type == o.service_type &&
          status == o.status &&
          subscriber_id == o.subscriber_id &&
          t_plan_down_loaded == o.t_plan_down_loaded &&
          t_plan_down_loaded_date == o.t_plan_down_loaded_date &&
          t_plan_down_loaded_user == o.t_plan_down_loaded_user &&
          t_plan_printed == o.t_plan_printed &&
          t_plan_printed_date == o.t_plan_printed_date &&
          total_actual == o.total_actual &&
          total_approved == o.total_approved &&
          total_requested == o.total_requested &&
          total_unit_type == o.total_unit_type &&
          treatment_type == o.treatment_type &&
          type_of_service == o.type_of_service &&
          unit_type == o.unit_type &&
          units_actual == o.units_actual &&
          units_approved == o.units_approved &&
          units_denied == o.units_denied &&
          units_requested == o.units_requested &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          urgent == o.urgent &&
          visits_actual == o.visits_actual &&
          visits_approved == o.visits_approved &&
          visits_requested == o.visits_requested &&
          visits_to_date == o.visits_to_date &&
          work_related == o.work_related
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_number, actual_from, actual_location, actual_thru, additional_visits, amount_actual, amount_approved, amount_denied, amount_requested, approved_by, approved_date, approved_frequency, approved_from, approved_location, approved_thru, assigned_user, audit_flag, auth_code, auth_type, auto_accident, body_code_id, care_manager_key, case_index_actual, case_index_approved, case_index_denied, case_index_requested, case_number, city_code_id, closed, dr_g_category, dr_g_code, daily_living, denied_from, denied_thru, discharge_date, entry_date, entry_user, federal_id, iv_r_flag, injury_date, member_seq, monthly_amount, narrative, new_or_extended, notes, ordered_by_id, ordered_by_name, other_coverage_primary, other_insurance, payee_id, plan_id, previous_auth, previous_treatment, prior_auth, provider_id, radiating_pain, range_of_motion, received_date, referred_by_id, referred_by_name, region, reins_notification_date, requested_frequency, requested_from, requested_location, requested_thru, service_code, service_type, status, subscriber_id, t_plan_down_loaded, t_plan_down_loaded_date, t_plan_down_loaded_user, t_plan_printed, t_plan_printed_date, total_actual, total_approved, total_requested, total_unit_type, treatment_type, type_of_service, unit_type, units_actual, units_approved, units_denied, units_requested, update_date, update_user, urgent, visits_actual, visits_approved, visits_requested, visits_to_date, work_related].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
