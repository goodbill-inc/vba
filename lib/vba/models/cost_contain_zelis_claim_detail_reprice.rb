=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CostContainZelisClaimDetailReprice
    attr_accessor :batch_number

    attr_accessor :batch_claim

    attr_accessor :claim_seq

    attr_accessor :adjustment_seq

    attr_accessor :amount_due

    attr_accessor :applied_service

    attr_accessor :edit_code

    attr_accessor :edit_description

    attr_accessor :rand_c

    attr_accessor :savings

    attr_accessor :zelis_fees

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_number' => :'batch_Number',
        :'batch_claim' => :'batch_Claim',
        :'claim_seq' => :'claim_Seq',
        :'adjustment_seq' => :'adjustment_Seq',
        :'amount_due' => :'amountDue',
        :'applied_service' => :'appliedService',
        :'edit_code' => :'editCode',
        :'edit_description' => :'editDescription',
        :'rand_c' => :'randC',
        :'savings' => :'savings',
        :'zelis_fees' => :'zelisFees'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_number' => :'Integer',
        :'batch_claim' => :'Integer',
        :'claim_seq' => :'String',
        :'adjustment_seq' => :'String',
        :'amount_due' => :'Float',
        :'applied_service' => :'String',
        :'edit_code' => :'String',
        :'edit_description' => :'String',
        :'rand_c' => :'Float',
        :'savings' => :'Float',
        :'zelis_fees' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'amount_due',
        :'applied_service',
        :'edit_code',
        :'edit_description',
        :'rand_c',
        :'savings',
        :'zelis_fees'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CostContainZelisClaimDetailReprice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CostContainZelisClaimDetailReprice`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'batch_claim')
        self.batch_claim = attributes[:'batch_claim']
      else
        self.batch_claim = nil
      end

      if attributes.key?(:'claim_seq')
        self.claim_seq = attributes[:'claim_seq']
      else
        self.claim_seq = nil
      end

      if attributes.key?(:'adjustment_seq')
        self.adjustment_seq = attributes[:'adjustment_seq']
      else
        self.adjustment_seq = nil
      end

      if attributes.key?(:'amount_due')
        self.amount_due = attributes[:'amount_due']
      end

      if attributes.key?(:'applied_service')
        self.applied_service = attributes[:'applied_service']
      end

      if attributes.key?(:'edit_code')
        self.edit_code = attributes[:'edit_code']
      end

      if attributes.key?(:'edit_description')
        self.edit_description = attributes[:'edit_description']
      end

      if attributes.key?(:'rand_c')
        self.rand_c = attributes[:'rand_c']
      end

      if attributes.key?(:'savings')
        self.savings = attributes[:'savings']
      end

      if attributes.key?(:'zelis_fees')
        self.zelis_fees = attributes[:'zelis_fees']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if @batch_claim.nil?
        invalid_properties.push('invalid value for "batch_claim", batch_claim cannot be nil.')
      end

      if @claim_seq.nil?
        invalid_properties.push('invalid value for "claim_seq", claim_seq cannot be nil.')
      end

      if @claim_seq.to_s.length > 2
        invalid_properties.push('invalid value for "claim_seq", the character length must be smaller than or equal to 2.')
      end

      if @claim_seq.to_s.length < 1
        invalid_properties.push('invalid value for "claim_seq", the character length must be great than or equal to 1.')
      end

      if @adjustment_seq.nil?
        invalid_properties.push('invalid value for "adjustment_seq", adjustment_seq cannot be nil.')
      end

      if @adjustment_seq.to_s.length > 3
        invalid_properties.push('invalid value for "adjustment_seq", the character length must be smaller than or equal to 3.')
      end

      if @adjustment_seq.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_seq", the character length must be great than or equal to 1.')
      end

      if !@applied_service.nil? && @applied_service.to_s.length > 32
        invalid_properties.push('invalid value for "applied_service", the character length must be smaller than or equal to 32.')
      end

      if !@edit_code.nil? && @edit_code.to_s.length > 32
        invalid_properties.push('invalid value for "edit_code", the character length must be smaller than or equal to 32.')
      end

      if !@edit_description.nil? && @edit_description.to_s.length > 512
        invalid_properties.push('invalid value for "edit_description", the character length must be smaller than or equal to 512.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @batch_number.nil?
      return false if @batch_claim.nil?
      return false if @claim_seq.nil?
      return false if @claim_seq.to_s.length > 2
      return false if @claim_seq.to_s.length < 1
      return false if @adjustment_seq.nil?
      return false if @adjustment_seq.to_s.length > 3
      return false if @adjustment_seq.to_s.length < 1
      return false if !@applied_service.nil? && @applied_service.to_s.length > 32
      return false if !@edit_code.nil? && @edit_code.to_s.length > 32
      return false if !@edit_description.nil? && @edit_description.to_s.length > 512
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_claim Value to be assigned
    def batch_claim=(batch_claim)
      if batch_claim.nil?
        fail ArgumentError, 'batch_claim cannot be nil'
      end

      @batch_claim = batch_claim
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_seq Value to be assigned
    def claim_seq=(claim_seq)
      if claim_seq.nil?
        fail ArgumentError, 'claim_seq cannot be nil'
      end

      if claim_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "claim_seq", the character length must be smaller than or equal to 2.'
      end

      if claim_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "claim_seq", the character length must be great than or equal to 1.'
      end

      @claim_seq = claim_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_seq Value to be assigned
    def adjustment_seq=(adjustment_seq)
      if adjustment_seq.nil?
        fail ArgumentError, 'adjustment_seq cannot be nil'
      end

      if adjustment_seq.to_s.length > 3
        fail ArgumentError, 'invalid value for "adjustment_seq", the character length must be smaller than or equal to 3.'
      end

      if adjustment_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_seq", the character length must be great than or equal to 1.'
      end

      @adjustment_seq = adjustment_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] applied_service Value to be assigned
    def applied_service=(applied_service)
      if !applied_service.nil? && applied_service.to_s.length > 32
        fail ArgumentError, 'invalid value for "applied_service", the character length must be smaller than or equal to 32.'
      end

      @applied_service = applied_service
    end

    # Custom attribute writer method with validation
    # @param [Object] edit_code Value to be assigned
    def edit_code=(edit_code)
      if !edit_code.nil? && edit_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "edit_code", the character length must be smaller than or equal to 32.'
      end

      @edit_code = edit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] edit_description Value to be assigned
    def edit_description=(edit_description)
      if !edit_description.nil? && edit_description.to_s.length > 512
        fail ArgumentError, 'invalid value for "edit_description", the character length must be smaller than or equal to 512.'
      end

      @edit_description = edit_description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_number == o.batch_number &&
          batch_claim == o.batch_claim &&
          claim_seq == o.claim_seq &&
          adjustment_seq == o.adjustment_seq &&
          amount_due == o.amount_due &&
          applied_service == o.applied_service &&
          edit_code == o.edit_code &&
          edit_description == o.edit_description &&
          rand_c == o.rand_c &&
          savings == o.savings &&
          zelis_fees == o.zelis_fees
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_number, batch_claim, claim_seq, adjustment_seq, amount_due, applied_service, edit_code, edit_description, rand_c, savings, zelis_fees].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
