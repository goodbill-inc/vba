=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ProviderDRG
    # Unique identifier for each DRG configuration setting. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :provider_drg_key

    # Indicates whether the line is applied to OON claims. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :apply_oon

    # Cost to charge ratio used for DRG calculations.
    attr_accessor :cost_to_charge

    # Specifies a User-defined DRG cluster required for adjudication matching.
    attr_accessor :dr_g_cluster

    # Rate used for DRG calculations
    attr_accessor :dr_g_rate

    # Allows the User to select an existing DRG schedule to base their pricing upon. These DRG Schedules need to be provided by the User and uploaded by VBA.
    attr_accessor :dr_g_schedule

    # Start of the range of acceptable service dates for the rate line. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :effective_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Ex code associated with the price line.
    attr_accessor :ex_code

    # When selected, if the DRG rate exceeds the Bill Price, set the price to the Bill Price Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :max_allowed_at_billed

    # If the total billed amount is greater than or equal to the ‘Outlier Amount’, the ‘Outlier Type’ calculation is considered.
    attr_accessor :min_amount

    # Identifies the required Network for adjudication matching.
    attr_accessor :network_id

    # This indicates the outlier calculation to be performed as part of the DRG calculation.
    attr_accessor :outlier_type

    # The Provider ID this DRG setting is being applied.
    attr_accessor :provider_id

    # End of the range of acceptable service dates for the rate line.
    attr_accessor :term_date

    # Trim point used for DRG calculations.
    attr_accessor :trim_point

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Variable cost factor used for DRG calculations.
    attr_accessor :variable_cost_factor

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_drg_key' => :'providerDRG_Key',
        :'apply_oon' => :'apply_OON',
        :'cost_to_charge' => :'cost_To_Charge',
        :'dr_g_cluster' => :'drG_Cluster',
        :'dr_g_rate' => :'drG_Rate',
        :'dr_g_schedule' => :'drG_Schedule',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'max_allowed_at_billed' => :'max_Allowed_At_Billed',
        :'min_amount' => :'min_Amount',
        :'network_id' => :'network_ID',
        :'outlier_type' => :'outlier_Type',
        :'provider_id' => :'provider_ID',
        :'term_date' => :'term_Date',
        :'trim_point' => :'trim_Point',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'variable_cost_factor' => :'variable_Cost_Factor'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_drg_key' => :'Integer',
        :'apply_oon' => :'Boolean',
        :'cost_to_charge' => :'Float',
        :'dr_g_cluster' => :'String',
        :'dr_g_rate' => :'Float',
        :'dr_g_schedule' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'max_allowed_at_billed' => :'Boolean',
        :'min_amount' => :'Float',
        :'network_id' => :'String',
        :'outlier_type' => :'String',
        :'provider_id' => :'String',
        :'term_date' => :'Time',
        :'trim_point' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'variable_cost_factor' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'cost_to_charge',
        :'dr_g_cluster',
        :'dr_g_rate',
        :'dr_g_schedule',
        :'entry_user',
        :'ex_code',
        :'min_amount',
        :'network_id',
        :'outlier_type',
        :'term_date',
        :'trim_point',
        :'update_user',
        :'variable_cost_factor'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ProviderDRG` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ProviderDRG`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_drg_key')
        self.provider_drg_key = attributes[:'provider_drg_key']
      else
        self.provider_drg_key = nil
      end

      if attributes.key?(:'apply_oon')
        self.apply_oon = attributes[:'apply_oon']
      else
        self.apply_oon = nil
      end

      if attributes.key?(:'cost_to_charge')
        self.cost_to_charge = attributes[:'cost_to_charge']
      end

      if attributes.key?(:'dr_g_cluster')
        self.dr_g_cluster = attributes[:'dr_g_cluster']
      end

      if attributes.key?(:'dr_g_rate')
        self.dr_g_rate = attributes[:'dr_g_rate']
      end

      if attributes.key?(:'dr_g_schedule')
        self.dr_g_schedule = attributes[:'dr_g_schedule']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'max_allowed_at_billed')
        self.max_allowed_at_billed = attributes[:'max_allowed_at_billed']
      else
        self.max_allowed_at_billed = nil
      end

      if attributes.key?(:'min_amount')
        self.min_amount = attributes[:'min_amount']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end

      if attributes.key?(:'outlier_type')
        self.outlier_type = attributes[:'outlier_type']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      else
        self.provider_id = nil
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'trim_point')
        self.trim_point = attributes[:'trim_point']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'variable_cost_factor')
        self.variable_cost_factor = attributes[:'variable_cost_factor']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @provider_drg_key.nil?
        invalid_properties.push('invalid value for "provider_drg_key", provider_drg_key cannot be nil.')
      end

      if @apply_oon.nil?
        invalid_properties.push('invalid value for "apply_oon", apply_oon cannot be nil.')
      end

      if !@dr_g_cluster.nil? && @dr_g_cluster.to_s.length > 32
        invalid_properties.push('invalid value for "dr_g_cluster", the character length must be smaller than or equal to 32.')
      end

      if !@dr_g_schedule.nil? && @dr_g_schedule.to_s.length > 16
        invalid_properties.push('invalid value for "dr_g_schedule", the character length must be smaller than or equal to 16.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if @max_allowed_at_billed.nil?
        invalid_properties.push('invalid value for "max_allowed_at_billed", max_allowed_at_billed cannot be nil.')
      end

      if !@network_id.nil? && @network_id.to_s.length > 50
        invalid_properties.push('invalid value for "network_id", the character length must be smaller than or equal to 50.')
      end

      if !@outlier_type.nil? && @outlier_type.to_s.length > 1
        invalid_properties.push('invalid value for "outlier_type", the character length must be smaller than or equal to 1.')
      end

      if @provider_id.nil?
        invalid_properties.push('invalid value for "provider_id", provider_id cannot be nil.')
      end

      if @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if @provider_id.to_s.length < 1
        invalid_properties.push('invalid value for "provider_id", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @provider_drg_key.nil?
      return false if @apply_oon.nil?
      return false if !@dr_g_cluster.nil? && @dr_g_cluster.to_s.length > 32
      return false if !@dr_g_schedule.nil? && @dr_g_schedule.to_s.length > 16
      return false if @effective_date.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if @max_allowed_at_billed.nil?
      return false if !@network_id.nil? && @network_id.to_s.length > 50
      return false if !@outlier_type.nil? && @outlier_type.to_s.length > 1
      return false if @provider_id.nil?
      return false if @provider_id.to_s.length > 20
      return false if @provider_id.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_drg_key Value to be assigned
    def provider_drg_key=(provider_drg_key)
      if provider_drg_key.nil?
        fail ArgumentError, 'provider_drg_key cannot be nil'
      end

      @provider_drg_key = provider_drg_key
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_oon Value to be assigned
    def apply_oon=(apply_oon)
      if apply_oon.nil?
        fail ArgumentError, 'apply_oon cannot be nil'
      end

      @apply_oon = apply_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] dr_g_cluster Value to be assigned
    def dr_g_cluster=(dr_g_cluster)
      if !dr_g_cluster.nil? && dr_g_cluster.to_s.length > 32
        fail ArgumentError, 'invalid value for "dr_g_cluster", the character length must be smaller than or equal to 32.'
      end

      @dr_g_cluster = dr_g_cluster
    end

    # Custom attribute writer method with validation
    # @param [Object] dr_g_schedule Value to be assigned
    def dr_g_schedule=(dr_g_schedule)
      if !dr_g_schedule.nil? && dr_g_schedule.to_s.length > 16
        fail ArgumentError, 'invalid value for "dr_g_schedule", the character length must be smaller than or equal to 16.'
      end

      @dr_g_schedule = dr_g_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      if effective_date.nil?
        fail ArgumentError, 'effective_date cannot be nil'
      end

      @effective_date = effective_date
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] max_allowed_at_billed Value to be assigned
    def max_allowed_at_billed=(max_allowed_at_billed)
      if max_allowed_at_billed.nil?
        fail ArgumentError, 'max_allowed_at_billed cannot be nil'
      end

      @max_allowed_at_billed = max_allowed_at_billed
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id)
      if !network_id.nil? && network_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "network_id", the character length must be smaller than or equal to 50.'
      end

      @network_id = network_id
    end

    # Custom attribute writer method with validation
    # @param [Object] outlier_type Value to be assigned
    def outlier_type=(outlier_type)
      if !outlier_type.nil? && outlier_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "outlier_type", the character length must be smaller than or equal to 1.'
      end

      @outlier_type = outlier_type
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if provider_id.nil?
        fail ArgumentError, 'provider_id cannot be nil'
      end

      if provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      if provider_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "provider_id", the character length must be great than or equal to 1.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_drg_key == o.provider_drg_key &&
          apply_oon == o.apply_oon &&
          cost_to_charge == o.cost_to_charge &&
          dr_g_cluster == o.dr_g_cluster &&
          dr_g_rate == o.dr_g_rate &&
          dr_g_schedule == o.dr_g_schedule &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          max_allowed_at_billed == o.max_allowed_at_billed &&
          min_amount == o.min_amount &&
          network_id == o.network_id &&
          outlier_type == o.outlier_type &&
          provider_id == o.provider_id &&
          term_date == o.term_date &&
          trim_point == o.trim_point &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          variable_cost_factor == o.variable_cost_factor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_drg_key, apply_oon, cost_to_charge, dr_g_cluster, dr_g_rate, dr_g_schedule, effective_date, entry_date, entry_user, ex_code, max_allowed_at_billed, min_amount, network_id, outlier_type, provider_id, term_date, trim_point, update_date, update_user, variable_cost_factor].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
