=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ReinsContract
    # Unique identifier for each Reinsurance Contract. This is system generated. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :reins_contract_key

    # Notes the threshold for when a member will have an ex code applied to their claim as they incur more claims against this contract.
    attr_accessor :adjudicate_threshold

    # The ex code that is applied to claims for members who exceed the adjudication threshold.
    attr_accessor :adjudicate_threshold_ex_code

    # Notes if the \"Adjudicate Threshold\" is a percentage or flat value. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :adjudicate_threshold_pct

    # The aggregating Spec. Max for all members on this Reinsurance Contract.
    attr_accessor :aggregate_max

    # The aggregating Spec. Deductible for all members on this Reinsurance Contract.
    attr_accessor :aggregate_specific_deductible

    # The attachment point for reinsurance reporting.
    attr_accessor :attachment_minimum

    # Notes if the attachment minimu is a monthly or annual value.
    attr_accessor :attachment_minimum_term

    # References the Carrier.Carrier_Key value on referenced table.
    attr_accessor :carrier_key

    # User defined contract period from the ReinsContractCycle table.
    attr_accessor :contract_cycle

    # The contract ID assigned by the client to this Reinsurance Contract.
    attr_accessor :contract_id

    # Contract Level notes what level the members and claims on this contract are included. The level can be Group, Division or Subscriber.
    attr_accessor :contract_level

    # The status of the contract, Open or Closed.
    attr_accessor :contract_status

    # The type of contractly, typically a 12/12 or 12/24 contract.
    attr_accessor :contract_type

    # The description of this Reinsurance Contract.
    attr_accessor :description

    # Impacts how eligiblity is calculated when determining if a member applies to this contract.
    attr_accessor :disenrolled_by_day

    # When contract Level is Division, this is the Division (in combination with Group) that is applicable to this Reinsurance Contract.
    attr_accessor :division_id

    attr_accessor :domestic_claim_criteria_key

    # The effective date of this Reinsurance Contract. Used in reporting and transaction processing.
    attr_accessor :effective_date

    # Used in custom reporting. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :enroll_disenroll_by_on_agg_report

    # Impacts how eligiblity is calculated when determining if a member applies to this contract.
    attr_accessor :enrolled_by_day

    # Used in custom reporting.
    attr_accessor :enrollment_baseline

    # Used in custom reporting.
    attr_accessor :enrollment_change_threshold

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # When contract Level is Group, this is the Group that is applicable to this Reinsurance Contract.
    attr_accessor :group_id

    # The policy number associated with this Reinsurance Contract.
    attr_accessor :policy_number

    # Notes if this is \"Spec. Advance Fund\" where all claims are included or \"Pay and Reimburse\" where only paid claims are included in the calculation.
    attr_accessor :reimburse_method

    # Indicates if an Event should be generated and user or group notified when the threshold has been exceeded. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :spec_threshold_notify

    # The individual member Spec. Deductible for this Reinsurance Contract.
    attr_accessor :specific_deductible

    # The family Spec. Deductible for this Reinsurance Contract. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :specific_deductible_family

    # The Spec. Limit for this Reinsurance Contract.
    attr_accessor :specific_max

    # Notes the threshold for when a member will be considered part of the Member Loss report.
    attr_accessor :specific_reporting_threshold

    # Notes if the Specific_Reporting_Threshold value is a percentage or set value. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :specific_reporting_threshold_pct

    # The individual state attachment minimum for reporting based on the state of the member.
    attr_accessor :state_minimum

    # When contract Level is Subscriber, this is the Subscriber (in combination with Group and Division) that is applicable to this Reinsurance Contract.
    attr_accessor :subscriber_id

    # Allows the user to create a template contract that can then be \"copied\" whenever new contracts are created. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :template_contract

    # The term date of this Reinsurance Contract. Used in reporting and transaction processing.
    attr_accessor :term_date

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Indicates if this contract uses \"Reinsurance Levels\" for Reinsurance Calculations. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_reins_level

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'reins_contract_key' => :'reinsContract_Key',
        :'adjudicate_threshold' => :'adjudicate_Threshold',
        :'adjudicate_threshold_ex_code' => :'adjudicate_Threshold_Ex_Code',
        :'adjudicate_threshold_pct' => :'adjudicate_Threshold_Pct',
        :'aggregate_max' => :'aggregate_Max',
        :'aggregate_specific_deductible' => :'aggregate_Specific_Deductible',
        :'attachment_minimum' => :'attachment_Minimum',
        :'attachment_minimum_term' => :'attachment_Minimum_Term',
        :'carrier_key' => :'carrier_Key',
        :'contract_cycle' => :'contract_Cycle',
        :'contract_id' => :'contract_ID',
        :'contract_level' => :'contract_Level',
        :'contract_status' => :'contract_Status',
        :'contract_type' => :'contract_Type',
        :'description' => :'description',
        :'disenrolled_by_day' => :'disenrolled_By_Day',
        :'division_id' => :'division_ID',
        :'domestic_claim_criteria_key' => :'domestic_Claim_Criteria_Key',
        :'effective_date' => :'effective_Date',
        :'enroll_disenroll_by_on_agg_report' => :'enroll_Disenroll_By_On_Agg_Report',
        :'enrolled_by_day' => :'enrolled_By_Day',
        :'enrollment_baseline' => :'enrollment_Baseline',
        :'enrollment_change_threshold' => :'enrollment_Change_Threshold',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'policy_number' => :'policy_Number',
        :'reimburse_method' => :'reimburse_Method',
        :'spec_threshold_notify' => :'spec_Threshold_Notify',
        :'specific_deductible' => :'specific_Deductible',
        :'specific_deductible_family' => :'specific_Deductible_Family',
        :'specific_max' => :'specific_Max',
        :'specific_reporting_threshold' => :'specific_Reporting_Threshold',
        :'specific_reporting_threshold_pct' => :'specific_Reporting_Threshold_Pct',
        :'state_minimum' => :'state_Minimum',
        :'subscriber_id' => :'subscriber_ID',
        :'template_contract' => :'template_Contract',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_reins_level' => :'use_Reins_Level'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'reins_contract_key' => :'Integer',
        :'adjudicate_threshold' => :'Float',
        :'adjudicate_threshold_ex_code' => :'String',
        :'adjudicate_threshold_pct' => :'Boolean',
        :'aggregate_max' => :'Float',
        :'aggregate_specific_deductible' => :'Float',
        :'attachment_minimum' => :'Float',
        :'attachment_minimum_term' => :'String',
        :'carrier_key' => :'Integer',
        :'contract_cycle' => :'String',
        :'contract_id' => :'String',
        :'contract_level' => :'String',
        :'contract_status' => :'String',
        :'contract_type' => :'String',
        :'description' => :'String',
        :'disenrolled_by_day' => :'Integer',
        :'division_id' => :'String',
        :'domestic_claim_criteria_key' => :'Integer',
        :'effective_date' => :'Time',
        :'enroll_disenroll_by_on_agg_report' => :'Boolean',
        :'enrolled_by_day' => :'Integer',
        :'enrollment_baseline' => :'Integer',
        :'enrollment_change_threshold' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'policy_number' => :'String',
        :'reimburse_method' => :'String',
        :'spec_threshold_notify' => :'Boolean',
        :'specific_deductible' => :'Float',
        :'specific_deductible_family' => :'Boolean',
        :'specific_max' => :'Float',
        :'specific_reporting_threshold' => :'Float',
        :'specific_reporting_threshold_pct' => :'Boolean',
        :'state_minimum' => :'Float',
        :'subscriber_id' => :'String',
        :'template_contract' => :'Boolean',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_reins_level' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adjudicate_threshold',
        :'adjudicate_threshold_ex_code',
        :'aggregate_max',
        :'aggregate_specific_deductible',
        :'attachment_minimum',
        :'attachment_minimum_term',
        :'carrier_key',
        :'contract_cycle',
        :'contract_id',
        :'contract_level',
        :'contract_status',
        :'contract_type',
        :'description',
        :'disenrolled_by_day',
        :'division_id',
        :'domestic_claim_criteria_key',
        :'effective_date',
        :'enrolled_by_day',
        :'enrollment_baseline',
        :'enrollment_change_threshold',
        :'entry_user',
        :'group_id',
        :'policy_number',
        :'reimburse_method',
        :'specific_deductible',
        :'specific_max',
        :'specific_reporting_threshold',
        :'state_minimum',
        :'subscriber_id',
        :'term_date',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ReinsContract` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ReinsContract`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'reins_contract_key')
        self.reins_contract_key = attributes[:'reins_contract_key']
      else
        self.reins_contract_key = nil
      end

      if attributes.key?(:'adjudicate_threshold')
        self.adjudicate_threshold = attributes[:'adjudicate_threshold']
      end

      if attributes.key?(:'adjudicate_threshold_ex_code')
        self.adjudicate_threshold_ex_code = attributes[:'adjudicate_threshold_ex_code']
      end

      if attributes.key?(:'adjudicate_threshold_pct')
        self.adjudicate_threshold_pct = attributes[:'adjudicate_threshold_pct']
      else
        self.adjudicate_threshold_pct = nil
      end

      if attributes.key?(:'aggregate_max')
        self.aggregate_max = attributes[:'aggregate_max']
      end

      if attributes.key?(:'aggregate_specific_deductible')
        self.aggregate_specific_deductible = attributes[:'aggregate_specific_deductible']
      end

      if attributes.key?(:'attachment_minimum')
        self.attachment_minimum = attributes[:'attachment_minimum']
      end

      if attributes.key?(:'attachment_minimum_term')
        self.attachment_minimum_term = attributes[:'attachment_minimum_term']
      end

      if attributes.key?(:'carrier_key')
        self.carrier_key = attributes[:'carrier_key']
      end

      if attributes.key?(:'contract_cycle')
        self.contract_cycle = attributes[:'contract_cycle']
      end

      if attributes.key?(:'contract_id')
        self.contract_id = attributes[:'contract_id']
      end

      if attributes.key?(:'contract_level')
        self.contract_level = attributes[:'contract_level']
      end

      if attributes.key?(:'contract_status')
        self.contract_status = attributes[:'contract_status']
      end

      if attributes.key?(:'contract_type')
        self.contract_type = attributes[:'contract_type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'disenrolled_by_day')
        self.disenrolled_by_day = attributes[:'disenrolled_by_day']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'domestic_claim_criteria_key')
        self.domestic_claim_criteria_key = attributes[:'domestic_claim_criteria_key']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'enroll_disenroll_by_on_agg_report')
        self.enroll_disenroll_by_on_agg_report = attributes[:'enroll_disenroll_by_on_agg_report']
      else
        self.enroll_disenroll_by_on_agg_report = nil
      end

      if attributes.key?(:'enrolled_by_day')
        self.enrolled_by_day = attributes[:'enrolled_by_day']
      end

      if attributes.key?(:'enrollment_baseline')
        self.enrollment_baseline = attributes[:'enrollment_baseline']
      end

      if attributes.key?(:'enrollment_change_threshold')
        self.enrollment_change_threshold = attributes[:'enrollment_change_threshold']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'policy_number')
        self.policy_number = attributes[:'policy_number']
      end

      if attributes.key?(:'reimburse_method')
        self.reimburse_method = attributes[:'reimburse_method']
      end

      if attributes.key?(:'spec_threshold_notify')
        self.spec_threshold_notify = attributes[:'spec_threshold_notify']
      else
        self.spec_threshold_notify = nil
      end

      if attributes.key?(:'specific_deductible')
        self.specific_deductible = attributes[:'specific_deductible']
      end

      if attributes.key?(:'specific_deductible_family')
        self.specific_deductible_family = attributes[:'specific_deductible_family']
      else
        self.specific_deductible_family = nil
      end

      if attributes.key?(:'specific_max')
        self.specific_max = attributes[:'specific_max']
      end

      if attributes.key?(:'specific_reporting_threshold')
        self.specific_reporting_threshold = attributes[:'specific_reporting_threshold']
      end

      if attributes.key?(:'specific_reporting_threshold_pct')
        self.specific_reporting_threshold_pct = attributes[:'specific_reporting_threshold_pct']
      else
        self.specific_reporting_threshold_pct = nil
      end

      if attributes.key?(:'state_minimum')
        self.state_minimum = attributes[:'state_minimum']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'template_contract')
        self.template_contract = attributes[:'template_contract']
      else
        self.template_contract = nil
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_reins_level')
        self.use_reins_level = attributes[:'use_reins_level']
      else
        self.use_reins_level = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @reins_contract_key.nil?
        invalid_properties.push('invalid value for "reins_contract_key", reins_contract_key cannot be nil.')
      end

      if !@adjudicate_threshold_ex_code.nil? && @adjudicate_threshold_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "adjudicate_threshold_ex_code", the character length must be smaller than or equal to 6.')
      end

      if @adjudicate_threshold_pct.nil?
        invalid_properties.push('invalid value for "adjudicate_threshold_pct", adjudicate_threshold_pct cannot be nil.')
      end

      if !@attachment_minimum_term.nil? && @attachment_minimum_term.to_s.length > 1
        invalid_properties.push('invalid value for "attachment_minimum_term", the character length must be smaller than or equal to 1.')
      end

      if !@contract_cycle.nil? && @contract_cycle.to_s.length > 32
        invalid_properties.push('invalid value for "contract_cycle", the character length must be smaller than or equal to 32.')
      end

      if !@contract_id.nil? && @contract_id.to_s.length > 64
        invalid_properties.push('invalid value for "contract_id", the character length must be smaller than or equal to 64.')
      end

      if !@contract_level.nil? && @contract_level.to_s.length > 1
        invalid_properties.push('invalid value for "contract_level", the character length must be smaller than or equal to 1.')
      end

      if !@contract_status.nil? && @contract_status.to_s.length > 32
        invalid_properties.push('invalid value for "contract_status", the character length must be smaller than or equal to 32.')
      end

      if !@contract_type.nil? && @contract_type.to_s.length > 32
        invalid_properties.push('invalid value for "contract_type", the character length must be smaller than or equal to 32.')
      end

      if !@description.nil? && @description.to_s.length > 512
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 512.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @enroll_disenroll_by_on_agg_report.nil?
        invalid_properties.push('invalid value for "enroll_disenroll_by_on_agg_report", enroll_disenroll_by_on_agg_report cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@policy_number.nil? && @policy_number.to_s.length > 64
        invalid_properties.push('invalid value for "policy_number", the character length must be smaller than or equal to 64.')
      end

      if !@reimburse_method.nil? && @reimburse_method.to_s.length > 32
        invalid_properties.push('invalid value for "reimburse_method", the character length must be smaller than or equal to 32.')
      end

      if @spec_threshold_notify.nil?
        invalid_properties.push('invalid value for "spec_threshold_notify", spec_threshold_notify cannot be nil.')
      end

      if @specific_deductible_family.nil?
        invalid_properties.push('invalid value for "specific_deductible_family", specific_deductible_family cannot be nil.')
      end

      if @specific_reporting_threshold_pct.nil?
        invalid_properties.push('invalid value for "specific_reporting_threshold_pct", specific_reporting_threshold_pct cannot be nil.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @template_contract.nil?
        invalid_properties.push('invalid value for "template_contract", template_contract cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_reins_level.nil?
        invalid_properties.push('invalid value for "use_reins_level", use_reins_level cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @reins_contract_key.nil?
      return false if !@adjudicate_threshold_ex_code.nil? && @adjudicate_threshold_ex_code.to_s.length > 6
      return false if @adjudicate_threshold_pct.nil?
      return false if !@attachment_minimum_term.nil? && @attachment_minimum_term.to_s.length > 1
      return false if !@contract_cycle.nil? && @contract_cycle.to_s.length > 32
      return false if !@contract_id.nil? && @contract_id.to_s.length > 64
      return false if !@contract_level.nil? && @contract_level.to_s.length > 1
      return false if !@contract_status.nil? && @contract_status.to_s.length > 32
      return false if !@contract_type.nil? && @contract_type.to_s.length > 32
      return false if !@description.nil? && @description.to_s.length > 512
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if @enroll_disenroll_by_on_agg_report.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@policy_number.nil? && @policy_number.to_s.length > 64
      return false if !@reimburse_method.nil? && @reimburse_method.to_s.length > 32
      return false if @spec_threshold_notify.nil?
      return false if @specific_deductible_family.nil?
      return false if @specific_reporting_threshold_pct.nil?
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if @template_contract.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_reins_level.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] reins_contract_key Value to be assigned
    def reins_contract_key=(reins_contract_key)
      if reins_contract_key.nil?
        fail ArgumentError, 'reins_contract_key cannot be nil'
      end

      @reins_contract_key = reins_contract_key
    end

    # Custom attribute writer method with validation
    # @param [Object] adjudicate_threshold_ex_code Value to be assigned
    def adjudicate_threshold_ex_code=(adjudicate_threshold_ex_code)
      if !adjudicate_threshold_ex_code.nil? && adjudicate_threshold_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "adjudicate_threshold_ex_code", the character length must be smaller than or equal to 6.'
      end

      @adjudicate_threshold_ex_code = adjudicate_threshold_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] adjudicate_threshold_pct Value to be assigned
    def adjudicate_threshold_pct=(adjudicate_threshold_pct)
      if adjudicate_threshold_pct.nil?
        fail ArgumentError, 'adjudicate_threshold_pct cannot be nil'
      end

      @adjudicate_threshold_pct = adjudicate_threshold_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] attachment_minimum_term Value to be assigned
    def attachment_minimum_term=(attachment_minimum_term)
      if !attachment_minimum_term.nil? && attachment_minimum_term.to_s.length > 1
        fail ArgumentError, 'invalid value for "attachment_minimum_term", the character length must be smaller than or equal to 1.'
      end

      @attachment_minimum_term = attachment_minimum_term
    end

    # Custom attribute writer method with validation
    # @param [Object] contract_cycle Value to be assigned
    def contract_cycle=(contract_cycle)
      if !contract_cycle.nil? && contract_cycle.to_s.length > 32
        fail ArgumentError, 'invalid value for "contract_cycle", the character length must be smaller than or equal to 32.'
      end

      @contract_cycle = contract_cycle
    end

    # Custom attribute writer method with validation
    # @param [Object] contract_id Value to be assigned
    def contract_id=(contract_id)
      if !contract_id.nil? && contract_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "contract_id", the character length must be smaller than or equal to 64.'
      end

      @contract_id = contract_id
    end

    # Custom attribute writer method with validation
    # @param [Object] contract_level Value to be assigned
    def contract_level=(contract_level)
      if !contract_level.nil? && contract_level.to_s.length > 1
        fail ArgumentError, 'invalid value for "contract_level", the character length must be smaller than or equal to 1.'
      end

      @contract_level = contract_level
    end

    # Custom attribute writer method with validation
    # @param [Object] contract_status Value to be assigned
    def contract_status=(contract_status)
      if !contract_status.nil? && contract_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "contract_status", the character length must be smaller than or equal to 32.'
      end

      @contract_status = contract_status
    end

    # Custom attribute writer method with validation
    # @param [Object] contract_type Value to be assigned
    def contract_type=(contract_type)
      if !contract_type.nil? && contract_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "contract_type", the character length must be smaller than or equal to 32.'
      end

      @contract_type = contract_type
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 512
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 512.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] enroll_disenroll_by_on_agg_report Value to be assigned
    def enroll_disenroll_by_on_agg_report=(enroll_disenroll_by_on_agg_report)
      if enroll_disenroll_by_on_agg_report.nil?
        fail ArgumentError, 'enroll_disenroll_by_on_agg_report cannot be nil'
      end

      @enroll_disenroll_by_on_agg_report = enroll_disenroll_by_on_agg_report
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] policy_number Value to be assigned
    def policy_number=(policy_number)
      if !policy_number.nil? && policy_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "policy_number", the character length must be smaller than or equal to 64.'
      end

      @policy_number = policy_number
    end

    # Custom attribute writer method with validation
    # @param [Object] reimburse_method Value to be assigned
    def reimburse_method=(reimburse_method)
      if !reimburse_method.nil? && reimburse_method.to_s.length > 32
        fail ArgumentError, 'invalid value for "reimburse_method", the character length must be smaller than or equal to 32.'
      end

      @reimburse_method = reimburse_method
    end

    # Custom attribute writer method with validation
    # @param [Object] spec_threshold_notify Value to be assigned
    def spec_threshold_notify=(spec_threshold_notify)
      if spec_threshold_notify.nil?
        fail ArgumentError, 'spec_threshold_notify cannot be nil'
      end

      @spec_threshold_notify = spec_threshold_notify
    end

    # Custom attribute writer method with validation
    # @param [Object] specific_deductible_family Value to be assigned
    def specific_deductible_family=(specific_deductible_family)
      if specific_deductible_family.nil?
        fail ArgumentError, 'specific_deductible_family cannot be nil'
      end

      @specific_deductible_family = specific_deductible_family
    end

    # Custom attribute writer method with validation
    # @param [Object] specific_reporting_threshold_pct Value to be assigned
    def specific_reporting_threshold_pct=(specific_reporting_threshold_pct)
      if specific_reporting_threshold_pct.nil?
        fail ArgumentError, 'specific_reporting_threshold_pct cannot be nil'
      end

      @specific_reporting_threshold_pct = specific_reporting_threshold_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] template_contract Value to be assigned
    def template_contract=(template_contract)
      if template_contract.nil?
        fail ArgumentError, 'template_contract cannot be nil'
      end

      @template_contract = template_contract
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_reins_level Value to be assigned
    def use_reins_level=(use_reins_level)
      if use_reins_level.nil?
        fail ArgumentError, 'use_reins_level cannot be nil'
      end

      @use_reins_level = use_reins_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          reins_contract_key == o.reins_contract_key &&
          adjudicate_threshold == o.adjudicate_threshold &&
          adjudicate_threshold_ex_code == o.adjudicate_threshold_ex_code &&
          adjudicate_threshold_pct == o.adjudicate_threshold_pct &&
          aggregate_max == o.aggregate_max &&
          aggregate_specific_deductible == o.aggregate_specific_deductible &&
          attachment_minimum == o.attachment_minimum &&
          attachment_minimum_term == o.attachment_minimum_term &&
          carrier_key == o.carrier_key &&
          contract_cycle == o.contract_cycle &&
          contract_id == o.contract_id &&
          contract_level == o.contract_level &&
          contract_status == o.contract_status &&
          contract_type == o.contract_type &&
          description == o.description &&
          disenrolled_by_day == o.disenrolled_by_day &&
          division_id == o.division_id &&
          domestic_claim_criteria_key == o.domestic_claim_criteria_key &&
          effective_date == o.effective_date &&
          enroll_disenroll_by_on_agg_report == o.enroll_disenroll_by_on_agg_report &&
          enrolled_by_day == o.enrolled_by_day &&
          enrollment_baseline == o.enrollment_baseline &&
          enrollment_change_threshold == o.enrollment_change_threshold &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          policy_number == o.policy_number &&
          reimburse_method == o.reimburse_method &&
          spec_threshold_notify == o.spec_threshold_notify &&
          specific_deductible == o.specific_deductible &&
          specific_deductible_family == o.specific_deductible_family &&
          specific_max == o.specific_max &&
          specific_reporting_threshold == o.specific_reporting_threshold &&
          specific_reporting_threshold_pct == o.specific_reporting_threshold_pct &&
          state_minimum == o.state_minimum &&
          subscriber_id == o.subscriber_id &&
          template_contract == o.template_contract &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_reins_level == o.use_reins_level
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [reins_contract_key, adjudicate_threshold, adjudicate_threshold_ex_code, adjudicate_threshold_pct, aggregate_max, aggregate_specific_deductible, attachment_minimum, attachment_minimum_term, carrier_key, contract_cycle, contract_id, contract_level, contract_status, contract_type, description, disenrolled_by_day, division_id, domestic_claim_criteria_key, effective_date, enroll_disenroll_by_on_agg_report, enrolled_by_day, enrollment_baseline, enrollment_change_threshold, entry_date, entry_user, group_id, policy_number, reimburse_method, spec_threshold_notify, specific_deductible, specific_deductible_family, specific_max, specific_reporting_threshold, specific_reporting_threshold_pct, state_minimum, subscriber_id, template_contract, term_date, update_date, update_user, use_reins_level].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
