=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class AuthCode
    # Code that indicates the authorization status.
    attr_accessor :auth_code

    # Specifies what action will be applied by the associated status code: Approved - full authorization amount will be approved. Denied - full authorization amount will be denied. Pended - requested authorization amount has been pended for review. Voided - authorization has been removed. Partial Approval - only a partial amount of the authorization has been approved.
    attr_accessor :auth_action

    # Description of the authorization status tied to the associated code.
    attr_accessor :description

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_code' => :'auth_Code',
        :'auth_action' => :'auth_Action',
        :'description' => :'description'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_code' => :'String',
        :'auth_action' => :'String',
        :'description' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'auth_action',
        :'description'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::AuthCode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::AuthCode`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_code')
        self.auth_code = attributes[:'auth_code']
      else
        self.auth_code = nil
      end

      if attributes.key?(:'auth_action')
        self.auth_action = attributes[:'auth_action']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @auth_code.nil?
        invalid_properties.push('invalid value for "auth_code", auth_code cannot be nil.')
      end

      if @auth_code.to_s.length > 8
        invalid_properties.push('invalid value for "auth_code", the character length must be smaller than or equal to 8.')
      end

      if @auth_code.to_s.length < 1
        invalid_properties.push('invalid value for "auth_code", the character length must be great than or equal to 1.')
      end

      if !@auth_action.nil? && @auth_action.to_s.length > 1
        invalid_properties.push('invalid value for "auth_action", the character length must be smaller than or equal to 1.')
      end

      if !@description.nil? && @description.to_s.length > 64
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 64.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @auth_code.nil?
      return false if @auth_code.to_s.length > 8
      return false if @auth_code.to_s.length < 1
      return false if !@auth_action.nil? && @auth_action.to_s.length > 1
      return false if !@description.nil? && @description.to_s.length > 64
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_code Value to be assigned
    def auth_code=(auth_code)
      if auth_code.nil?
        fail ArgumentError, 'auth_code cannot be nil'
      end

      if auth_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "auth_code", the character length must be smaller than or equal to 8.'
      end

      if auth_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "auth_code", the character length must be great than or equal to 1.'
      end

      @auth_code = auth_code
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_action Value to be assigned
    def auth_action=(auth_action)
      if !auth_action.nil? && auth_action.to_s.length > 1
        fail ArgumentError, 'invalid value for "auth_action", the character length must be smaller than or equal to 1.'
      end

      @auth_action = auth_action
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 64
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 64.'
      end

      @description = description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_code == o.auth_code &&
          auth_action == o.auth_action &&
          description == o.description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_code, auth_action, description].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
