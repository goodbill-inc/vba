=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class EventSchedule
    # ID of the event schedule. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :schedule_id

    # Description of the event schedule.
    attr_accessor :description

    # Indicates the date when the event will stop occurring.
    attr_accessor :end_date

    # Indicates how the event will end.
    attr_accessor :end_option

    # Indicates at what time the event will cease to occur on the defined date(s).
    attr_accessor :end_time

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # ID of the event. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :event_id

    # Month the event occurs.
    attr_accessor :frequency

    # Day the event occurs.
    attr_accessor :frequency_factor

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :friday

    # Interval Options are Days, Weekdays, Day in Month, Relative Day in Month, Date, or date in Month.
    attr_accessor :interval_option

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :monday

    # Date when the next event occurrence will take place.
    attr_accessor :next_scheduled_date

    # Time when the next event occurrence will take place.
    attr_accessor :next_scheduled_time

    # Flag identifying a sound is associated with the event Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :play_sound

    # Flag specifying the event should be regenerated upon completion Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :regenerate_event

    # Date part used to qualify the length of interval when the event will regenerate
    attr_accessor :regeneration_date_part

    # Length of interval when the event will regenerate
    attr_accessor :regeneration_interval

    # Day of the week the event occurs.
    attr_accessor :relative_frequency

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :saturday

    # Indicates how often the event will occur. The interval will determine which options are available for the event schedule.
    attr_accessor :schedule_interval

    # Sound file to be played in association with the event
    attr_accessor :sound_file

    # Indicates the date when the event will begin occurring by the defined recurrence options.
    attr_accessor :start_date

    # Indicates at what time the event will occur on the defined date(s).
    attr_accessor :start_time

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :sunday

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :thursday

    # Number of occurrences that will take place before the event ends.
    attr_accessor :total_occurrences

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :tuesday

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Indicates that the event should occur on this day of the week. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :wednesday

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'schedule_id' => :'schedule_ID',
        :'description' => :'description',
        :'end_date' => :'end_Date',
        :'end_option' => :'end_Option',
        :'end_time' => :'end_Time',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'event_id' => :'event_ID',
        :'frequency' => :'frequency',
        :'frequency_factor' => :'frequency_Factor',
        :'friday' => :'friday',
        :'interval_option' => :'interval_Option',
        :'monday' => :'monday',
        :'next_scheduled_date' => :'next_Scheduled_Date',
        :'next_scheduled_time' => :'next_Scheduled_Time',
        :'play_sound' => :'play_Sound',
        :'regenerate_event' => :'regenerate_Event',
        :'regeneration_date_part' => :'regeneration_Date_Part',
        :'regeneration_interval' => :'regeneration_Interval',
        :'relative_frequency' => :'relative_Frequency',
        :'saturday' => :'saturday',
        :'schedule_interval' => :'schedule_Interval',
        :'sound_file' => :'sound_File',
        :'start_date' => :'start_Date',
        :'start_time' => :'start_Time',
        :'sunday' => :'sunday',
        :'thursday' => :'thursday',
        :'total_occurrences' => :'total_Occurrences',
        :'tuesday' => :'tuesday',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'wednesday' => :'wednesday'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'schedule_id' => :'Integer',
        :'description' => :'String',
        :'end_date' => :'Time',
        :'end_option' => :'Integer',
        :'end_time' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'event_id' => :'Integer',
        :'frequency' => :'Integer',
        :'frequency_factor' => :'Integer',
        :'friday' => :'Boolean',
        :'interval_option' => :'Integer',
        :'monday' => :'Boolean',
        :'next_scheduled_date' => :'Time',
        :'next_scheduled_time' => :'Time',
        :'play_sound' => :'Boolean',
        :'regenerate_event' => :'Boolean',
        :'regeneration_date_part' => :'String',
        :'regeneration_interval' => :'Integer',
        :'relative_frequency' => :'Integer',
        :'saturday' => :'Boolean',
        :'schedule_interval' => :'Integer',
        :'sound_file' => :'String',
        :'start_date' => :'Time',
        :'start_time' => :'Time',
        :'sunday' => :'Boolean',
        :'thursday' => :'Boolean',
        :'total_occurrences' => :'Integer',
        :'tuesday' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'wednesday' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'end_date',
        :'end_option',
        :'end_time',
        :'entry_user',
        :'frequency',
        :'frequency_factor',
        :'interval_option',
        :'next_scheduled_date',
        :'next_scheduled_time',
        :'regeneration_date_part',
        :'regeneration_interval',
        :'relative_frequency',
        :'schedule_interval',
        :'sound_file',
        :'start_date',
        :'start_time',
        :'total_occurrences',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::EventSchedule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::EventSchedule`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'schedule_id')
        self.schedule_id = attributes[:'schedule_id']
      else
        self.schedule_id = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'end_option')
        self.end_option = attributes[:'end_option']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      else
        self.event_id = nil
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.key?(:'frequency_factor')
        self.frequency_factor = attributes[:'frequency_factor']
      end

      if attributes.key?(:'friday')
        self.friday = attributes[:'friday']
      else
        self.friday = nil
      end

      if attributes.key?(:'interval_option')
        self.interval_option = attributes[:'interval_option']
      end

      if attributes.key?(:'monday')
        self.monday = attributes[:'monday']
      else
        self.monday = nil
      end

      if attributes.key?(:'next_scheduled_date')
        self.next_scheduled_date = attributes[:'next_scheduled_date']
      end

      if attributes.key?(:'next_scheduled_time')
        self.next_scheduled_time = attributes[:'next_scheduled_time']
      end

      if attributes.key?(:'play_sound')
        self.play_sound = attributes[:'play_sound']
      else
        self.play_sound = nil
      end

      if attributes.key?(:'regenerate_event')
        self.regenerate_event = attributes[:'regenerate_event']
      else
        self.regenerate_event = nil
      end

      if attributes.key?(:'regeneration_date_part')
        self.regeneration_date_part = attributes[:'regeneration_date_part']
      end

      if attributes.key?(:'regeneration_interval')
        self.regeneration_interval = attributes[:'regeneration_interval']
      end

      if attributes.key?(:'relative_frequency')
        self.relative_frequency = attributes[:'relative_frequency']
      end

      if attributes.key?(:'saturday')
        self.saturday = attributes[:'saturday']
      else
        self.saturday = nil
      end

      if attributes.key?(:'schedule_interval')
        self.schedule_interval = attributes[:'schedule_interval']
      end

      if attributes.key?(:'sound_file')
        self.sound_file = attributes[:'sound_file']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'sunday')
        self.sunday = attributes[:'sunday']
      else
        self.sunday = nil
      end

      if attributes.key?(:'thursday')
        self.thursday = attributes[:'thursday']
      else
        self.thursday = nil
      end

      if attributes.key?(:'total_occurrences')
        self.total_occurrences = attributes[:'total_occurrences']
      end

      if attributes.key?(:'tuesday')
        self.tuesday = attributes[:'tuesday']
      else
        self.tuesday = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'wednesday')
        self.wednesday = attributes[:'wednesday']
      else
        self.wednesday = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @schedule_id.nil?
        invalid_properties.push('invalid value for "schedule_id", schedule_id cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 10
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 10.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @event_id.nil?
        invalid_properties.push('invalid value for "event_id", event_id cannot be nil.')
      end

      if @friday.nil?
        invalid_properties.push('invalid value for "friday", friday cannot be nil.')
      end

      if @monday.nil?
        invalid_properties.push('invalid value for "monday", monday cannot be nil.')
      end

      if @play_sound.nil?
        invalid_properties.push('invalid value for "play_sound", play_sound cannot be nil.')
      end

      if @regenerate_event.nil?
        invalid_properties.push('invalid value for "regenerate_event", regenerate_event cannot be nil.')
      end

      if !@regeneration_date_part.nil? && @regeneration_date_part.to_s.length > 10
        invalid_properties.push('invalid value for "regeneration_date_part", the character length must be smaller than or equal to 10.')
      end

      if @saturday.nil?
        invalid_properties.push('invalid value for "saturday", saturday cannot be nil.')
      end

      if !@sound_file.nil? && @sound_file.to_s.length > 256
        invalid_properties.push('invalid value for "sound_file", the character length must be smaller than or equal to 256.')
      end

      if @sunday.nil?
        invalid_properties.push('invalid value for "sunday", sunday cannot be nil.')
      end

      if @thursday.nil?
        invalid_properties.push('invalid value for "thursday", thursday cannot be nil.')
      end

      if @tuesday.nil?
        invalid_properties.push('invalid value for "tuesday", tuesday cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @wednesday.nil?
        invalid_properties.push('invalid value for "wednesday", wednesday cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @schedule_id.nil?
      return false if !@description.nil? && @description.to_s.length > 10
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @event_id.nil?
      return false if @friday.nil?
      return false if @monday.nil?
      return false if @play_sound.nil?
      return false if @regenerate_event.nil?
      return false if !@regeneration_date_part.nil? && @regeneration_date_part.to_s.length > 10
      return false if @saturday.nil?
      return false if !@sound_file.nil? && @sound_file.to_s.length > 256
      return false if @sunday.nil?
      return false if @thursday.nil?
      return false if @tuesday.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @wednesday.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_id Value to be assigned
    def schedule_id=(schedule_id)
      if schedule_id.nil?
        fail ArgumentError, 'schedule_id cannot be nil'
      end

      @schedule_id = schedule_id
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 10
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 10.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] event_id Value to be assigned
    def event_id=(event_id)
      if event_id.nil?
        fail ArgumentError, 'event_id cannot be nil'
      end

      @event_id = event_id
    end

    # Custom attribute writer method with validation
    # @param [Object] friday Value to be assigned
    def friday=(friday)
      if friday.nil?
        fail ArgumentError, 'friday cannot be nil'
      end

      @friday = friday
    end

    # Custom attribute writer method with validation
    # @param [Object] monday Value to be assigned
    def monday=(monday)
      if monday.nil?
        fail ArgumentError, 'monday cannot be nil'
      end

      @monday = monday
    end

    # Custom attribute writer method with validation
    # @param [Object] play_sound Value to be assigned
    def play_sound=(play_sound)
      if play_sound.nil?
        fail ArgumentError, 'play_sound cannot be nil'
      end

      @play_sound = play_sound
    end

    # Custom attribute writer method with validation
    # @param [Object] regenerate_event Value to be assigned
    def regenerate_event=(regenerate_event)
      if regenerate_event.nil?
        fail ArgumentError, 'regenerate_event cannot be nil'
      end

      @regenerate_event = regenerate_event
    end

    # Custom attribute writer method with validation
    # @param [Object] regeneration_date_part Value to be assigned
    def regeneration_date_part=(regeneration_date_part)
      if !regeneration_date_part.nil? && regeneration_date_part.to_s.length > 10
        fail ArgumentError, 'invalid value for "regeneration_date_part", the character length must be smaller than or equal to 10.'
      end

      @regeneration_date_part = regeneration_date_part
    end

    # Custom attribute writer method with validation
    # @param [Object] saturday Value to be assigned
    def saturday=(saturday)
      if saturday.nil?
        fail ArgumentError, 'saturday cannot be nil'
      end

      @saturday = saturday
    end

    # Custom attribute writer method with validation
    # @param [Object] sound_file Value to be assigned
    def sound_file=(sound_file)
      if !sound_file.nil? && sound_file.to_s.length > 256
        fail ArgumentError, 'invalid value for "sound_file", the character length must be smaller than or equal to 256.'
      end

      @sound_file = sound_file
    end

    # Custom attribute writer method with validation
    # @param [Object] sunday Value to be assigned
    def sunday=(sunday)
      if sunday.nil?
        fail ArgumentError, 'sunday cannot be nil'
      end

      @sunday = sunday
    end

    # Custom attribute writer method with validation
    # @param [Object] thursday Value to be assigned
    def thursday=(thursday)
      if thursday.nil?
        fail ArgumentError, 'thursday cannot be nil'
      end

      @thursday = thursday
    end

    # Custom attribute writer method with validation
    # @param [Object] tuesday Value to be assigned
    def tuesday=(tuesday)
      if tuesday.nil?
        fail ArgumentError, 'tuesday cannot be nil'
      end

      @tuesday = tuesday
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] wednesday Value to be assigned
    def wednesday=(wednesday)
      if wednesday.nil?
        fail ArgumentError, 'wednesday cannot be nil'
      end

      @wednesday = wednesday
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          schedule_id == o.schedule_id &&
          description == o.description &&
          end_date == o.end_date &&
          end_option == o.end_option &&
          end_time == o.end_time &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          event_id == o.event_id &&
          frequency == o.frequency &&
          frequency_factor == o.frequency_factor &&
          friday == o.friday &&
          interval_option == o.interval_option &&
          monday == o.monday &&
          next_scheduled_date == o.next_scheduled_date &&
          next_scheduled_time == o.next_scheduled_time &&
          play_sound == o.play_sound &&
          regenerate_event == o.regenerate_event &&
          regeneration_date_part == o.regeneration_date_part &&
          regeneration_interval == o.regeneration_interval &&
          relative_frequency == o.relative_frequency &&
          saturday == o.saturday &&
          schedule_interval == o.schedule_interval &&
          sound_file == o.sound_file &&
          start_date == o.start_date &&
          start_time == o.start_time &&
          sunday == o.sunday &&
          thursday == o.thursday &&
          total_occurrences == o.total_occurrences &&
          tuesday == o.tuesday &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          wednesday == o.wednesday
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [schedule_id, description, end_date, end_option, end_time, entry_date, entry_user, event_id, frequency, frequency_factor, friday, interval_option, monday, next_scheduled_date, next_scheduled_time, play_sound, regenerate_event, regeneration_date_part, regeneration_interval, relative_frequency, saturday, schedule_interval, sound_file, start_date, start_time, sunday, thursday, total_occurrences, tuesday, update_date, update_user, wednesday].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
