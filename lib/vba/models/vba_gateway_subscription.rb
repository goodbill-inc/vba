=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAGatewaySubscription
    # ID of the VBAGateway subscription. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :vba_gateway_subscription_key

    # Indicates that the requests associated with this subscription will be automatically processed. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :auto_process

    # Custom class associated with the auto-process request
    attr_accessor :auto_process_custom_class

    # Free text area where the message that will be sent as a response to auto-processed requests.
    attr_accessor :auto_process_response_message

    # Indicates the status that will be assigned to auto-processed requests.
    attr_accessor :auto_process_status

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Request type used when the process involves ID Card requests
    attr_accessor :id_card_request_type

    # Flag indicating the user would like to be notified regarding the request Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :notify_me

    # Indicates the beginning date for the date range of requests that will be associated with subscription.
    attr_accessor :request_from

    # Indicates which terminal the subscription's requests will generate from.
    attr_accessor :request_source

    # Indicates which request status will be associated with the subscription.
    attr_accessor :request_status

    # Indicates the ending date for the date range of requests that will be associated with subscription.
    attr_accessor :request_thru

    # Indicates which type of request will be associated with the subscription.
    attr_accessor :request_type

    # Description of the VBAGateway subscription.
    attr_accessor :subscription_description

    # Indicates the type of the VBAGateway subscription.
    attr_accessor :subscription_type

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # ID of the User associated with the VBAGateway subscription.
    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vba_gateway_subscription_key' => :'vbaGatewaySubscription_Key',
        :'auto_process' => :'auto_Process',
        :'auto_process_custom_class' => :'auto_Process_Custom_Class',
        :'auto_process_response_message' => :'auto_Process_Response_Message',
        :'auto_process_status' => :'auto_Process_Status',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'id_card_request_type' => :'idCard_Request_Type',
        :'notify_me' => :'notify_Me',
        :'request_from' => :'request_From',
        :'request_source' => :'request_Source',
        :'request_status' => :'request_Status',
        :'request_thru' => :'request_Thru',
        :'request_type' => :'request_Type',
        :'subscription_description' => :'subscription_Description',
        :'subscription_type' => :'subscription_Type',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'vba_gateway_subscription_key' => :'Integer',
        :'auto_process' => :'Boolean',
        :'auto_process_custom_class' => :'String',
        :'auto_process_response_message' => :'String',
        :'auto_process_status' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'id_card_request_type' => :'String',
        :'notify_me' => :'Boolean',
        :'request_from' => :'Time',
        :'request_source' => :'String',
        :'request_status' => :'String',
        :'request_thru' => :'Time',
        :'request_type' => :'String',
        :'subscription_description' => :'String',
        :'subscription_type' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'auto_process_custom_class',
        :'auto_process_response_message',
        :'auto_process_status',
        :'entry_user',
        :'id_card_request_type',
        :'request_from',
        :'request_source',
        :'request_status',
        :'request_thru',
        :'request_type',
        :'subscription_description',
        :'subscription_type',
        :'update_user',
        :'user_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAGatewaySubscription` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAGatewaySubscription`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'vba_gateway_subscription_key')
        self.vba_gateway_subscription_key = attributes[:'vba_gateway_subscription_key']
      else
        self.vba_gateway_subscription_key = nil
      end

      if attributes.key?(:'auto_process')
        self.auto_process = attributes[:'auto_process']
      else
        self.auto_process = nil
      end

      if attributes.key?(:'auto_process_custom_class')
        self.auto_process_custom_class = attributes[:'auto_process_custom_class']
      end

      if attributes.key?(:'auto_process_response_message')
        self.auto_process_response_message = attributes[:'auto_process_response_message']
      end

      if attributes.key?(:'auto_process_status')
        self.auto_process_status = attributes[:'auto_process_status']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'id_card_request_type')
        self.id_card_request_type = attributes[:'id_card_request_type']
      end

      if attributes.key?(:'notify_me')
        self.notify_me = attributes[:'notify_me']
      else
        self.notify_me = nil
      end

      if attributes.key?(:'request_from')
        self.request_from = attributes[:'request_from']
      end

      if attributes.key?(:'request_source')
        self.request_source = attributes[:'request_source']
      end

      if attributes.key?(:'request_status')
        self.request_status = attributes[:'request_status']
      end

      if attributes.key?(:'request_thru')
        self.request_thru = attributes[:'request_thru']
      end

      if attributes.key?(:'request_type')
        self.request_type = attributes[:'request_type']
      end

      if attributes.key?(:'subscription_description')
        self.subscription_description = attributes[:'subscription_description']
      end

      if attributes.key?(:'subscription_type')
        self.subscription_type = attributes[:'subscription_type']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @vba_gateway_subscription_key.nil?
        invalid_properties.push('invalid value for "vba_gateway_subscription_key", vba_gateway_subscription_key cannot be nil.')
      end

      if @auto_process.nil?
        invalid_properties.push('invalid value for "auto_process", auto_process cannot be nil.')
      end

      if !@auto_process_custom_class.nil? && @auto_process_custom_class.to_s.length > 128
        invalid_properties.push('invalid value for "auto_process_custom_class", the character length must be smaller than or equal to 128.')
      end

      if !@auto_process_response_message.nil? && @auto_process_response_message.to_s.length > 512
        invalid_properties.push('invalid value for "auto_process_response_message", the character length must be smaller than or equal to 512.')
      end

      if !@auto_process_status.nil? && @auto_process_status.to_s.length > 32
        invalid_properties.push('invalid value for "auto_process_status", the character length must be smaller than or equal to 32.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@id_card_request_type.nil? && @id_card_request_type.to_s.length > 32
        invalid_properties.push('invalid value for "id_card_request_type", the character length must be smaller than or equal to 32.')
      end

      if @notify_me.nil?
        invalid_properties.push('invalid value for "notify_me", notify_me cannot be nil.')
      end

      if !@request_source.nil? && @request_source.to_s.length > 32
        invalid_properties.push('invalid value for "request_source", the character length must be smaller than or equal to 32.')
      end

      if !@request_status.nil? && @request_status.to_s.length > 32
        invalid_properties.push('invalid value for "request_status", the character length must be smaller than or equal to 32.')
      end

      if !@request_type.nil? && @request_type.to_s.length > 32
        invalid_properties.push('invalid value for "request_type", the character length must be smaller than or equal to 32.')
      end

      if !@subscription_description.nil? && @subscription_description.to_s.length > 256
        invalid_properties.push('invalid value for "subscription_description", the character length must be smaller than or equal to 256.')
      end

      if !@subscription_type.nil? && @subscription_type.to_s.length > 32
        invalid_properties.push('invalid value for "subscription_type", the character length must be smaller than or equal to 32.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@user_id.nil? && @user_id.to_s.length > 32
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @vba_gateway_subscription_key.nil?
      return false if @auto_process.nil?
      return false if !@auto_process_custom_class.nil? && @auto_process_custom_class.to_s.length > 128
      return false if !@auto_process_response_message.nil? && @auto_process_response_message.to_s.length > 512
      return false if !@auto_process_status.nil? && @auto_process_status.to_s.length > 32
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@id_card_request_type.nil? && @id_card_request_type.to_s.length > 32
      return false if @notify_me.nil?
      return false if !@request_source.nil? && @request_source.to_s.length > 32
      return false if !@request_status.nil? && @request_status.to_s.length > 32
      return false if !@request_type.nil? && @request_type.to_s.length > 32
      return false if !@subscription_description.nil? && @subscription_description.to_s.length > 256
      return false if !@subscription_type.nil? && @subscription_type.to_s.length > 32
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@user_id.nil? && @user_id.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_gateway_subscription_key Value to be assigned
    def vba_gateway_subscription_key=(vba_gateway_subscription_key)
      if vba_gateway_subscription_key.nil?
        fail ArgumentError, 'vba_gateway_subscription_key cannot be nil'
      end

      @vba_gateway_subscription_key = vba_gateway_subscription_key
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_process Value to be assigned
    def auto_process=(auto_process)
      if auto_process.nil?
        fail ArgumentError, 'auto_process cannot be nil'
      end

      @auto_process = auto_process
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_process_custom_class Value to be assigned
    def auto_process_custom_class=(auto_process_custom_class)
      if !auto_process_custom_class.nil? && auto_process_custom_class.to_s.length > 128
        fail ArgumentError, 'invalid value for "auto_process_custom_class", the character length must be smaller than or equal to 128.'
      end

      @auto_process_custom_class = auto_process_custom_class
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_process_response_message Value to be assigned
    def auto_process_response_message=(auto_process_response_message)
      if !auto_process_response_message.nil? && auto_process_response_message.to_s.length > 512
        fail ArgumentError, 'invalid value for "auto_process_response_message", the character length must be smaller than or equal to 512.'
      end

      @auto_process_response_message = auto_process_response_message
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_process_status Value to be assigned
    def auto_process_status=(auto_process_status)
      if !auto_process_status.nil? && auto_process_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "auto_process_status", the character length must be smaller than or equal to 32.'
      end

      @auto_process_status = auto_process_status
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] id_card_request_type Value to be assigned
    def id_card_request_type=(id_card_request_type)
      if !id_card_request_type.nil? && id_card_request_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "id_card_request_type", the character length must be smaller than or equal to 32.'
      end

      @id_card_request_type = id_card_request_type
    end

    # Custom attribute writer method with validation
    # @param [Object] notify_me Value to be assigned
    def notify_me=(notify_me)
      if notify_me.nil?
        fail ArgumentError, 'notify_me cannot be nil'
      end

      @notify_me = notify_me
    end

    # Custom attribute writer method with validation
    # @param [Object] request_source Value to be assigned
    def request_source=(request_source)
      if !request_source.nil? && request_source.to_s.length > 32
        fail ArgumentError, 'invalid value for "request_source", the character length must be smaller than or equal to 32.'
      end

      @request_source = request_source
    end

    # Custom attribute writer method with validation
    # @param [Object] request_status Value to be assigned
    def request_status=(request_status)
      if !request_status.nil? && request_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "request_status", the character length must be smaller than or equal to 32.'
      end

      @request_status = request_status
    end

    # Custom attribute writer method with validation
    # @param [Object] request_type Value to be assigned
    def request_type=(request_type)
      if !request_type.nil? && request_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "request_type", the character length must be smaller than or equal to 32.'
      end

      @request_type = request_type
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription_description Value to be assigned
    def subscription_description=(subscription_description)
      if !subscription_description.nil? && subscription_description.to_s.length > 256
        fail ArgumentError, 'invalid value for "subscription_description", the character length must be smaller than or equal to 256.'
      end

      @subscription_description = subscription_description
    end

    # Custom attribute writer method with validation
    # @param [Object] subscription_type Value to be assigned
    def subscription_type=(subscription_type)
      if !subscription_type.nil? && subscription_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "subscription_type", the character length must be smaller than or equal to 32.'
      end

      @subscription_type = subscription_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 32.'
      end

      @user_id = user_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vba_gateway_subscription_key == o.vba_gateway_subscription_key &&
          auto_process == o.auto_process &&
          auto_process_custom_class == o.auto_process_custom_class &&
          auto_process_response_message == o.auto_process_response_message &&
          auto_process_status == o.auto_process_status &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          id_card_request_type == o.id_card_request_type &&
          notify_me == o.notify_me &&
          request_from == o.request_from &&
          request_source == o.request_source &&
          request_status == o.request_status &&
          request_thru == o.request_thru &&
          request_type == o.request_type &&
          subscription_description == o.subscription_description &&
          subscription_type == o.subscription_type &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [vba_gateway_subscription_key, auto_process, auto_process_custom_class, auto_process_response_message, auto_process_status, entry_date, entry_user, id_card_request_type, notify_me, request_from, request_source, request_status, request_thru, request_type, subscription_description, subscription_type, update_date, update_user, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
