=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class TimelyFiling
    # Kev value identifying a specific timely filing record Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :timely_filing_key

    # Specifies which claim type the timely filing conditions apply to
    attr_accessor :claim_type

    # Specifies which claim dates are used for timely filing
    attr_accessor :date_type

    # Description of the timely filing conditions
    attr_accessor :description

    # ID of the division that the timely filing conditions apply to
    attr_accessor :division_id

    # Date the timely filing conditions become effective
    attr_accessor :effective_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Ex code that is applied when timely filing conditions are met
    attr_accessor :ex_code

    # Federal ID of the provider that the timely filing conditions apply to
    attr_accessor :federal_id

    # ID of the group that the timely filing conditions apply to
    attr_accessor :group_id

    # Flag specifying if the timely filing applies to inpatient claims Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :inpatient

    # ID of the network that the timely filing conditions apply to
    attr_accessor :network_id

    # ID of the plan that the timely filing conditions apply to
    attr_accessor :plan_id

    # ID of the provider that the timely filing conditions apply to
    attr_accessor :provider_id

    # Field specifying how the custom schedule type is defined
    attr_accessor :schedule_custom

    # Number of days, months or years specified by the frequency
    attr_accessor :schedule_frequency

    # Type of the schedule frequency, specifically day, month, year or custom
    attr_accessor :schedule_type

    # Date the timely filing conditions terminate
    attr_accessor :term_date

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timely_filing_key' => :'timelyFiling_Key',
        :'claim_type' => :'claim_Type',
        :'date_type' => :'date_Type',
        :'description' => :'description',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'federal_id' => :'federal_ID',
        :'group_id' => :'group_ID',
        :'inpatient' => :'inpatient',
        :'network_id' => :'network_ID',
        :'plan_id' => :'plan_ID',
        :'provider_id' => :'provider_ID',
        :'schedule_custom' => :'schedule_Custom',
        :'schedule_frequency' => :'schedule_Frequency',
        :'schedule_type' => :'schedule_Type',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'timely_filing_key' => :'Integer',
        :'claim_type' => :'String',
        :'date_type' => :'String',
        :'description' => :'String',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'federal_id' => :'String',
        :'group_id' => :'String',
        :'inpatient' => :'Boolean',
        :'network_id' => :'String',
        :'plan_id' => :'String',
        :'provider_id' => :'String',
        :'schedule_custom' => :'String',
        :'schedule_frequency' => :'Integer',
        :'schedule_type' => :'String',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'claim_type',
        :'date_type',
        :'description',
        :'division_id',
        :'effective_date',
        :'entry_user',
        :'ex_code',
        :'federal_id',
        :'group_id',
        :'network_id',
        :'plan_id',
        :'provider_id',
        :'schedule_custom',
        :'schedule_frequency',
        :'schedule_type',
        :'term_date',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::TimelyFiling` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::TimelyFiling`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'timely_filing_key')
        self.timely_filing_key = attributes[:'timely_filing_key']
      else
        self.timely_filing_key = nil
      end

      if attributes.key?(:'claim_type')
        self.claim_type = attributes[:'claim_type']
      end

      if attributes.key?(:'date_type')
        self.date_type = attributes[:'date_type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'inpatient')
        self.inpatient = attributes[:'inpatient']
      else
        self.inpatient = nil
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'schedule_custom')
        self.schedule_custom = attributes[:'schedule_custom']
      end

      if attributes.key?(:'schedule_frequency')
        self.schedule_frequency = attributes[:'schedule_frequency']
      end

      if attributes.key?(:'schedule_type')
        self.schedule_type = attributes[:'schedule_type']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @timely_filing_key.nil?
        invalid_properties.push('invalid value for "timely_filing_key", timely_filing_key cannot be nil.')
      end

      if !@claim_type.nil? && @claim_type.to_s.length > 20
        invalid_properties.push('invalid value for "claim_type", the character length must be smaller than or equal to 20.')
      end

      if !@date_type.nil? && @date_type.to_s.length > 1
        invalid_properties.push('invalid value for "date_type", the character length must be smaller than or equal to 1.')
      end

      if !@description.nil? && @description.to_s.length > 256
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 256.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @inpatient.nil?
        invalid_properties.push('invalid value for "inpatient", inpatient cannot be nil.')
      end

      if !@network_id.nil? && @network_id.to_s.length > 10
        invalid_properties.push('invalid value for "network_id", the character length must be smaller than or equal to 10.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@schedule_custom.nil? && @schedule_custom.to_s.length > 16
        invalid_properties.push('invalid value for "schedule_custom", the character length must be smaller than or equal to 16.')
      end

      if !@schedule_type.nil? && @schedule_type.to_s.length > 1
        invalid_properties.push('invalid value for "schedule_type", the character length must be smaller than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @timely_filing_key.nil?
      return false if !@claim_type.nil? && @claim_type.to_s.length > 20
      return false if !@date_type.nil? && @date_type.to_s.length > 1
      return false if !@description.nil? && @description.to_s.length > 256
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if @inpatient.nil?
      return false if !@network_id.nil? && @network_id.to_s.length > 10
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@schedule_custom.nil? && @schedule_custom.to_s.length > 16
      return false if !@schedule_type.nil? && @schedule_type.to_s.length > 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] timely_filing_key Value to be assigned
    def timely_filing_key=(timely_filing_key)
      if timely_filing_key.nil?
        fail ArgumentError, 'timely_filing_key cannot be nil'
      end

      @timely_filing_key = timely_filing_key
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_type Value to be assigned
    def claim_type=(claim_type)
      if !claim_type.nil? && claim_type.to_s.length > 20
        fail ArgumentError, 'invalid value for "claim_type", the character length must be smaller than or equal to 20.'
      end

      @claim_type = claim_type
    end

    # Custom attribute writer method with validation
    # @param [Object] date_type Value to be assigned
    def date_type=(date_type)
      if !date_type.nil? && date_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "date_type", the character length must be smaller than or equal to 1.'
      end

      @date_type = date_type
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 256
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 256.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] inpatient Value to be assigned
    def inpatient=(inpatient)
      if inpatient.nil?
        fail ArgumentError, 'inpatient cannot be nil'
      end

      @inpatient = inpatient
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id)
      if !network_id.nil? && network_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "network_id", the character length must be smaller than or equal to 10.'
      end

      @network_id = network_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_custom Value to be assigned
    def schedule_custom=(schedule_custom)
      if !schedule_custom.nil? && schedule_custom.to_s.length > 16
        fail ArgumentError, 'invalid value for "schedule_custom", the character length must be smaller than or equal to 16.'
      end

      @schedule_custom = schedule_custom
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_type Value to be assigned
    def schedule_type=(schedule_type)
      if !schedule_type.nil? && schedule_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "schedule_type", the character length must be smaller than or equal to 1.'
      end

      @schedule_type = schedule_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timely_filing_key == o.timely_filing_key &&
          claim_type == o.claim_type &&
          date_type == o.date_type &&
          description == o.description &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          federal_id == o.federal_id &&
          group_id == o.group_id &&
          inpatient == o.inpatient &&
          network_id == o.network_id &&
          plan_id == o.plan_id &&
          provider_id == o.provider_id &&
          schedule_custom == o.schedule_custom &&
          schedule_frequency == o.schedule_frequency &&
          schedule_type == o.schedule_type &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [timely_filing_key, claim_type, date_type, description, division_id, effective_date, entry_date, entry_user, ex_code, federal_id, group_id, inpatient, network_id, plan_id, provider_id, schedule_custom, schedule_frequency, schedule_type, term_date, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
