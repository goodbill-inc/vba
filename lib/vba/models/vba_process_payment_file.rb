=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAProcessPaymentFile
    # Used in both Rate Copy and Rate Change
    attr_accessor :payment_file_format_key

    # This MUST be a .csv file with the following columns (Include Headers with field name):          <div>  Payment_Type - Use a value from the PremPaymentType table (can be null)  Payment_Batch - Source system indicator for the payment batch (can be null)  Payment_Batch_Seq - Source system indicator for the payment batch sequence (can be null)  Payment_Account - The name of the account that the payment is being made from - required  Payment_ID - The unique identifier for the payment - required  Payment_Date - The date the payment was made in YYYY-MM-DD format - required  Payment_Amount - The amount of the payment - required  Payment_Name - The name of the person or entity making the payment - required  Group_ID - If this payment is for the entire group, this should be the Group_ID - can be null  Division_ID - If this payment is for the entire division, this should be the Division_ID - can be null  Subscriber_ID - If this payment is for a specific subscriber, this should be the Subscriber_ID - can be null  Payor_ID - The Payor_ID to be set on the created payments - required  Account_Key - The Account_Key to be set on the created payments - required  Invoice_Key - If this payment is to be applied to a specific invoice, this should be the Invoice_Key - can be null  PremRate_Key - If this payment is to be applied to a specific rate, this should be the PremRate_Key - can be null  PremPayment_Key - If this payment is to be applied to a specific payment, this should be the PremPayment_Key - can be null</div>
    attr_accessor :payment_file

    # The Payor to be set on the created payments
    attr_accessor :payor_id

    # The Account to be set on the created payments
    attr_accessor :account_key

    # Indicates that payments should be created from the payment file
    attr_accessor :create_invoice_payments

    # Indicates that payments should be applied to invoices
    attr_accessor :apply_payments

    # Indicates that invoices should be closed after payment is applied
    attr_accessor :close_invoices

    # Indicates that only fully satisfied invoices should be closed
    attr_accessor :only_close_satisfied_invoices

    # User ID performing the Payment File import
    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment_file_format_key' => :'payment_File_Format_Key',
        :'payment_file' => :'payment_File',
        :'payor_id' => :'payor_ID',
        :'account_key' => :'account_Key',
        :'create_invoice_payments' => :'create_Invoice_Payments',
        :'apply_payments' => :'apply_Payments',
        :'close_invoices' => :'close_Invoices',
        :'only_close_satisfied_invoices' => :'only_Close_Satisfied_Invoices',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payment_file_format_key' => :'Integer',
        :'payment_file' => :'String',
        :'payor_id' => :'String',
        :'account_key' => :'Integer',
        :'create_invoice_payments' => :'Boolean',
        :'apply_payments' => :'Boolean',
        :'close_invoices' => :'Boolean',
        :'only_close_satisfied_invoices' => :'Boolean',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'payment_file',
        :'payor_id',
        :'user_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAProcessPaymentFile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAProcessPaymentFile`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payment_file_format_key')
        self.payment_file_format_key = attributes[:'payment_file_format_key']
      end

      if attributes.key?(:'payment_file')
        self.payment_file = attributes[:'payment_file']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'create_invoice_payments')
        self.create_invoice_payments = attributes[:'create_invoice_payments']
      end

      if attributes.key?(:'apply_payments')
        self.apply_payments = attributes[:'apply_payments']
      end

      if attributes.key?(:'close_invoices')
        self.close_invoices = attributes[:'close_invoices']
      end

      if attributes.key?(:'only_close_satisfied_invoices')
        self.only_close_satisfied_invoices = attributes[:'only_close_satisfied_invoices']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment_file_format_key == o.payment_file_format_key &&
          payment_file == o.payment_file &&
          payor_id == o.payor_id &&
          account_key == o.account_key &&
          create_invoice_payments == o.create_invoice_payments &&
          apply_payments == o.apply_payments &&
          close_invoices == o.close_invoices &&
          only_close_satisfied_invoices == o.only_close_satisfied_invoices &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payment_file_format_key, payment_file, payor_id, account_key, create_invoice_payments, apply_payments, close_invoices, only_close_satisfied_invoices, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
