=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Grievance
    # ID number of the grievance. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :grievance_key

    # Area where the User may describe the administrative change.
    attr_accessor :admin_change

    # Date when the administrative change took place.
    attr_accessor :admin_change_date

    # Type of change that was made by Administration. 'Admin. Change Types' are configured within 'Grievance Configuration'.
    attr_accessor :admin_change_type

    # ID of the call from which the grievance was submitted.
    attr_accessor :call_key

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Category of the grievance. 'Greivance Categories' are configured within 'Grievance Configuration'.
    attr_accessor :grievance_category

    # Date when the grievance was viewed and filed by an Administartor.
    attr_accessor :grievance_filed

    # Date when the grievance was submitted.
    attr_accessor :grievance_received

    # Date when the grievance was resolved.
    attr_accessor :grievance_resolved

    # ID of the source of the grievance.
    attr_accessor :grievance_source

    # Status of the grievance. 'Greivance Statuses' are configured within 'Grievance Configuration'.
    attr_accessor :grievance_status

    # Type of the grievance. 'Grievance Types' are configured within 'Grievance Configuration'.
    attr_accessor :grievance_type

    # Area where the User may describe the issue.
    attr_accessor :issue

    # Date when the issue occurred.
    attr_accessor :issue_date

    # Type of issue the grievance is associated with. 'Issue Types' are configured within 'Grievance Configuration'.
    attr_accessor :issue_type

    # Sequential identifier of the Member associated with the grievance.
    attr_accessor :member_seq

    # Account number of the Patient associated with the grievance.
    attr_accessor :patient_account_number

    # ID of the Provider associated with the grievance.
    attr_accessor :provider_id

    # Area where the User may describe the resolution.
    attr_accessor :resolution

    # Date when the resolution was implemented.
    attr_accessor :resolution_date

    # Type of resolution used to address the grievance. 'Resolution Types' are configured within 'Grievance Configuration'.
    attr_accessor :resolution_type

    # Unique system assigned number for the Subscriber
    attr_accessor :subscriber_id

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'grievance_key' => :'grievance_Key',
        :'admin_change' => :'admin_Change',
        :'admin_change_date' => :'admin_Change_Date',
        :'admin_change_type' => :'admin_Change_Type',
        :'call_key' => :'call_Key',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'grievance_category' => :'grievance_Category',
        :'grievance_filed' => :'grievance_Filed',
        :'grievance_received' => :'grievance_Received',
        :'grievance_resolved' => :'grievance_Resolved',
        :'grievance_source' => :'grievance_Source',
        :'grievance_status' => :'grievance_Status',
        :'grievance_type' => :'grievance_Type',
        :'issue' => :'issue',
        :'issue_date' => :'issue_Date',
        :'issue_type' => :'issue_Type',
        :'member_seq' => :'member_Seq',
        :'patient_account_number' => :'patient_Account_Number',
        :'provider_id' => :'provider_ID',
        :'resolution' => :'resolution',
        :'resolution_date' => :'resolution_Date',
        :'resolution_type' => :'resolution_Type',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'grievance_key' => :'Integer',
        :'admin_change' => :'String',
        :'admin_change_date' => :'Time',
        :'admin_change_type' => :'String',
        :'call_key' => :'Integer',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'grievance_category' => :'String',
        :'grievance_filed' => :'Time',
        :'grievance_received' => :'Time',
        :'grievance_resolved' => :'Time',
        :'grievance_source' => :'String',
        :'grievance_status' => :'String',
        :'grievance_type' => :'String',
        :'issue' => :'String',
        :'issue_date' => :'Time',
        :'issue_type' => :'String',
        :'member_seq' => :'String',
        :'patient_account_number' => :'String',
        :'provider_id' => :'String',
        :'resolution' => :'String',
        :'resolution_date' => :'Time',
        :'resolution_type' => :'String',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'admin_change',
        :'admin_change_date',
        :'admin_change_type',
        :'call_key',
        :'entry_user',
        :'grievance_category',
        :'grievance_filed',
        :'grievance_received',
        :'grievance_resolved',
        :'grievance_source',
        :'grievance_status',
        :'grievance_type',
        :'issue',
        :'issue_date',
        :'issue_type',
        :'member_seq',
        :'patient_account_number',
        :'provider_id',
        :'resolution',
        :'resolution_date',
        :'resolution_type',
        :'subscriber_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Grievance` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Grievance`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'grievance_key')
        self.grievance_key = attributes[:'grievance_key']
      else
        self.grievance_key = nil
      end

      if attributes.key?(:'admin_change')
        self.admin_change = attributes[:'admin_change']
      end

      if attributes.key?(:'admin_change_date')
        self.admin_change_date = attributes[:'admin_change_date']
      end

      if attributes.key?(:'admin_change_type')
        self.admin_change_type = attributes[:'admin_change_type']
      end

      if attributes.key?(:'call_key')
        self.call_key = attributes[:'call_key']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'grievance_category')
        self.grievance_category = attributes[:'grievance_category']
      end

      if attributes.key?(:'grievance_filed')
        self.grievance_filed = attributes[:'grievance_filed']
      end

      if attributes.key?(:'grievance_received')
        self.grievance_received = attributes[:'grievance_received']
      end

      if attributes.key?(:'grievance_resolved')
        self.grievance_resolved = attributes[:'grievance_resolved']
      end

      if attributes.key?(:'grievance_source')
        self.grievance_source = attributes[:'grievance_source']
      end

      if attributes.key?(:'grievance_status')
        self.grievance_status = attributes[:'grievance_status']
      end

      if attributes.key?(:'grievance_type')
        self.grievance_type = attributes[:'grievance_type']
      end

      if attributes.key?(:'issue')
        self.issue = attributes[:'issue']
      end

      if attributes.key?(:'issue_date')
        self.issue_date = attributes[:'issue_date']
      end

      if attributes.key?(:'issue_type')
        self.issue_type = attributes[:'issue_type']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'patient_account_number')
        self.patient_account_number = attributes[:'patient_account_number']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'resolution')
        self.resolution = attributes[:'resolution']
      end

      if attributes.key?(:'resolution_date')
        self.resolution_date = attributes[:'resolution_date']
      end

      if attributes.key?(:'resolution_type')
        self.resolution_type = attributes[:'resolution_type']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @grievance_key.nil?
        invalid_properties.push('invalid value for "grievance_key", grievance_key cannot be nil.')
      end

      if !@admin_change.nil? && @admin_change.to_s.length > 4096
        invalid_properties.push('invalid value for "admin_change", the character length must be smaller than or equal to 4096.')
      end

      if !@admin_change_type.nil? && @admin_change_type.to_s.length > 32
        invalid_properties.push('invalid value for "admin_change_type", the character length must be smaller than or equal to 32.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@grievance_category.nil? && @grievance_category.to_s.length > 32
        invalid_properties.push('invalid value for "grievance_category", the character length must be smaller than or equal to 32.')
      end

      if !@grievance_source.nil? && @grievance_source.to_s.length > 16
        invalid_properties.push('invalid value for "grievance_source", the character length must be smaller than or equal to 16.')
      end

      if !@grievance_status.nil? && @grievance_status.to_s.length > 32
        invalid_properties.push('invalid value for "grievance_status", the character length must be smaller than or equal to 32.')
      end

      if !@grievance_type.nil? && @grievance_type.to_s.length > 32
        invalid_properties.push('invalid value for "grievance_type", the character length must be smaller than or equal to 32.')
      end

      if !@issue.nil? && @issue.to_s.length > 4096
        invalid_properties.push('invalid value for "issue", the character length must be smaller than or equal to 4096.')
      end

      if !@issue_type.nil? && @issue_type.to_s.length > 32
        invalid_properties.push('invalid value for "issue_type", the character length must be smaller than or equal to 32.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@patient_account_number.nil? && @patient_account_number.to_s.length > 64
        invalid_properties.push('invalid value for "patient_account_number", the character length must be smaller than or equal to 64.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@resolution.nil? && @resolution.to_s.length > 4096
        invalid_properties.push('invalid value for "resolution", the character length must be smaller than or equal to 4096.')
      end

      if !@resolution_type.nil? && @resolution_type.to_s.length > 32
        invalid_properties.push('invalid value for "resolution_type", the character length must be smaller than or equal to 32.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @grievance_key.nil?
      return false if !@admin_change.nil? && @admin_change.to_s.length > 4096
      return false if !@admin_change_type.nil? && @admin_change_type.to_s.length > 32
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@grievance_category.nil? && @grievance_category.to_s.length > 32
      return false if !@grievance_source.nil? && @grievance_source.to_s.length > 16
      return false if !@grievance_status.nil? && @grievance_status.to_s.length > 32
      return false if !@grievance_type.nil? && @grievance_type.to_s.length > 32
      return false if !@issue.nil? && @issue.to_s.length > 4096
      return false if !@issue_type.nil? && @issue_type.to_s.length > 32
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@patient_account_number.nil? && @patient_account_number.to_s.length > 64
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@resolution.nil? && @resolution.to_s.length > 4096
      return false if !@resolution_type.nil? && @resolution_type.to_s.length > 32
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] grievance_key Value to be assigned
    def grievance_key=(grievance_key)
      if grievance_key.nil?
        fail ArgumentError, 'grievance_key cannot be nil'
      end

      @grievance_key = grievance_key
    end

    # Custom attribute writer method with validation
    # @param [Object] admin_change Value to be assigned
    def admin_change=(admin_change)
      if !admin_change.nil? && admin_change.to_s.length > 4096
        fail ArgumentError, 'invalid value for "admin_change", the character length must be smaller than or equal to 4096.'
      end

      @admin_change = admin_change
    end

    # Custom attribute writer method with validation
    # @param [Object] admin_change_type Value to be assigned
    def admin_change_type=(admin_change_type)
      if !admin_change_type.nil? && admin_change_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "admin_change_type", the character length must be smaller than or equal to 32.'
      end

      @admin_change_type = admin_change_type
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] grievance_category Value to be assigned
    def grievance_category=(grievance_category)
      if !grievance_category.nil? && grievance_category.to_s.length > 32
        fail ArgumentError, 'invalid value for "grievance_category", the character length must be smaller than or equal to 32.'
      end

      @grievance_category = grievance_category
    end

    # Custom attribute writer method with validation
    # @param [Object] grievance_source Value to be assigned
    def grievance_source=(grievance_source)
      if !grievance_source.nil? && grievance_source.to_s.length > 16
        fail ArgumentError, 'invalid value for "grievance_source", the character length must be smaller than or equal to 16.'
      end

      @grievance_source = grievance_source
    end

    # Custom attribute writer method with validation
    # @param [Object] grievance_status Value to be assigned
    def grievance_status=(grievance_status)
      if !grievance_status.nil? && grievance_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "grievance_status", the character length must be smaller than or equal to 32.'
      end

      @grievance_status = grievance_status
    end

    # Custom attribute writer method with validation
    # @param [Object] grievance_type Value to be assigned
    def grievance_type=(grievance_type)
      if !grievance_type.nil? && grievance_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "grievance_type", the character length must be smaller than or equal to 32.'
      end

      @grievance_type = grievance_type
    end

    # Custom attribute writer method with validation
    # @param [Object] issue Value to be assigned
    def issue=(issue)
      if !issue.nil? && issue.to_s.length > 4096
        fail ArgumentError, 'invalid value for "issue", the character length must be smaller than or equal to 4096.'
      end

      @issue = issue
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_type Value to be assigned
    def issue_type=(issue_type)
      if !issue_type.nil? && issue_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "issue_type", the character length must be smaller than or equal to 32.'
      end

      @issue_type = issue_type
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] patient_account_number Value to be assigned
    def patient_account_number=(patient_account_number)
      if !patient_account_number.nil? && patient_account_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "patient_account_number", the character length must be smaller than or equal to 64.'
      end

      @patient_account_number = patient_account_number
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] resolution Value to be assigned
    def resolution=(resolution)
      if !resolution.nil? && resolution.to_s.length > 4096
        fail ArgumentError, 'invalid value for "resolution", the character length must be smaller than or equal to 4096.'
      end

      @resolution = resolution
    end

    # Custom attribute writer method with validation
    # @param [Object] resolution_type Value to be assigned
    def resolution_type=(resolution_type)
      if !resolution_type.nil? && resolution_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "resolution_type", the character length must be smaller than or equal to 32.'
      end

      @resolution_type = resolution_type
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          grievance_key == o.grievance_key &&
          admin_change == o.admin_change &&
          admin_change_date == o.admin_change_date &&
          admin_change_type == o.admin_change_type &&
          call_key == o.call_key &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          grievance_category == o.grievance_category &&
          grievance_filed == o.grievance_filed &&
          grievance_received == o.grievance_received &&
          grievance_resolved == o.grievance_resolved &&
          grievance_source == o.grievance_source &&
          grievance_status == o.grievance_status &&
          grievance_type == o.grievance_type &&
          issue == o.issue &&
          issue_date == o.issue_date &&
          issue_type == o.issue_type &&
          member_seq == o.member_seq &&
          patient_account_number == o.patient_account_number &&
          provider_id == o.provider_id &&
          resolution == o.resolution &&
          resolution_date == o.resolution_date &&
          resolution_type == o.resolution_type &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [grievance_key, admin_change, admin_change_date, admin_change_type, call_key, entry_date, entry_user, grievance_category, grievance_filed, grievance_received, grievance_resolved, grievance_source, grievance_status, grievance_type, issue, issue_date, issue_type, member_seq, patient_account_number, provider_id, resolution, resolution_date, resolution_type, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
