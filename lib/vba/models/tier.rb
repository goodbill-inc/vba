=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Tier
    # Identifier for the specific tier
    attr_accessor :tier1

    # Flag indicating the tier includes any dependents
    attr_accessor :dependent

    # Description of the specific tier
    attr_accessor :description

    # Code used by HIPAA to identify the specific tier
    attr_accessor :hipa_a_code

    # Flag indicating the tier includes the insured
    attr_accessor :insured

    # Maximum total members the tier allows.
    attr_accessor :max_members

    # Flag indicating the tier allows multiple members
    attr_accessor :multimember_tier

    # Flag indicating the tier includes the spouse
    attr_accessor :spouse

    # Flag indicating the tier includes only the spouse
    attr_accessor :spouse_only

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tier1' => :'tier1',
        :'dependent' => :'dependent',
        :'description' => :'description',
        :'hipa_a_code' => :'hipaA_Code',
        :'insured' => :'insured',
        :'max_members' => :'max_Members',
        :'multimember_tier' => :'multimember_Tier',
        :'spouse' => :'spouse',
        :'spouse_only' => :'spouse_Only'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tier1' => :'String',
        :'dependent' => :'Boolean',
        :'description' => :'String',
        :'hipa_a_code' => :'String',
        :'insured' => :'Boolean',
        :'max_members' => :'Integer',
        :'multimember_tier' => :'Boolean',
        :'spouse' => :'Boolean',
        :'spouse_only' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'hipa_a_code',
        :'max_members',
        :'spouse_only'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Tier` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Tier`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tier1')
        self.tier1 = attributes[:'tier1']
      else
        self.tier1 = nil
      end

      if attributes.key?(:'dependent')
        self.dependent = attributes[:'dependent']
      else
        self.dependent = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'hipa_a_code')
        self.hipa_a_code = attributes[:'hipa_a_code']
      end

      if attributes.key?(:'insured')
        self.insured = attributes[:'insured']
      else
        self.insured = nil
      end

      if attributes.key?(:'max_members')
        self.max_members = attributes[:'max_members']
      end

      if attributes.key?(:'multimember_tier')
        self.multimember_tier = attributes[:'multimember_tier']
      else
        self.multimember_tier = nil
      end

      if attributes.key?(:'spouse')
        self.spouse = attributes[:'spouse']
      else
        self.spouse = nil
      end

      if attributes.key?(:'spouse_only')
        self.spouse_only = attributes[:'spouse_only']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @tier1.nil?
        invalid_properties.push('invalid value for "tier1", tier1 cannot be nil.')
      end

      if @tier1.to_s.length > 2
        invalid_properties.push('invalid value for "tier1", the character length must be smaller than or equal to 2.')
      end

      if @tier1.to_s.length < 1
        invalid_properties.push('invalid value for "tier1", the character length must be great than or equal to 1.')
      end

      if @dependent.nil?
        invalid_properties.push('invalid value for "dependent", dependent cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 20
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 20.')
      end

      if !@hipa_a_code.nil? && @hipa_a_code.to_s.length > 8
        invalid_properties.push('invalid value for "hipa_a_code", the character length must be smaller than or equal to 8.')
      end

      if @insured.nil?
        invalid_properties.push('invalid value for "insured", insured cannot be nil.')
      end

      if @multimember_tier.nil?
        invalid_properties.push('invalid value for "multimember_tier", multimember_tier cannot be nil.')
      end

      if @spouse.nil?
        invalid_properties.push('invalid value for "spouse", spouse cannot be nil.')
      end

      if !@spouse_only.nil? && @spouse_only.to_s.length > 1
        invalid_properties.push('invalid value for "spouse_only", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @tier1.nil?
      return false if @tier1.to_s.length > 2
      return false if @tier1.to_s.length < 1
      return false if @dependent.nil?
      return false if !@description.nil? && @description.to_s.length > 20
      return false if !@hipa_a_code.nil? && @hipa_a_code.to_s.length > 8
      return false if @insured.nil?
      return false if @multimember_tier.nil?
      return false if @spouse.nil?
      return false if !@spouse_only.nil? && @spouse_only.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tier1 Value to be assigned
    def tier1=(tier1)
      if tier1.nil?
        fail ArgumentError, 'tier1 cannot be nil'
      end

      if tier1.to_s.length > 2
        fail ArgumentError, 'invalid value for "tier1", the character length must be smaller than or equal to 2.'
      end

      if tier1.to_s.length < 1
        fail ArgumentError, 'invalid value for "tier1", the character length must be great than or equal to 1.'
      end

      @tier1 = tier1
    end

    # Custom attribute writer method with validation
    # @param [Object] dependent Value to be assigned
    def dependent=(dependent)
      if dependent.nil?
        fail ArgumentError, 'dependent cannot be nil'
      end

      @dependent = dependent
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 20
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 20.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] hipa_a_code Value to be assigned
    def hipa_a_code=(hipa_a_code)
      if !hipa_a_code.nil? && hipa_a_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "hipa_a_code", the character length must be smaller than or equal to 8.'
      end

      @hipa_a_code = hipa_a_code
    end

    # Custom attribute writer method with validation
    # @param [Object] insured Value to be assigned
    def insured=(insured)
      if insured.nil?
        fail ArgumentError, 'insured cannot be nil'
      end

      @insured = insured
    end

    # Custom attribute writer method with validation
    # @param [Object] multimember_tier Value to be assigned
    def multimember_tier=(multimember_tier)
      if multimember_tier.nil?
        fail ArgumentError, 'multimember_tier cannot be nil'
      end

      @multimember_tier = multimember_tier
    end

    # Custom attribute writer method with validation
    # @param [Object] spouse Value to be assigned
    def spouse=(spouse)
      if spouse.nil?
        fail ArgumentError, 'spouse cannot be nil'
      end

      @spouse = spouse
    end

    # Custom attribute writer method with validation
    # @param [Object] spouse_only Value to be assigned
    def spouse_only=(spouse_only)
      if !spouse_only.nil? && spouse_only.to_s.length > 1
        fail ArgumentError, 'invalid value for "spouse_only", the character length must be smaller than or equal to 1.'
      end

      @spouse_only = spouse_only
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tier1 == o.tier1 &&
          dependent == o.dependent &&
          description == o.description &&
          hipa_a_code == o.hipa_a_code &&
          insured == o.insured &&
          max_members == o.max_members &&
          multimember_tier == o.multimember_tier &&
          spouse == o.spouse &&
          spouse_only == o.spouse_only
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tier1, dependent, description, hipa_a_code, insured, max_members, multimember_tier, spouse, spouse_only].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
