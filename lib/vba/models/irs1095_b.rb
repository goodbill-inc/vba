=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class IRS1095B
    # ID of the group filing the IRS 1095B form
    attr_accessor :group_id

    # Tax year for the filing of the IRS 1095B form
    attr_accessor :tax_year

    # Business name (control text) of the insurer that covered the employee
    attr_accessor :insurer_business_name_control_txt

    # Business name (line 1) of the insurer that covered the employee
    attr_accessor :insurer_business_name_line1_txt

    # Business name (line 2) of the insurer that covered the employee
    attr_accessor :insurer_business_name_line2_txt

    # Main contact phone number for the insurer
    attr_accessor :insurer_contact_phone_num

    # EIN of the insurer
    attr_accessor :insurer_ein

    # Code specifying the insurers TIN request type
    attr_accessor :insurer_tin_request_type_cd

    # Business address (line 1) of the insurer that covered the employee
    attr_accessor :insurer_us_address_line1_txt

    # Business address (line 2) of the insurer that covered the employee
    attr_accessor :insurer_us_address_line2_txt

    # City of the insurer that covered the employee
    attr_accessor :insurer_us_city

    # State of the insurer that covered the employee
    attr_accessor :insurer_us_state

    # 5 digit Zip code of the insurer that covered the employee
    attr_accessor :insurer_us_zip

    # 4 digit Zip code extenstion of the insurer that covered the employee
    attr_accessor :insurer_us_zip_4

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'tax_year' => :'tax_Year',
        :'insurer_business_name_control_txt' => :'insurer_Business_Name_Control_Txt',
        :'insurer_business_name_line1_txt' => :'insurer_Business_Name_Line1_Txt',
        :'insurer_business_name_line2_txt' => :'insurer_Business_Name_Line2_Txt',
        :'insurer_contact_phone_num' => :'insurer_Contact_Phone_Num',
        :'insurer_ein' => :'insurer_EIN',
        :'insurer_tin_request_type_cd' => :'insurer_TIN_Request_Type_Cd',
        :'insurer_us_address_line1_txt' => :'insurer_US_Address_Line1_Txt',
        :'insurer_us_address_line2_txt' => :'insurer_US_Address_Line2_Txt',
        :'insurer_us_city' => :'insurer_US_City',
        :'insurer_us_state' => :'insurer_US_State',
        :'insurer_us_zip' => :'insurer_US_Zip',
        :'insurer_us_zip_4' => :'insurer_US_Zip_4'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'tax_year' => :'String',
        :'insurer_business_name_control_txt' => :'String',
        :'insurer_business_name_line1_txt' => :'String',
        :'insurer_business_name_line2_txt' => :'String',
        :'insurer_contact_phone_num' => :'String',
        :'insurer_ein' => :'String',
        :'insurer_tin_request_type_cd' => :'String',
        :'insurer_us_address_line1_txt' => :'String',
        :'insurer_us_address_line2_txt' => :'String',
        :'insurer_us_city' => :'String',
        :'insurer_us_state' => :'String',
        :'insurer_us_zip' => :'String',
        :'insurer_us_zip_4' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'insurer_business_name_control_txt',
        :'insurer_business_name_line1_txt',
        :'insurer_business_name_line2_txt',
        :'insurer_contact_phone_num',
        :'insurer_ein',
        :'insurer_tin_request_type_cd',
        :'insurer_us_address_line1_txt',
        :'insurer_us_address_line2_txt',
        :'insurer_us_city',
        :'insurer_us_state',
        :'insurer_us_zip',
        :'insurer_us_zip_4'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::IRS1095B` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::IRS1095B`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      else
        self.tax_year = nil
      end

      if attributes.key?(:'insurer_business_name_control_txt')
        self.insurer_business_name_control_txt = attributes[:'insurer_business_name_control_txt']
      end

      if attributes.key?(:'insurer_business_name_line1_txt')
        self.insurer_business_name_line1_txt = attributes[:'insurer_business_name_line1_txt']
      end

      if attributes.key?(:'insurer_business_name_line2_txt')
        self.insurer_business_name_line2_txt = attributes[:'insurer_business_name_line2_txt']
      end

      if attributes.key?(:'insurer_contact_phone_num')
        self.insurer_contact_phone_num = attributes[:'insurer_contact_phone_num']
      end

      if attributes.key?(:'insurer_ein')
        self.insurer_ein = attributes[:'insurer_ein']
      end

      if attributes.key?(:'insurer_tin_request_type_cd')
        self.insurer_tin_request_type_cd = attributes[:'insurer_tin_request_type_cd']
      end

      if attributes.key?(:'insurer_us_address_line1_txt')
        self.insurer_us_address_line1_txt = attributes[:'insurer_us_address_line1_txt']
      end

      if attributes.key?(:'insurer_us_address_line2_txt')
        self.insurer_us_address_line2_txt = attributes[:'insurer_us_address_line2_txt']
      end

      if attributes.key?(:'insurer_us_city')
        self.insurer_us_city = attributes[:'insurer_us_city']
      end

      if attributes.key?(:'insurer_us_state')
        self.insurer_us_state = attributes[:'insurer_us_state']
      end

      if attributes.key?(:'insurer_us_zip')
        self.insurer_us_zip = attributes[:'insurer_us_zip']
      end

      if attributes.key?(:'insurer_us_zip_4')
        self.insurer_us_zip_4 = attributes[:'insurer_us_zip_4']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @tax_year.nil?
        invalid_properties.push('invalid value for "tax_year", tax_year cannot be nil.')
      end

      if @tax_year.to_s.length > 4
        invalid_properties.push('invalid value for "tax_year", the character length must be smaller than or equal to 4.')
      end

      if @tax_year.to_s.length < 1
        invalid_properties.push('invalid value for "tax_year", the character length must be great than or equal to 1.')
      end

      if !@insurer_business_name_control_txt.nil? && @insurer_business_name_control_txt.to_s.length > 4
        invalid_properties.push('invalid value for "insurer_business_name_control_txt", the character length must be smaller than or equal to 4.')
      end

      if !@insurer_business_name_line1_txt.nil? && @insurer_business_name_line1_txt.to_s.length > 75
        invalid_properties.push('invalid value for "insurer_business_name_line1_txt", the character length must be smaller than or equal to 75.')
      end

      if !@insurer_business_name_line2_txt.nil? && @insurer_business_name_line2_txt.to_s.length > 75
        invalid_properties.push('invalid value for "insurer_business_name_line2_txt", the character length must be smaller than or equal to 75.')
      end

      if !@insurer_contact_phone_num.nil? && @insurer_contact_phone_num.to_s.length > 15
        invalid_properties.push('invalid value for "insurer_contact_phone_num", the character length must be smaller than or equal to 15.')
      end

      if !@insurer_ein.nil? && @insurer_ein.to_s.length > 9
        invalid_properties.push('invalid value for "insurer_ein", the character length must be smaller than or equal to 9.')
      end

      if !@insurer_tin_request_type_cd.nil? && @insurer_tin_request_type_cd.to_s.length > 14
        invalid_properties.push('invalid value for "insurer_tin_request_type_cd", the character length must be smaller than or equal to 14.')
      end

      if !@insurer_us_address_line1_txt.nil? && @insurer_us_address_line1_txt.to_s.length > 35
        invalid_properties.push('invalid value for "insurer_us_address_line1_txt", the character length must be smaller than or equal to 35.')
      end

      if !@insurer_us_address_line2_txt.nil? && @insurer_us_address_line2_txt.to_s.length > 35
        invalid_properties.push('invalid value for "insurer_us_address_line2_txt", the character length must be smaller than or equal to 35.')
      end

      if !@insurer_us_city.nil? && @insurer_us_city.to_s.length > 22
        invalid_properties.push('invalid value for "insurer_us_city", the character length must be smaller than or equal to 22.')
      end

      if !@insurer_us_state.nil? && @insurer_us_state.to_s.length > 2
        invalid_properties.push('invalid value for "insurer_us_state", the character length must be smaller than or equal to 2.')
      end

      if !@insurer_us_zip.nil? && @insurer_us_zip.to_s.length > 5
        invalid_properties.push('invalid value for "insurer_us_zip", the character length must be smaller than or equal to 5.')
      end

      if !@insurer_us_zip_4.nil? && @insurer_us_zip_4.to_s.length > 4
        invalid_properties.push('invalid value for "insurer_us_zip_4", the character length must be smaller than or equal to 4.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @tax_year.nil?
      return false if @tax_year.to_s.length > 4
      return false if @tax_year.to_s.length < 1
      return false if !@insurer_business_name_control_txt.nil? && @insurer_business_name_control_txt.to_s.length > 4
      return false if !@insurer_business_name_line1_txt.nil? && @insurer_business_name_line1_txt.to_s.length > 75
      return false if !@insurer_business_name_line2_txt.nil? && @insurer_business_name_line2_txt.to_s.length > 75
      return false if !@insurer_contact_phone_num.nil? && @insurer_contact_phone_num.to_s.length > 15
      return false if !@insurer_ein.nil? && @insurer_ein.to_s.length > 9
      return false if !@insurer_tin_request_type_cd.nil? && @insurer_tin_request_type_cd.to_s.length > 14
      return false if !@insurer_us_address_line1_txt.nil? && @insurer_us_address_line1_txt.to_s.length > 35
      return false if !@insurer_us_address_line2_txt.nil? && @insurer_us_address_line2_txt.to_s.length > 35
      return false if !@insurer_us_city.nil? && @insurer_us_city.to_s.length > 22
      return false if !@insurer_us_state.nil? && @insurer_us_state.to_s.length > 2
      return false if !@insurer_us_zip.nil? && @insurer_us_zip.to_s.length > 5
      return false if !@insurer_us_zip_4.nil? && @insurer_us_zip_4.to_s.length > 4
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_year Value to be assigned
    def tax_year=(tax_year)
      if tax_year.nil?
        fail ArgumentError, 'tax_year cannot be nil'
      end

      if tax_year.to_s.length > 4
        fail ArgumentError, 'invalid value for "tax_year", the character length must be smaller than or equal to 4.'
      end

      if tax_year.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_year", the character length must be great than or equal to 1.'
      end

      @tax_year = tax_year
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_business_name_control_txt Value to be assigned
    def insurer_business_name_control_txt=(insurer_business_name_control_txt)
      if !insurer_business_name_control_txt.nil? && insurer_business_name_control_txt.to_s.length > 4
        fail ArgumentError, 'invalid value for "insurer_business_name_control_txt", the character length must be smaller than or equal to 4.'
      end

      @insurer_business_name_control_txt = insurer_business_name_control_txt
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_business_name_line1_txt Value to be assigned
    def insurer_business_name_line1_txt=(insurer_business_name_line1_txt)
      if !insurer_business_name_line1_txt.nil? && insurer_business_name_line1_txt.to_s.length > 75
        fail ArgumentError, 'invalid value for "insurer_business_name_line1_txt", the character length must be smaller than or equal to 75.'
      end

      @insurer_business_name_line1_txt = insurer_business_name_line1_txt
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_business_name_line2_txt Value to be assigned
    def insurer_business_name_line2_txt=(insurer_business_name_line2_txt)
      if !insurer_business_name_line2_txt.nil? && insurer_business_name_line2_txt.to_s.length > 75
        fail ArgumentError, 'invalid value for "insurer_business_name_line2_txt", the character length must be smaller than or equal to 75.'
      end

      @insurer_business_name_line2_txt = insurer_business_name_line2_txt
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_contact_phone_num Value to be assigned
    def insurer_contact_phone_num=(insurer_contact_phone_num)
      if !insurer_contact_phone_num.nil? && insurer_contact_phone_num.to_s.length > 15
        fail ArgumentError, 'invalid value for "insurer_contact_phone_num", the character length must be smaller than or equal to 15.'
      end

      @insurer_contact_phone_num = insurer_contact_phone_num
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_ein Value to be assigned
    def insurer_ein=(insurer_ein)
      if !insurer_ein.nil? && insurer_ein.to_s.length > 9
        fail ArgumentError, 'invalid value for "insurer_ein", the character length must be smaller than or equal to 9.'
      end

      @insurer_ein = insurer_ein
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_tin_request_type_cd Value to be assigned
    def insurer_tin_request_type_cd=(insurer_tin_request_type_cd)
      if !insurer_tin_request_type_cd.nil? && insurer_tin_request_type_cd.to_s.length > 14
        fail ArgumentError, 'invalid value for "insurer_tin_request_type_cd", the character length must be smaller than or equal to 14.'
      end

      @insurer_tin_request_type_cd = insurer_tin_request_type_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_us_address_line1_txt Value to be assigned
    def insurer_us_address_line1_txt=(insurer_us_address_line1_txt)
      if !insurer_us_address_line1_txt.nil? && insurer_us_address_line1_txt.to_s.length > 35
        fail ArgumentError, 'invalid value for "insurer_us_address_line1_txt", the character length must be smaller than or equal to 35.'
      end

      @insurer_us_address_line1_txt = insurer_us_address_line1_txt
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_us_address_line2_txt Value to be assigned
    def insurer_us_address_line2_txt=(insurer_us_address_line2_txt)
      if !insurer_us_address_line2_txt.nil? && insurer_us_address_line2_txt.to_s.length > 35
        fail ArgumentError, 'invalid value for "insurer_us_address_line2_txt", the character length must be smaller than or equal to 35.'
      end

      @insurer_us_address_line2_txt = insurer_us_address_line2_txt
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_us_city Value to be assigned
    def insurer_us_city=(insurer_us_city)
      if !insurer_us_city.nil? && insurer_us_city.to_s.length > 22
        fail ArgumentError, 'invalid value for "insurer_us_city", the character length must be smaller than or equal to 22.'
      end

      @insurer_us_city = insurer_us_city
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_us_state Value to be assigned
    def insurer_us_state=(insurer_us_state)
      if !insurer_us_state.nil? && insurer_us_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "insurer_us_state", the character length must be smaller than or equal to 2.'
      end

      @insurer_us_state = insurer_us_state
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_us_zip Value to be assigned
    def insurer_us_zip=(insurer_us_zip)
      if !insurer_us_zip.nil? && insurer_us_zip.to_s.length > 5
        fail ArgumentError, 'invalid value for "insurer_us_zip", the character length must be smaller than or equal to 5.'
      end

      @insurer_us_zip = insurer_us_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] insurer_us_zip_4 Value to be assigned
    def insurer_us_zip_4=(insurer_us_zip_4)
      if !insurer_us_zip_4.nil? && insurer_us_zip_4.to_s.length > 4
        fail ArgumentError, 'invalid value for "insurer_us_zip_4", the character length must be smaller than or equal to 4.'
      end

      @insurer_us_zip_4 = insurer_us_zip_4
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          tax_year == o.tax_year &&
          insurer_business_name_control_txt == o.insurer_business_name_control_txt &&
          insurer_business_name_line1_txt == o.insurer_business_name_line1_txt &&
          insurer_business_name_line2_txt == o.insurer_business_name_line2_txt &&
          insurer_contact_phone_num == o.insurer_contact_phone_num &&
          insurer_ein == o.insurer_ein &&
          insurer_tin_request_type_cd == o.insurer_tin_request_type_cd &&
          insurer_us_address_line1_txt == o.insurer_us_address_line1_txt &&
          insurer_us_address_line2_txt == o.insurer_us_address_line2_txt &&
          insurer_us_city == o.insurer_us_city &&
          insurer_us_state == o.insurer_us_state &&
          insurer_us_zip == o.insurer_us_zip &&
          insurer_us_zip_4 == o.insurer_us_zip_4
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, tax_year, insurer_business_name_control_txt, insurer_business_name_line1_txt, insurer_business_name_line2_txt, insurer_contact_phone_num, insurer_ein, insurer_tin_request_type_cd, insurer_us_address_line1_txt, insurer_us_address_line2_txt, insurer_us_city, insurer_us_state, insurer_us_zip, insurer_us_zip_4].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
