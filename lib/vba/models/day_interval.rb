=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class DayInterval
    # Year of the date or interval used in internal date calculations
    attr_accessor :interval_year

    # Month of the date or interval used in internal date calculations
    attr_accessor :interval_month

    # Day of the date or interval used in internal date calculations
    attr_accessor :interval_day

    # Date and time stamp of the beginning of the specified day
    attr_accessor :day_from_date

    # Full name of the day of the week
    attr_accessor :day_name

    # Abbreviated name of the day of the week
    attr_accessor :day_short_name

    # Date and time stamp of the end of the specified day
    attr_accessor :day_thru_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Bit indicating if the specified day falls on recognized holiday
    attr_accessor :holiday

    # First day of the month containing the date specified
    attr_accessor :month_from_date

    # Last day of the month containing the date specified
    attr_accessor :month_thru_date

    # Number indicating the quarter containing the date specified
    attr_accessor :quarter

    # First day of the quarter containing the date specified
    attr_accessor :quarter_from_date

    # Last day of the quarter containing the date specified
    attr_accessor :quarter_thru_date

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Number of the day of the week where Sunday is 1
    attr_accessor :week_day

    # Bit indicating if the specified day falls on the weekend
    attr_accessor :weekend

    # Sequence number used for simple date comparisons
    attr_accessor :year_month_day_seq

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'interval_year' => :'interval_Year',
        :'interval_month' => :'interval_Month',
        :'interval_day' => :'interval_Day',
        :'day_from_date' => :'day_From_Date',
        :'day_name' => :'day_Name',
        :'day_short_name' => :'day_Short_Name',
        :'day_thru_date' => :'day_Thru_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'holiday' => :'holiday',
        :'month_from_date' => :'month_From_Date',
        :'month_thru_date' => :'month_Thru_Date',
        :'quarter' => :'quarter',
        :'quarter_from_date' => :'quarter_From_Date',
        :'quarter_thru_date' => :'quarter_Thru_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'week_day' => :'week_Day',
        :'weekend' => :'weekend',
        :'year_month_day_seq' => :'yearMonthDay_Seq'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'interval_year' => :'Integer',
        :'interval_month' => :'Integer',
        :'interval_day' => :'Integer',
        :'day_from_date' => :'Time',
        :'day_name' => :'String',
        :'day_short_name' => :'String',
        :'day_thru_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'holiday' => :'Boolean',
        :'month_from_date' => :'Time',
        :'month_thru_date' => :'Time',
        :'quarter' => :'Integer',
        :'quarter_from_date' => :'Time',
        :'quarter_thru_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'week_day' => :'Integer',
        :'weekend' => :'Boolean',
        :'year_month_day_seq' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'day_from_date',
        :'day_name',
        :'day_short_name',
        :'day_thru_date',
        :'entry_user',
        :'month_from_date',
        :'month_thru_date',
        :'quarter',
        :'quarter_from_date',
        :'quarter_thru_date',
        :'update_user',
        :'week_day',
        :'weekend',
        :'year_month_day_seq'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::DayInterval` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::DayInterval`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'interval_year')
        self.interval_year = attributes[:'interval_year']
      else
        self.interval_year = nil
      end

      if attributes.key?(:'interval_month')
        self.interval_month = attributes[:'interval_month']
      else
        self.interval_month = nil
      end

      if attributes.key?(:'interval_day')
        self.interval_day = attributes[:'interval_day']
      else
        self.interval_day = nil
      end

      if attributes.key?(:'day_from_date')
        self.day_from_date = attributes[:'day_from_date']
      end

      if attributes.key?(:'day_name')
        self.day_name = attributes[:'day_name']
      end

      if attributes.key?(:'day_short_name')
        self.day_short_name = attributes[:'day_short_name']
      end

      if attributes.key?(:'day_thru_date')
        self.day_thru_date = attributes[:'day_thru_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'holiday')
        self.holiday = attributes[:'holiday']
      else
        self.holiday = nil
      end

      if attributes.key?(:'month_from_date')
        self.month_from_date = attributes[:'month_from_date']
      end

      if attributes.key?(:'month_thru_date')
        self.month_thru_date = attributes[:'month_thru_date']
      end

      if attributes.key?(:'quarter')
        self.quarter = attributes[:'quarter']
      end

      if attributes.key?(:'quarter_from_date')
        self.quarter_from_date = attributes[:'quarter_from_date']
      end

      if attributes.key?(:'quarter_thru_date')
        self.quarter_thru_date = attributes[:'quarter_thru_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'week_day')
        self.week_day = attributes[:'week_day']
      end

      if attributes.key?(:'weekend')
        self.weekend = attributes[:'weekend']
      end

      if attributes.key?(:'year_month_day_seq')
        self.year_month_day_seq = attributes[:'year_month_day_seq']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @interval_year.nil?
        invalid_properties.push('invalid value for "interval_year", interval_year cannot be nil.')
      end

      if @interval_month.nil?
        invalid_properties.push('invalid value for "interval_month", interval_month cannot be nil.')
      end

      if @interval_day.nil?
        invalid_properties.push('invalid value for "interval_day", interval_day cannot be nil.')
      end

      if !@day_name.nil? && @day_name.to_s.length > 12
        invalid_properties.push('invalid value for "day_name", the character length must be smaller than or equal to 12.')
      end

      if !@day_short_name.nil? && @day_short_name.to_s.length > 3
        invalid_properties.push('invalid value for "day_short_name", the character length must be smaller than or equal to 3.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @holiday.nil?
        invalid_properties.push('invalid value for "holiday", holiday cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @interval_year.nil?
      return false if @interval_month.nil?
      return false if @interval_day.nil?
      return false if !@day_name.nil? && @day_name.to_s.length > 12
      return false if !@day_short_name.nil? && @day_short_name.to_s.length > 3
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @holiday.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] interval_year Value to be assigned
    def interval_year=(interval_year)
      if interval_year.nil?
        fail ArgumentError, 'interval_year cannot be nil'
      end

      @interval_year = interval_year
    end

    # Custom attribute writer method with validation
    # @param [Object] interval_month Value to be assigned
    def interval_month=(interval_month)
      if interval_month.nil?
        fail ArgumentError, 'interval_month cannot be nil'
      end

      @interval_month = interval_month
    end

    # Custom attribute writer method with validation
    # @param [Object] interval_day Value to be assigned
    def interval_day=(interval_day)
      if interval_day.nil?
        fail ArgumentError, 'interval_day cannot be nil'
      end

      @interval_day = interval_day
    end

    # Custom attribute writer method with validation
    # @param [Object] day_name Value to be assigned
    def day_name=(day_name)
      if !day_name.nil? && day_name.to_s.length > 12
        fail ArgumentError, 'invalid value for "day_name", the character length must be smaller than or equal to 12.'
      end

      @day_name = day_name
    end

    # Custom attribute writer method with validation
    # @param [Object] day_short_name Value to be assigned
    def day_short_name=(day_short_name)
      if !day_short_name.nil? && day_short_name.to_s.length > 3
        fail ArgumentError, 'invalid value for "day_short_name", the character length must be smaller than or equal to 3.'
      end

      @day_short_name = day_short_name
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] holiday Value to be assigned
    def holiday=(holiday)
      if holiday.nil?
        fail ArgumentError, 'holiday cannot be nil'
      end

      @holiday = holiday
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          interval_year == o.interval_year &&
          interval_month == o.interval_month &&
          interval_day == o.interval_day &&
          day_from_date == o.day_from_date &&
          day_name == o.day_name &&
          day_short_name == o.day_short_name &&
          day_thru_date == o.day_thru_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          holiday == o.holiday &&
          month_from_date == o.month_from_date &&
          month_thru_date == o.month_thru_date &&
          quarter == o.quarter &&
          quarter_from_date == o.quarter_from_date &&
          quarter_thru_date == o.quarter_thru_date &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          week_day == o.week_day &&
          weekend == o.weekend &&
          year_month_day_seq == o.year_month_day_seq
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [interval_year, interval_month, interval_day, day_from_date, day_name, day_short_name, day_thru_date, entry_date, entry_user, holiday, month_from_date, month_thru_date, quarter, quarter_from_date, quarter_thru_date, update_date, update_user, week_day, weekend, year_month_day_seq].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
