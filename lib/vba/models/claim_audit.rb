=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimAudit
    attr_accessor :claim_audit_key

    attr_accessor :audit_clause

    attr_accessor :audit_count

    attr_accessor :audit_date

    attr_accessor :audit_percent

    attr_accessor :audit_status

    attr_accessor :audit_user

    attr_accessor :auditor_user

    attr_accessor :description

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :event_id

    attr_accessor :process_date_lookback

    attr_accessor :process_date_lookback_type

    attr_accessor :suspend_audit

    attr_accessor :suspense_type

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_audit_key' => :'claimAudit_Key',
        :'audit_clause' => :'audit_Clause',
        :'audit_count' => :'audit_Count',
        :'audit_date' => :'audit_Date',
        :'audit_percent' => :'audit_Percent',
        :'audit_status' => :'audit_Status',
        :'audit_user' => :'audit_User',
        :'auditor_user' => :'auditor_User',
        :'description' => :'description',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'event_id' => :'event_ID',
        :'process_date_lookback' => :'process_Date_Lookback',
        :'process_date_lookback_type' => :'process_Date_Lookback_Type',
        :'suspend_audit' => :'suspend_Audit',
        :'suspense_type' => :'suspense_Type',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_audit_key' => :'Integer',
        :'audit_clause' => :'String',
        :'audit_count' => :'Integer',
        :'audit_date' => :'Time',
        :'audit_percent' => :'Boolean',
        :'audit_status' => :'String',
        :'audit_user' => :'String',
        :'auditor_user' => :'String',
        :'description' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'event_id' => :'Integer',
        :'process_date_lookback' => :'Integer',
        :'process_date_lookback_type' => :'String',
        :'suspend_audit' => :'Boolean',
        :'suspense_type' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'audit_clause',
        :'audit_count',
        :'audit_date',
        :'audit_status',
        :'audit_user',
        :'auditor_user',
        :'description',
        :'entry_date',
        :'entry_user',
        :'event_id',
        :'process_date_lookback',
        :'process_date_lookback_type',
        :'suspense_type',
        :'update_date',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimAudit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimAudit`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_audit_key')
        self.claim_audit_key = attributes[:'claim_audit_key']
      else
        self.claim_audit_key = nil
      end

      if attributes.key?(:'audit_clause')
        self.audit_clause = attributes[:'audit_clause']
      end

      if attributes.key?(:'audit_count')
        self.audit_count = attributes[:'audit_count']
      end

      if attributes.key?(:'audit_date')
        self.audit_date = attributes[:'audit_date']
      end

      if attributes.key?(:'audit_percent')
        self.audit_percent = attributes[:'audit_percent']
      else
        self.audit_percent = nil
      end

      if attributes.key?(:'audit_status')
        self.audit_status = attributes[:'audit_status']
      end

      if attributes.key?(:'audit_user')
        self.audit_user = attributes[:'audit_user']
      end

      if attributes.key?(:'auditor_user')
        self.auditor_user = attributes[:'auditor_user']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      end

      if attributes.key?(:'process_date_lookback')
        self.process_date_lookback = attributes[:'process_date_lookback']
      end

      if attributes.key?(:'process_date_lookback_type')
        self.process_date_lookback_type = attributes[:'process_date_lookback_type']
      end

      if attributes.key?(:'suspend_audit')
        self.suspend_audit = attributes[:'suspend_audit']
      else
        self.suspend_audit = nil
      end

      if attributes.key?(:'suspense_type')
        self.suspense_type = attributes[:'suspense_type']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_audit_key.nil?
        invalid_properties.push('invalid value for "claim_audit_key", claim_audit_key cannot be nil.')
      end

      if !@audit_clause.nil? && @audit_clause.to_s.length > 4000
        invalid_properties.push('invalid value for "audit_clause", the character length must be smaller than or equal to 4000.')
      end

      if @audit_percent.nil?
        invalid_properties.push('invalid value for "audit_percent", audit_percent cannot be nil.')
      end

      if !@audit_status.nil? && @audit_status.to_s.length > 32
        invalid_properties.push('invalid value for "audit_status", the character length must be smaller than or equal to 32.')
      end

      if !@audit_user.nil? && @audit_user.to_s.length > 20
        invalid_properties.push('invalid value for "audit_user", the character length must be smaller than or equal to 20.')
      end

      if !@auditor_user.nil? && @auditor_user.to_s.length > 20
        invalid_properties.push('invalid value for "auditor_user", the character length must be smaller than or equal to 20.')
      end

      if !@description.nil? && @description.to_s.length > 256
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 256.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@process_date_lookback_type.nil? && @process_date_lookback_type.to_s.length > 16
        invalid_properties.push('invalid value for "process_date_lookback_type", the character length must be smaller than or equal to 16.')
      end

      if @suspend_audit.nil?
        invalid_properties.push('invalid value for "suspend_audit", suspend_audit cannot be nil.')
      end

      if !@suspense_type.nil? && @suspense_type.to_s.length > 32
        invalid_properties.push('invalid value for "suspense_type", the character length must be smaller than or equal to 32.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_audit_key.nil?
      return false if !@audit_clause.nil? && @audit_clause.to_s.length > 4000
      return false if @audit_percent.nil?
      return false if !@audit_status.nil? && @audit_status.to_s.length > 32
      return false if !@audit_user.nil? && @audit_user.to_s.length > 20
      return false if !@auditor_user.nil? && @auditor_user.to_s.length > 20
      return false if !@description.nil? && @description.to_s.length > 256
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@process_date_lookback_type.nil? && @process_date_lookback_type.to_s.length > 16
      return false if @suspend_audit.nil?
      return false if !@suspense_type.nil? && @suspense_type.to_s.length > 32
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_audit_key Value to be assigned
    def claim_audit_key=(claim_audit_key)
      if claim_audit_key.nil?
        fail ArgumentError, 'claim_audit_key cannot be nil'
      end

      @claim_audit_key = claim_audit_key
    end

    # Custom attribute writer method with validation
    # @param [Object] audit_clause Value to be assigned
    def audit_clause=(audit_clause)
      if !audit_clause.nil? && audit_clause.to_s.length > 4000
        fail ArgumentError, 'invalid value for "audit_clause", the character length must be smaller than or equal to 4000.'
      end

      @audit_clause = audit_clause
    end

    # Custom attribute writer method with validation
    # @param [Object] audit_percent Value to be assigned
    def audit_percent=(audit_percent)
      if audit_percent.nil?
        fail ArgumentError, 'audit_percent cannot be nil'
      end

      @audit_percent = audit_percent
    end

    # Custom attribute writer method with validation
    # @param [Object] audit_status Value to be assigned
    def audit_status=(audit_status)
      if !audit_status.nil? && audit_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "audit_status", the character length must be smaller than or equal to 32.'
      end

      @audit_status = audit_status
    end

    # Custom attribute writer method with validation
    # @param [Object] audit_user Value to be assigned
    def audit_user=(audit_user)
      if !audit_user.nil? && audit_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "audit_user", the character length must be smaller than or equal to 20.'
      end

      @audit_user = audit_user
    end

    # Custom attribute writer method with validation
    # @param [Object] auditor_user Value to be assigned
    def auditor_user=(auditor_user)
      if !auditor_user.nil? && auditor_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "auditor_user", the character length must be smaller than or equal to 20.'
      end

      @auditor_user = auditor_user
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 256
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 256.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] process_date_lookback_type Value to be assigned
    def process_date_lookback_type=(process_date_lookback_type)
      if !process_date_lookback_type.nil? && process_date_lookback_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "process_date_lookback_type", the character length must be smaller than or equal to 16.'
      end

      @process_date_lookback_type = process_date_lookback_type
    end

    # Custom attribute writer method with validation
    # @param [Object] suspend_audit Value to be assigned
    def suspend_audit=(suspend_audit)
      if suspend_audit.nil?
        fail ArgumentError, 'suspend_audit cannot be nil'
      end

      @suspend_audit = suspend_audit
    end

    # Custom attribute writer method with validation
    # @param [Object] suspense_type Value to be assigned
    def suspense_type=(suspense_type)
      if !suspense_type.nil? && suspense_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "suspense_type", the character length must be smaller than or equal to 32.'
      end

      @suspense_type = suspense_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_audit_key == o.claim_audit_key &&
          audit_clause == o.audit_clause &&
          audit_count == o.audit_count &&
          audit_date == o.audit_date &&
          audit_percent == o.audit_percent &&
          audit_status == o.audit_status &&
          audit_user == o.audit_user &&
          auditor_user == o.auditor_user &&
          description == o.description &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          event_id == o.event_id &&
          process_date_lookback == o.process_date_lookback &&
          process_date_lookback_type == o.process_date_lookback_type &&
          suspend_audit == o.suspend_audit &&
          suspense_type == o.suspense_type &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_audit_key, audit_clause, audit_count, audit_date, audit_percent, audit_status, audit_user, auditor_user, description, entry_date, entry_user, event_id, process_date_lookback, process_date_lookback_type, suspend_audit, suspense_type, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
