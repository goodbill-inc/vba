=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  # This class represents a summary of disability tax information for a VBA member.
  class VBAMembersDisabilityTaxSummary
    # The total amount of disability tax.
    attr_accessor :total

    # The amount of disability tax that has been paid.
    attr_accessor :paid

    # The amount of disability tax that is payable.
    attr_accessor :payable

    # The amount of disability tax in batch.
    attr_accessor :in_batch

    # The amount of disability tax that has been denied.
    attr_accessor :denied

    # The total number of days for which disability benefits were claimed.
    attr_accessor :total_days

    # The number of days for which disability benefits have been paid.
    attr_accessor :paid_days

    # The number of days for which disability benefits are payable.
    attr_accessor :payable_days

    # The number of days for which disability benefits are in batch.
    attr_accessor :in_batch_days

    # The number of days for which disability benefits have been denied.
    attr_accessor :denied_days

    # The total amount of disability benefits claimed.
    attr_accessor :benefit_total_amount

    # The amount of disability benefits paid.
    attr_accessor :benefit_paid_amount

    # The amount of disability benefits payable.
    attr_accessor :benefit_payable_amount

    # The amount of disability benefits in batch.
    attr_accessor :benefit_in_batch_amount

    # The total amount of deductions claimed for disability tax.
    attr_accessor :deduction_total_amount

    # The amount of deductions paid for disability tax.
    attr_accessor :deduction_paid_amount

    # The amount of deductions payable for disability tax.
    attr_accessor :deduction_payable_amount

    # The amount of deductions in batch for disability tax.
    attr_accessor :deduction_in_batch_amount

    # The total amount of taxable disability benefits.
    attr_accessor :taxable_total_amount

    # The amount of taxable disability benefits paid.
    attr_accessor :taxable_paid_amount

    # The total amount of taxable benefits payable for the member's disability tax summary.
    attr_accessor :taxable_payable_amount

    # The total amount of taxable benefits in batch for the member's disability tax summary.
    attr_accessor :taxable_in_batch_amount

    # The total federal tax amount for the member's disability tax summary.
    attr_accessor :federal_tax_total_amount

    # The total amount of federal tax paid for the member's disability tax summary.
    attr_accessor :federal_tax_paid_amount

    # The total amount of federal tax payable for the member's disability tax summary.
    attr_accessor :federal_tax_payable_amount

    # The total amount of federal tax in batch for the member's disability tax summary.
    attr_accessor :federal_tax_in_batch_amount

    # The total Social Security tax amount for the member's disability tax summary.
    attr_accessor :soc_sec_tax_total_amount

    # The total amount of Social Security tax paid for the member's disability tax summary.
    attr_accessor :soc_sec_tax_paid_amount

    # The total amount of Social Security tax payable for the member's disability tax summary.
    attr_accessor :soc_sec_tax_payable_amount

    # The total amount of Social Security tax in batch for the member's disability tax summary.
    attr_accessor :soc_sec_tax_in_batch_amount

    # The total Medicare tax amount for the member's disability tax summary.
    attr_accessor :medicare_tax_total_amount

    # The total amount of Medicare tax paid for the member's disability tax summary.
    attr_accessor :medicare_tax_paid_amount

    # The total amount of Medicare tax payable for the member's disability tax summary.
    attr_accessor :medicare_tax_payable_amount

    # The total amount of Medicare tax in batch for the member's disability tax summary.
    attr_accessor :medicare_tax_in_batch_amount

    # The total state tax amount for the member's disability tax summary.
    attr_accessor :state_tax_total_amount

    # The total amount of state tax paid for the member's disability tax summary.
    attr_accessor :state_tax_paid_amount

    # Represents the amount of state tax payable for a VBA member's disability tax summary.
    attr_accessor :state_tax_payable_amount

    # Represents the amount of state tax in batch for a VBA member's disability tax summary.
    attr_accessor :state_tax_in_batch_amount

    # Represents the total amount of local tax for a VBA member's disability tax summary.
    attr_accessor :local_tax_total_amount

    # Represents the amount of local tax paid for a VBA member's disability tax summary.
    attr_accessor :local_tax_paid_amount

    # Represents the amount of local tax payable for a VBA member's disability tax summary.
    attr_accessor :local_tax_payable_amount

    # Represents the amount of local tax in batch for a VBA member's disability tax summary.
    attr_accessor :local_tax_in_batch_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'total' => :'total',
        :'paid' => :'paid',
        :'payable' => :'payable',
        :'in_batch' => :'inBatch',
        :'denied' => :'denied',
        :'total_days' => :'totalDays',
        :'paid_days' => :'paidDays',
        :'payable_days' => :'payableDays',
        :'in_batch_days' => :'inBatchDays',
        :'denied_days' => :'deniedDays',
        :'benefit_total_amount' => :'benefitTotalAmount',
        :'benefit_paid_amount' => :'benefitPaidAmount',
        :'benefit_payable_amount' => :'benefitPayableAmount',
        :'benefit_in_batch_amount' => :'benefitInBatchAmount',
        :'deduction_total_amount' => :'deductionTotalAmount',
        :'deduction_paid_amount' => :'deductionPaidAmount',
        :'deduction_payable_amount' => :'deductionPayableAmount',
        :'deduction_in_batch_amount' => :'deductionInBatchAmount',
        :'taxable_total_amount' => :'taxableTotalAmount',
        :'taxable_paid_amount' => :'taxablePaidAmount',
        :'taxable_payable_amount' => :'taxablePayableAmount',
        :'taxable_in_batch_amount' => :'taxableInBatchAmount',
        :'federal_tax_total_amount' => :'federalTaxTotalAmount',
        :'federal_tax_paid_amount' => :'federalTaxPaidAmount',
        :'federal_tax_payable_amount' => :'federalTaxPayableAmount',
        :'federal_tax_in_batch_amount' => :'federalTaxInBatchAmount',
        :'soc_sec_tax_total_amount' => :'socSecTaxTotalAmount',
        :'soc_sec_tax_paid_amount' => :'socSecTaxPaidAmount',
        :'soc_sec_tax_payable_amount' => :'socSecTaxPayableAmount',
        :'soc_sec_tax_in_batch_amount' => :'socSecTaxInBatchAmount',
        :'medicare_tax_total_amount' => :'medicareTaxTotalAmount',
        :'medicare_tax_paid_amount' => :'medicareTaxPaidAmount',
        :'medicare_tax_payable_amount' => :'medicareTaxPayableAmount',
        :'medicare_tax_in_batch_amount' => :'medicareTaxInBatchAmount',
        :'state_tax_total_amount' => :'stateTaxTotalAmount',
        :'state_tax_paid_amount' => :'stateTaxPaidAmount',
        :'state_tax_payable_amount' => :'stateTaxPayableAmount',
        :'state_tax_in_batch_amount' => :'stateTaxInBatchAmount',
        :'local_tax_total_amount' => :'localTaxTotalAmount',
        :'local_tax_paid_amount' => :'localTaxPaidAmount',
        :'local_tax_payable_amount' => :'localTaxPayableAmount',
        :'local_tax_in_batch_amount' => :'localTaxInBatchAmount'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'total' => :'Float',
        :'paid' => :'Float',
        :'payable' => :'Float',
        :'in_batch' => :'Float',
        :'denied' => :'Float',
        :'total_days' => :'Float',
        :'paid_days' => :'Float',
        :'payable_days' => :'Float',
        :'in_batch_days' => :'Float',
        :'denied_days' => :'Float',
        :'benefit_total_amount' => :'Float',
        :'benefit_paid_amount' => :'Float',
        :'benefit_payable_amount' => :'Float',
        :'benefit_in_batch_amount' => :'Float',
        :'deduction_total_amount' => :'Float',
        :'deduction_paid_amount' => :'Float',
        :'deduction_payable_amount' => :'Float',
        :'deduction_in_batch_amount' => :'Float',
        :'taxable_total_amount' => :'Float',
        :'taxable_paid_amount' => :'Float',
        :'taxable_payable_amount' => :'Float',
        :'taxable_in_batch_amount' => :'Float',
        :'federal_tax_total_amount' => :'Float',
        :'federal_tax_paid_amount' => :'Float',
        :'federal_tax_payable_amount' => :'Float',
        :'federal_tax_in_batch_amount' => :'Float',
        :'soc_sec_tax_total_amount' => :'Float',
        :'soc_sec_tax_paid_amount' => :'Float',
        :'soc_sec_tax_payable_amount' => :'Float',
        :'soc_sec_tax_in_batch_amount' => :'Float',
        :'medicare_tax_total_amount' => :'Float',
        :'medicare_tax_paid_amount' => :'Float',
        :'medicare_tax_payable_amount' => :'Float',
        :'medicare_tax_in_batch_amount' => :'Float',
        :'state_tax_total_amount' => :'Float',
        :'state_tax_paid_amount' => :'Float',
        :'state_tax_payable_amount' => :'Float',
        :'state_tax_in_batch_amount' => :'Float',
        :'local_tax_total_amount' => :'Float',
        :'local_tax_paid_amount' => :'Float',
        :'local_tax_payable_amount' => :'Float',
        :'local_tax_in_batch_amount' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAMembersDisabilityTaxSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAMembersDisabilityTaxSummary`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'paid')
        self.paid = attributes[:'paid']
      end

      if attributes.key?(:'payable')
        self.payable = attributes[:'payable']
      end

      if attributes.key?(:'in_batch')
        self.in_batch = attributes[:'in_batch']
      end

      if attributes.key?(:'denied')
        self.denied = attributes[:'denied']
      end

      if attributes.key?(:'total_days')
        self.total_days = attributes[:'total_days']
      end

      if attributes.key?(:'paid_days')
        self.paid_days = attributes[:'paid_days']
      end

      if attributes.key?(:'payable_days')
        self.payable_days = attributes[:'payable_days']
      end

      if attributes.key?(:'in_batch_days')
        self.in_batch_days = attributes[:'in_batch_days']
      end

      if attributes.key?(:'denied_days')
        self.denied_days = attributes[:'denied_days']
      end

      if attributes.key?(:'benefit_total_amount')
        self.benefit_total_amount = attributes[:'benefit_total_amount']
      end

      if attributes.key?(:'benefit_paid_amount')
        self.benefit_paid_amount = attributes[:'benefit_paid_amount']
      end

      if attributes.key?(:'benefit_payable_amount')
        self.benefit_payable_amount = attributes[:'benefit_payable_amount']
      end

      if attributes.key?(:'benefit_in_batch_amount')
        self.benefit_in_batch_amount = attributes[:'benefit_in_batch_amount']
      end

      if attributes.key?(:'deduction_total_amount')
        self.deduction_total_amount = attributes[:'deduction_total_amount']
      end

      if attributes.key?(:'deduction_paid_amount')
        self.deduction_paid_amount = attributes[:'deduction_paid_amount']
      end

      if attributes.key?(:'deduction_payable_amount')
        self.deduction_payable_amount = attributes[:'deduction_payable_amount']
      end

      if attributes.key?(:'deduction_in_batch_amount')
        self.deduction_in_batch_amount = attributes[:'deduction_in_batch_amount']
      end

      if attributes.key?(:'taxable_total_amount')
        self.taxable_total_amount = attributes[:'taxable_total_amount']
      end

      if attributes.key?(:'taxable_paid_amount')
        self.taxable_paid_amount = attributes[:'taxable_paid_amount']
      end

      if attributes.key?(:'taxable_payable_amount')
        self.taxable_payable_amount = attributes[:'taxable_payable_amount']
      end

      if attributes.key?(:'taxable_in_batch_amount')
        self.taxable_in_batch_amount = attributes[:'taxable_in_batch_amount']
      end

      if attributes.key?(:'federal_tax_total_amount')
        self.federal_tax_total_amount = attributes[:'federal_tax_total_amount']
      end

      if attributes.key?(:'federal_tax_paid_amount')
        self.federal_tax_paid_amount = attributes[:'federal_tax_paid_amount']
      end

      if attributes.key?(:'federal_tax_payable_amount')
        self.federal_tax_payable_amount = attributes[:'federal_tax_payable_amount']
      end

      if attributes.key?(:'federal_tax_in_batch_amount')
        self.federal_tax_in_batch_amount = attributes[:'federal_tax_in_batch_amount']
      end

      if attributes.key?(:'soc_sec_tax_total_amount')
        self.soc_sec_tax_total_amount = attributes[:'soc_sec_tax_total_amount']
      end

      if attributes.key?(:'soc_sec_tax_paid_amount')
        self.soc_sec_tax_paid_amount = attributes[:'soc_sec_tax_paid_amount']
      end

      if attributes.key?(:'soc_sec_tax_payable_amount')
        self.soc_sec_tax_payable_amount = attributes[:'soc_sec_tax_payable_amount']
      end

      if attributes.key?(:'soc_sec_tax_in_batch_amount')
        self.soc_sec_tax_in_batch_amount = attributes[:'soc_sec_tax_in_batch_amount']
      end

      if attributes.key?(:'medicare_tax_total_amount')
        self.medicare_tax_total_amount = attributes[:'medicare_tax_total_amount']
      end

      if attributes.key?(:'medicare_tax_paid_amount')
        self.medicare_tax_paid_amount = attributes[:'medicare_tax_paid_amount']
      end

      if attributes.key?(:'medicare_tax_payable_amount')
        self.medicare_tax_payable_amount = attributes[:'medicare_tax_payable_amount']
      end

      if attributes.key?(:'medicare_tax_in_batch_amount')
        self.medicare_tax_in_batch_amount = attributes[:'medicare_tax_in_batch_amount']
      end

      if attributes.key?(:'state_tax_total_amount')
        self.state_tax_total_amount = attributes[:'state_tax_total_amount']
      end

      if attributes.key?(:'state_tax_paid_amount')
        self.state_tax_paid_amount = attributes[:'state_tax_paid_amount']
      end

      if attributes.key?(:'state_tax_payable_amount')
        self.state_tax_payable_amount = attributes[:'state_tax_payable_amount']
      end

      if attributes.key?(:'state_tax_in_batch_amount')
        self.state_tax_in_batch_amount = attributes[:'state_tax_in_batch_amount']
      end

      if attributes.key?(:'local_tax_total_amount')
        self.local_tax_total_amount = attributes[:'local_tax_total_amount']
      end

      if attributes.key?(:'local_tax_paid_amount')
        self.local_tax_paid_amount = attributes[:'local_tax_paid_amount']
      end

      if attributes.key?(:'local_tax_payable_amount')
        self.local_tax_payable_amount = attributes[:'local_tax_payable_amount']
      end

      if attributes.key?(:'local_tax_in_batch_amount')
        self.local_tax_in_batch_amount = attributes[:'local_tax_in_batch_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          total == o.total &&
          paid == o.paid &&
          payable == o.payable &&
          in_batch == o.in_batch &&
          denied == o.denied &&
          total_days == o.total_days &&
          paid_days == o.paid_days &&
          payable_days == o.payable_days &&
          in_batch_days == o.in_batch_days &&
          denied_days == o.denied_days &&
          benefit_total_amount == o.benefit_total_amount &&
          benefit_paid_amount == o.benefit_paid_amount &&
          benefit_payable_amount == o.benefit_payable_amount &&
          benefit_in_batch_amount == o.benefit_in_batch_amount &&
          deduction_total_amount == o.deduction_total_amount &&
          deduction_paid_amount == o.deduction_paid_amount &&
          deduction_payable_amount == o.deduction_payable_amount &&
          deduction_in_batch_amount == o.deduction_in_batch_amount &&
          taxable_total_amount == o.taxable_total_amount &&
          taxable_paid_amount == o.taxable_paid_amount &&
          taxable_payable_amount == o.taxable_payable_amount &&
          taxable_in_batch_amount == o.taxable_in_batch_amount &&
          federal_tax_total_amount == o.federal_tax_total_amount &&
          federal_tax_paid_amount == o.federal_tax_paid_amount &&
          federal_tax_payable_amount == o.federal_tax_payable_amount &&
          federal_tax_in_batch_amount == o.federal_tax_in_batch_amount &&
          soc_sec_tax_total_amount == o.soc_sec_tax_total_amount &&
          soc_sec_tax_paid_amount == o.soc_sec_tax_paid_amount &&
          soc_sec_tax_payable_amount == o.soc_sec_tax_payable_amount &&
          soc_sec_tax_in_batch_amount == o.soc_sec_tax_in_batch_amount &&
          medicare_tax_total_amount == o.medicare_tax_total_amount &&
          medicare_tax_paid_amount == o.medicare_tax_paid_amount &&
          medicare_tax_payable_amount == o.medicare_tax_payable_amount &&
          medicare_tax_in_batch_amount == o.medicare_tax_in_batch_amount &&
          state_tax_total_amount == o.state_tax_total_amount &&
          state_tax_paid_amount == o.state_tax_paid_amount &&
          state_tax_payable_amount == o.state_tax_payable_amount &&
          state_tax_in_batch_amount == o.state_tax_in_batch_amount &&
          local_tax_total_amount == o.local_tax_total_amount &&
          local_tax_paid_amount == o.local_tax_paid_amount &&
          local_tax_payable_amount == o.local_tax_payable_amount &&
          local_tax_in_batch_amount == o.local_tax_in_batch_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [total, paid, payable, in_batch, denied, total_days, paid_days, payable_days, in_batch_days, denied_days, benefit_total_amount, benefit_paid_amount, benefit_payable_amount, benefit_in_batch_amount, deduction_total_amount, deduction_paid_amount, deduction_payable_amount, deduction_in_batch_amount, taxable_total_amount, taxable_paid_amount, taxable_payable_amount, taxable_in_batch_amount, federal_tax_total_amount, federal_tax_paid_amount, federal_tax_payable_amount, federal_tax_in_batch_amount, soc_sec_tax_total_amount, soc_sec_tax_paid_amount, soc_sec_tax_payable_amount, soc_sec_tax_in_batch_amount, medicare_tax_total_amount, medicare_tax_paid_amount, medicare_tax_payable_amount, medicare_tax_in_batch_amount, state_tax_total_amount, state_tax_paid_amount, state_tax_payable_amount, state_tax_in_batch_amount, local_tax_total_amount, local_tax_paid_amount, local_tax_payable_amount, local_tax_in_batch_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
