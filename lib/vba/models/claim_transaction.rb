=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimTransaction
    attr_accessor :claim_transaction_key

    attr_accessor :batch_claim

    attr_accessor :batch_number

    attr_accessor :claim_status_category_code

    attr_accessor :claim_status_code

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :transaction_batch_claim

    attr_accessor :transaction_batch_number

    attr_accessor :transaction_claim_status

    attr_accessor :transaction_date

    attr_accessor :transaction_type

    attr_accessor :transaction_user

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_transaction_key' => :'claimTransaction_Key',
        :'batch_claim' => :'batch_Claim',
        :'batch_number' => :'batch_Number',
        :'claim_status_category_code' => :'claim_Status_Category_Code',
        :'claim_status_code' => :'claim_Status_Code',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'transaction_batch_claim' => :'transaction_Batch_Claim',
        :'transaction_batch_number' => :'transaction_Batch_Number',
        :'transaction_claim_status' => :'transaction_Claim_Status',
        :'transaction_date' => :'transaction_Date',
        :'transaction_type' => :'transaction_Type',
        :'transaction_user' => :'transaction_User',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_transaction_key' => :'Integer',
        :'batch_claim' => :'Integer',
        :'batch_number' => :'Integer',
        :'claim_status_category_code' => :'String',
        :'claim_status_code' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'transaction_batch_claim' => :'Integer',
        :'transaction_batch_number' => :'Integer',
        :'transaction_claim_status' => :'String',
        :'transaction_date' => :'Time',
        :'transaction_type' => :'String',
        :'transaction_user' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'claim_status_category_code',
        :'claim_status_code',
        :'entry_user',
        :'transaction_batch_claim',
        :'transaction_batch_number',
        :'transaction_claim_status',
        :'transaction_type',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimTransaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimTransaction`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_transaction_key')
        self.claim_transaction_key = attributes[:'claim_transaction_key']
      else
        self.claim_transaction_key = nil
      end

      if attributes.key?(:'batch_claim')
        self.batch_claim = attributes[:'batch_claim']
      end

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      end

      if attributes.key?(:'claim_status_category_code')
        self.claim_status_category_code = attributes[:'claim_status_category_code']
      end

      if attributes.key?(:'claim_status_code')
        self.claim_status_code = attributes[:'claim_status_code']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'transaction_batch_claim')
        self.transaction_batch_claim = attributes[:'transaction_batch_claim']
      end

      if attributes.key?(:'transaction_batch_number')
        self.transaction_batch_number = attributes[:'transaction_batch_number']
      end

      if attributes.key?(:'transaction_claim_status')
        self.transaction_claim_status = attributes[:'transaction_claim_status']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      else
        self.transaction_date = nil
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'transaction_user')
        self.transaction_user = attributes[:'transaction_user']
      else
        self.transaction_user = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_transaction_key.nil?
        invalid_properties.push('invalid value for "claim_transaction_key", claim_transaction_key cannot be nil.')
      end

      if !@claim_status_category_code.nil? && @claim_status_category_code.to_s.length > 8
        invalid_properties.push('invalid value for "claim_status_category_code", the character length must be smaller than or equal to 8.')
      end

      if !@claim_status_code.nil? && @claim_status_code.to_s.length > 8
        invalid_properties.push('invalid value for "claim_status_code", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@transaction_claim_status.nil? && @transaction_claim_status.to_s.length > 8
        invalid_properties.push('invalid value for "transaction_claim_status", the character length must be smaller than or equal to 8.')
      end

      if @transaction_date.nil?
        invalid_properties.push('invalid value for "transaction_date", transaction_date cannot be nil.')
      end

      if !@transaction_type.nil? && @transaction_type.to_s.length > 32
        invalid_properties.push('invalid value for "transaction_type", the character length must be smaller than or equal to 32.')
      end

      if @transaction_user.nil?
        invalid_properties.push('invalid value for "transaction_user", transaction_user cannot be nil.')
      end

      if @transaction_user.to_s.length > 20
        invalid_properties.push('invalid value for "transaction_user", the character length must be smaller than or equal to 20.')
      end

      if @transaction_user.to_s.length < 1
        invalid_properties.push('invalid value for "transaction_user", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_transaction_key.nil?
      return false if !@claim_status_category_code.nil? && @claim_status_category_code.to_s.length > 8
      return false if !@claim_status_code.nil? && @claim_status_code.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@transaction_claim_status.nil? && @transaction_claim_status.to_s.length > 8
      return false if @transaction_date.nil?
      return false if !@transaction_type.nil? && @transaction_type.to_s.length > 32
      return false if @transaction_user.nil?
      return false if @transaction_user.to_s.length > 20
      return false if @transaction_user.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_transaction_key Value to be assigned
    def claim_transaction_key=(claim_transaction_key)
      if claim_transaction_key.nil?
        fail ArgumentError, 'claim_transaction_key cannot be nil'
      end

      @claim_transaction_key = claim_transaction_key
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_status_category_code Value to be assigned
    def claim_status_category_code=(claim_status_category_code)
      if !claim_status_category_code.nil? && claim_status_category_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "claim_status_category_code", the character length must be smaller than or equal to 8.'
      end

      @claim_status_category_code = claim_status_category_code
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_status_code Value to be assigned
    def claim_status_code=(claim_status_code)
      if !claim_status_code.nil? && claim_status_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "claim_status_code", the character length must be smaller than or equal to 8.'
      end

      @claim_status_code = claim_status_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_claim_status Value to be assigned
    def transaction_claim_status=(transaction_claim_status)
      if !transaction_claim_status.nil? && transaction_claim_status.to_s.length > 8
        fail ArgumentError, 'invalid value for "transaction_claim_status", the character length must be smaller than or equal to 8.'
      end

      @transaction_claim_status = transaction_claim_status
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_date Value to be assigned
    def transaction_date=(transaction_date)
      if transaction_date.nil?
        fail ArgumentError, 'transaction_date cannot be nil'
      end

      @transaction_date = transaction_date
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_type Value to be assigned
    def transaction_type=(transaction_type)
      if !transaction_type.nil? && transaction_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "transaction_type", the character length must be smaller than or equal to 32.'
      end

      @transaction_type = transaction_type
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_user Value to be assigned
    def transaction_user=(transaction_user)
      if transaction_user.nil?
        fail ArgumentError, 'transaction_user cannot be nil'
      end

      if transaction_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "transaction_user", the character length must be smaller than or equal to 20.'
      end

      if transaction_user.to_s.length < 1
        fail ArgumentError, 'invalid value for "transaction_user", the character length must be great than or equal to 1.'
      end

      @transaction_user = transaction_user
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_transaction_key == o.claim_transaction_key &&
          batch_claim == o.batch_claim &&
          batch_number == o.batch_number &&
          claim_status_category_code == o.claim_status_category_code &&
          claim_status_code == o.claim_status_code &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          transaction_batch_claim == o.transaction_batch_claim &&
          transaction_batch_number == o.transaction_batch_number &&
          transaction_claim_status == o.transaction_claim_status &&
          transaction_date == o.transaction_date &&
          transaction_type == o.transaction_type &&
          transaction_user == o.transaction_user &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_transaction_key, batch_claim, batch_number, claim_status_category_code, claim_status_code, entry_date, entry_user, transaction_batch_claim, transaction_batch_number, transaction_claim_status, transaction_date, transaction_type, transaction_user, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
