=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class SSOConfig
    # A unique identifier for each SSO configuration setting. This is the primary key of the table.
    attr_accessor :sso_config_id

    # The authorization URL for the initial authentication step in the SSO process.
    attr_accessor :auth_url

    # The client ID issued by the identity provider.
    attr_accessor :client_id

    # The client secret issued by the identity provider.
    attr_accessor :client_secret

    # A detailed description of the SSO configuration.
    attr_accessor :description

    # The display name for the SSO configuration.  This value is displayed to the user on the login screen.
    attr_accessor :display

    # The name of the SSO provider (e.g., Active Directory, Google, Okta, Auth0).
    attr_accessor :provider_name

    # The URL to which the identity provider will redirect the user after authentication.
    attr_accessor :redirect_url

    # A flag indicating whether the SSO configuration is enabled. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ss_o_enable

    # A list of scopes or permissions requested from the identity provider.
    attr_accessor :scopes

    # The token URL used to exchange an authorization code for an access token.
    attr_accessor :token_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sso_config_id' => :'ssoConfig_ID',
        :'auth_url' => :'auth_URL',
        :'client_id' => :'client_ID',
        :'client_secret' => :'client_Secret',
        :'description' => :'description',
        :'display' => :'display',
        :'provider_name' => :'provider_Name',
        :'redirect_url' => :'redirect_URL',
        :'ss_o_enable' => :'ssO_Enable',
        :'scopes' => :'scopes',
        :'token_url' => :'token_URL'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sso_config_id' => :'String',
        :'auth_url' => :'String',
        :'client_id' => :'String',
        :'client_secret' => :'String',
        :'description' => :'String',
        :'display' => :'String',
        :'provider_name' => :'String',
        :'redirect_url' => :'String',
        :'ss_o_enable' => :'Boolean',
        :'scopes' => :'String',
        :'token_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'auth_url',
        :'client_id',
        :'client_secret',
        :'description',
        :'display',
        :'provider_name',
        :'redirect_url',
        :'scopes',
        :'token_url'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::SSOConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::SSOConfig`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sso_config_id')
        self.sso_config_id = attributes[:'sso_config_id']
      else
        self.sso_config_id = nil
      end

      if attributes.key?(:'auth_url')
        self.auth_url = attributes[:'auth_url']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'client_secret')
        self.client_secret = attributes[:'client_secret']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display')
        self.display = attributes[:'display']
      end

      if attributes.key?(:'provider_name')
        self.provider_name = attributes[:'provider_name']
      end

      if attributes.key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      end

      if attributes.key?(:'ss_o_enable')
        self.ss_o_enable = attributes[:'ss_o_enable']
      else
        self.ss_o_enable = nil
      end

      if attributes.key?(:'scopes')
        self.scopes = attributes[:'scopes']
      end

      if attributes.key?(:'token_url')
        self.token_url = attributes[:'token_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @sso_config_id.nil?
        invalid_properties.push('invalid value for "sso_config_id", sso_config_id cannot be nil.')
      end

      if @sso_config_id.to_s.length > 32
        invalid_properties.push('invalid value for "sso_config_id", the character length must be smaller than or equal to 32.')
      end

      if @sso_config_id.to_s.length < 1
        invalid_properties.push('invalid value for "sso_config_id", the character length must be great than or equal to 1.')
      end

      if !@auth_url.nil? && @auth_url.to_s.length > 512
        invalid_properties.push('invalid value for "auth_url", the character length must be smaller than or equal to 512.')
      end

      if !@client_id.nil? && @client_id.to_s.length > 256
        invalid_properties.push('invalid value for "client_id", the character length must be smaller than or equal to 256.')
      end

      if !@client_secret.nil? && @client_secret.to_s.length > 256
        invalid_properties.push('invalid value for "client_secret", the character length must be smaller than or equal to 256.')
      end

      if !@display.nil? && @display.to_s.length > 64
        invalid_properties.push('invalid value for "display", the character length must be smaller than or equal to 64.')
      end

      if !@provider_name.nil? && @provider_name.to_s.length > 128
        invalid_properties.push('invalid value for "provider_name", the character length must be smaller than or equal to 128.')
      end

      if !@redirect_url.nil? && @redirect_url.to_s.length > 512
        invalid_properties.push('invalid value for "redirect_url", the character length must be smaller than or equal to 512.')
      end

      if @ss_o_enable.nil?
        invalid_properties.push('invalid value for "ss_o_enable", ss_o_enable cannot be nil.')
      end

      if !@scopes.nil? && @scopes.to_s.length > 512
        invalid_properties.push('invalid value for "scopes", the character length must be smaller than or equal to 512.')
      end

      if !@token_url.nil? && @token_url.to_s.length > 512
        invalid_properties.push('invalid value for "token_url", the character length must be smaller than or equal to 512.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @sso_config_id.nil?
      return false if @sso_config_id.to_s.length > 32
      return false if @sso_config_id.to_s.length < 1
      return false if !@auth_url.nil? && @auth_url.to_s.length > 512
      return false if !@client_id.nil? && @client_id.to_s.length > 256
      return false if !@client_secret.nil? && @client_secret.to_s.length > 256
      return false if !@display.nil? && @display.to_s.length > 64
      return false if !@provider_name.nil? && @provider_name.to_s.length > 128
      return false if !@redirect_url.nil? && @redirect_url.to_s.length > 512
      return false if @ss_o_enable.nil?
      return false if !@scopes.nil? && @scopes.to_s.length > 512
      return false if !@token_url.nil? && @token_url.to_s.length > 512
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] sso_config_id Value to be assigned
    def sso_config_id=(sso_config_id)
      if sso_config_id.nil?
        fail ArgumentError, 'sso_config_id cannot be nil'
      end

      if sso_config_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "sso_config_id", the character length must be smaller than or equal to 32.'
      end

      if sso_config_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "sso_config_id", the character length must be great than or equal to 1.'
      end

      @sso_config_id = sso_config_id
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_url Value to be assigned
    def auth_url=(auth_url)
      if !auth_url.nil? && auth_url.to_s.length > 512
        fail ArgumentError, 'invalid value for "auth_url", the character length must be smaller than or equal to 512.'
      end

      @auth_url = auth_url
    end

    # Custom attribute writer method with validation
    # @param [Object] client_id Value to be assigned
    def client_id=(client_id)
      if !client_id.nil? && client_id.to_s.length > 256
        fail ArgumentError, 'invalid value for "client_id", the character length must be smaller than or equal to 256.'
      end

      @client_id = client_id
    end

    # Custom attribute writer method with validation
    # @param [Object] client_secret Value to be assigned
    def client_secret=(client_secret)
      if !client_secret.nil? && client_secret.to_s.length > 256
        fail ArgumentError, 'invalid value for "client_secret", the character length must be smaller than or equal to 256.'
      end

      @client_secret = client_secret
    end

    # Custom attribute writer method with validation
    # @param [Object] display Value to be assigned
    def display=(display)
      if !display.nil? && display.to_s.length > 64
        fail ArgumentError, 'invalid value for "display", the character length must be smaller than or equal to 64.'
      end

      @display = display
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_name Value to be assigned
    def provider_name=(provider_name)
      if !provider_name.nil? && provider_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "provider_name", the character length must be smaller than or equal to 128.'
      end

      @provider_name = provider_name
    end

    # Custom attribute writer method with validation
    # @param [Object] redirect_url Value to be assigned
    def redirect_url=(redirect_url)
      if !redirect_url.nil? && redirect_url.to_s.length > 512
        fail ArgumentError, 'invalid value for "redirect_url", the character length must be smaller than or equal to 512.'
      end

      @redirect_url = redirect_url
    end

    # Custom attribute writer method with validation
    # @param [Object] ss_o_enable Value to be assigned
    def ss_o_enable=(ss_o_enable)
      if ss_o_enable.nil?
        fail ArgumentError, 'ss_o_enable cannot be nil'
      end

      @ss_o_enable = ss_o_enable
    end

    # Custom attribute writer method with validation
    # @param [Object] scopes Value to be assigned
    def scopes=(scopes)
      if !scopes.nil? && scopes.to_s.length > 512
        fail ArgumentError, 'invalid value for "scopes", the character length must be smaller than or equal to 512.'
      end

      @scopes = scopes
    end

    # Custom attribute writer method with validation
    # @param [Object] token_url Value to be assigned
    def token_url=(token_url)
      if !token_url.nil? && token_url.to_s.length > 512
        fail ArgumentError, 'invalid value for "token_url", the character length must be smaller than or equal to 512.'
      end

      @token_url = token_url
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sso_config_id == o.sso_config_id &&
          auth_url == o.auth_url &&
          client_id == o.client_id &&
          client_secret == o.client_secret &&
          description == o.description &&
          display == o.display &&
          provider_name == o.provider_name &&
          redirect_url == o.redirect_url &&
          ss_o_enable == o.ss_o_enable &&
          scopes == o.scopes &&
          token_url == o.token_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sso_config_id, auth_url, client_id, client_secret, description, display, provider_name, redirect_url, ss_o_enable, scopes, token_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
