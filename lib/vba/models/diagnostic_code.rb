=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class DiagnosticCode
    attr_accessor :diagnostic_code

    attr_accessor :diagnostic_code_type

    attr_accessor :effective_date

    attr_accessor :accident

    attr_accessor :age_range_type

    attr_accessor :age_restricted

    attr_accessor :age_type

    attr_accessor :dr_g_code

    attr_accessor :diag_description

    attr_accessor :diag_ivr

    attr_accessor :diagnostic_group

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :financial_type

    attr_accessor :from_age

    attr_accessor :gender

    attr_accessor :long_description

    attr_accessor :pend_ex_code

    attr_accessor :pend_flag

    attr_accessor :pre_ex

    attr_accessor :sec111

    attr_accessor :term_date

    attr_accessor :thru_age

    attr_accessor :trigger_diagnosis

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :valid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'diagnostic_code' => :'diagnostic_Code',
        :'diagnostic_code_type' => :'diagnostic_Code_Type',
        :'effective_date' => :'effective_Date',
        :'accident' => :'accident',
        :'age_range_type' => :'age_Range_Type',
        :'age_restricted' => :'age_Restricted',
        :'age_type' => :'age_Type',
        :'dr_g_code' => :'drG_Code',
        :'diag_description' => :'diag_Description',
        :'diag_ivr' => :'diag_IVR',
        :'diagnostic_group' => :'diagnostic_Group',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'financial_type' => :'financial_Type',
        :'from_age' => :'from_Age',
        :'gender' => :'gender',
        :'long_description' => :'long_Description',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'pre_ex' => :'pre_Ex',
        :'sec111' => :'sec111',
        :'term_date' => :'term_Date',
        :'thru_age' => :'thru_Age',
        :'trigger_diagnosis' => :'trigger_Diagnosis',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'valid' => :'valid'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'diagnostic_code' => :'String',
        :'diagnostic_code_type' => :'String',
        :'effective_date' => :'Time',
        :'accident' => :'Boolean',
        :'age_range_type' => :'String',
        :'age_restricted' => :'Boolean',
        :'age_type' => :'String',
        :'dr_g_code' => :'String',
        :'diag_description' => :'String',
        :'diag_ivr' => :'String',
        :'diagnostic_group' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'financial_type' => :'String',
        :'from_age' => :'Integer',
        :'gender' => :'String',
        :'long_description' => :'String',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'pre_ex' => :'Boolean',
        :'sec111' => :'Boolean',
        :'term_date' => :'Time',
        :'thru_age' => :'Integer',
        :'trigger_diagnosis' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'valid' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'age_range_type',
        :'age_type',
        :'dr_g_code',
        :'diag_description',
        :'diag_ivr',
        :'diagnostic_group',
        :'entry_user',
        :'financial_type',
        :'from_age',
        :'gender',
        :'long_description',
        :'pend_ex_code',
        :'pend_flag',
        :'term_date',
        :'thru_age',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::DiagnosticCode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::DiagnosticCode`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'diagnostic_code')
        self.diagnostic_code = attributes[:'diagnostic_code']
      else
        self.diagnostic_code = nil
      end

      if attributes.key?(:'diagnostic_code_type')
        self.diagnostic_code_type = attributes[:'diagnostic_code_type']
      else
        self.diagnostic_code_type = nil
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'accident')
        self.accident = attributes[:'accident']
      else
        self.accident = nil
      end

      if attributes.key?(:'age_range_type')
        self.age_range_type = attributes[:'age_range_type']
      end

      if attributes.key?(:'age_restricted')
        self.age_restricted = attributes[:'age_restricted']
      else
        self.age_restricted = nil
      end

      if attributes.key?(:'age_type')
        self.age_type = attributes[:'age_type']
      end

      if attributes.key?(:'dr_g_code')
        self.dr_g_code = attributes[:'dr_g_code']
      end

      if attributes.key?(:'diag_description')
        self.diag_description = attributes[:'diag_description']
      end

      if attributes.key?(:'diag_ivr')
        self.diag_ivr = attributes[:'diag_ivr']
      end

      if attributes.key?(:'diagnostic_group')
        self.diagnostic_group = attributes[:'diagnostic_group']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'financial_type')
        self.financial_type = attributes[:'financial_type']
      end

      if attributes.key?(:'from_age')
        self.from_age = attributes[:'from_age']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'pre_ex')
        self.pre_ex = attributes[:'pre_ex']
      else
        self.pre_ex = nil
      end

      if attributes.key?(:'sec111')
        self.sec111 = attributes[:'sec111']
      else
        self.sec111 = nil
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'thru_age')
        self.thru_age = attributes[:'thru_age']
      end

      if attributes.key?(:'trigger_diagnosis')
        self.trigger_diagnosis = attributes[:'trigger_diagnosis']
      else
        self.trigger_diagnosis = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'valid')
        self.valid = attributes[:'valid']
      else
        self.valid = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @diagnostic_code.nil?
        invalid_properties.push('invalid value for "diagnostic_code", diagnostic_code cannot be nil.')
      end

      if @diagnostic_code.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code", the character length must be smaller than or equal to 8.')
      end

      if @diagnostic_code.to_s.length < 1
        invalid_properties.push('invalid value for "diagnostic_code", the character length must be great than or equal to 1.')
      end

      if @diagnostic_code_type.nil?
        invalid_properties.push('invalid value for "diagnostic_code_type", diagnostic_code_type cannot be nil.')
      end

      if @diagnostic_code_type.to_s.length > 16
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.')
      end

      if @diagnostic_code_type.to_s.length < 1
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if @accident.nil?
        invalid_properties.push('invalid value for "accident", accident cannot be nil.')
      end

      if !@age_range_type.nil? && @age_range_type.to_s.length > 1
        invalid_properties.push('invalid value for "age_range_type", the character length must be smaller than or equal to 1.')
      end

      if @age_restricted.nil?
        invalid_properties.push('invalid value for "age_restricted", age_restricted cannot be nil.')
      end

      if !@age_type.nil? && @age_type.to_s.length > 16
        invalid_properties.push('invalid value for "age_type", the character length must be smaller than or equal to 16.')
      end

      if !@dr_g_code.nil? && @dr_g_code.to_s.length > 8
        invalid_properties.push('invalid value for "dr_g_code", the character length must be smaller than or equal to 8.')
      end

      if !@diag_description.nil? && @diag_description.to_s.length > 128
        invalid_properties.push('invalid value for "diag_description", the character length must be smaller than or equal to 128.')
      end

      if !@diag_ivr.nil? && @diag_ivr.to_s.length > 8
        invalid_properties.push('invalid value for "diag_ivr", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_group.nil? && @diagnostic_group.to_s.length > 32
        invalid_properties.push('invalid value for "diagnostic_group", the character length must be smaller than or equal to 32.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@financial_type.nil? && @financial_type.to_s.length > 32
        invalid_properties.push('invalid value for "financial_type", the character length must be smaller than or equal to 32.')
      end

      if !@gender.nil? && @gender.to_s.length > 1
        invalid_properties.push('invalid value for "gender", the character length must be smaller than or equal to 1.')
      end

      if !@long_description.nil? && @long_description.to_s.length > 512
        invalid_properties.push('invalid value for "long_description", the character length must be smaller than or equal to 512.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if @pre_ex.nil?
        invalid_properties.push('invalid value for "pre_ex", pre_ex cannot be nil.')
      end

      if @sec111.nil?
        invalid_properties.push('invalid value for "sec111", sec111 cannot be nil.')
      end

      if @trigger_diagnosis.nil?
        invalid_properties.push('invalid value for "trigger_diagnosis", trigger_diagnosis cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @valid.nil?
        invalid_properties.push('invalid value for "valid", valid cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @diagnostic_code.nil?
      return false if @diagnostic_code.to_s.length > 8
      return false if @diagnostic_code.to_s.length < 1
      return false if @diagnostic_code_type.nil?
      return false if @diagnostic_code_type.to_s.length > 16
      return false if @diagnostic_code_type.to_s.length < 1
      return false if @effective_date.nil?
      return false if @accident.nil?
      return false if !@age_range_type.nil? && @age_range_type.to_s.length > 1
      return false if @age_restricted.nil?
      return false if !@age_type.nil? && @age_type.to_s.length > 16
      return false if !@dr_g_code.nil? && @dr_g_code.to_s.length > 8
      return false if !@diag_description.nil? && @diag_description.to_s.length > 128
      return false if !@diag_ivr.nil? && @diag_ivr.to_s.length > 8
      return false if !@diagnostic_group.nil? && @diagnostic_group.to_s.length > 32
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@financial_type.nil? && @financial_type.to_s.length > 32
      return false if !@gender.nil? && @gender.to_s.length > 1
      return false if !@long_description.nil? && @long_description.to_s.length > 512
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if @pre_ex.nil?
      return false if @sec111.nil?
      return false if @trigger_diagnosis.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @valid.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code Value to be assigned
    def diagnostic_code=(diagnostic_code)
      if diagnostic_code.nil?
        fail ArgumentError, 'diagnostic_code cannot be nil'
      end

      if diagnostic_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code", the character length must be smaller than or equal to 8.'
      end

      if diagnostic_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "diagnostic_code", the character length must be great than or equal to 1.'
      end

      @diagnostic_code = diagnostic_code
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code_type Value to be assigned
    def diagnostic_code_type=(diagnostic_code_type)
      if diagnostic_code_type.nil?
        fail ArgumentError, 'diagnostic_code_type cannot be nil'
      end

      if diagnostic_code_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.'
      end

      if diagnostic_code_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.'
      end

      @diagnostic_code_type = diagnostic_code_type
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      if effective_date.nil?
        fail ArgumentError, 'effective_date cannot be nil'
      end

      @effective_date = effective_date
    end

    # Custom attribute writer method with validation
    # @param [Object] accident Value to be assigned
    def accident=(accident)
      if accident.nil?
        fail ArgumentError, 'accident cannot be nil'
      end

      @accident = accident
    end

    # Custom attribute writer method with validation
    # @param [Object] age_range_type Value to be assigned
    def age_range_type=(age_range_type)
      if !age_range_type.nil? && age_range_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "age_range_type", the character length must be smaller than or equal to 1.'
      end

      @age_range_type = age_range_type
    end

    # Custom attribute writer method with validation
    # @param [Object] age_restricted Value to be assigned
    def age_restricted=(age_restricted)
      if age_restricted.nil?
        fail ArgumentError, 'age_restricted cannot be nil'
      end

      @age_restricted = age_restricted
    end

    # Custom attribute writer method with validation
    # @param [Object] age_type Value to be assigned
    def age_type=(age_type)
      if !age_type.nil? && age_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "age_type", the character length must be smaller than or equal to 16.'
      end

      @age_type = age_type
    end

    # Custom attribute writer method with validation
    # @param [Object] dr_g_code Value to be assigned
    def dr_g_code=(dr_g_code)
      if !dr_g_code.nil? && dr_g_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "dr_g_code", the character length must be smaller than or equal to 8.'
      end

      @dr_g_code = dr_g_code
    end

    # Custom attribute writer method with validation
    # @param [Object] diag_description Value to be assigned
    def diag_description=(diag_description)
      if !diag_description.nil? && diag_description.to_s.length > 128
        fail ArgumentError, 'invalid value for "diag_description", the character length must be smaller than or equal to 128.'
      end

      @diag_description = diag_description
    end

    # Custom attribute writer method with validation
    # @param [Object] diag_ivr Value to be assigned
    def diag_ivr=(diag_ivr)
      if !diag_ivr.nil? && diag_ivr.to_s.length > 8
        fail ArgumentError, 'invalid value for "diag_ivr", the character length must be smaller than or equal to 8.'
      end

      @diag_ivr = diag_ivr
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_group Value to be assigned
    def diagnostic_group=(diagnostic_group)
      if !diagnostic_group.nil? && diagnostic_group.to_s.length > 32
        fail ArgumentError, 'invalid value for "diagnostic_group", the character length must be smaller than or equal to 32.'
      end

      @diagnostic_group = diagnostic_group
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] financial_type Value to be assigned
    def financial_type=(financial_type)
      if !financial_type.nil? && financial_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "financial_type", the character length must be smaller than or equal to 32.'
      end

      @financial_type = financial_type
    end

    # Custom attribute writer method with validation
    # @param [Object] gender Value to be assigned
    def gender=(gender)
      if !gender.nil? && gender.to_s.length > 1
        fail ArgumentError, 'invalid value for "gender", the character length must be smaller than or equal to 1.'
      end

      @gender = gender
    end

    # Custom attribute writer method with validation
    # @param [Object] long_description Value to be assigned
    def long_description=(long_description)
      if !long_description.nil? && long_description.to_s.length > 512
        fail ArgumentError, 'invalid value for "long_description", the character length must be smaller than or equal to 512.'
      end

      @long_description = long_description
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_ex Value to be assigned
    def pre_ex=(pre_ex)
      if pre_ex.nil?
        fail ArgumentError, 'pre_ex cannot be nil'
      end

      @pre_ex = pre_ex
    end

    # Custom attribute writer method with validation
    # @param [Object] sec111 Value to be assigned
    def sec111=(sec111)
      if sec111.nil?
        fail ArgumentError, 'sec111 cannot be nil'
      end

      @sec111 = sec111
    end

    # Custom attribute writer method with validation
    # @param [Object] trigger_diagnosis Value to be assigned
    def trigger_diagnosis=(trigger_diagnosis)
      if trigger_diagnosis.nil?
        fail ArgumentError, 'trigger_diagnosis cannot be nil'
      end

      @trigger_diagnosis = trigger_diagnosis
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] valid Value to be assigned
    def valid=(valid)
      if valid.nil?
        fail ArgumentError, 'valid cannot be nil'
      end

      @valid = valid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          diagnostic_code == o.diagnostic_code &&
          diagnostic_code_type == o.diagnostic_code_type &&
          effective_date == o.effective_date &&
          accident == o.accident &&
          age_range_type == o.age_range_type &&
          age_restricted == o.age_restricted &&
          age_type == o.age_type &&
          dr_g_code == o.dr_g_code &&
          diag_description == o.diag_description &&
          diag_ivr == o.diag_ivr &&
          diagnostic_group == o.diagnostic_group &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          financial_type == o.financial_type &&
          from_age == o.from_age &&
          gender == o.gender &&
          long_description == o.long_description &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          pre_ex == o.pre_ex &&
          sec111 == o.sec111 &&
          term_date == o.term_date &&
          thru_age == o.thru_age &&
          trigger_diagnosis == o.trigger_diagnosis &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          valid == o.valid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [diagnostic_code, diagnostic_code_type, effective_date, accident, age_range_type, age_restricted, age_type, dr_g_code, diag_description, diag_ivr, diagnostic_group, entry_date, entry_user, financial_type, from_age, gender, long_description, pend_ex_code, pend_flag, pre_ex, sec111, term_date, thru_age, trigger_diagnosis, update_date, update_user, valid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
