=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimBatchLife
    attr_accessor :batch_number

    attr_accessor :claim_id

    attr_accessor :death_date

    attr_accessor :death_reason

    attr_accessor :diagnostic_code1

    attr_accessor :diagnostic_code2

    attr_accessor :diagnostic_code3

    attr_accessor :diagnostic_code4

    attr_accessor :diagnostic_code_type

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :ex_code1

    attr_accessor :ex_code2

    attr_accessor :illness

    attr_accessor :illness_duration

    attr_accessor :illness_duration_type

    attr_accessor :last_day_worked

    attr_accessor :mail_to

    attr_accessor :member_seq

    attr_accessor :pay_to

    attr_accessor :payee_id

    attr_accessor :plan_id

    attr_accessor :provider_id

    attr_accessor :received_date

    attr_accessor :subscriber_id

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_number' => :'batch_Number',
        :'claim_id' => :'claim_ID',
        :'death_date' => :'death_Date',
        :'death_reason' => :'death_Reason',
        :'diagnostic_code1' => :'diagnostic_Code1',
        :'diagnostic_code2' => :'diagnostic_Code2',
        :'diagnostic_code3' => :'diagnostic_Code3',
        :'diagnostic_code4' => :'diagnostic_Code4',
        :'diagnostic_code_type' => :'diagnostic_Code_Type',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code1' => :'ex_Code1',
        :'ex_code2' => :'ex_Code2',
        :'illness' => :'illness',
        :'illness_duration' => :'illness_Duration',
        :'illness_duration_type' => :'illness_Duration_Type',
        :'last_day_worked' => :'last_Day_Worked',
        :'mail_to' => :'mail_To',
        :'member_seq' => :'member_Seq',
        :'pay_to' => :'pay_To',
        :'payee_id' => :'payee_ID',
        :'plan_id' => :'plan_ID',
        :'provider_id' => :'provider_ID',
        :'received_date' => :'received_Date',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'volume' => :'volume'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_number' => :'Integer',
        :'claim_id' => :'String',
        :'death_date' => :'Time',
        :'death_reason' => :'Integer',
        :'diagnostic_code1' => :'String',
        :'diagnostic_code2' => :'String',
        :'diagnostic_code3' => :'String',
        :'diagnostic_code4' => :'String',
        :'diagnostic_code_type' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code1' => :'String',
        :'ex_code2' => :'String',
        :'illness' => :'Boolean',
        :'illness_duration' => :'Integer',
        :'illness_duration_type' => :'String',
        :'last_day_worked' => :'Time',
        :'mail_to' => :'String',
        :'member_seq' => :'String',
        :'pay_to' => :'String',
        :'payee_id' => :'String',
        :'plan_id' => :'String',
        :'provider_id' => :'String',
        :'received_date' => :'Time',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'volume' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'claim_id',
        :'death_date',
        :'death_reason',
        :'diagnostic_code1',
        :'diagnostic_code2',
        :'diagnostic_code3',
        :'diagnostic_code4',
        :'entry_user',
        :'ex_code1',
        :'ex_code2',
        :'illness_duration',
        :'illness_duration_type',
        :'last_day_worked',
        :'mail_to',
        :'member_seq',
        :'pay_to',
        :'payee_id',
        :'plan_id',
        :'provider_id',
        :'received_date',
        :'subscriber_id',
        :'update_user',
        :'volume'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimBatchLife` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimBatchLife`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'claim_id')
        self.claim_id = attributes[:'claim_id']
      end

      if attributes.key?(:'death_date')
        self.death_date = attributes[:'death_date']
      end

      if attributes.key?(:'death_reason')
        self.death_reason = attributes[:'death_reason']
      end

      if attributes.key?(:'diagnostic_code1')
        self.diagnostic_code1 = attributes[:'diagnostic_code1']
      end

      if attributes.key?(:'diagnostic_code2')
        self.diagnostic_code2 = attributes[:'diagnostic_code2']
      end

      if attributes.key?(:'diagnostic_code3')
        self.diagnostic_code3 = attributes[:'diagnostic_code3']
      end

      if attributes.key?(:'diagnostic_code4')
        self.diagnostic_code4 = attributes[:'diagnostic_code4']
      end

      if attributes.key?(:'diagnostic_code_type')
        self.diagnostic_code_type = attributes[:'diagnostic_code_type']
      else
        self.diagnostic_code_type = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code1')
        self.ex_code1 = attributes[:'ex_code1']
      end

      if attributes.key?(:'ex_code2')
        self.ex_code2 = attributes[:'ex_code2']
      end

      if attributes.key?(:'illness')
        self.illness = attributes[:'illness']
      else
        self.illness = nil
      end

      if attributes.key?(:'illness_duration')
        self.illness_duration = attributes[:'illness_duration']
      end

      if attributes.key?(:'illness_duration_type')
        self.illness_duration_type = attributes[:'illness_duration_type']
      end

      if attributes.key?(:'last_day_worked')
        self.last_day_worked = attributes[:'last_day_worked']
      end

      if attributes.key?(:'mail_to')
        self.mail_to = attributes[:'mail_to']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'pay_to')
        self.pay_to = attributes[:'pay_to']
      end

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'received_date')
        self.received_date = attributes[:'received_date']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if !@claim_id.nil? && @claim_id.to_s.length > 32
        invalid_properties.push('invalid value for "claim_id", the character length must be smaller than or equal to 32.')
      end

      if !@diagnostic_code1.nil? && @diagnostic_code1.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code1", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code2.nil? && @diagnostic_code2.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code2", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code3.nil? && @diagnostic_code3.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code3", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code4.nil? && @diagnostic_code4.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code4", the character length must be smaller than or equal to 8.')
      end

      if @diagnostic_code_type.nil?
        invalid_properties.push('invalid value for "diagnostic_code_type", diagnostic_code_type cannot be nil.')
      end

      if @diagnostic_code_type.to_s.length > 16
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.')
      end

      if @diagnostic_code_type.to_s.length < 1
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code1.nil? && @ex_code1.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code1", the character length must be smaller than or equal to 6.')
      end

      if !@ex_code2.nil? && @ex_code2.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code2", the character length must be smaller than or equal to 6.')
      end

      if @illness.nil?
        invalid_properties.push('invalid value for "illness", illness cannot be nil.')
      end

      if !@illness_duration_type.nil? && @illness_duration_type.to_s.length > 1
        invalid_properties.push('invalid value for "illness_duration_type", the character length must be smaller than or equal to 1.')
      end

      if !@mail_to.nil? && @mail_to.to_s.length > 1
        invalid_properties.push('invalid value for "mail_to", the character length must be smaller than or equal to 1.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@pay_to.nil? && @pay_to.to_s.length > 1
        invalid_properties.push('invalid value for "pay_to", the character length must be smaller than or equal to 1.')
      end

      if !@payee_id.nil? && @payee_id.to_s.length > 20
        invalid_properties.push('invalid value for "payee_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @batch_number.nil?
      return false if !@claim_id.nil? && @claim_id.to_s.length > 32
      return false if !@diagnostic_code1.nil? && @diagnostic_code1.to_s.length > 8
      return false if !@diagnostic_code2.nil? && @diagnostic_code2.to_s.length > 8
      return false if !@diagnostic_code3.nil? && @diagnostic_code3.to_s.length > 8
      return false if !@diagnostic_code4.nil? && @diagnostic_code4.to_s.length > 8
      return false if @diagnostic_code_type.nil?
      return false if @diagnostic_code_type.to_s.length > 16
      return false if @diagnostic_code_type.to_s.length < 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code1.nil? && @ex_code1.to_s.length > 6
      return false if !@ex_code2.nil? && @ex_code2.to_s.length > 6
      return false if @illness.nil?
      return false if !@illness_duration_type.nil? && @illness_duration_type.to_s.length > 1
      return false if !@mail_to.nil? && @mail_to.to_s.length > 1
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@pay_to.nil? && @pay_to.to_s.length > 1
      return false if !@payee_id.nil? && @payee_id.to_s.length > 20
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_id Value to be assigned
    def claim_id=(claim_id)
      if !claim_id.nil? && claim_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "claim_id", the character length must be smaller than or equal to 32.'
      end

      @claim_id = claim_id
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code1 Value to be assigned
    def diagnostic_code1=(diagnostic_code1)
      if !diagnostic_code1.nil? && diagnostic_code1.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code1", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code1 = diagnostic_code1
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code2 Value to be assigned
    def diagnostic_code2=(diagnostic_code2)
      if !diagnostic_code2.nil? && diagnostic_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code2", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code2 = diagnostic_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code3 Value to be assigned
    def diagnostic_code3=(diagnostic_code3)
      if !diagnostic_code3.nil? && diagnostic_code3.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code3", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code3 = diagnostic_code3
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code4 Value to be assigned
    def diagnostic_code4=(diagnostic_code4)
      if !diagnostic_code4.nil? && diagnostic_code4.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code4", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code4 = diagnostic_code4
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code_type Value to be assigned
    def diagnostic_code_type=(diagnostic_code_type)
      if diagnostic_code_type.nil?
        fail ArgumentError, 'diagnostic_code_type cannot be nil'
      end

      if diagnostic_code_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.'
      end

      if diagnostic_code_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.'
      end

      @diagnostic_code_type = diagnostic_code_type
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code1 Value to be assigned
    def ex_code1=(ex_code1)
      if !ex_code1.nil? && ex_code1.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code1", the character length must be smaller than or equal to 6.'
      end

      @ex_code1 = ex_code1
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code2 Value to be assigned
    def ex_code2=(ex_code2)
      if !ex_code2.nil? && ex_code2.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code2", the character length must be smaller than or equal to 6.'
      end

      @ex_code2 = ex_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] illness Value to be assigned
    def illness=(illness)
      if illness.nil?
        fail ArgumentError, 'illness cannot be nil'
      end

      @illness = illness
    end

    # Custom attribute writer method with validation
    # @param [Object] illness_duration_type Value to be assigned
    def illness_duration_type=(illness_duration_type)
      if !illness_duration_type.nil? && illness_duration_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "illness_duration_type", the character length must be smaller than or equal to 1.'
      end

      @illness_duration_type = illness_duration_type
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_to Value to be assigned
    def mail_to=(mail_to)
      if !mail_to.nil? && mail_to.to_s.length > 1
        fail ArgumentError, 'invalid value for "mail_to", the character length must be smaller than or equal to 1.'
      end

      @mail_to = mail_to
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to Value to be assigned
    def pay_to=(pay_to)
      if !pay_to.nil? && pay_to.to_s.length > 1
        fail ArgumentError, 'invalid value for "pay_to", the character length must be smaller than or equal to 1.'
      end

      @pay_to = pay_to
    end

    # Custom attribute writer method with validation
    # @param [Object] payee_id Value to be assigned
    def payee_id=(payee_id)
      if !payee_id.nil? && payee_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payee_id", the character length must be smaller than or equal to 20.'
      end

      @payee_id = payee_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_number == o.batch_number &&
          claim_id == o.claim_id &&
          death_date == o.death_date &&
          death_reason == o.death_reason &&
          diagnostic_code1 == o.diagnostic_code1 &&
          diagnostic_code2 == o.diagnostic_code2 &&
          diagnostic_code3 == o.diagnostic_code3 &&
          diagnostic_code4 == o.diagnostic_code4 &&
          diagnostic_code_type == o.diagnostic_code_type &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code1 == o.ex_code1 &&
          ex_code2 == o.ex_code2 &&
          illness == o.illness &&
          illness_duration == o.illness_duration &&
          illness_duration_type == o.illness_duration_type &&
          last_day_worked == o.last_day_worked &&
          mail_to == o.mail_to &&
          member_seq == o.member_seq &&
          pay_to == o.pay_to &&
          payee_id == o.payee_id &&
          plan_id == o.plan_id &&
          provider_id == o.provider_id &&
          received_date == o.received_date &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          volume == o.volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_number, claim_id, death_date, death_reason, diagnostic_code1, diagnostic_code2, diagnostic_code3, diagnostic_code4, diagnostic_code_type, entry_date, entry_user, ex_code1, ex_code2, illness, illness_duration, illness_duration_type, last_day_worked, mail_to, member_seq, pay_to, payee_id, plan_id, provider_id, received_date, subscriber_id, update_date, update_user, volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
