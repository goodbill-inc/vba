=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class IDCardRequest
    # Key value of the ID Card request  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :id_card_request_key

    # Date the ID card will be effective
    attr_accessor :as_of_date

    # Reason indicating why the ID Card Request was cancelled
    attr_accessor :cancellation_reason

    # Status of the card
    attr_accessor :card_record_status

    # Division ID of the subscriber enrollment for the ID card
    attr_accessor :division_id

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Group ID of the subscriber enrollment for the ID card
    attr_accessor :group_id

    # Issuance type of the ID card
    attr_accessor :issuance_type

    # Member Sequence of the family member for the ID card
    attr_accessor :member_seq

    # Flag indicating the ID card request was for a renewal  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :renewal

    # Date the ID card was requested
    attr_accessor :request_date

    # Quantity of ID cards requested
    attr_accessor :request_quantity

    # Status of the ID card request
    attr_accessor :request_status

    # Identifier for the ID card request type or source
    attr_accessor :request_type

    # Subscriber ID of the subscriber for the ID card
    attr_accessor :subscriber_id

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id_card_request_key' => :'idCardRequest_Key',
        :'as_of_date' => :'as_Of_Date',
        :'cancellation_reason' => :'cancellation_Reason',
        :'card_record_status' => :'card_Record_Status',
        :'division_id' => :'division_ID',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'issuance_type' => :'issuance_Type',
        :'member_seq' => :'member_Seq',
        :'renewal' => :'renewal',
        :'request_date' => :'request_Date',
        :'request_quantity' => :'request_Quantity',
        :'request_status' => :'request_Status',
        :'request_type' => :'request_Type',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id_card_request_key' => :'Integer',
        :'as_of_date' => :'Time',
        :'cancellation_reason' => :'String',
        :'card_record_status' => :'String',
        :'division_id' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'issuance_type' => :'String',
        :'member_seq' => :'String',
        :'renewal' => :'Boolean',
        :'request_date' => :'Time',
        :'request_quantity' => :'Integer',
        :'request_status' => :'String',
        :'request_type' => :'String',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'as_of_date',
        :'cancellation_reason',
        :'card_record_status',
        :'division_id',
        :'entry_user',
        :'group_id',
        :'issuance_type',
        :'member_seq',
        :'request_date',
        :'request_quantity',
        :'request_status',
        :'request_type',
        :'subscriber_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::IDCardRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::IDCardRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id_card_request_key')
        self.id_card_request_key = attributes[:'id_card_request_key']
      else
        self.id_card_request_key = nil
      end

      if attributes.key?(:'as_of_date')
        self.as_of_date = attributes[:'as_of_date']
      end

      if attributes.key?(:'cancellation_reason')
        self.cancellation_reason = attributes[:'cancellation_reason']
      end

      if attributes.key?(:'card_record_status')
        self.card_record_status = attributes[:'card_record_status']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'issuance_type')
        self.issuance_type = attributes[:'issuance_type']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'renewal')
        self.renewal = attributes[:'renewal']
      else
        self.renewal = nil
      end

      if attributes.key?(:'request_date')
        self.request_date = attributes[:'request_date']
      end

      if attributes.key?(:'request_quantity')
        self.request_quantity = attributes[:'request_quantity']
      end

      if attributes.key?(:'request_status')
        self.request_status = attributes[:'request_status']
      end

      if attributes.key?(:'request_type')
        self.request_type = attributes[:'request_type']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id_card_request_key.nil?
        invalid_properties.push('invalid value for "id_card_request_key", id_card_request_key cannot be nil.')
      end

      if !@cancellation_reason.nil? && @cancellation_reason.to_s.length > 256
        invalid_properties.push('invalid value for "cancellation_reason", the character length must be smaller than or equal to 256.')
      end

      if !@card_record_status.nil? && @card_record_status.to_s.length > 3
        invalid_properties.push('invalid value for "card_record_status", the character length must be smaller than or equal to 3.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@issuance_type.nil? && @issuance_type.to_s.length > 3
        invalid_properties.push('invalid value for "issuance_type", the character length must be smaller than or equal to 3.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @renewal.nil?
        invalid_properties.push('invalid value for "renewal", renewal cannot be nil.')
      end

      if !@request_status.nil? && @request_status.to_s.length > 16
        invalid_properties.push('invalid value for "request_status", the character length must be smaller than or equal to 16.')
      end

      if !@request_type.nil? && @request_type.to_s.length > 16
        invalid_properties.push('invalid value for "request_type", the character length must be smaller than or equal to 16.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id_card_request_key.nil?
      return false if !@cancellation_reason.nil? && @cancellation_reason.to_s.length > 256
      return false if !@card_record_status.nil? && @card_record_status.to_s.length > 3
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@issuance_type.nil? && @issuance_type.to_s.length > 3
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if @renewal.nil?
      return false if !@request_status.nil? && @request_status.to_s.length > 16
      return false if !@request_type.nil? && @request_type.to_s.length > 16
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id_card_request_key Value to be assigned
    def id_card_request_key=(id_card_request_key)
      if id_card_request_key.nil?
        fail ArgumentError, 'id_card_request_key cannot be nil'
      end

      @id_card_request_key = id_card_request_key
    end

    # Custom attribute writer method with validation
    # @param [Object] cancellation_reason Value to be assigned
    def cancellation_reason=(cancellation_reason)
      if !cancellation_reason.nil? && cancellation_reason.to_s.length > 256
        fail ArgumentError, 'invalid value for "cancellation_reason", the character length must be smaller than or equal to 256.'
      end

      @cancellation_reason = cancellation_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] card_record_status Value to be assigned
    def card_record_status=(card_record_status)
      if !card_record_status.nil? && card_record_status.to_s.length > 3
        fail ArgumentError, 'invalid value for "card_record_status", the character length must be smaller than or equal to 3.'
      end

      @card_record_status = card_record_status
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] issuance_type Value to be assigned
    def issuance_type=(issuance_type)
      if !issuance_type.nil? && issuance_type.to_s.length > 3
        fail ArgumentError, 'invalid value for "issuance_type", the character length must be smaller than or equal to 3.'
      end

      @issuance_type = issuance_type
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] renewal Value to be assigned
    def renewal=(renewal)
      if renewal.nil?
        fail ArgumentError, 'renewal cannot be nil'
      end

      @renewal = renewal
    end

    # Custom attribute writer method with validation
    # @param [Object] request_status Value to be assigned
    def request_status=(request_status)
      if !request_status.nil? && request_status.to_s.length > 16
        fail ArgumentError, 'invalid value for "request_status", the character length must be smaller than or equal to 16.'
      end

      @request_status = request_status
    end

    # Custom attribute writer method with validation
    # @param [Object] request_type Value to be assigned
    def request_type=(request_type)
      if !request_type.nil? && request_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "request_type", the character length must be smaller than or equal to 16.'
      end

      @request_type = request_type
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id_card_request_key == o.id_card_request_key &&
          as_of_date == o.as_of_date &&
          cancellation_reason == o.cancellation_reason &&
          card_record_status == o.card_record_status &&
          division_id == o.division_id &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          issuance_type == o.issuance_type &&
          member_seq == o.member_seq &&
          renewal == o.renewal &&
          request_date == o.request_date &&
          request_quantity == o.request_quantity &&
          request_status == o.request_status &&
          request_type == o.request_type &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id_card_request_key, as_of_date, cancellation_reason, card_record_status, division_id, entry_date, entry_user, group_id, issuance_type, member_seq, renewal, request_date, request_quantity, request_status, request_type, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
