=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class SearchRequest
    # The unique Criteria_Key that contains the search criteria that will be applied to a SearchConfig.
    attr_accessor :criteria_key

    # The unique id of the SearchConfig for which the Criteria will be applied.
    attr_accessor :search_config_id

    # Fields to return in the search results.  These must be a subset of the SearchConfig Fields.
    attr_accessor :user_id

    attr_accessor :page

    attr_accessor :page_count

    attr_accessor :include_result_details

    # This flag indicates you want your search to return a random sample or records matching your search criteria.  If you flag this as true, Random_Sample_Count must also be a value >= 0 or it will throw an exception.
    attr_accessor :use_random_sample

    # This value is the raw count of random records you want as a sample based on your search.  Value must be between 0-1000 (because search has paging, this value will default limit to 750 if you do not pass in a larger page size).  As noted below, this value must be between 0-100 if you are flagging this as a percent sample.
    attr_accessor :random_sample_count

    # This flag indicates that the value in Random_Sample_Count is a Percent value between 0-100.  If true, the Random_Sample_Count is used as the Pct sample of the full result set.  As noted, if this is true, the value in Random_Sample_Count must be between 0-100 or an exception will be thrown.
    attr_accessor :random_sample_count_is_percent

    # This flag indicates you want your search to return a the Nth result of the results of the search.
    attr_accessor :use_nth_result

    # This value is the Nth result you would like returned from the search results.  Value must be >= 0 and less than the total number of results.  If greater than the total number of results, it will return the last result.
    attr_accessor :nth_result

    attr_accessor :criterias

    attr_accessor :selected_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'criteria_key' => :'criteria_Key',
        :'search_config_id' => :'searchConfigId',
        :'user_id' => :'user_ID',
        :'page' => :'page',
        :'page_count' => :'pageCount',
        :'include_result_details' => :'include_Result_Details',
        :'use_random_sample' => :'use_Random_Sample',
        :'random_sample_count' => :'random_Sample_Count',
        :'random_sample_count_is_percent' => :'random_Sample_Count_Is_Percent',
        :'use_nth_result' => :'use_Nth_Result',
        :'nth_result' => :'nth_Result',
        :'criterias' => :'criterias',
        :'selected_fields' => :'selectedFields'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'criteria_key' => :'Integer',
        :'search_config_id' => :'String',
        :'user_id' => :'String',
        :'page' => :'Integer',
        :'page_count' => :'Integer',
        :'include_result_details' => :'Boolean',
        :'use_random_sample' => :'Boolean',
        :'random_sample_count' => :'Integer',
        :'random_sample_count_is_percent' => :'Boolean',
        :'use_nth_result' => :'Boolean',
        :'nth_result' => :'Integer',
        :'criterias' => :'Array<CriteriaDetail>',
        :'selected_fields' => :'Array<SelectedField>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'user_id',
        :'page',
        :'page_count',
        :'include_result_details',
        :'use_random_sample',
        :'random_sample_count',
        :'random_sample_count_is_percent',
        :'use_nth_result',
        :'nth_result',
        :'criterias',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::SearchRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::SearchRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'criteria_key')
        self.criteria_key = attributes[:'criteria_key']
      else
        self.criteria_key = nil
      end

      if attributes.key?(:'search_config_id')
        self.search_config_id = attributes[:'search_config_id']
      else
        self.search_config_id = nil
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.key?(:'page_count')
        self.page_count = attributes[:'page_count']
      end

      if attributes.key?(:'include_result_details')
        self.include_result_details = attributes[:'include_result_details']
      end

      if attributes.key?(:'use_random_sample')
        self.use_random_sample = attributes[:'use_random_sample']
      end

      if attributes.key?(:'random_sample_count')
        self.random_sample_count = attributes[:'random_sample_count']
      end

      if attributes.key?(:'random_sample_count_is_percent')
        self.random_sample_count_is_percent = attributes[:'random_sample_count_is_percent']
      end

      if attributes.key?(:'use_nth_result')
        self.use_nth_result = attributes[:'use_nth_result']
      end

      if attributes.key?(:'nth_result')
        self.nth_result = attributes[:'nth_result']
      end

      if attributes.key?(:'criterias')
        if (value = attributes[:'criterias']).is_a?(Array)
          self.criterias = value
        end
      end

      if attributes.key?(:'selected_fields')
        if (value = attributes[:'selected_fields']).is_a?(Array)
          self.selected_fields = value
        end
      else
        self.selected_fields = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @criteria_key.nil?
        invalid_properties.push('invalid value for "criteria_key", criteria_key cannot be nil.')
      end

      if @search_config_id.nil?
        invalid_properties.push('invalid value for "search_config_id", search_config_id cannot be nil.')
      end

      if @search_config_id.to_s.length < 1
        invalid_properties.push('invalid value for "search_config_id", the character length must be great than or equal to 1.')
      end

      if @selected_fields.nil?
        invalid_properties.push('invalid value for "selected_fields", selected_fields cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @criteria_key.nil?
      return false if @search_config_id.nil?
      return false if @search_config_id.to_s.length < 1
      return false if @selected_fields.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_key Value to be assigned
    def criteria_key=(criteria_key)
      if criteria_key.nil?
        fail ArgumentError, 'criteria_key cannot be nil'
      end

      @criteria_key = criteria_key
    end

    # Custom attribute writer method with validation
    # @param [Object] search_config_id Value to be assigned
    def search_config_id=(search_config_id)
      if search_config_id.nil?
        fail ArgumentError, 'search_config_id cannot be nil'
      end

      if search_config_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "search_config_id", the character length must be great than or equal to 1.'
      end

      @search_config_id = search_config_id
    end

    # Custom attribute writer method with validation
    # @param [Object] selected_fields Value to be assigned
    def selected_fields=(selected_fields)
      if selected_fields.nil?
        fail ArgumentError, 'selected_fields cannot be nil'
      end

      @selected_fields = selected_fields
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          criteria_key == o.criteria_key &&
          search_config_id == o.search_config_id &&
          user_id == o.user_id &&
          page == o.page &&
          page_count == o.page_count &&
          include_result_details == o.include_result_details &&
          use_random_sample == o.use_random_sample &&
          random_sample_count == o.random_sample_count &&
          random_sample_count_is_percent == o.random_sample_count_is_percent &&
          use_nth_result == o.use_nth_result &&
          nth_result == o.nth_result &&
          criterias == o.criterias &&
          selected_fields == o.selected_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [criteria_key, search_config_id, user_id, page, page_count, include_result_details, use_random_sample, random_sample_count, random_sample_count_is_percent, use_nth_result, nth_result, criterias, selected_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
