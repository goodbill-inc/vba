=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Members
    # References the Subscribers.Subscriber_ID value in the parent table.
    attr_accessor :subscriber_id

    # Sequential identifier assigned to each Member of this family. In combination with Subscriber_ID, creates a unique identifier.    During creation, if you pass a value for this field, the system will attemot to use the value.   If you do not include a value (eg, leave null), the system will generate a value for you.  The generated value will be the total_count_of_members for the subscriber_id + 1.
    attr_accessor :member_seq

    # Access code defined by the User.
    attr_accessor :access_code

    # Designates whether the Member is an adult or child. This may be important in cases where premiums differ between adult and child members.
    attr_accessor :adult_child

    # This flag identifies the Member has been approved to continue coverage past the 'Cutoff Age' defined at the 'Group level'.
    attr_accessor :adult_dependent

    # End date of the Member's approved 'Adult Dependent Status'. Only claims with a date of service up to this date will be allowed to process through adjudication.
    attr_accessor :adult_dependent_end

    # Allows the User to assign an 'Alternate ID' to the Member.
    attr_accessor :alternate_id

    # Date of birth of the Member.
    attr_accessor :birth_date

    # Allows claims to pay past the disenroll date. Below are some examples: (1) A member terminates coverage but is still inpatient. Checking this box, and designating the end of inpatient stay with the 'Thru Date', will allow the claim(s) to pay during this time. The member will still reflect as inactive. (2) A member is on 'Long Term Disability'. Coverage terminates, but payments still need to be made. Same steps as example (1) above.
    attr_accessor :continue_coverage

    # End date of the 'Continued Coverage' period.
    attr_accessor :continue_coverage_end_date

    # Allows for an Ex Code to be assigned when a claim is processed after the disenroll date but within the 'Continue Coverage' period.
    attr_accessor :continue_coverage_ex_code

    # Indicates the type of coverage ('Open Enrollment', 'Late Enrollment', etc.).
    attr_accessor :coverage_type

    # Total number of days for the Credible Coverage period.
    attr_accessor :credible_coverage

    # End date of the Member's 'Credible Coverage' period. These dates are used in the stock ‘Creditable Coverage’ COBRA reports.
    attr_accessor :creditable_coverage_end

    # Start date of the Member's 'Credible Coverage' period. These dates are used in the stock ‘Creditable Coverage’ COBRA reports.
    attr_accessor :creditable_coverage_start

    # Original enrollment date of the Member.
    attr_accessor :date_enrolled

    # Date of death of the Member.
    attr_accessor :date_of_death

    # Disenrollment date of the Member.
    attr_accessor :disenroll_date

    # Ethnicity of the Member.
    attr_accessor :ethnicity_code

    # First name of the Member.
    attr_accessor :first_name

    # The members height in inches.
    attr_accessor :height

    # This is the volume used in intial volume calculations. This number can either be a flat amount or a percentage of the Member's gross salary.
    attr_accessor :initial_volume

    # Indicates that the number from the 'Initial Volume' field represents a percentage of the Member's salary. Salaries are found from a Member's 'Financial' detail dropdown.
    attr_accessor :initial_volume_salary_pct

    # Last name of the Member.
    attr_accessor :last_name

    # Marital status of the Member.
    attr_accessor :marital_status

    # Middle initial of the Member.
    attr_accessor :middle_name

    # Suffix or title associated with the Member.
    attr_accessor :name_suffix

    # No longer in use. Replaced by NotData, NoteSource and NoteReference tables.
    attr_accessor :notes

    # An optional reminder that the Member has an 'Other Insurance'. [Informational Only]
    attr_accessor :other_insurance

    # Information only used in custom reporting.
    attr_accessor :other_name

    # Assigns an Ex Code that can be applied to newly adjudicated Subscriber claims.
    attr_accessor :pend_ex_code

    # While active, assigned Ex Codes will be applied to any newly adjudicated Subscriber claims.
    attr_accessor :pend_flag

    # Defines the number of months/years covered by the Member's plan.
    attr_accessor :plan_year_frequency

    # Specifies the timeframe the Member Plan Year will use.
    attr_accessor :plan_year_frequency_type

    # Identifies whether the Member has any pre-existing conditions.
    attr_accessor :pre_exist

    # End date of pre-existing conditions in relation to the Member's plan.
    attr_accessor :pre_exist_end

    # Assigns an Ex Code to pre-existing Claims.
    attr_accessor :pre_exist_ex_code

    # Relationship of the Member to the Subscriber.
    attr_accessor :relationship

    # Social security number of the Member.
    attr_accessor :ssn

    # Information only used in custom reporting.
    attr_accessor :salutation

    # Biological sex of the Member.
    attr_accessor :sex

    # Designates whether the Member is a smoker. This may be important in cases where premiums differ between smokers and non-smokers.
    attr_accessor :smoker

    # Identifies that the Member meets the 'Student Status' requirements.
    attr_accessor :student

    # End date of the Member's approved 'Student Status'. Only claims with a date of service up to this date will be allowed to process through adjudication.
    attr_accessor :student_end

    # Unique identifier assigned to the Member by the User.
    attr_accessor :unique_id

    # Identifies the Member's Plan year if it differs from the group. The User is required to define a number of months or years for the Plan. The Member's Plan year will begin on the first day of enrollment.
    attr_accessor :use_member_plan_year

    # VIP status of the Member. This status can be used as a search filter but is otherwise informational only.
    attr_accessor :vi_p_flag

    # The members weight in pounds.
    attr_accessor :weight

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'member_seq' => :'member_Seq',
        :'access_code' => :'access_Code',
        :'adult_child' => :'adult_Child',
        :'adult_dependent' => :'adult_Dependent',
        :'adult_dependent_end' => :'adult_Dependent_End',
        :'alternate_id' => :'alternate_ID',
        :'birth_date' => :'birth_Date',
        :'continue_coverage' => :'continue_Coverage',
        :'continue_coverage_end_date' => :'continue_Coverage_End_Date',
        :'continue_coverage_ex_code' => :'continue_Coverage_Ex_Code',
        :'coverage_type' => :'coverage_Type',
        :'credible_coverage' => :'credible_Coverage',
        :'creditable_coverage_end' => :'creditable_Coverage_End',
        :'creditable_coverage_start' => :'creditable_Coverage_Start',
        :'date_enrolled' => :'date_Enrolled',
        :'date_of_death' => :'date_Of_Death',
        :'disenroll_date' => :'disenroll_Date',
        :'ethnicity_code' => :'ethnicity_Code',
        :'first_name' => :'first_Name',
        :'height' => :'height',
        :'initial_volume' => :'initial_Volume',
        :'initial_volume_salary_pct' => :'initial_Volume_Salary_Pct',
        :'last_name' => :'last_Name',
        :'marital_status' => :'marital_Status',
        :'middle_name' => :'middle_Name',
        :'name_suffix' => :'name_Suffix',
        :'notes' => :'notes',
        :'other_insurance' => :'other_Insurance',
        :'other_name' => :'other_Name',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'plan_year_frequency' => :'plan_Year_Frequency',
        :'plan_year_frequency_type' => :'plan_Year_Frequency_Type',
        :'pre_exist' => :'pre_Exist',
        :'pre_exist_end' => :'pre_Exist_End',
        :'pre_exist_ex_code' => :'pre_Exist_Ex_Code',
        :'relationship' => :'relationship',
        :'ssn' => :'ssn',
        :'salutation' => :'salutation',
        :'sex' => :'sex',
        :'smoker' => :'smoker',
        :'student' => :'student',
        :'student_end' => :'student_End',
        :'unique_id' => :'unique_ID',
        :'use_member_plan_year' => :'use_Member_Plan_Year',
        :'vi_p_flag' => :'viP_Flag',
        :'weight' => :'weight'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'member_seq' => :'String',
        :'access_code' => :'String',
        :'adult_child' => :'String',
        :'adult_dependent' => :'Boolean',
        :'adult_dependent_end' => :'Time',
        :'alternate_id' => :'String',
        :'birth_date' => :'Time',
        :'continue_coverage' => :'Boolean',
        :'continue_coverage_end_date' => :'Time',
        :'continue_coverage_ex_code' => :'String',
        :'coverage_type' => :'String',
        :'credible_coverage' => :'Integer',
        :'creditable_coverage_end' => :'Time',
        :'creditable_coverage_start' => :'Time',
        :'date_enrolled' => :'Time',
        :'date_of_death' => :'Time',
        :'disenroll_date' => :'Time',
        :'ethnicity_code' => :'String',
        :'first_name' => :'String',
        :'height' => :'Integer',
        :'initial_volume' => :'Float',
        :'initial_volume_salary_pct' => :'Boolean',
        :'last_name' => :'String',
        :'marital_status' => :'String',
        :'middle_name' => :'String',
        :'name_suffix' => :'String',
        :'notes' => :'String',
        :'other_insurance' => :'Boolean',
        :'other_name' => :'String',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'plan_year_frequency' => :'Integer',
        :'plan_year_frequency_type' => :'String',
        :'pre_exist' => :'String',
        :'pre_exist_end' => :'Time',
        :'pre_exist_ex_code' => :'String',
        :'relationship' => :'String',
        :'ssn' => :'String',
        :'salutation' => :'String',
        :'sex' => :'String',
        :'smoker' => :'Boolean',
        :'student' => :'String',
        :'student_end' => :'Time',
        :'unique_id' => :'String',
        :'use_member_plan_year' => :'Boolean',
        :'vi_p_flag' => :'String',
        :'weight' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'member_seq',
        :'access_code',
        :'adult_child',
        :'adult_dependent_end',
        :'alternate_id',
        :'birth_date',
        :'continue_coverage_end_date',
        :'continue_coverage_ex_code',
        :'coverage_type',
        :'credible_coverage',
        :'creditable_coverage_end',
        :'creditable_coverage_start',
        :'date_enrolled',
        :'date_of_death',
        :'disenroll_date',
        :'ethnicity_code',
        :'first_name',
        :'height',
        :'initial_volume',
        :'last_name',
        :'marital_status',
        :'middle_name',
        :'name_suffix',
        :'notes',
        :'other_name',
        :'pend_ex_code',
        :'pend_flag',
        :'plan_year_frequency',
        :'plan_year_frequency_type',
        :'pre_exist',
        :'pre_exist_end',
        :'pre_exist_ex_code',
        :'relationship',
        :'ssn',
        :'salutation',
        :'sex',
        :'student',
        :'student_end',
        :'unique_id',
        :'vi_p_flag',
        :'weight'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Members` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Members`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'access_code')
        self.access_code = attributes[:'access_code']
      end

      if attributes.key?(:'adult_child')
        self.adult_child = attributes[:'adult_child']
      end

      if attributes.key?(:'adult_dependent')
        self.adult_dependent = attributes[:'adult_dependent']
      else
        self.adult_dependent = nil
      end

      if attributes.key?(:'adult_dependent_end')
        self.adult_dependent_end = attributes[:'adult_dependent_end']
      end

      if attributes.key?(:'alternate_id')
        self.alternate_id = attributes[:'alternate_id']
      end

      if attributes.key?(:'birth_date')
        self.birth_date = attributes[:'birth_date']
      end

      if attributes.key?(:'continue_coverage')
        self.continue_coverage = attributes[:'continue_coverage']
      else
        self.continue_coverage = nil
      end

      if attributes.key?(:'continue_coverage_end_date')
        self.continue_coverage_end_date = attributes[:'continue_coverage_end_date']
      end

      if attributes.key?(:'continue_coverage_ex_code')
        self.continue_coverage_ex_code = attributes[:'continue_coverage_ex_code']
      end

      if attributes.key?(:'coverage_type')
        self.coverage_type = attributes[:'coverage_type']
      end

      if attributes.key?(:'credible_coverage')
        self.credible_coverage = attributes[:'credible_coverage']
      end

      if attributes.key?(:'creditable_coverage_end')
        self.creditable_coverage_end = attributes[:'creditable_coverage_end']
      end

      if attributes.key?(:'creditable_coverage_start')
        self.creditable_coverage_start = attributes[:'creditable_coverage_start']
      end

      if attributes.key?(:'date_enrolled')
        self.date_enrolled = attributes[:'date_enrolled']
      end

      if attributes.key?(:'date_of_death')
        self.date_of_death = attributes[:'date_of_death']
      end

      if attributes.key?(:'disenroll_date')
        self.disenroll_date = attributes[:'disenroll_date']
      end

      if attributes.key?(:'ethnicity_code')
        self.ethnicity_code = attributes[:'ethnicity_code']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'initial_volume')
        self.initial_volume = attributes[:'initial_volume']
      end

      if attributes.key?(:'initial_volume_salary_pct')
        self.initial_volume_salary_pct = attributes[:'initial_volume_salary_pct']
      else
        self.initial_volume_salary_pct = nil
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'marital_status')
        self.marital_status = attributes[:'marital_status']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'name_suffix')
        self.name_suffix = attributes[:'name_suffix']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'other_insurance')
        self.other_insurance = attributes[:'other_insurance']
      else
        self.other_insurance = nil
      end

      if attributes.key?(:'other_name')
        self.other_name = attributes[:'other_name']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'plan_year_frequency')
        self.plan_year_frequency = attributes[:'plan_year_frequency']
      end

      if attributes.key?(:'plan_year_frequency_type')
        self.plan_year_frequency_type = attributes[:'plan_year_frequency_type']
      end

      if attributes.key?(:'pre_exist')
        self.pre_exist = attributes[:'pre_exist']
      end

      if attributes.key?(:'pre_exist_end')
        self.pre_exist_end = attributes[:'pre_exist_end']
      end

      if attributes.key?(:'pre_exist_ex_code')
        self.pre_exist_ex_code = attributes[:'pre_exist_ex_code']
      end

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.key?(:'ssn')
        self.ssn = attributes[:'ssn']
      end

      if attributes.key?(:'salutation')
        self.salutation = attributes[:'salutation']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'smoker')
        self.smoker = attributes[:'smoker']
      else
        self.smoker = nil
      end

      if attributes.key?(:'student')
        self.student = attributes[:'student']
      end

      if attributes.key?(:'student_end')
        self.student_end = attributes[:'student_end']
      end

      if attributes.key?(:'unique_id')
        self.unique_id = attributes[:'unique_id']
      end

      if attributes.key?(:'use_member_plan_year')
        self.use_member_plan_year = attributes[:'use_member_plan_year']
      else
        self.use_member_plan_year = nil
      end

      if attributes.key?(:'vi_p_flag')
        self.vi_p_flag = attributes[:'vi_p_flag']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@access_code.nil? && @access_code.to_s.length > 32
        invalid_properties.push('invalid value for "access_code", the character length must be smaller than or equal to 32.')
      end

      if !@adult_child.nil? && @adult_child.to_s.length > 1
        invalid_properties.push('invalid value for "adult_child", the character length must be smaller than or equal to 1.')
      end

      if @adult_dependent.nil?
        invalid_properties.push('invalid value for "adult_dependent", adult_dependent cannot be nil.')
      end

      if !@alternate_id.nil? && @alternate_id.to_s.length > 32
        invalid_properties.push('invalid value for "alternate_id", the character length must be smaller than or equal to 32.')
      end

      if @continue_coverage.nil?
        invalid_properties.push('invalid value for "continue_coverage", continue_coverage cannot be nil.')
      end

      if !@continue_coverage_ex_code.nil? && @continue_coverage_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "continue_coverage_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@coverage_type.nil? && @coverage_type.to_s.length > 32
        invalid_properties.push('invalid value for "coverage_type", the character length must be smaller than or equal to 32.')
      end

      if !@ethnicity_code.nil? && @ethnicity_code.to_s.length > 1
        invalid_properties.push('invalid value for "ethnicity_code", the character length must be smaller than or equal to 1.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 25
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 25.')
      end

      if @initial_volume_salary_pct.nil?
        invalid_properties.push('invalid value for "initial_volume_salary_pct", initial_volume_salary_pct cannot be nil.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 25
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 25.')
      end

      if !@marital_status.nil? && @marital_status.to_s.length > 1
        invalid_properties.push('invalid value for "marital_status", the character length must be smaller than or equal to 1.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 25
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 25.')
      end

      if !@name_suffix.nil? && @name_suffix.to_s.length > 16
        invalid_properties.push('invalid value for "name_suffix", the character length must be smaller than or equal to 16.')
      end

      if @other_insurance.nil?
        invalid_properties.push('invalid value for "other_insurance", other_insurance cannot be nil.')
      end

      if !@other_name.nil? && @other_name.to_s.length > 96
        invalid_properties.push('invalid value for "other_name", the character length must be smaller than or equal to 96.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if !@plan_year_frequency_type.nil? && @plan_year_frequency_type.to_s.length > 1
        invalid_properties.push('invalid value for "plan_year_frequency_type", the character length must be smaller than or equal to 1.')
      end

      if !@pre_exist.nil? && @pre_exist.to_s.length > 1
        invalid_properties.push('invalid value for "pre_exist", the character length must be smaller than or equal to 1.')
      end

      if !@pre_exist_ex_code.nil? && @pre_exist_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pre_exist_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@relationship.nil? && @relationship.to_s.length > 12
        invalid_properties.push('invalid value for "relationship", the character length must be smaller than or equal to 12.')
      end

      if !@ssn.nil? && @ssn.to_s.length > 32
        invalid_properties.push('invalid value for "ssn", the character length must be smaller than or equal to 32.')
      end

      if !@salutation.nil? && @salutation.to_s.length > 16
        invalid_properties.push('invalid value for "salutation", the character length must be smaller than or equal to 16.')
      end

      if !@sex.nil? && @sex.to_s.length > 1
        invalid_properties.push('invalid value for "sex", the character length must be smaller than or equal to 1.')
      end

      if @smoker.nil?
        invalid_properties.push('invalid value for "smoker", smoker cannot be nil.')
      end

      if !@student.nil? && @student.to_s.length > 1
        invalid_properties.push('invalid value for "student", the character length must be smaller than or equal to 1.')
      end

      if !@unique_id.nil? && @unique_id.to_s.length > 32
        invalid_properties.push('invalid value for "unique_id", the character length must be smaller than or equal to 32.')
      end

      if @use_member_plan_year.nil?
        invalid_properties.push('invalid value for "use_member_plan_year", use_member_plan_year cannot be nil.')
      end

      if !@vi_p_flag.nil? && @vi_p_flag.to_s.length > 1
        invalid_properties.push('invalid value for "vi_p_flag", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@access_code.nil? && @access_code.to_s.length > 32
      return false if !@adult_child.nil? && @adult_child.to_s.length > 1
      return false if @adult_dependent.nil?
      return false if !@alternate_id.nil? && @alternate_id.to_s.length > 32
      return false if @continue_coverage.nil?
      return false if !@continue_coverage_ex_code.nil? && @continue_coverage_ex_code.to_s.length > 6
      return false if !@coverage_type.nil? && @coverage_type.to_s.length > 32
      return false if !@ethnicity_code.nil? && @ethnicity_code.to_s.length > 1
      return false if !@first_name.nil? && @first_name.to_s.length > 25
      return false if @initial_volume_salary_pct.nil?
      return false if !@last_name.nil? && @last_name.to_s.length > 25
      return false if !@marital_status.nil? && @marital_status.to_s.length > 1
      return false if !@middle_name.nil? && @middle_name.to_s.length > 25
      return false if !@name_suffix.nil? && @name_suffix.to_s.length > 16
      return false if @other_insurance.nil?
      return false if !@other_name.nil? && @other_name.to_s.length > 96
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if !@plan_year_frequency_type.nil? && @plan_year_frequency_type.to_s.length > 1
      return false if !@pre_exist.nil? && @pre_exist.to_s.length > 1
      return false if !@pre_exist_ex_code.nil? && @pre_exist_ex_code.to_s.length > 6
      return false if !@relationship.nil? && @relationship.to_s.length > 12
      return false if !@ssn.nil? && @ssn.to_s.length > 32
      return false if !@salutation.nil? && @salutation.to_s.length > 16
      return false if !@sex.nil? && @sex.to_s.length > 1
      return false if @smoker.nil?
      return false if !@student.nil? && @student.to_s.length > 1
      return false if !@unique_id.nil? && @unique_id.to_s.length > 32
      return false if @use_member_plan_year.nil?
      return false if !@vi_p_flag.nil? && @vi_p_flag.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] access_code Value to be assigned
    def access_code=(access_code)
      if !access_code.nil? && access_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "access_code", the character length must be smaller than or equal to 32.'
      end

      @access_code = access_code
    end

    # Custom attribute writer method with validation
    # @param [Object] adult_child Value to be assigned
    def adult_child=(adult_child)
      if !adult_child.nil? && adult_child.to_s.length > 1
        fail ArgumentError, 'invalid value for "adult_child", the character length must be smaller than or equal to 1.'
      end

      @adult_child = adult_child
    end

    # Custom attribute writer method with validation
    # @param [Object] adult_dependent Value to be assigned
    def adult_dependent=(adult_dependent)
      if adult_dependent.nil?
        fail ArgumentError, 'adult_dependent cannot be nil'
      end

      @adult_dependent = adult_dependent
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_id Value to be assigned
    def alternate_id=(alternate_id)
      if !alternate_id.nil? && alternate_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "alternate_id", the character length must be smaller than or equal to 32.'
      end

      @alternate_id = alternate_id
    end

    # Custom attribute writer method with validation
    # @param [Object] continue_coverage Value to be assigned
    def continue_coverage=(continue_coverage)
      if continue_coverage.nil?
        fail ArgumentError, 'continue_coverage cannot be nil'
      end

      @continue_coverage = continue_coverage
    end

    # Custom attribute writer method with validation
    # @param [Object] continue_coverage_ex_code Value to be assigned
    def continue_coverage_ex_code=(continue_coverage_ex_code)
      if !continue_coverage_ex_code.nil? && continue_coverage_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "continue_coverage_ex_code", the character length must be smaller than or equal to 6.'
      end

      @continue_coverage_ex_code = continue_coverage_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] coverage_type Value to be assigned
    def coverage_type=(coverage_type)
      if !coverage_type.nil? && coverage_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "coverage_type", the character length must be smaller than or equal to 32.'
      end

      @coverage_type = coverage_type
    end

    # Custom attribute writer method with validation
    # @param [Object] ethnicity_code Value to be assigned
    def ethnicity_code=(ethnicity_code)
      if !ethnicity_code.nil? && ethnicity_code.to_s.length > 1
        fail ArgumentError, 'invalid value for "ethnicity_code", the character length must be smaller than or equal to 1.'
      end

      @ethnicity_code = ethnicity_code
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 25.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] initial_volume_salary_pct Value to be assigned
    def initial_volume_salary_pct=(initial_volume_salary_pct)
      if initial_volume_salary_pct.nil?
        fail ArgumentError, 'initial_volume_salary_pct cannot be nil'
      end

      @initial_volume_salary_pct = initial_volume_salary_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 25.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] marital_status Value to be assigned
    def marital_status=(marital_status)
      if !marital_status.nil? && marital_status.to_s.length > 1
        fail ArgumentError, 'invalid value for "marital_status", the character length must be smaller than or equal to 1.'
      end

      @marital_status = marital_status
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 25.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_suffix Value to be assigned
    def name_suffix=(name_suffix)
      if !name_suffix.nil? && name_suffix.to_s.length > 16
        fail ArgumentError, 'invalid value for "name_suffix", the character length must be smaller than or equal to 16.'
      end

      @name_suffix = name_suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] other_insurance Value to be assigned
    def other_insurance=(other_insurance)
      if other_insurance.nil?
        fail ArgumentError, 'other_insurance cannot be nil'
      end

      @other_insurance = other_insurance
    end

    # Custom attribute writer method with validation
    # @param [Object] other_name Value to be assigned
    def other_name=(other_name)
      if !other_name.nil? && other_name.to_s.length > 96
        fail ArgumentError, 'invalid value for "other_name", the character length must be smaller than or equal to 96.'
      end

      @other_name = other_name
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_year_frequency_type Value to be assigned
    def plan_year_frequency_type=(plan_year_frequency_type)
      if !plan_year_frequency_type.nil? && plan_year_frequency_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "plan_year_frequency_type", the character length must be smaller than or equal to 1.'
      end

      @plan_year_frequency_type = plan_year_frequency_type
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_exist Value to be assigned
    def pre_exist=(pre_exist)
      if !pre_exist.nil? && pre_exist.to_s.length > 1
        fail ArgumentError, 'invalid value for "pre_exist", the character length must be smaller than or equal to 1.'
      end

      @pre_exist = pre_exist
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_exist_ex_code Value to be assigned
    def pre_exist_ex_code=(pre_exist_ex_code)
      if !pre_exist_ex_code.nil? && pre_exist_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pre_exist_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pre_exist_ex_code = pre_exist_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] relationship Value to be assigned
    def relationship=(relationship)
      if !relationship.nil? && relationship.to_s.length > 12
        fail ArgumentError, 'invalid value for "relationship", the character length must be smaller than or equal to 12.'
      end

      @relationship = relationship
    end

    # Custom attribute writer method with validation
    # @param [Object] ssn Value to be assigned
    def ssn=(ssn)
      if !ssn.nil? && ssn.to_s.length > 32
        fail ArgumentError, 'invalid value for "ssn", the character length must be smaller than or equal to 32.'
      end

      @ssn = ssn
    end

    # Custom attribute writer method with validation
    # @param [Object] salutation Value to be assigned
    def salutation=(salutation)
      if !salutation.nil? && salutation.to_s.length > 16
        fail ArgumentError, 'invalid value for "salutation", the character length must be smaller than or equal to 16.'
      end

      @salutation = salutation
    end

    # Custom attribute writer method with validation
    # @param [Object] sex Value to be assigned
    def sex=(sex)
      if !sex.nil? && sex.to_s.length > 1
        fail ArgumentError, 'invalid value for "sex", the character length must be smaller than or equal to 1.'
      end

      @sex = sex
    end

    # Custom attribute writer method with validation
    # @param [Object] smoker Value to be assigned
    def smoker=(smoker)
      if smoker.nil?
        fail ArgumentError, 'smoker cannot be nil'
      end

      @smoker = smoker
    end

    # Custom attribute writer method with validation
    # @param [Object] student Value to be assigned
    def student=(student)
      if !student.nil? && student.to_s.length > 1
        fail ArgumentError, 'invalid value for "student", the character length must be smaller than or equal to 1.'
      end

      @student = student
    end

    # Custom attribute writer method with validation
    # @param [Object] unique_id Value to be assigned
    def unique_id=(unique_id)
      if !unique_id.nil? && unique_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "unique_id", the character length must be smaller than or equal to 32.'
      end

      @unique_id = unique_id
    end

    # Custom attribute writer method with validation
    # @param [Object] use_member_plan_year Value to be assigned
    def use_member_plan_year=(use_member_plan_year)
      if use_member_plan_year.nil?
        fail ArgumentError, 'use_member_plan_year cannot be nil'
      end

      @use_member_plan_year = use_member_plan_year
    end

    # Custom attribute writer method with validation
    # @param [Object] vi_p_flag Value to be assigned
    def vi_p_flag=(vi_p_flag)
      if !vi_p_flag.nil? && vi_p_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "vi_p_flag", the character length must be smaller than or equal to 1.'
      end

      @vi_p_flag = vi_p_flag
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          member_seq == o.member_seq &&
          access_code == o.access_code &&
          adult_child == o.adult_child &&
          adult_dependent == o.adult_dependent &&
          adult_dependent_end == o.adult_dependent_end &&
          alternate_id == o.alternate_id &&
          birth_date == o.birth_date &&
          continue_coverage == o.continue_coverage &&
          continue_coverage_end_date == o.continue_coverage_end_date &&
          continue_coverage_ex_code == o.continue_coverage_ex_code &&
          coverage_type == o.coverage_type &&
          credible_coverage == o.credible_coverage &&
          creditable_coverage_end == o.creditable_coverage_end &&
          creditable_coverage_start == o.creditable_coverage_start &&
          date_enrolled == o.date_enrolled &&
          date_of_death == o.date_of_death &&
          disenroll_date == o.disenroll_date &&
          ethnicity_code == o.ethnicity_code &&
          first_name == o.first_name &&
          height == o.height &&
          initial_volume == o.initial_volume &&
          initial_volume_salary_pct == o.initial_volume_salary_pct &&
          last_name == o.last_name &&
          marital_status == o.marital_status &&
          middle_name == o.middle_name &&
          name_suffix == o.name_suffix &&
          notes == o.notes &&
          other_insurance == o.other_insurance &&
          other_name == o.other_name &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          plan_year_frequency == o.plan_year_frequency &&
          plan_year_frequency_type == o.plan_year_frequency_type &&
          pre_exist == o.pre_exist &&
          pre_exist_end == o.pre_exist_end &&
          pre_exist_ex_code == o.pre_exist_ex_code &&
          relationship == o.relationship &&
          ssn == o.ssn &&
          salutation == o.salutation &&
          sex == o.sex &&
          smoker == o.smoker &&
          student == o.student &&
          student_end == o.student_end &&
          unique_id == o.unique_id &&
          use_member_plan_year == o.use_member_plan_year &&
          vi_p_flag == o.vi_p_flag &&
          weight == o.weight
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, member_seq, access_code, adult_child, adult_dependent, adult_dependent_end, alternate_id, birth_date, continue_coverage, continue_coverage_end_date, continue_coverage_ex_code, coverage_type, credible_coverage, creditable_coverage_end, creditable_coverage_start, date_enrolled, date_of_death, disenroll_date, ethnicity_code, first_name, height, initial_volume, initial_volume_salary_pct, last_name, marital_status, middle_name, name_suffix, notes, other_insurance, other_name, pend_ex_code, pend_flag, plan_year_frequency, plan_year_frequency_type, pre_exist, pre_exist_end, pre_exist_ex_code, relationship, ssn, salutation, sex, smoker, student, student_end, unique_id, use_member_plan_year, vi_p_flag, weight].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
