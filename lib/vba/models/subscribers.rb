=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Subscribers
    # Unique identifier for each family unit inside VBA. This value can be imported, assigned or randomly assigned by the system at time of record creation.
    attr_accessor :subscriber_id

    # Address of the Subscriber.
    attr_accessor :address

    # Address Line 2 of the Subscriber.
    attr_accessor :address2

    # Assigns a default billing cycle to be used when the Group Division 'Inv. Level' is set to 'Subscriber'.
    attr_accessor :billing_cycle_id

    # Specifies the number of projected billing cycles to include per invoice generation.
    attr_accessor :billing_invoice_create

    # City of the Subscriber.
    attr_accessor :city

    # Country of the Subscriber.
    attr_accessor :country_id

    # County of the Subscriber.
    attr_accessor :county_code

    # Date when the Subscriber was first enrolled.
    attr_accessor :date_enrolled

    # Date when the Subscriber was disenrolled.
    attr_accessor :disenroll_date

    # Email of the Subscriber.
    attr_accessor :email

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # First name of the Subscriber.
    attr_accessor :first_name

    # Country Code for the home phone number of the Subscriber.
    attr_accessor :home_country_code

    # Home phone number of the Subscriber.
    attr_accessor :home_phone

    # For Life & Disability clients, this holds the issue state for processing taxes and reporting.
    attr_accessor :issue_state

    # Last name of the Subscriber.
    attr_accessor :last_name

    # Middle initial of the Subscriber.
    attr_accessor :middle_name

    # Suffix or title associated with the Subscriber.
    attr_accessor :name_suffix

    # No longer in use. Replaced by NotData, NoteSource and NoteReference tables.
    attr_accessor :notes

    # Information only. Used for custom reporting or client integrations.
    attr_accessor :other_name

    # Number of annual pay periods for the Subscriber. This field is informational only.
    attr_accessor :pay_period

    # References the FundingAccount.Account_Key and indicates the account to pay when payment reference this subscriber.
    attr_accessor :pay_to_account

    # Assigns an Ex Code that can be applied to newly adjudicated Subscriber claims.
    attr_accessor :pend_ex_code

    # While active, assigned Ex Codes will be applied to any newly adjudicated Subscriber claims.
    attr_accessor :pend_flag

    # Region code of the Member's primary address.
    attr_accessor :region_code

    # Used by CSR to indicate the proper salutation used when communicating with the Insured.
    attr_accessor :salutation

    # This holds the Subscriber ID of the subscriber that sponsored this subscriber.
    attr_accessor :sponsor_id

    # This identifies the relationship between the sponor and this subscriber.
    attr_accessor :sponsor_relate_code

    # State of the Subscriber.
    attr_accessor :state

    # No longer in use.
    attr_accessor :status

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Country Code for the work phone number of the Subscriber.
    attr_accessor :work_country_code

    # Work phone number of the Subscriber.
    attr_accessor :work_phone

    # Zip Code of the Subscriber.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'address' => :'address',
        :'address2' => :'address2',
        :'billing_cycle_id' => :'billing_Cycle_ID',
        :'billing_invoice_create' => :'billing_Invoice_Create',
        :'city' => :'city',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'date_enrolled' => :'date_Enrolled',
        :'disenroll_date' => :'disenroll_Date',
        :'email' => :'email',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'first_name' => :'first_Name',
        :'home_country_code' => :'home_Country_Code',
        :'home_phone' => :'home_Phone',
        :'issue_state' => :'issue_State',
        :'last_name' => :'last_Name',
        :'middle_name' => :'middle_Name',
        :'name_suffix' => :'name_Suffix',
        :'notes' => :'notes',
        :'other_name' => :'other_Name',
        :'pay_period' => :'pay_Period',
        :'pay_to_account' => :'pay_To_Account',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'region_code' => :'region_Code',
        :'salutation' => :'salutation',
        :'sponsor_id' => :'sponsor_ID',
        :'sponsor_relate_code' => :'sponsor_Relate_Code',
        :'state' => :'state',
        :'status' => :'status',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'work_country_code' => :'work_Country_Code',
        :'work_phone' => :'work_Phone',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'address' => :'String',
        :'address2' => :'String',
        :'billing_cycle_id' => :'String',
        :'billing_invoice_create' => :'Integer',
        :'city' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'date_enrolled' => :'Time',
        :'disenroll_date' => :'Time',
        :'email' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'first_name' => :'String',
        :'home_country_code' => :'String',
        :'home_phone' => :'String',
        :'issue_state' => :'String',
        :'last_name' => :'String',
        :'middle_name' => :'String',
        :'name_suffix' => :'String',
        :'notes' => :'String',
        :'other_name' => :'String',
        :'pay_period' => :'String',
        :'pay_to_account' => :'Integer',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'region_code' => :'String',
        :'salutation' => :'String',
        :'sponsor_id' => :'String',
        :'sponsor_relate_code' => :'String',
        :'state' => :'String',
        :'status' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'work_country_code' => :'String',
        :'work_phone' => :'String',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'subscriber_id',
        :'address',
        :'address2',
        :'billing_cycle_id',
        :'billing_invoice_create',
        :'city',
        :'country_id',
        :'county_code',
        :'date_enrolled',
        :'disenroll_date',
        :'email',
        :'entry_user',
        :'first_name',
        :'home_country_code',
        :'home_phone',
        :'issue_state',
        :'last_name',
        :'middle_name',
        :'name_suffix',
        :'notes',
        :'other_name',
        :'pay_period',
        :'pay_to_account',
        :'pend_ex_code',
        :'pend_flag',
        :'region_code',
        :'salutation',
        :'sponsor_id',
        :'sponsor_relate_code',
        :'state',
        :'status',
        :'update_user',
        :'work_country_code',
        :'work_phone',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Subscribers` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Subscribers`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'billing_cycle_id')
        self.billing_cycle_id = attributes[:'billing_cycle_id']
      end

      if attributes.key?(:'billing_invoice_create')
        self.billing_invoice_create = attributes[:'billing_invoice_create']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'date_enrolled')
        self.date_enrolled = attributes[:'date_enrolled']
      end

      if attributes.key?(:'disenroll_date')
        self.disenroll_date = attributes[:'disenroll_date']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'home_country_code')
        self.home_country_code = attributes[:'home_country_code']
      end

      if attributes.key?(:'home_phone')
        self.home_phone = attributes[:'home_phone']
      end

      if attributes.key?(:'issue_state')
        self.issue_state = attributes[:'issue_state']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'name_suffix')
        self.name_suffix = attributes[:'name_suffix']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'other_name')
        self.other_name = attributes[:'other_name']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'pay_to_account')
        self.pay_to_account = attributes[:'pay_to_account']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'region_code')
        self.region_code = attributes[:'region_code']
      end

      if attributes.key?(:'salutation')
        self.salutation = attributes[:'salutation']
      end

      if attributes.key?(:'sponsor_id')
        self.sponsor_id = attributes[:'sponsor_id']
      end

      if attributes.key?(:'sponsor_relate_code')
        self.sponsor_relate_code = attributes[:'sponsor_relate_code']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'work_country_code')
        self.work_country_code = attributes[:'work_country_code']
      end

      if attributes.key?(:'work_phone')
        self.work_phone = attributes[:'work_phone']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@address.nil? && @address.to_s.length > 128
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 128.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
        invalid_properties.push('invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if !@email.nil? && @email.to_s.length > 256
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 256.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 25
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 25.')
      end

      if !@home_country_code.nil? && @home_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "home_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@home_phone.nil? && @home_phone.to_s.length > 20
        invalid_properties.push('invalid value for "home_phone", the character length must be smaller than or equal to 20.')
      end

      if !@issue_state.nil? && @issue_state.to_s.length > 2
        invalid_properties.push('invalid value for "issue_state", the character length must be smaller than or equal to 2.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 25
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 25.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 25
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 25.')
      end

      if !@name_suffix.nil? && @name_suffix.to_s.length > 16
        invalid_properties.push('invalid value for "name_suffix", the character length must be smaller than or equal to 16.')
      end

      if !@other_name.nil? && @other_name.to_s.length > 96
        invalid_properties.push('invalid value for "other_name", the character length must be smaller than or equal to 96.')
      end

      if !@pay_period.nil? && @pay_period.to_s.length > 2
        invalid_properties.push('invalid value for "pay_period", the character length must be smaller than or equal to 2.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if !@region_code.nil? && @region_code.to_s.length > 32
        invalid_properties.push('invalid value for "region_code", the character length must be smaller than or equal to 32.')
      end

      if !@salutation.nil? && @salutation.to_s.length > 16
        invalid_properties.push('invalid value for "salutation", the character length must be smaller than or equal to 16.')
      end

      if !@sponsor_id.nil? && @sponsor_id.to_s.length > 9
        invalid_properties.push('invalid value for "sponsor_id", the character length must be smaller than or equal to 9.')
      end

      if !@sponsor_relate_code.nil? && @sponsor_relate_code.to_s.length > 8
        invalid_properties.push('invalid value for "sponsor_relate_code", the character length must be smaller than or equal to 8.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@status.nil? && @status.to_s.length > 6
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 6.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@work_country_code.nil? && @work_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "work_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@work_phone.nil? && @work_phone.to_s.length > 20
        invalid_properties.push('invalid value for "work_phone", the character length must be smaller than or equal to 20.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@address.nil? && @address.to_s.length > 128
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if !@email.nil? && @email.to_s.length > 256
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@first_name.nil? && @first_name.to_s.length > 25
      return false if !@home_country_code.nil? && @home_country_code.to_s.length > 8
      return false if !@home_phone.nil? && @home_phone.to_s.length > 20
      return false if !@issue_state.nil? && @issue_state.to_s.length > 2
      return false if !@last_name.nil? && @last_name.to_s.length > 25
      return false if !@middle_name.nil? && @middle_name.to_s.length > 25
      return false if !@name_suffix.nil? && @name_suffix.to_s.length > 16
      return false if !@other_name.nil? && @other_name.to_s.length > 96
      return false if !@pay_period.nil? && @pay_period.to_s.length > 2
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if !@region_code.nil? && @region_code.to_s.length > 32
      return false if !@salutation.nil? && @salutation.to_s.length > 16
      return false if !@sponsor_id.nil? && @sponsor_id.to_s.length > 9
      return false if !@sponsor_relate_code.nil? && @sponsor_relate_code.to_s.length > 8
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@status.nil? && @status.to_s.length > 6
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@work_country_code.nil? && @work_country_code.to_s.length > 8
      return false if !@work_phone.nil? && @work_phone.to_s.length > 20
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 128
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 128.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_cycle_id Value to be assigned
    def billing_cycle_id=(billing_cycle_id)
      if !billing_cycle_id.nil? && billing_cycle_id.to_s.length > 2
        fail ArgumentError, 'invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.'
      end

      @billing_cycle_id = billing_cycle_id
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 256
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 256.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 25.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] home_country_code Value to be assigned
    def home_country_code=(home_country_code)
      if !home_country_code.nil? && home_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "home_country_code", the character length must be smaller than or equal to 8.'
      end

      @home_country_code = home_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone Value to be assigned
    def home_phone=(home_phone)
      if !home_phone.nil? && home_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "home_phone", the character length must be smaller than or equal to 20.'
      end

      @home_phone = home_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_state Value to be assigned
    def issue_state=(issue_state)
      if !issue_state.nil? && issue_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "issue_state", the character length must be smaller than or equal to 2.'
      end

      @issue_state = issue_state
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 25.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 25.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_suffix Value to be assigned
    def name_suffix=(name_suffix)
      if !name_suffix.nil? && name_suffix.to_s.length > 16
        fail ArgumentError, 'invalid value for "name_suffix", the character length must be smaller than or equal to 16.'
      end

      @name_suffix = name_suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] other_name Value to be assigned
    def other_name=(other_name)
      if !other_name.nil? && other_name.to_s.length > 96
        fail ArgumentError, 'invalid value for "other_name", the character length must be smaller than or equal to 96.'
      end

      @other_name = other_name
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_period Value to be assigned
    def pay_period=(pay_period)
      if !pay_period.nil? && pay_period.to_s.length > 2
        fail ArgumentError, 'invalid value for "pay_period", the character length must be smaller than or equal to 2.'
      end

      @pay_period = pay_period
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] region_code Value to be assigned
    def region_code=(region_code)
      if !region_code.nil? && region_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "region_code", the character length must be smaller than or equal to 32.'
      end

      @region_code = region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] salutation Value to be assigned
    def salutation=(salutation)
      if !salutation.nil? && salutation.to_s.length > 16
        fail ArgumentError, 'invalid value for "salutation", the character length must be smaller than or equal to 16.'
      end

      @salutation = salutation
    end

    # Custom attribute writer method with validation
    # @param [Object] sponsor_id Value to be assigned
    def sponsor_id=(sponsor_id)
      if !sponsor_id.nil? && sponsor_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "sponsor_id", the character length must be smaller than or equal to 9.'
      end

      @sponsor_id = sponsor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] sponsor_relate_code Value to be assigned
    def sponsor_relate_code=(sponsor_relate_code)
      if !sponsor_relate_code.nil? && sponsor_relate_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "sponsor_relate_code", the character length must be smaller than or equal to 8.'
      end

      @sponsor_relate_code = sponsor_relate_code
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.length > 6
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 6.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] work_country_code Value to be assigned
    def work_country_code=(work_country_code)
      if !work_country_code.nil? && work_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "work_country_code", the character length must be smaller than or equal to 8.'
      end

      @work_country_code = work_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] work_phone Value to be assigned
    def work_phone=(work_phone)
      if !work_phone.nil? && work_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "work_phone", the character length must be smaller than or equal to 20.'
      end

      @work_phone = work_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          address == o.address &&
          address2 == o.address2 &&
          billing_cycle_id == o.billing_cycle_id &&
          billing_invoice_create == o.billing_invoice_create &&
          city == o.city &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          date_enrolled == o.date_enrolled &&
          disenroll_date == o.disenroll_date &&
          email == o.email &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          first_name == o.first_name &&
          home_country_code == o.home_country_code &&
          home_phone == o.home_phone &&
          issue_state == o.issue_state &&
          last_name == o.last_name &&
          middle_name == o.middle_name &&
          name_suffix == o.name_suffix &&
          notes == o.notes &&
          other_name == o.other_name &&
          pay_period == o.pay_period &&
          pay_to_account == o.pay_to_account &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          region_code == o.region_code &&
          salutation == o.salutation &&
          sponsor_id == o.sponsor_id &&
          sponsor_relate_code == o.sponsor_relate_code &&
          state == o.state &&
          status == o.status &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          work_country_code == o.work_country_code &&
          work_phone == o.work_phone &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, address, address2, billing_cycle_id, billing_invoice_create, city, country_id, county_code, date_enrolled, disenroll_date, email, entry_date, entry_user, first_name, home_country_code, home_phone, issue_state, last_name, middle_name, name_suffix, notes, other_name, pay_period, pay_to_account, pend_ex_code, pend_flag, region_code, salutation, sponsor_id, sponsor_relate_code, state, status, update_date, update_user, work_country_code, work_phone, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
