=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupClass
    # Unique identifier for each Claim record within this Group/Division. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_division_class_key

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :cobra

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :calc_cov_by

    # The Class indicator assigned to this class record within the Group/Division setup.
    attr_accessor :class_code

    # References GroupDivision.Division_ID value on the parent record.
    attr_accessor :division_id

    # Effective (Start) date of this Class on this Group/Division.
    attr_accessor :effective_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # References GroupDivision.Group_ID value on the parent record.
    attr_accessor :group_id

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :max_amount

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :max_guaranteed_issue

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :max_volume

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :min_amount

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :min_volume

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :multiplier_option

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :pay_freq

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :pay_freq_start

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :pay_freq_type

    # If this class definition is Plan specific then add a reference here to Plans.Plan_ID.
    attr_accessor :plan_id

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :smart_flex

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :start_date_rule

    # Term (End) date of this Class on this Group/Division.
    attr_accessor :term_date

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :term_rule

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :volume_increment

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :waiting_period

    # Informational used in custom reporting for Life & Disability clients who have an additional \"Class\" structure under Division.
    attr_accessor :waiting_period_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_division_class_key' => :'groupDivisionClass_Key',
        :'cobra' => :'cobra',
        :'calc_cov_by' => :'calc_Cov_By',
        :'class_code' => :'class_Code',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'max_amount' => :'max_Amount',
        :'max_guaranteed_issue' => :'max_Guaranteed_Issue',
        :'max_volume' => :'max_Volume',
        :'min_amount' => :'min_Amount',
        :'min_volume' => :'min_Volume',
        :'multiplier_option' => :'multiplier_Option',
        :'pay_freq' => :'pay_Freq',
        :'pay_freq_start' => :'pay_Freq_Start',
        :'pay_freq_type' => :'pay_Freq_Type',
        :'plan_id' => :'plan_ID',
        :'smart_flex' => :'smart_Flex',
        :'start_date_rule' => :'start_Date_Rule',
        :'term_date' => :'term_Date',
        :'term_rule' => :'term_Rule',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'volume_increment' => :'volume_Increment',
        :'waiting_period' => :'waiting_Period',
        :'waiting_period_type' => :'waiting_Period_Type'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_division_class_key' => :'Integer',
        :'cobra' => :'Boolean',
        :'calc_cov_by' => :'String',
        :'class_code' => :'String',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'max_amount' => :'Float',
        :'max_guaranteed_issue' => :'Float',
        :'max_volume' => :'Float',
        :'min_amount' => :'Float',
        :'min_volume' => :'Float',
        :'multiplier_option' => :'String',
        :'pay_freq' => :'Integer',
        :'pay_freq_start' => :'Time',
        :'pay_freq_type' => :'String',
        :'plan_id' => :'String',
        :'smart_flex' => :'Boolean',
        :'start_date_rule' => :'String',
        :'term_date' => :'Time',
        :'term_rule' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'volume_increment' => :'Float',
        :'waiting_period' => :'Integer',
        :'waiting_period_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'calc_cov_by',
        :'division_id',
        :'effective_date',
        :'entry_user',
        :'max_amount',
        :'max_guaranteed_issue',
        :'max_volume',
        :'min_amount',
        :'min_volume',
        :'multiplier_option',
        :'pay_freq',
        :'pay_freq_start',
        :'pay_freq_type',
        :'plan_id',
        :'start_date_rule',
        :'term_date',
        :'term_rule',
        :'update_user',
        :'volume_increment',
        :'waiting_period',
        :'waiting_period_type'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupClass` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupClass`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_division_class_key')
        self.group_division_class_key = attributes[:'group_division_class_key']
      else
        self.group_division_class_key = nil
      end

      if attributes.key?(:'cobra')
        self.cobra = attributes[:'cobra']
      else
        self.cobra = nil
      end

      if attributes.key?(:'calc_cov_by')
        self.calc_cov_by = attributes[:'calc_cov_by']
      end

      if attributes.key?(:'class_code')
        self.class_code = attributes[:'class_code']
      else
        self.class_code = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'max_amount')
        self.max_amount = attributes[:'max_amount']
      end

      if attributes.key?(:'max_guaranteed_issue')
        self.max_guaranteed_issue = attributes[:'max_guaranteed_issue']
      end

      if attributes.key?(:'max_volume')
        self.max_volume = attributes[:'max_volume']
      end

      if attributes.key?(:'min_amount')
        self.min_amount = attributes[:'min_amount']
      end

      if attributes.key?(:'min_volume')
        self.min_volume = attributes[:'min_volume']
      end

      if attributes.key?(:'multiplier_option')
        self.multiplier_option = attributes[:'multiplier_option']
      end

      if attributes.key?(:'pay_freq')
        self.pay_freq = attributes[:'pay_freq']
      end

      if attributes.key?(:'pay_freq_start')
        self.pay_freq_start = attributes[:'pay_freq_start']
      end

      if attributes.key?(:'pay_freq_type')
        self.pay_freq_type = attributes[:'pay_freq_type']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'smart_flex')
        self.smart_flex = attributes[:'smart_flex']
      else
        self.smart_flex = nil
      end

      if attributes.key?(:'start_date_rule')
        self.start_date_rule = attributes[:'start_date_rule']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'term_rule')
        self.term_rule = attributes[:'term_rule']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'volume_increment')
        self.volume_increment = attributes[:'volume_increment']
      end

      if attributes.key?(:'waiting_period')
        self.waiting_period = attributes[:'waiting_period']
      end

      if attributes.key?(:'waiting_period_type')
        self.waiting_period_type = attributes[:'waiting_period_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_division_class_key.nil?
        invalid_properties.push('invalid value for "group_division_class_key", group_division_class_key cannot be nil.')
      end

      if @cobra.nil?
        invalid_properties.push('invalid value for "cobra", cobra cannot be nil.')
      end

      if !@calc_cov_by.nil? && @calc_cov_by.to_s.length > 8
        invalid_properties.push('invalid value for "calc_cov_by", the character length must be smaller than or equal to 8.')
      end

      if @class_code.nil?
        invalid_properties.push('invalid value for "class_code", class_code cannot be nil.')
      end

      if @class_code.to_s.length > 32
        invalid_properties.push('invalid value for "class_code", the character length must be smaller than or equal to 32.')
      end

      if @class_code.to_s.length < 1
        invalid_properties.push('invalid value for "class_code", the character length must be great than or equal to 1.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if !@multiplier_option.nil? && @multiplier_option.to_s.length > 8
        invalid_properties.push('invalid value for "multiplier_option", the character length must be smaller than or equal to 8.')
      end

      if !@pay_freq_type.nil? && @pay_freq_type.to_s.length > 8
        invalid_properties.push('invalid value for "pay_freq_type", the character length must be smaller than or equal to 8.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @smart_flex.nil?
        invalid_properties.push('invalid value for "smart_flex", smart_flex cannot be nil.')
      end

      if !@start_date_rule.nil? && @start_date_rule.to_s.length > 8
        invalid_properties.push('invalid value for "start_date_rule", the character length must be smaller than or equal to 8.')
      end

      if !@term_rule.nil? && @term_rule.to_s.length > 8
        invalid_properties.push('invalid value for "term_rule", the character length must be smaller than or equal to 8.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@waiting_period_type.nil? && @waiting_period_type.to_s.length > 8
        invalid_properties.push('invalid value for "waiting_period_type", the character length must be smaller than or equal to 8.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_division_class_key.nil?
      return false if @cobra.nil?
      return false if !@calc_cov_by.nil? && @calc_cov_by.to_s.length > 8
      return false if @class_code.nil?
      return false if @class_code.to_s.length > 32
      return false if @class_code.to_s.length < 1
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if !@multiplier_option.nil? && @multiplier_option.to_s.length > 8
      return false if !@pay_freq_type.nil? && @pay_freq_type.to_s.length > 8
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if @smart_flex.nil?
      return false if !@start_date_rule.nil? && @start_date_rule.to_s.length > 8
      return false if !@term_rule.nil? && @term_rule.to_s.length > 8
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@waiting_period_type.nil? && @waiting_period_type.to_s.length > 8
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_division_class_key Value to be assigned
    def group_division_class_key=(group_division_class_key)
      if group_division_class_key.nil?
        fail ArgumentError, 'group_division_class_key cannot be nil'
      end

      @group_division_class_key = group_division_class_key
    end

    # Custom attribute writer method with validation
    # @param [Object] cobra Value to be assigned
    def cobra=(cobra)
      if cobra.nil?
        fail ArgumentError, 'cobra cannot be nil'
      end

      @cobra = cobra
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_cov_by Value to be assigned
    def calc_cov_by=(calc_cov_by)
      if !calc_cov_by.nil? && calc_cov_by.to_s.length > 8
        fail ArgumentError, 'invalid value for "calc_cov_by", the character length must be smaller than or equal to 8.'
      end

      @calc_cov_by = calc_cov_by
    end

    # Custom attribute writer method with validation
    # @param [Object] class_code Value to be assigned
    def class_code=(class_code)
      if class_code.nil?
        fail ArgumentError, 'class_code cannot be nil'
      end

      if class_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "class_code", the character length must be smaller than or equal to 32.'
      end

      if class_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "class_code", the character length must be great than or equal to 1.'
      end

      @class_code = class_code
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] multiplier_option Value to be assigned
    def multiplier_option=(multiplier_option)
      if !multiplier_option.nil? && multiplier_option.to_s.length > 8
        fail ArgumentError, 'invalid value for "multiplier_option", the character length must be smaller than or equal to 8.'
      end

      @multiplier_option = multiplier_option
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_freq_type Value to be assigned
    def pay_freq_type=(pay_freq_type)
      if !pay_freq_type.nil? && pay_freq_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "pay_freq_type", the character length must be smaller than or equal to 8.'
      end

      @pay_freq_type = pay_freq_type
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] smart_flex Value to be assigned
    def smart_flex=(smart_flex)
      if smart_flex.nil?
        fail ArgumentError, 'smart_flex cannot be nil'
      end

      @smart_flex = smart_flex
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date_rule Value to be assigned
    def start_date_rule=(start_date_rule)
      if !start_date_rule.nil? && start_date_rule.to_s.length > 8
        fail ArgumentError, 'invalid value for "start_date_rule", the character length must be smaller than or equal to 8.'
      end

      @start_date_rule = start_date_rule
    end

    # Custom attribute writer method with validation
    # @param [Object] term_rule Value to be assigned
    def term_rule=(term_rule)
      if !term_rule.nil? && term_rule.to_s.length > 8
        fail ArgumentError, 'invalid value for "term_rule", the character length must be smaller than or equal to 8.'
      end

      @term_rule = term_rule
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] waiting_period_type Value to be assigned
    def waiting_period_type=(waiting_period_type)
      if !waiting_period_type.nil? && waiting_period_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "waiting_period_type", the character length must be smaller than or equal to 8.'
      end

      @waiting_period_type = waiting_period_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_division_class_key == o.group_division_class_key &&
          cobra == o.cobra &&
          calc_cov_by == o.calc_cov_by &&
          class_code == o.class_code &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          max_amount == o.max_amount &&
          max_guaranteed_issue == o.max_guaranteed_issue &&
          max_volume == o.max_volume &&
          min_amount == o.min_amount &&
          min_volume == o.min_volume &&
          multiplier_option == o.multiplier_option &&
          pay_freq == o.pay_freq &&
          pay_freq_start == o.pay_freq_start &&
          pay_freq_type == o.pay_freq_type &&
          plan_id == o.plan_id &&
          smart_flex == o.smart_flex &&
          start_date_rule == o.start_date_rule &&
          term_date == o.term_date &&
          term_rule == o.term_rule &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          volume_increment == o.volume_increment &&
          waiting_period == o.waiting_period &&
          waiting_period_type == o.waiting_period_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_division_class_key, cobra, calc_cov_by, class_code, division_id, effective_date, entry_date, entry_user, group_id, max_amount, max_guaranteed_issue, max_volume, min_amount, min_volume, multiplier_option, pay_freq, pay_freq_start, pay_freq_type, plan_id, smart_flex, start_date_rule, term_date, term_rule, update_date, update_user, volume_increment, waiting_period, waiting_period_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
