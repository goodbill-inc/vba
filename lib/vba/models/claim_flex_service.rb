=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimFlexService
    attr_accessor :claim_flex_service_key

    attr_accessor :amount

    attr_accessor :claim_flex_key

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :ex_code

    attr_accessor :flex_description

    attr_accessor :mcc

    attr_accessor :matching_transaction_id

    attr_accessor :merchant_name

    attr_accessor :payment_reference

    attr_accessor :place_of_service

    attr_accessor :procedure_code

    attr_accessor :service_date

    attr_accessor :service_thru

    attr_accessor :transaction_code

    attr_accessor :transaction_source

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_flex_service_key' => :'claimFlexService_Key',
        :'amount' => :'amount',
        :'claim_flex_key' => :'claimFlex_Key',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'flex_description' => :'flex_Description',
        :'mcc' => :'mcc',
        :'matching_transaction_id' => :'matching_Transaction_ID',
        :'merchant_name' => :'merchant_Name',
        :'payment_reference' => :'payment_Reference',
        :'place_of_service' => :'place_Of_Service',
        :'procedure_code' => :'procedure_Code',
        :'service_date' => :'service_Date',
        :'service_thru' => :'service_Thru',
        :'transaction_code' => :'transaction_Code',
        :'transaction_source' => :'transaction_Source',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_flex_service_key' => :'Integer',
        :'amount' => :'Float',
        :'claim_flex_key' => :'Integer',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'flex_description' => :'String',
        :'mcc' => :'String',
        :'matching_transaction_id' => :'String',
        :'merchant_name' => :'String',
        :'payment_reference' => :'String',
        :'place_of_service' => :'String',
        :'procedure_code' => :'String',
        :'service_date' => :'Time',
        :'service_thru' => :'Time',
        :'transaction_code' => :'String',
        :'transaction_source' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'amount',
        :'entry_user',
        :'ex_code',
        :'flex_description',
        :'mcc',
        :'matching_transaction_id',
        :'merchant_name',
        :'payment_reference',
        :'place_of_service',
        :'procedure_code',
        :'service_date',
        :'service_thru',
        :'transaction_code',
        :'transaction_source',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimFlexService` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimFlexService`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_flex_service_key')
        self.claim_flex_service_key = attributes[:'claim_flex_service_key']
      else
        self.claim_flex_service_key = nil
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'claim_flex_key')
        self.claim_flex_key = attributes[:'claim_flex_key']
      else
        self.claim_flex_key = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'flex_description')
        self.flex_description = attributes[:'flex_description']
      end

      if attributes.key?(:'mcc')
        self.mcc = attributes[:'mcc']
      end

      if attributes.key?(:'matching_transaction_id')
        self.matching_transaction_id = attributes[:'matching_transaction_id']
      end

      if attributes.key?(:'merchant_name')
        self.merchant_name = attributes[:'merchant_name']
      end

      if attributes.key?(:'payment_reference')
        self.payment_reference = attributes[:'payment_reference']
      end

      if attributes.key?(:'place_of_service')
        self.place_of_service = attributes[:'place_of_service']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'service_date')
        self.service_date = attributes[:'service_date']
      end

      if attributes.key?(:'service_thru')
        self.service_thru = attributes[:'service_thru']
      end

      if attributes.key?(:'transaction_code')
        self.transaction_code = attributes[:'transaction_code']
      end

      if attributes.key?(:'transaction_source')
        self.transaction_source = attributes[:'transaction_source']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_flex_service_key.nil?
        invalid_properties.push('invalid value for "claim_flex_service_key", claim_flex_service_key cannot be nil.')
      end

      if @claim_flex_key.nil?
        invalid_properties.push('invalid value for "claim_flex_key", claim_flex_key cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@flex_description.nil? && @flex_description.to_s.length > 128
        invalid_properties.push('invalid value for "flex_description", the character length must be smaller than or equal to 128.')
      end

      if !@mcc.nil? && @mcc.to_s.length > 4
        invalid_properties.push('invalid value for "mcc", the character length must be smaller than or equal to 4.')
      end

      if !@matching_transaction_id.nil? && @matching_transaction_id.to_s.length > 10
        invalid_properties.push('invalid value for "matching_transaction_id", the character length must be smaller than or equal to 10.')
      end

      if !@merchant_name.nil? && @merchant_name.to_s.length > 50
        invalid_properties.push('invalid value for "merchant_name", the character length must be smaller than or equal to 50.')
      end

      if !@payment_reference.nil? && @payment_reference.to_s.length > 25
        invalid_properties.push('invalid value for "payment_reference", the character length must be smaller than or equal to 25.')
      end

      if !@place_of_service.nil? && @place_of_service.to_s.length > 4
        invalid_properties.push('invalid value for "place_of_service", the character length must be smaller than or equal to 4.')
      end

      if !@procedure_code.nil? && @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      if !@transaction_code.nil? && @transaction_code.to_s.length > 8
        invalid_properties.push('invalid value for "transaction_code", the character length must be smaller than or equal to 8.')
      end

      if !@transaction_source.nil? && @transaction_source.to_s.length > 4
        invalid_properties.push('invalid value for "transaction_source", the character length must be smaller than or equal to 4.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_flex_service_key.nil?
      return false if @claim_flex_key.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@flex_description.nil? && @flex_description.to_s.length > 128
      return false if !@mcc.nil? && @mcc.to_s.length > 4
      return false if !@matching_transaction_id.nil? && @matching_transaction_id.to_s.length > 10
      return false if !@merchant_name.nil? && @merchant_name.to_s.length > 50
      return false if !@payment_reference.nil? && @payment_reference.to_s.length > 25
      return false if !@place_of_service.nil? && @place_of_service.to_s.length > 4
      return false if !@procedure_code.nil? && @procedure_code.to_s.length > 8
      return false if !@transaction_code.nil? && @transaction_code.to_s.length > 8
      return false if !@transaction_source.nil? && @transaction_source.to_s.length > 4
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_flex_service_key Value to be assigned
    def claim_flex_service_key=(claim_flex_service_key)
      if claim_flex_service_key.nil?
        fail ArgumentError, 'claim_flex_service_key cannot be nil'
      end

      @claim_flex_service_key = claim_flex_service_key
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_flex_key Value to be assigned
    def claim_flex_key=(claim_flex_key)
      if claim_flex_key.nil?
        fail ArgumentError, 'claim_flex_key cannot be nil'
      end

      @claim_flex_key = claim_flex_key
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_description Value to be assigned
    def flex_description=(flex_description)
      if !flex_description.nil? && flex_description.to_s.length > 128
        fail ArgumentError, 'invalid value for "flex_description", the character length must be smaller than or equal to 128.'
      end

      @flex_description = flex_description
    end

    # Custom attribute writer method with validation
    # @param [Object] mcc Value to be assigned
    def mcc=(mcc)
      if !mcc.nil? && mcc.to_s.length > 4
        fail ArgumentError, 'invalid value for "mcc", the character length must be smaller than or equal to 4.'
      end

      @mcc = mcc
    end

    # Custom attribute writer method with validation
    # @param [Object] matching_transaction_id Value to be assigned
    def matching_transaction_id=(matching_transaction_id)
      if !matching_transaction_id.nil? && matching_transaction_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "matching_transaction_id", the character length must be smaller than or equal to 10.'
      end

      @matching_transaction_id = matching_transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_name Value to be assigned
    def merchant_name=(merchant_name)
      if !merchant_name.nil? && merchant_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "merchant_name", the character length must be smaller than or equal to 50.'
      end

      @merchant_name = merchant_name
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_reference Value to be assigned
    def payment_reference=(payment_reference)
      if !payment_reference.nil? && payment_reference.to_s.length > 25
        fail ArgumentError, 'invalid value for "payment_reference", the character length must be smaller than or equal to 25.'
      end

      @payment_reference = payment_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] place_of_service Value to be assigned
    def place_of_service=(place_of_service)
      if !place_of_service.nil? && place_of_service.to_s.length > 4
        fail ArgumentError, 'invalid value for "place_of_service", the character length must be smaller than or equal to 4.'
      end

      @place_of_service = place_of_service
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if !procedure_code.nil? && procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      @procedure_code = procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_code Value to be assigned
    def transaction_code=(transaction_code)
      if !transaction_code.nil? && transaction_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "transaction_code", the character length must be smaller than or equal to 8.'
      end

      @transaction_code = transaction_code
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_source Value to be assigned
    def transaction_source=(transaction_source)
      if !transaction_source.nil? && transaction_source.to_s.length > 4
        fail ArgumentError, 'invalid value for "transaction_source", the character length must be smaller than or equal to 4.'
      end

      @transaction_source = transaction_source
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_flex_service_key == o.claim_flex_service_key &&
          amount == o.amount &&
          claim_flex_key == o.claim_flex_key &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          flex_description == o.flex_description &&
          mcc == o.mcc &&
          matching_transaction_id == o.matching_transaction_id &&
          merchant_name == o.merchant_name &&
          payment_reference == o.payment_reference &&
          place_of_service == o.place_of_service &&
          procedure_code == o.procedure_code &&
          service_date == o.service_date &&
          service_thru == o.service_thru &&
          transaction_code == o.transaction_code &&
          transaction_source == o.transaction_source &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_flex_service_key, amount, claim_flex_key, entry_date, entry_user, ex_code, flex_description, mcc, matching_transaction_id, merchant_name, payment_reference, place_of_service, procedure_code, service_date, service_thru, transaction_code, transaction_source, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
