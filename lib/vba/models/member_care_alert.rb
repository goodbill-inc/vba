=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class MemberCareAlert
    # Unique identifier for each Member Care Alert record. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :member_care_alert_key

    # A description area used to provide more detail about the care alert.
    attr_accessor :alert_details

    # Status of the care alert that will be sent to the Member based upon the alert criteria. The status can be set to either 'Due Soon', 'Past Due', or 'Completed'.
    attr_accessor :care_alert_status

    # Diagnostic code tied to the care alert.
    attr_accessor :diagnostic_code

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Identifies the frequency of the care alert by specifying the number of the associated frequency type that should be used.
    attr_accessor :frequency

    # Identifies the frequency at which the care alerts should be sent. This can be based upon a certain number of months, an annual basis, or a certain number of years.
    attr_accessor :frequency_type

    # Identifies the last date that the Member received the service associated with the care alert.
    attr_accessor :last_service_date

    # References Members.Member_Seq value on the parent record.
    attr_accessor :member_seq

    # Idenfities the next date that the Member is to receive the service associated with the care alert.
    attr_accessor :next_service_date

    # Procedure code tied the care alert.
    attr_accessor :procedure_code

    # References Members.Subscriber_ID value on the parent record.
    attr_accessor :subscriber_id

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'member_care_alert_key' => :'memberCareAlert_Key',
        :'alert_details' => :'alert_Details',
        :'care_alert_status' => :'care_Alert_Status',
        :'diagnostic_code' => :'diagnostic_Code',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'frequency' => :'frequency',
        :'frequency_type' => :'frequency_Type',
        :'last_service_date' => :'last_Service_Date',
        :'member_seq' => :'member_Seq',
        :'next_service_date' => :'next_Service_Date',
        :'procedure_code' => :'procedure_Code',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'member_care_alert_key' => :'Integer',
        :'alert_details' => :'String',
        :'care_alert_status' => :'String',
        :'diagnostic_code' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'frequency' => :'Integer',
        :'frequency_type' => :'String',
        :'last_service_date' => :'Time',
        :'member_seq' => :'String',
        :'next_service_date' => :'Time',
        :'procedure_code' => :'String',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'alert_details',
        :'care_alert_status',
        :'diagnostic_code',
        :'entry_user',
        :'frequency',
        :'frequency_type',
        :'last_service_date',
        :'next_service_date',
        :'procedure_code',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::MemberCareAlert` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::MemberCareAlert`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'member_care_alert_key')
        self.member_care_alert_key = attributes[:'member_care_alert_key']
      else
        self.member_care_alert_key = nil
      end

      if attributes.key?(:'alert_details')
        self.alert_details = attributes[:'alert_details']
      end

      if attributes.key?(:'care_alert_status')
        self.care_alert_status = attributes[:'care_alert_status']
      end

      if attributes.key?(:'diagnostic_code')
        self.diagnostic_code = attributes[:'diagnostic_code']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.key?(:'frequency_type')
        self.frequency_type = attributes[:'frequency_type']
      end

      if attributes.key?(:'last_service_date')
        self.last_service_date = attributes[:'last_service_date']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      else
        self.member_seq = nil
      end

      if attributes.key?(:'next_service_date')
        self.next_service_date = attributes[:'next_service_date']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @member_care_alert_key.nil?
        invalid_properties.push('invalid value for "member_care_alert_key", member_care_alert_key cannot be nil.')
      end

      if !@alert_details.nil? && @alert_details.to_s.length > 1024
        invalid_properties.push('invalid value for "alert_details", the character length must be smaller than or equal to 1024.')
      end

      if !@care_alert_status.nil? && @care_alert_status.to_s.length > 32
        invalid_properties.push('invalid value for "care_alert_status", the character length must be smaller than or equal to 32.')
      end

      if !@diagnostic_code.nil? && @diagnostic_code.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@frequency_type.nil? && @frequency_type.to_s.length > 16
        invalid_properties.push('invalid value for "frequency_type", the character length must be smaller than or equal to 16.')
      end

      if @member_seq.nil?
        invalid_properties.push('invalid value for "member_seq", member_seq cannot be nil.')
      end

      if @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @member_seq.to_s.length < 1
        invalid_properties.push('invalid value for "member_seq", the character length must be great than or equal to 1.')
      end

      if !@procedure_code.nil? && @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @member_care_alert_key.nil?
      return false if !@alert_details.nil? && @alert_details.to_s.length > 1024
      return false if !@care_alert_status.nil? && @care_alert_status.to_s.length > 32
      return false if !@diagnostic_code.nil? && @diagnostic_code.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@frequency_type.nil? && @frequency_type.to_s.length > 16
      return false if @member_seq.nil?
      return false if @member_seq.to_s.length > 2
      return false if @member_seq.to_s.length < 1
      return false if !@procedure_code.nil? && @procedure_code.to_s.length > 8
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] member_care_alert_key Value to be assigned
    def member_care_alert_key=(member_care_alert_key)
      if member_care_alert_key.nil?
        fail ArgumentError, 'member_care_alert_key cannot be nil'
      end

      @member_care_alert_key = member_care_alert_key
    end

    # Custom attribute writer method with validation
    # @param [Object] alert_details Value to be assigned
    def alert_details=(alert_details)
      if !alert_details.nil? && alert_details.to_s.length > 1024
        fail ArgumentError, 'invalid value for "alert_details", the character length must be smaller than or equal to 1024.'
      end

      @alert_details = alert_details
    end

    # Custom attribute writer method with validation
    # @param [Object] care_alert_status Value to be assigned
    def care_alert_status=(care_alert_status)
      if !care_alert_status.nil? && care_alert_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "care_alert_status", the character length must be smaller than or equal to 32.'
      end

      @care_alert_status = care_alert_status
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code Value to be assigned
    def diagnostic_code=(diagnostic_code)
      if !diagnostic_code.nil? && diagnostic_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code = diagnostic_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] frequency_type Value to be assigned
    def frequency_type=(frequency_type)
      if !frequency_type.nil? && frequency_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "frequency_type", the character length must be smaller than or equal to 16.'
      end

      @frequency_type = frequency_type
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if member_seq.nil?
        fail ArgumentError, 'member_seq cannot be nil'
      end

      if member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      if member_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "member_seq", the character length must be great than or equal to 1.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if !procedure_code.nil? && procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      @procedure_code = procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          member_care_alert_key == o.member_care_alert_key &&
          alert_details == o.alert_details &&
          care_alert_status == o.care_alert_status &&
          diagnostic_code == o.diagnostic_code &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          frequency == o.frequency &&
          frequency_type == o.frequency_type &&
          last_service_date == o.last_service_date &&
          member_seq == o.member_seq &&
          next_service_date == o.next_service_date &&
          procedure_code == o.procedure_code &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [member_care_alert_key, alert_details, care_alert_status, diagnostic_code, entry_date, entry_user, frequency, frequency_type, last_service_date, member_seq, next_service_date, procedure_code, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
