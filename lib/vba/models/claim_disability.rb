=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimDisability
    attr_accessor :batch_number

    attr_accessor :admit_date

    attr_accessor :apply_extension

    attr_accessor :apply_extension_ex_code

    attr_accessor :attended_physician

    attr_accessor :birth_date

    attr_accessor :closure_effective_date

    attr_accessor :delivery_date

    attr_accessor :delivery_type

    attr_accessor :dep_ssdi_end_date

    attr_accessor :description

    attr_accessor :diagnostic_code1

    attr_accessor :diagnostic_code2

    attr_accessor :diagnostic_code_type

    attr_accessor :disability_pay_through_day

    attr_accessor :disability_type

    attr_accessor :disabled_by_physician

    attr_accessor :discharge_date

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :ex_code

    attr_accessor :exceed_max

    attr_accessor :exhaust_date

    attr_accessor :expected_typical_duration

    attr_accessor :fic_a_percent

    attr_accessor :federal_withheld

    attr_accessor :followup_date

    attr_accessor :followup_ex_code

    attr_accessor :group_id

    attr_accessor :image_number_1

    attr_accessor :image_number_2

    attr_accessor :image_number_3

    attr_accessor :image_number_4

    attr_accessor :include_return_to_work

    attr_accessor :include_waiting_period

    attr_accessor :include_waiting_period_in_max

    attr_accessor :job_type

    attr_accessor :lt_d_effective_date

    attr_accessor :lt_d_packet_date

    attr_accessor :last_day_worked

    attr_accessor :last_physician_warrant_date

    attr_accessor :liability_injury

    attr_accessor :mail_to

    attr_accessor :max_disability_days

    attr_accessor :member_seq

    attr_accessor :overpayment_deduction

    attr_accessor :overpayment_ex_code

    attr_accessor :overpayment_total

    attr_accessor :partial_disability

    attr_accessor :pay_to

    attr_accessor :payment_days

    attr_accessor :payment_duration

    attr_accessor :physician_return_to_work

    attr_accessor :plan_id

    attr_accessor :plan_type

    attr_accessor :plan_type_ltd

    attr_accessor :received_date

    attr_accessor :return_to_work

    attr_accessor :rollup_waiting_period

    attr_accessor :scd

    attr_accessor :salary_cont_ex_code

    attr_accessor :salary_cont_from

    attr_accessor :salary_cont_paid

    attr_accessor :salary_cont_thru

    attr_accessor :sick_time_ex_code

    attr_accessor :sick_time_from

    attr_accessor :sick_time_paid

    attr_accessor :sick_time_thru

    attr_accessor :state_withheld

    attr_accessor :subscriber_id

    attr_accessor :type_of_surgery

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :vacation_ex_code

    attr_accessor :vacation_from

    attr_accessor :vacation_paid

    attr_accessor :vacation_thru

    attr_accessor :waiting_period

    attr_accessor :waiting_period_ex_code

    attr_accessor :waive_waiting_period

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_number' => :'batch_Number',
        :'admit_date' => :'admit_Date',
        :'apply_extension' => :'apply_Extension',
        :'apply_extension_ex_code' => :'apply_Extension_Ex_Code',
        :'attended_physician' => :'attended_Physician',
        :'birth_date' => :'birth_Date',
        :'closure_effective_date' => :'closure_Effective_Date',
        :'delivery_date' => :'delivery_Date',
        :'delivery_type' => :'delivery_Type',
        :'dep_ssdi_end_date' => :'dep_SSDI_End_Date',
        :'description' => :'description',
        :'diagnostic_code1' => :'diagnostic_Code1',
        :'diagnostic_code2' => :'diagnostic_Code2',
        :'diagnostic_code_type' => :'diagnostic_Code_Type',
        :'disability_pay_through_day' => :'disability_Pay_Through_Day',
        :'disability_type' => :'disability_Type',
        :'disabled_by_physician' => :'disabled_By_Physician',
        :'discharge_date' => :'discharge_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'exceed_max' => :'exceed_Max',
        :'exhaust_date' => :'exhaust_Date',
        :'expected_typical_duration' => :'expected_Typical_Duration',
        :'fic_a_percent' => :'ficA_Percent',
        :'federal_withheld' => :'federal_Withheld',
        :'followup_date' => :'followup_Date',
        :'followup_ex_code' => :'followup_Ex_Code',
        :'group_id' => :'group_ID',
        :'image_number_1' => :'image_Number_1',
        :'image_number_2' => :'image_Number_2',
        :'image_number_3' => :'image_Number_3',
        :'image_number_4' => :'image_Number_4',
        :'include_return_to_work' => :'include_Return_To_Work',
        :'include_waiting_period' => :'include_Waiting_Period',
        :'include_waiting_period_in_max' => :'include_Waiting_Period_In_Max',
        :'job_type' => :'job_Type',
        :'lt_d_effective_date' => :'ltD_Effective_Date',
        :'lt_d_packet_date' => :'ltD_Packet_Date',
        :'last_day_worked' => :'last_Day_Worked',
        :'last_physician_warrant_date' => :'last_Physician_Warrant_Date',
        :'liability_injury' => :'liability_Injury',
        :'mail_to' => :'mail_To',
        :'max_disability_days' => :'max_Disability_Days',
        :'member_seq' => :'member_Seq',
        :'overpayment_deduction' => :'overpayment_Deduction',
        :'overpayment_ex_code' => :'overpayment_Ex_Code',
        :'overpayment_total' => :'overpayment_Total',
        :'partial_disability' => :'partial_Disability',
        :'pay_to' => :'pay_To',
        :'payment_days' => :'payment_Days',
        :'payment_duration' => :'payment_Duration',
        :'physician_return_to_work' => :'physician_Return_To_Work',
        :'plan_id' => :'plan_ID',
        :'plan_type' => :'plan_Type',
        :'plan_type_ltd' => :'plan_Type_LTD',
        :'received_date' => :'received_Date',
        :'return_to_work' => :'return_To_Work',
        :'rollup_waiting_period' => :'rollup_Waiting_Period',
        :'scd' => :'scd',
        :'salary_cont_ex_code' => :'salary_Cont_Ex_Code',
        :'salary_cont_from' => :'salary_Cont_From',
        :'salary_cont_paid' => :'salary_Cont_Paid',
        :'salary_cont_thru' => :'salary_Cont_Thru',
        :'sick_time_ex_code' => :'sick_Time_Ex_Code',
        :'sick_time_from' => :'sick_Time_From',
        :'sick_time_paid' => :'sick_Time_Paid',
        :'sick_time_thru' => :'sick_Time_Thru',
        :'state_withheld' => :'state_Withheld',
        :'subscriber_id' => :'subscriber_ID',
        :'type_of_surgery' => :'type_Of_Surgery',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'vacation_ex_code' => :'vacation_Ex_Code',
        :'vacation_from' => :'vacation_From',
        :'vacation_paid' => :'vacation_Paid',
        :'vacation_thru' => :'vacation_Thru',
        :'waiting_period' => :'waiting_Period',
        :'waiting_period_ex_code' => :'waiting_Period_Ex_Code',
        :'waive_waiting_period' => :'waive_Waiting_Period'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_number' => :'Integer',
        :'admit_date' => :'Time',
        :'apply_extension' => :'Integer',
        :'apply_extension_ex_code' => :'String',
        :'attended_physician' => :'Time',
        :'birth_date' => :'Time',
        :'closure_effective_date' => :'Time',
        :'delivery_date' => :'Time',
        :'delivery_type' => :'String',
        :'dep_ssdi_end_date' => :'Time',
        :'description' => :'String',
        :'diagnostic_code1' => :'String',
        :'diagnostic_code2' => :'String',
        :'diagnostic_code_type' => :'String',
        :'disability_pay_through_day' => :'Integer',
        :'disability_type' => :'String',
        :'disabled_by_physician' => :'Time',
        :'discharge_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'exceed_max' => :'Boolean',
        :'exhaust_date' => :'Time',
        :'expected_typical_duration' => :'Integer',
        :'fic_a_percent' => :'Float',
        :'federal_withheld' => :'Float',
        :'followup_date' => :'Time',
        :'followup_ex_code' => :'String',
        :'group_id' => :'String',
        :'image_number_1' => :'String',
        :'image_number_2' => :'String',
        :'image_number_3' => :'String',
        :'image_number_4' => :'String',
        :'include_return_to_work' => :'Boolean',
        :'include_waiting_period' => :'Boolean',
        :'include_waiting_period_in_max' => :'Boolean',
        :'job_type' => :'String',
        :'lt_d_effective_date' => :'Time',
        :'lt_d_packet_date' => :'Time',
        :'last_day_worked' => :'Time',
        :'last_physician_warrant_date' => :'Time',
        :'liability_injury' => :'Integer',
        :'mail_to' => :'String',
        :'max_disability_days' => :'Integer',
        :'member_seq' => :'String',
        :'overpayment_deduction' => :'Float',
        :'overpayment_ex_code' => :'String',
        :'overpayment_total' => :'Float',
        :'partial_disability' => :'Boolean',
        :'pay_to' => :'String',
        :'payment_days' => :'Integer',
        :'payment_duration' => :'Integer',
        :'physician_return_to_work' => :'Time',
        :'plan_id' => :'String',
        :'plan_type' => :'String',
        :'plan_type_ltd' => :'Boolean',
        :'received_date' => :'Time',
        :'return_to_work' => :'Time',
        :'rollup_waiting_period' => :'Boolean',
        :'scd' => :'Boolean',
        :'salary_cont_ex_code' => :'String',
        :'salary_cont_from' => :'Time',
        :'salary_cont_paid' => :'Boolean',
        :'salary_cont_thru' => :'Time',
        :'sick_time_ex_code' => :'String',
        :'sick_time_from' => :'Time',
        :'sick_time_paid' => :'Boolean',
        :'sick_time_thru' => :'Time',
        :'state_withheld' => :'Float',
        :'subscriber_id' => :'String',
        :'type_of_surgery' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'vacation_ex_code' => :'String',
        :'vacation_from' => :'Time',
        :'vacation_paid' => :'Boolean',
        :'vacation_thru' => :'Time',
        :'waiting_period' => :'Integer',
        :'waiting_period_ex_code' => :'String',
        :'waive_waiting_period' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'admit_date',
        :'apply_extension',
        :'apply_extension_ex_code',
        :'attended_physician',
        :'birth_date',
        :'closure_effective_date',
        :'delivery_date',
        :'delivery_type',
        :'dep_ssdi_end_date',
        :'description',
        :'diagnostic_code1',
        :'diagnostic_code2',
        :'diagnostic_code_type',
        :'disability_pay_through_day',
        :'disability_type',
        :'disabled_by_physician',
        :'discharge_date',
        :'entry_user',
        :'ex_code',
        :'exhaust_date',
        :'expected_typical_duration',
        :'fic_a_percent',
        :'federal_withheld',
        :'followup_date',
        :'followup_ex_code',
        :'group_id',
        :'image_number_1',
        :'image_number_2',
        :'image_number_3',
        :'image_number_4',
        :'job_type',
        :'lt_d_effective_date',
        :'lt_d_packet_date',
        :'last_day_worked',
        :'last_physician_warrant_date',
        :'liability_injury',
        :'mail_to',
        :'max_disability_days',
        :'member_seq',
        :'overpayment_deduction',
        :'overpayment_ex_code',
        :'overpayment_total',
        :'pay_to',
        :'payment_days',
        :'payment_duration',
        :'physician_return_to_work',
        :'plan_id',
        :'plan_type',
        :'received_date',
        :'return_to_work',
        :'salary_cont_ex_code',
        :'salary_cont_from',
        :'salary_cont_thru',
        :'sick_time_ex_code',
        :'sick_time_from',
        :'sick_time_thru',
        :'state_withheld',
        :'subscriber_id',
        :'type_of_surgery',
        :'update_user',
        :'vacation_ex_code',
        :'vacation_from',
        :'vacation_thru',
        :'waiting_period',
        :'waiting_period_ex_code',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimDisability` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimDisability`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'admit_date')
        self.admit_date = attributes[:'admit_date']
      end

      if attributes.key?(:'apply_extension')
        self.apply_extension = attributes[:'apply_extension']
      end

      if attributes.key?(:'apply_extension_ex_code')
        self.apply_extension_ex_code = attributes[:'apply_extension_ex_code']
      end

      if attributes.key?(:'attended_physician')
        self.attended_physician = attributes[:'attended_physician']
      end

      if attributes.key?(:'birth_date')
        self.birth_date = attributes[:'birth_date']
      end

      if attributes.key?(:'closure_effective_date')
        self.closure_effective_date = attributes[:'closure_effective_date']
      end

      if attributes.key?(:'delivery_date')
        self.delivery_date = attributes[:'delivery_date']
      end

      if attributes.key?(:'delivery_type')
        self.delivery_type = attributes[:'delivery_type']
      end

      if attributes.key?(:'dep_ssdi_end_date')
        self.dep_ssdi_end_date = attributes[:'dep_ssdi_end_date']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'diagnostic_code1')
        self.diagnostic_code1 = attributes[:'diagnostic_code1']
      end

      if attributes.key?(:'diagnostic_code2')
        self.diagnostic_code2 = attributes[:'diagnostic_code2']
      end

      if attributes.key?(:'diagnostic_code_type')
        self.diagnostic_code_type = attributes[:'diagnostic_code_type']
      end

      if attributes.key?(:'disability_pay_through_day')
        self.disability_pay_through_day = attributes[:'disability_pay_through_day']
      end

      if attributes.key?(:'disability_type')
        self.disability_type = attributes[:'disability_type']
      end

      if attributes.key?(:'disabled_by_physician')
        self.disabled_by_physician = attributes[:'disabled_by_physician']
      end

      if attributes.key?(:'discharge_date')
        self.discharge_date = attributes[:'discharge_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'exceed_max')
        self.exceed_max = attributes[:'exceed_max']
      else
        self.exceed_max = nil
      end

      if attributes.key?(:'exhaust_date')
        self.exhaust_date = attributes[:'exhaust_date']
      end

      if attributes.key?(:'expected_typical_duration')
        self.expected_typical_duration = attributes[:'expected_typical_duration']
      end

      if attributes.key?(:'fic_a_percent')
        self.fic_a_percent = attributes[:'fic_a_percent']
      end

      if attributes.key?(:'federal_withheld')
        self.federal_withheld = attributes[:'federal_withheld']
      end

      if attributes.key?(:'followup_date')
        self.followup_date = attributes[:'followup_date']
      end

      if attributes.key?(:'followup_ex_code')
        self.followup_ex_code = attributes[:'followup_ex_code']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'image_number_1')
        self.image_number_1 = attributes[:'image_number_1']
      end

      if attributes.key?(:'image_number_2')
        self.image_number_2 = attributes[:'image_number_2']
      end

      if attributes.key?(:'image_number_3')
        self.image_number_3 = attributes[:'image_number_3']
      end

      if attributes.key?(:'image_number_4')
        self.image_number_4 = attributes[:'image_number_4']
      end

      if attributes.key?(:'include_return_to_work')
        self.include_return_to_work = attributes[:'include_return_to_work']
      else
        self.include_return_to_work = nil
      end

      if attributes.key?(:'include_waiting_period')
        self.include_waiting_period = attributes[:'include_waiting_period']
      else
        self.include_waiting_period = nil
      end

      if attributes.key?(:'include_waiting_period_in_max')
        self.include_waiting_period_in_max = attributes[:'include_waiting_period_in_max']
      else
        self.include_waiting_period_in_max = nil
      end

      if attributes.key?(:'job_type')
        self.job_type = attributes[:'job_type']
      end

      if attributes.key?(:'lt_d_effective_date')
        self.lt_d_effective_date = attributes[:'lt_d_effective_date']
      end

      if attributes.key?(:'lt_d_packet_date')
        self.lt_d_packet_date = attributes[:'lt_d_packet_date']
      end

      if attributes.key?(:'last_day_worked')
        self.last_day_worked = attributes[:'last_day_worked']
      end

      if attributes.key?(:'last_physician_warrant_date')
        self.last_physician_warrant_date = attributes[:'last_physician_warrant_date']
      end

      if attributes.key?(:'liability_injury')
        self.liability_injury = attributes[:'liability_injury']
      end

      if attributes.key?(:'mail_to')
        self.mail_to = attributes[:'mail_to']
      end

      if attributes.key?(:'max_disability_days')
        self.max_disability_days = attributes[:'max_disability_days']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'overpayment_deduction')
        self.overpayment_deduction = attributes[:'overpayment_deduction']
      end

      if attributes.key?(:'overpayment_ex_code')
        self.overpayment_ex_code = attributes[:'overpayment_ex_code']
      end

      if attributes.key?(:'overpayment_total')
        self.overpayment_total = attributes[:'overpayment_total']
      end

      if attributes.key?(:'partial_disability')
        self.partial_disability = attributes[:'partial_disability']
      else
        self.partial_disability = nil
      end

      if attributes.key?(:'pay_to')
        self.pay_to = attributes[:'pay_to']
      end

      if attributes.key?(:'payment_days')
        self.payment_days = attributes[:'payment_days']
      end

      if attributes.key?(:'payment_duration')
        self.payment_duration = attributes[:'payment_duration']
      end

      if attributes.key?(:'physician_return_to_work')
        self.physician_return_to_work = attributes[:'physician_return_to_work']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'plan_type_ltd')
        self.plan_type_ltd = attributes[:'plan_type_ltd']
      else
        self.plan_type_ltd = nil
      end

      if attributes.key?(:'received_date')
        self.received_date = attributes[:'received_date']
      end

      if attributes.key?(:'return_to_work')
        self.return_to_work = attributes[:'return_to_work']
      end

      if attributes.key?(:'rollup_waiting_period')
        self.rollup_waiting_period = attributes[:'rollup_waiting_period']
      else
        self.rollup_waiting_period = nil
      end

      if attributes.key?(:'scd')
        self.scd = attributes[:'scd']
      else
        self.scd = nil
      end

      if attributes.key?(:'salary_cont_ex_code')
        self.salary_cont_ex_code = attributes[:'salary_cont_ex_code']
      end

      if attributes.key?(:'salary_cont_from')
        self.salary_cont_from = attributes[:'salary_cont_from']
      end

      if attributes.key?(:'salary_cont_paid')
        self.salary_cont_paid = attributes[:'salary_cont_paid']
      else
        self.salary_cont_paid = nil
      end

      if attributes.key?(:'salary_cont_thru')
        self.salary_cont_thru = attributes[:'salary_cont_thru']
      end

      if attributes.key?(:'sick_time_ex_code')
        self.sick_time_ex_code = attributes[:'sick_time_ex_code']
      end

      if attributes.key?(:'sick_time_from')
        self.sick_time_from = attributes[:'sick_time_from']
      end

      if attributes.key?(:'sick_time_paid')
        self.sick_time_paid = attributes[:'sick_time_paid']
      else
        self.sick_time_paid = nil
      end

      if attributes.key?(:'sick_time_thru')
        self.sick_time_thru = attributes[:'sick_time_thru']
      end

      if attributes.key?(:'state_withheld')
        self.state_withheld = attributes[:'state_withheld']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'type_of_surgery')
        self.type_of_surgery = attributes[:'type_of_surgery']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'vacation_ex_code')
        self.vacation_ex_code = attributes[:'vacation_ex_code']
      end

      if attributes.key?(:'vacation_from')
        self.vacation_from = attributes[:'vacation_from']
      end

      if attributes.key?(:'vacation_paid')
        self.vacation_paid = attributes[:'vacation_paid']
      else
        self.vacation_paid = nil
      end

      if attributes.key?(:'vacation_thru')
        self.vacation_thru = attributes[:'vacation_thru']
      end

      if attributes.key?(:'waiting_period')
        self.waiting_period = attributes[:'waiting_period']
      end

      if attributes.key?(:'waiting_period_ex_code')
        self.waiting_period_ex_code = attributes[:'waiting_period_ex_code']
      end

      if attributes.key?(:'waive_waiting_period')
        self.waive_waiting_period = attributes[:'waive_waiting_period']
      else
        self.waive_waiting_period = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if !@apply_extension_ex_code.nil? && @apply_extension_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "apply_extension_ex_code", the character length must be smaller than or equal to 8.')
      end

      if !@delivery_type.nil? && @delivery_type.to_s.length > 1
        invalid_properties.push('invalid value for "delivery_type", the character length must be smaller than or equal to 1.')
      end

      if !@description.nil? && @description.to_s.length > 512
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 512.')
      end

      if !@diagnostic_code1.nil? && @diagnostic_code1.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code1", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code2.nil? && @diagnostic_code2.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code2", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code_type.nil? && @diagnostic_code_type.to_s.length > 16
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.')
      end

      if !@disability_type.nil? && @disability_type.to_s.length > 1
        invalid_properties.push('invalid value for "disability_type", the character length must be smaller than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 8.')
      end

      if @exceed_max.nil?
        invalid_properties.push('invalid value for "exceed_max", exceed_max cannot be nil.')
      end

      if !@followup_ex_code.nil? && @followup_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "followup_ex_code", the character length must be smaller than or equal to 8.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@image_number_1.nil? && @image_number_1.to_s.length > 64
        invalid_properties.push('invalid value for "image_number_1", the character length must be smaller than or equal to 64.')
      end

      if !@image_number_2.nil? && @image_number_2.to_s.length > 64
        invalid_properties.push('invalid value for "image_number_2", the character length must be smaller than or equal to 64.')
      end

      if !@image_number_3.nil? && @image_number_3.to_s.length > 64
        invalid_properties.push('invalid value for "image_number_3", the character length must be smaller than or equal to 64.')
      end

      if !@image_number_4.nil? && @image_number_4.to_s.length > 64
        invalid_properties.push('invalid value for "image_number_4", the character length must be smaller than or equal to 64.')
      end

      if @include_return_to_work.nil?
        invalid_properties.push('invalid value for "include_return_to_work", include_return_to_work cannot be nil.')
      end

      if @include_waiting_period.nil?
        invalid_properties.push('invalid value for "include_waiting_period", include_waiting_period cannot be nil.')
      end

      if @include_waiting_period_in_max.nil?
        invalid_properties.push('invalid value for "include_waiting_period_in_max", include_waiting_period_in_max cannot be nil.')
      end

      if !@job_type.nil? && @job_type.to_s.length > 6
        invalid_properties.push('invalid value for "job_type", the character length must be smaller than or equal to 6.')
      end

      if !@mail_to.nil? && @mail_to.to_s.length > 1
        invalid_properties.push('invalid value for "mail_to", the character length must be smaller than or equal to 1.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@overpayment_ex_code.nil? && @overpayment_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "overpayment_ex_code", the character length must be smaller than or equal to 8.')
      end

      if @partial_disability.nil?
        invalid_properties.push('invalid value for "partial_disability", partial_disability cannot be nil.')
      end

      if !@pay_to.nil? && @pay_to.to_s.length > 1
        invalid_properties.push('invalid value for "pay_to", the character length must be smaller than or equal to 1.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_type.nil? && @plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "plan_type", the character length must be smaller than or equal to 6.')
      end

      if @plan_type_ltd.nil?
        invalid_properties.push('invalid value for "plan_type_ltd", plan_type_ltd cannot be nil.')
      end

      if @rollup_waiting_period.nil?
        invalid_properties.push('invalid value for "rollup_waiting_period", rollup_waiting_period cannot be nil.')
      end

      if @scd.nil?
        invalid_properties.push('invalid value for "scd", scd cannot be nil.')
      end

      if !@salary_cont_ex_code.nil? && @salary_cont_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "salary_cont_ex_code", the character length must be smaller than or equal to 8.')
      end

      if @salary_cont_paid.nil?
        invalid_properties.push('invalid value for "salary_cont_paid", salary_cont_paid cannot be nil.')
      end

      if !@sick_time_ex_code.nil? && @sick_time_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "sick_time_ex_code", the character length must be smaller than or equal to 8.')
      end

      if @sick_time_paid.nil?
        invalid_properties.push('invalid value for "sick_time_paid", sick_time_paid cannot be nil.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 20
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 20.')
      end

      if !@type_of_surgery.nil? && @type_of_surgery.to_s.length > 6
        invalid_properties.push('invalid value for "type_of_surgery", the character length must be smaller than or equal to 6.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@vacation_ex_code.nil? && @vacation_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "vacation_ex_code", the character length must be smaller than or equal to 8.')
      end

      if @vacation_paid.nil?
        invalid_properties.push('invalid value for "vacation_paid", vacation_paid cannot be nil.')
      end

      if !@waiting_period_ex_code.nil? && @waiting_period_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "waiting_period_ex_code", the character length must be smaller than or equal to 8.')
      end

      if @waive_waiting_period.nil?
        invalid_properties.push('invalid value for "waive_waiting_period", waive_waiting_period cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @batch_number.nil?
      return false if !@apply_extension_ex_code.nil? && @apply_extension_ex_code.to_s.length > 8
      return false if !@delivery_type.nil? && @delivery_type.to_s.length > 1
      return false if !@description.nil? && @description.to_s.length > 512
      return false if !@diagnostic_code1.nil? && @diagnostic_code1.to_s.length > 8
      return false if !@diagnostic_code2.nil? && @diagnostic_code2.to_s.length > 8
      return false if !@diagnostic_code_type.nil? && @diagnostic_code_type.to_s.length > 16
      return false if !@disability_type.nil? && @disability_type.to_s.length > 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 8
      return false if @exceed_max.nil?
      return false if !@followup_ex_code.nil? && @followup_ex_code.to_s.length > 8
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@image_number_1.nil? && @image_number_1.to_s.length > 64
      return false if !@image_number_2.nil? && @image_number_2.to_s.length > 64
      return false if !@image_number_3.nil? && @image_number_3.to_s.length > 64
      return false if !@image_number_4.nil? && @image_number_4.to_s.length > 64
      return false if @include_return_to_work.nil?
      return false if @include_waiting_period.nil?
      return false if @include_waiting_period_in_max.nil?
      return false if !@job_type.nil? && @job_type.to_s.length > 6
      return false if !@mail_to.nil? && @mail_to.to_s.length > 1
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@overpayment_ex_code.nil? && @overpayment_ex_code.to_s.length > 8
      return false if @partial_disability.nil?
      return false if !@pay_to.nil? && @pay_to.to_s.length > 1
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@plan_type.nil? && @plan_type.to_s.length > 6
      return false if @plan_type_ltd.nil?
      return false if @rollup_waiting_period.nil?
      return false if @scd.nil?
      return false if !@salary_cont_ex_code.nil? && @salary_cont_ex_code.to_s.length > 8
      return false if @salary_cont_paid.nil?
      return false if !@sick_time_ex_code.nil? && @sick_time_ex_code.to_s.length > 8
      return false if @sick_time_paid.nil?
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 20
      return false if !@type_of_surgery.nil? && @type_of_surgery.to_s.length > 6
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@vacation_ex_code.nil? && @vacation_ex_code.to_s.length > 8
      return false if @vacation_paid.nil?
      return false if !@waiting_period_ex_code.nil? && @waiting_period_ex_code.to_s.length > 8
      return false if @waive_waiting_period.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_extension_ex_code Value to be assigned
    def apply_extension_ex_code=(apply_extension_ex_code)
      if !apply_extension_ex_code.nil? && apply_extension_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "apply_extension_ex_code", the character length must be smaller than or equal to 8.'
      end

      @apply_extension_ex_code = apply_extension_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_type Value to be assigned
    def delivery_type=(delivery_type)
      if !delivery_type.nil? && delivery_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "delivery_type", the character length must be smaller than or equal to 1.'
      end

      @delivery_type = delivery_type
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 512
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 512.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code1 Value to be assigned
    def diagnostic_code1=(diagnostic_code1)
      if !diagnostic_code1.nil? && diagnostic_code1.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code1", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code1 = diagnostic_code1
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code2 Value to be assigned
    def diagnostic_code2=(diagnostic_code2)
      if !diagnostic_code2.nil? && diagnostic_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code2", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code2 = diagnostic_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code_type Value to be assigned
    def diagnostic_code_type=(diagnostic_code_type)
      if !diagnostic_code_type.nil? && diagnostic_code_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.'
      end

      @diagnostic_code_type = diagnostic_code_type
    end

    # Custom attribute writer method with validation
    # @param [Object] disability_type Value to be assigned
    def disability_type=(disability_type)
      if !disability_type.nil? && disability_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "disability_type", the character length must be smaller than or equal to 1.'
      end

      @disability_type = disability_type
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 8.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] exceed_max Value to be assigned
    def exceed_max=(exceed_max)
      if exceed_max.nil?
        fail ArgumentError, 'exceed_max cannot be nil'
      end

      @exceed_max = exceed_max
    end

    # Custom attribute writer method with validation
    # @param [Object] followup_ex_code Value to be assigned
    def followup_ex_code=(followup_ex_code)
      if !followup_ex_code.nil? && followup_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "followup_ex_code", the character length must be smaller than or equal to 8.'
      end

      @followup_ex_code = followup_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] image_number_1 Value to be assigned
    def image_number_1=(image_number_1)
      if !image_number_1.nil? && image_number_1.to_s.length > 64
        fail ArgumentError, 'invalid value for "image_number_1", the character length must be smaller than or equal to 64.'
      end

      @image_number_1 = image_number_1
    end

    # Custom attribute writer method with validation
    # @param [Object] image_number_2 Value to be assigned
    def image_number_2=(image_number_2)
      if !image_number_2.nil? && image_number_2.to_s.length > 64
        fail ArgumentError, 'invalid value for "image_number_2", the character length must be smaller than or equal to 64.'
      end

      @image_number_2 = image_number_2
    end

    # Custom attribute writer method with validation
    # @param [Object] image_number_3 Value to be assigned
    def image_number_3=(image_number_3)
      if !image_number_3.nil? && image_number_3.to_s.length > 64
        fail ArgumentError, 'invalid value for "image_number_3", the character length must be smaller than or equal to 64.'
      end

      @image_number_3 = image_number_3
    end

    # Custom attribute writer method with validation
    # @param [Object] image_number_4 Value to be assigned
    def image_number_4=(image_number_4)
      if !image_number_4.nil? && image_number_4.to_s.length > 64
        fail ArgumentError, 'invalid value for "image_number_4", the character length must be smaller than or equal to 64.'
      end

      @image_number_4 = image_number_4
    end

    # Custom attribute writer method with validation
    # @param [Object] include_return_to_work Value to be assigned
    def include_return_to_work=(include_return_to_work)
      if include_return_to_work.nil?
        fail ArgumentError, 'include_return_to_work cannot be nil'
      end

      @include_return_to_work = include_return_to_work
    end

    # Custom attribute writer method with validation
    # @param [Object] include_waiting_period Value to be assigned
    def include_waiting_period=(include_waiting_period)
      if include_waiting_period.nil?
        fail ArgumentError, 'include_waiting_period cannot be nil'
      end

      @include_waiting_period = include_waiting_period
    end

    # Custom attribute writer method with validation
    # @param [Object] include_waiting_period_in_max Value to be assigned
    def include_waiting_period_in_max=(include_waiting_period_in_max)
      if include_waiting_period_in_max.nil?
        fail ArgumentError, 'include_waiting_period_in_max cannot be nil'
      end

      @include_waiting_period_in_max = include_waiting_period_in_max
    end

    # Custom attribute writer method with validation
    # @param [Object] job_type Value to be assigned
    def job_type=(job_type)
      if !job_type.nil? && job_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "job_type", the character length must be smaller than or equal to 6.'
      end

      @job_type = job_type
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_to Value to be assigned
    def mail_to=(mail_to)
      if !mail_to.nil? && mail_to.to_s.length > 1
        fail ArgumentError, 'invalid value for "mail_to", the character length must be smaller than or equal to 1.'
      end

      @mail_to = mail_to
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] overpayment_ex_code Value to be assigned
    def overpayment_ex_code=(overpayment_ex_code)
      if !overpayment_ex_code.nil? && overpayment_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "overpayment_ex_code", the character length must be smaller than or equal to 8.'
      end

      @overpayment_ex_code = overpayment_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_disability Value to be assigned
    def partial_disability=(partial_disability)
      if partial_disability.nil?
        fail ArgumentError, 'partial_disability cannot be nil'
      end

      @partial_disability = partial_disability
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to Value to be assigned
    def pay_to=(pay_to)
      if !pay_to.nil? && pay_to.to_s.length > 1
        fail ArgumentError, 'invalid value for "pay_to", the character length must be smaller than or equal to 1.'
      end

      @pay_to = pay_to
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type Value to be assigned
    def plan_type=(plan_type)
      if !plan_type.nil? && plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "plan_type", the character length must be smaller than or equal to 6.'
      end

      @plan_type = plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type_ltd Value to be assigned
    def plan_type_ltd=(plan_type_ltd)
      if plan_type_ltd.nil?
        fail ArgumentError, 'plan_type_ltd cannot be nil'
      end

      @plan_type_ltd = plan_type_ltd
    end

    # Custom attribute writer method with validation
    # @param [Object] rollup_waiting_period Value to be assigned
    def rollup_waiting_period=(rollup_waiting_period)
      if rollup_waiting_period.nil?
        fail ArgumentError, 'rollup_waiting_period cannot be nil'
      end

      @rollup_waiting_period = rollup_waiting_period
    end

    # Custom attribute writer method with validation
    # @param [Object] scd Value to be assigned
    def scd=(scd)
      if scd.nil?
        fail ArgumentError, 'scd cannot be nil'
      end

      @scd = scd
    end

    # Custom attribute writer method with validation
    # @param [Object] salary_cont_ex_code Value to be assigned
    def salary_cont_ex_code=(salary_cont_ex_code)
      if !salary_cont_ex_code.nil? && salary_cont_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "salary_cont_ex_code", the character length must be smaller than or equal to 8.'
      end

      @salary_cont_ex_code = salary_cont_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] salary_cont_paid Value to be assigned
    def salary_cont_paid=(salary_cont_paid)
      if salary_cont_paid.nil?
        fail ArgumentError, 'salary_cont_paid cannot be nil'
      end

      @salary_cont_paid = salary_cont_paid
    end

    # Custom attribute writer method with validation
    # @param [Object] sick_time_ex_code Value to be assigned
    def sick_time_ex_code=(sick_time_ex_code)
      if !sick_time_ex_code.nil? && sick_time_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "sick_time_ex_code", the character length must be smaller than or equal to 8.'
      end

      @sick_time_ex_code = sick_time_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] sick_time_paid Value to be assigned
    def sick_time_paid=(sick_time_paid)
      if sick_time_paid.nil?
        fail ArgumentError, 'sick_time_paid cannot be nil'
      end

      @sick_time_paid = sick_time_paid
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 20.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] type_of_surgery Value to be assigned
    def type_of_surgery=(type_of_surgery)
      if !type_of_surgery.nil? && type_of_surgery.to_s.length > 6
        fail ArgumentError, 'invalid value for "type_of_surgery", the character length must be smaller than or equal to 6.'
      end

      @type_of_surgery = type_of_surgery
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] vacation_ex_code Value to be assigned
    def vacation_ex_code=(vacation_ex_code)
      if !vacation_ex_code.nil? && vacation_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "vacation_ex_code", the character length must be smaller than or equal to 8.'
      end

      @vacation_ex_code = vacation_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] vacation_paid Value to be assigned
    def vacation_paid=(vacation_paid)
      if vacation_paid.nil?
        fail ArgumentError, 'vacation_paid cannot be nil'
      end

      @vacation_paid = vacation_paid
    end

    # Custom attribute writer method with validation
    # @param [Object] waiting_period_ex_code Value to be assigned
    def waiting_period_ex_code=(waiting_period_ex_code)
      if !waiting_period_ex_code.nil? && waiting_period_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "waiting_period_ex_code", the character length must be smaller than or equal to 8.'
      end

      @waiting_period_ex_code = waiting_period_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] waive_waiting_period Value to be assigned
    def waive_waiting_period=(waive_waiting_period)
      if waive_waiting_period.nil?
        fail ArgumentError, 'waive_waiting_period cannot be nil'
      end

      @waive_waiting_period = waive_waiting_period
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_number == o.batch_number &&
          admit_date == o.admit_date &&
          apply_extension == o.apply_extension &&
          apply_extension_ex_code == o.apply_extension_ex_code &&
          attended_physician == o.attended_physician &&
          birth_date == o.birth_date &&
          closure_effective_date == o.closure_effective_date &&
          delivery_date == o.delivery_date &&
          delivery_type == o.delivery_type &&
          dep_ssdi_end_date == o.dep_ssdi_end_date &&
          description == o.description &&
          diagnostic_code1 == o.diagnostic_code1 &&
          diagnostic_code2 == o.diagnostic_code2 &&
          diagnostic_code_type == o.diagnostic_code_type &&
          disability_pay_through_day == o.disability_pay_through_day &&
          disability_type == o.disability_type &&
          disabled_by_physician == o.disabled_by_physician &&
          discharge_date == o.discharge_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          exceed_max == o.exceed_max &&
          exhaust_date == o.exhaust_date &&
          expected_typical_duration == o.expected_typical_duration &&
          fic_a_percent == o.fic_a_percent &&
          federal_withheld == o.federal_withheld &&
          followup_date == o.followup_date &&
          followup_ex_code == o.followup_ex_code &&
          group_id == o.group_id &&
          image_number_1 == o.image_number_1 &&
          image_number_2 == o.image_number_2 &&
          image_number_3 == o.image_number_3 &&
          image_number_4 == o.image_number_4 &&
          include_return_to_work == o.include_return_to_work &&
          include_waiting_period == o.include_waiting_period &&
          include_waiting_period_in_max == o.include_waiting_period_in_max &&
          job_type == o.job_type &&
          lt_d_effective_date == o.lt_d_effective_date &&
          lt_d_packet_date == o.lt_d_packet_date &&
          last_day_worked == o.last_day_worked &&
          last_physician_warrant_date == o.last_physician_warrant_date &&
          liability_injury == o.liability_injury &&
          mail_to == o.mail_to &&
          max_disability_days == o.max_disability_days &&
          member_seq == o.member_seq &&
          overpayment_deduction == o.overpayment_deduction &&
          overpayment_ex_code == o.overpayment_ex_code &&
          overpayment_total == o.overpayment_total &&
          partial_disability == o.partial_disability &&
          pay_to == o.pay_to &&
          payment_days == o.payment_days &&
          payment_duration == o.payment_duration &&
          physician_return_to_work == o.physician_return_to_work &&
          plan_id == o.plan_id &&
          plan_type == o.plan_type &&
          plan_type_ltd == o.plan_type_ltd &&
          received_date == o.received_date &&
          return_to_work == o.return_to_work &&
          rollup_waiting_period == o.rollup_waiting_period &&
          scd == o.scd &&
          salary_cont_ex_code == o.salary_cont_ex_code &&
          salary_cont_from == o.salary_cont_from &&
          salary_cont_paid == o.salary_cont_paid &&
          salary_cont_thru == o.salary_cont_thru &&
          sick_time_ex_code == o.sick_time_ex_code &&
          sick_time_from == o.sick_time_from &&
          sick_time_paid == o.sick_time_paid &&
          sick_time_thru == o.sick_time_thru &&
          state_withheld == o.state_withheld &&
          subscriber_id == o.subscriber_id &&
          type_of_surgery == o.type_of_surgery &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          vacation_ex_code == o.vacation_ex_code &&
          vacation_from == o.vacation_from &&
          vacation_paid == o.vacation_paid &&
          vacation_thru == o.vacation_thru &&
          waiting_period == o.waiting_period &&
          waiting_period_ex_code == o.waiting_period_ex_code &&
          waive_waiting_period == o.waive_waiting_period
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_number, admit_date, apply_extension, apply_extension_ex_code, attended_physician, birth_date, closure_effective_date, delivery_date, delivery_type, dep_ssdi_end_date, description, diagnostic_code1, diagnostic_code2, diagnostic_code_type, disability_pay_through_day, disability_type, disabled_by_physician, discharge_date, entry_date, entry_user, ex_code, exceed_max, exhaust_date, expected_typical_duration, fic_a_percent, federal_withheld, followup_date, followup_ex_code, group_id, image_number_1, image_number_2, image_number_3, image_number_4, include_return_to_work, include_waiting_period, include_waiting_period_in_max, job_type, lt_d_effective_date, lt_d_packet_date, last_day_worked, last_physician_warrant_date, liability_injury, mail_to, max_disability_days, member_seq, overpayment_deduction, overpayment_ex_code, overpayment_total, partial_disability, pay_to, payment_days, payment_duration, physician_return_to_work, plan_id, plan_type, plan_type_ltd, received_date, return_to_work, rollup_waiting_period, scd, salary_cont_ex_code, salary_cont_from, salary_cont_paid, salary_cont_thru, sick_time_ex_code, sick_time_from, sick_time_paid, sick_time_thru, state_withheld, subscriber_id, type_of_surgery, update_date, update_user, vacation_ex_code, vacation_from, vacation_paid, vacation_thru, waiting_period, waiting_period_ex_code, waive_waiting_period].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
