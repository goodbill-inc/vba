=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ProviderRate
    # Unique identifier for each Rate setting.
    attr_accessor :provider_rate_key

    # Indicates that this line is added onto an existing ‘DRG’ rate.
    attr_accessor :add_on_rate_drg

    # Indicates that this line is added onto an existing ‘Per Diem’ rate.
    attr_accessor :add_on_rate_per_diem

    # Start of the range of acceptable service dates for the rate line.
    attr_accessor :effective_date

    # End of the range of acceptable service dates for the rate line.
    attr_accessor :end_date

    # Ex code associated with the price line.
    attr_accessor :ex_code

    # Indicates whether the associated rate is applied to inpatient services.
    attr_accessor :inpatient

    # Indicates whether the associated rate is applied to outpatient services.
    attr_accessor :outpatient

    # No longer in use.
    attr_accessor :percent_type

    # Unique idenfitier assigned to the Proivider record.
    attr_accessor :provider_id

    # Rate used in price calculations.
    attr_accessor :rate

    # Tells the system to read the rate as a percentage instead of flat rate.
    attr_accessor :rate_percent

    # Determines how the selected rate is applied: Per Service Line – applies the associated rate to each service line that matches the defined criteria. All Service Lines – if any line within a claim matches the criteria, the associated rate is applied to ALL service lines on the claim. Per Unit – multiplies the rate by the number of units on the matching service line. Case Rate – treats the entire claim like a case. The ‘Case Rate’ is applied to an available matching line, and all other service lines are repriced to zero dollars. Only ONE ‘Case Rate’ is allowed per claim. If multiple service lines match a ‘Case Rate’, the claim will error. ASC Grouper – treats the entire claim like case. The ‘ASC Grouper Rate’ is applied to ALL available matching lines, and all other service lines are repriced to zero dollars. This rate is like ‘Case Rate’, but it allows the matching of multiple service lines.
    attr_accessor :rate_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_rate_key' => :'providerRate_Key',
        :'add_on_rate_drg' => :'addOnRateDRG',
        :'add_on_rate_per_diem' => :'addOnRatePerDiem',
        :'effective_date' => :'effective_Date',
        :'end_date' => :'end_Date',
        :'ex_code' => :'ex_Code',
        :'inpatient' => :'inpatient',
        :'outpatient' => :'outpatient',
        :'percent_type' => :'percent_Type',
        :'provider_id' => :'provider_ID',
        :'rate' => :'rate',
        :'rate_percent' => :'rate_Percent',
        :'rate_type' => :'rate_Type'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_rate_key' => :'Integer',
        :'add_on_rate_drg' => :'Boolean',
        :'add_on_rate_per_diem' => :'Boolean',
        :'effective_date' => :'Time',
        :'end_date' => :'Time',
        :'ex_code' => :'String',
        :'inpatient' => :'Boolean',
        :'outpatient' => :'Boolean',
        :'percent_type' => :'String',
        :'provider_id' => :'String',
        :'rate' => :'Float',
        :'rate_percent' => :'Boolean',
        :'rate_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'effective_date',
        :'end_date',
        :'ex_code',
        :'percent_type',
        :'rate',
        :'rate_type'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ProviderRate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ProviderRate`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_rate_key')
        self.provider_rate_key = attributes[:'provider_rate_key']
      else
        self.provider_rate_key = nil
      end

      if attributes.key?(:'add_on_rate_drg')
        self.add_on_rate_drg = attributes[:'add_on_rate_drg']
      else
        self.add_on_rate_drg = nil
      end

      if attributes.key?(:'add_on_rate_per_diem')
        self.add_on_rate_per_diem = attributes[:'add_on_rate_per_diem']
      else
        self.add_on_rate_per_diem = nil
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'inpatient')
        self.inpatient = attributes[:'inpatient']
      else
        self.inpatient = nil
      end

      if attributes.key?(:'outpatient')
        self.outpatient = attributes[:'outpatient']
      else
        self.outpatient = nil
      end

      if attributes.key?(:'percent_type')
        self.percent_type = attributes[:'percent_type']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      else
        self.provider_id = nil
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.key?(:'rate_percent')
        self.rate_percent = attributes[:'rate_percent']
      else
        self.rate_percent = nil
      end

      if attributes.key?(:'rate_type')
        self.rate_type = attributes[:'rate_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @provider_rate_key.nil?
        invalid_properties.push('invalid value for "provider_rate_key", provider_rate_key cannot be nil.')
      end

      if @add_on_rate_drg.nil?
        invalid_properties.push('invalid value for "add_on_rate_drg", add_on_rate_drg cannot be nil.')
      end

      if @add_on_rate_per_diem.nil?
        invalid_properties.push('invalid value for "add_on_rate_per_diem", add_on_rate_per_diem cannot be nil.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if @inpatient.nil?
        invalid_properties.push('invalid value for "inpatient", inpatient cannot be nil.')
      end

      if @outpatient.nil?
        invalid_properties.push('invalid value for "outpatient", outpatient cannot be nil.')
      end

      if !@percent_type.nil? && @percent_type.to_s.length > 1
        invalid_properties.push('invalid value for "percent_type", the character length must be smaller than or equal to 1.')
      end

      if @provider_id.nil?
        invalid_properties.push('invalid value for "provider_id", provider_id cannot be nil.')
      end

      if @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if @provider_id.to_s.length < 1
        invalid_properties.push('invalid value for "provider_id", the character length must be great than or equal to 1.')
      end

      if @rate_percent.nil?
        invalid_properties.push('invalid value for "rate_percent", rate_percent cannot be nil.')
      end

      if !@rate_type.nil? && @rate_type.to_s.length > 1
        invalid_properties.push('invalid value for "rate_type", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @provider_rate_key.nil?
      return false if @add_on_rate_drg.nil?
      return false if @add_on_rate_per_diem.nil?
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if @inpatient.nil?
      return false if @outpatient.nil?
      return false if !@percent_type.nil? && @percent_type.to_s.length > 1
      return false if @provider_id.nil?
      return false if @provider_id.to_s.length > 20
      return false if @provider_id.to_s.length < 1
      return false if @rate_percent.nil?
      return false if !@rate_type.nil? && @rate_type.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_rate_key Value to be assigned
    def provider_rate_key=(provider_rate_key)
      if provider_rate_key.nil?
        fail ArgumentError, 'provider_rate_key cannot be nil'
      end

      @provider_rate_key = provider_rate_key
    end

    # Custom attribute writer method with validation
    # @param [Object] add_on_rate_drg Value to be assigned
    def add_on_rate_drg=(add_on_rate_drg)
      if add_on_rate_drg.nil?
        fail ArgumentError, 'add_on_rate_drg cannot be nil'
      end

      @add_on_rate_drg = add_on_rate_drg
    end

    # Custom attribute writer method with validation
    # @param [Object] add_on_rate_per_diem Value to be assigned
    def add_on_rate_per_diem=(add_on_rate_per_diem)
      if add_on_rate_per_diem.nil?
        fail ArgumentError, 'add_on_rate_per_diem cannot be nil'
      end

      @add_on_rate_per_diem = add_on_rate_per_diem
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] inpatient Value to be assigned
    def inpatient=(inpatient)
      if inpatient.nil?
        fail ArgumentError, 'inpatient cannot be nil'
      end

      @inpatient = inpatient
    end

    # Custom attribute writer method with validation
    # @param [Object] outpatient Value to be assigned
    def outpatient=(outpatient)
      if outpatient.nil?
        fail ArgumentError, 'outpatient cannot be nil'
      end

      @outpatient = outpatient
    end

    # Custom attribute writer method with validation
    # @param [Object] percent_type Value to be assigned
    def percent_type=(percent_type)
      if !percent_type.nil? && percent_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "percent_type", the character length must be smaller than or equal to 1.'
      end

      @percent_type = percent_type
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if provider_id.nil?
        fail ArgumentError, 'provider_id cannot be nil'
      end

      if provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      if provider_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "provider_id", the character length must be great than or equal to 1.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_percent Value to be assigned
    def rate_percent=(rate_percent)
      if rate_percent.nil?
        fail ArgumentError, 'rate_percent cannot be nil'
      end

      @rate_percent = rate_percent
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_type Value to be assigned
    def rate_type=(rate_type)
      if !rate_type.nil? && rate_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "rate_type", the character length must be smaller than or equal to 1.'
      end

      @rate_type = rate_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_rate_key == o.provider_rate_key &&
          add_on_rate_drg == o.add_on_rate_drg &&
          add_on_rate_per_diem == o.add_on_rate_per_diem &&
          effective_date == o.effective_date &&
          end_date == o.end_date &&
          ex_code == o.ex_code &&
          inpatient == o.inpatient &&
          outpatient == o.outpatient &&
          percent_type == o.percent_type &&
          provider_id == o.provider_id &&
          rate == o.rate &&
          rate_percent == o.rate_percent &&
          rate_type == o.rate_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_rate_key, add_on_rate_drg, add_on_rate_per_diem, effective_date, end_date, ex_code, inpatient, outpatient, percent_type, provider_id, rate, rate_percent, rate_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
