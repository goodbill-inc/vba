=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ContactAssign
    attr_accessor :contact_assign_key

    attr_accessor :assign_priority

    attr_accessor :assign_type

    attr_accessor :contact_key

    attr_accessor :effective_date

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :key_column1

    attr_accessor :key_column2

    attr_accessor :key_column3

    attr_accessor :key_column4

    attr_accessor :key_column5

    attr_accessor :key_data_type1

    attr_accessor :key_data_type2

    attr_accessor :key_data_type3

    attr_accessor :key_data_type4

    attr_accessor :key_data_type5

    attr_accessor :key_value1

    attr_accessor :key_value2

    attr_accessor :key_value3

    attr_accessor :key_value4

    attr_accessor :key_value5

    attr_accessor :term_date

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'contact_assign_key' => :'contactAssign_Key',
        :'assign_priority' => :'assign_Priority',
        :'assign_type' => :'assign_Type',
        :'contact_key' => :'contact_Key',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'key_column1' => :'key_Column1',
        :'key_column2' => :'key_Column2',
        :'key_column3' => :'key_Column3',
        :'key_column4' => :'key_Column4',
        :'key_column5' => :'key_Column5',
        :'key_data_type1' => :'key_DataType1',
        :'key_data_type2' => :'key_DataType2',
        :'key_data_type3' => :'key_DataType3',
        :'key_data_type4' => :'key_DataType4',
        :'key_data_type5' => :'key_DataType5',
        :'key_value1' => :'key_Value1',
        :'key_value2' => :'key_Value2',
        :'key_value3' => :'key_Value3',
        :'key_value4' => :'key_Value4',
        :'key_value5' => :'key_Value5',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'contact_assign_key' => :'Integer',
        :'assign_priority' => :'Integer',
        :'assign_type' => :'String',
        :'contact_key' => :'Integer',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'key_column1' => :'String',
        :'key_column2' => :'String',
        :'key_column3' => :'String',
        :'key_column4' => :'String',
        :'key_column5' => :'String',
        :'key_data_type1' => :'String',
        :'key_data_type2' => :'String',
        :'key_data_type3' => :'String',
        :'key_data_type4' => :'String',
        :'key_data_type5' => :'String',
        :'key_value1' => :'String',
        :'key_value2' => :'String',
        :'key_value3' => :'String',
        :'key_value4' => :'String',
        :'key_value5' => :'String',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'assign_priority',
        :'effective_date',
        :'entry_user',
        :'key_column1',
        :'key_column2',
        :'key_column3',
        :'key_column4',
        :'key_column5',
        :'key_data_type1',
        :'key_data_type2',
        :'key_data_type3',
        :'key_data_type4',
        :'key_data_type5',
        :'key_value1',
        :'key_value2',
        :'key_value3',
        :'key_value4',
        :'key_value5',
        :'term_date',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ContactAssign` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ContactAssign`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'contact_assign_key')
        self.contact_assign_key = attributes[:'contact_assign_key']
      else
        self.contact_assign_key = nil
      end

      if attributes.key?(:'assign_priority')
        self.assign_priority = attributes[:'assign_priority']
      end

      if attributes.key?(:'assign_type')
        self.assign_type = attributes[:'assign_type']
      else
        self.assign_type = nil
      end

      if attributes.key?(:'contact_key')
        self.contact_key = attributes[:'contact_key']
      else
        self.contact_key = nil
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'key_column1')
        self.key_column1 = attributes[:'key_column1']
      end

      if attributes.key?(:'key_column2')
        self.key_column2 = attributes[:'key_column2']
      end

      if attributes.key?(:'key_column3')
        self.key_column3 = attributes[:'key_column3']
      end

      if attributes.key?(:'key_column4')
        self.key_column4 = attributes[:'key_column4']
      end

      if attributes.key?(:'key_column5')
        self.key_column5 = attributes[:'key_column5']
      end

      if attributes.key?(:'key_data_type1')
        self.key_data_type1 = attributes[:'key_data_type1']
      end

      if attributes.key?(:'key_data_type2')
        self.key_data_type2 = attributes[:'key_data_type2']
      end

      if attributes.key?(:'key_data_type3')
        self.key_data_type3 = attributes[:'key_data_type3']
      end

      if attributes.key?(:'key_data_type4')
        self.key_data_type4 = attributes[:'key_data_type4']
      end

      if attributes.key?(:'key_data_type5')
        self.key_data_type5 = attributes[:'key_data_type5']
      end

      if attributes.key?(:'key_value1')
        self.key_value1 = attributes[:'key_value1']
      end

      if attributes.key?(:'key_value2')
        self.key_value2 = attributes[:'key_value2']
      end

      if attributes.key?(:'key_value3')
        self.key_value3 = attributes[:'key_value3']
      end

      if attributes.key?(:'key_value4')
        self.key_value4 = attributes[:'key_value4']
      end

      if attributes.key?(:'key_value5')
        self.key_value5 = attributes[:'key_value5']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @contact_assign_key.nil?
        invalid_properties.push('invalid value for "contact_assign_key", contact_assign_key cannot be nil.')
      end

      if @assign_type.nil?
        invalid_properties.push('invalid value for "assign_type", assign_type cannot be nil.')
      end

      if @assign_type.to_s.length > 16
        invalid_properties.push('invalid value for "assign_type", the character length must be smaller than or equal to 16.')
      end

      if @assign_type.to_s.length < 1
        invalid_properties.push('invalid value for "assign_type", the character length must be great than or equal to 1.')
      end

      if @contact_key.nil?
        invalid_properties.push('invalid value for "contact_key", contact_key cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@key_column1.nil? && @key_column1.to_s.length > 128
        invalid_properties.push('invalid value for "key_column1", the character length must be smaller than or equal to 128.')
      end

      if !@key_column2.nil? && @key_column2.to_s.length > 128
        invalid_properties.push('invalid value for "key_column2", the character length must be smaller than or equal to 128.')
      end

      if !@key_column3.nil? && @key_column3.to_s.length > 128
        invalid_properties.push('invalid value for "key_column3", the character length must be smaller than or equal to 128.')
      end

      if !@key_column4.nil? && @key_column4.to_s.length > 128
        invalid_properties.push('invalid value for "key_column4", the character length must be smaller than or equal to 128.')
      end

      if !@key_column5.nil? && @key_column5.to_s.length > 128
        invalid_properties.push('invalid value for "key_column5", the character length must be smaller than or equal to 128.')
      end

      if !@key_data_type1.nil? && @key_data_type1.to_s.length > 32
        invalid_properties.push('invalid value for "key_data_type1", the character length must be smaller than or equal to 32.')
      end

      if !@key_data_type2.nil? && @key_data_type2.to_s.length > 32
        invalid_properties.push('invalid value for "key_data_type2", the character length must be smaller than or equal to 32.')
      end

      if !@key_data_type3.nil? && @key_data_type3.to_s.length > 32
        invalid_properties.push('invalid value for "key_data_type3", the character length must be smaller than or equal to 32.')
      end

      if !@key_data_type4.nil? && @key_data_type4.to_s.length > 32
        invalid_properties.push('invalid value for "key_data_type4", the character length must be smaller than or equal to 32.')
      end

      if !@key_data_type5.nil? && @key_data_type5.to_s.length > 32
        invalid_properties.push('invalid value for "key_data_type5", the character length must be smaller than or equal to 32.')
      end

      if !@key_value1.nil? && @key_value1.to_s.length > 128
        invalid_properties.push('invalid value for "key_value1", the character length must be smaller than or equal to 128.')
      end

      if !@key_value2.nil? && @key_value2.to_s.length > 128
        invalid_properties.push('invalid value for "key_value2", the character length must be smaller than or equal to 128.')
      end

      if !@key_value3.nil? && @key_value3.to_s.length > 128
        invalid_properties.push('invalid value for "key_value3", the character length must be smaller than or equal to 128.')
      end

      if !@key_value4.nil? && @key_value4.to_s.length > 128
        invalid_properties.push('invalid value for "key_value4", the character length must be smaller than or equal to 128.')
      end

      if !@key_value5.nil? && @key_value5.to_s.length > 128
        invalid_properties.push('invalid value for "key_value5", the character length must be smaller than or equal to 128.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @contact_assign_key.nil?
      return false if @assign_type.nil?
      return false if @assign_type.to_s.length > 16
      return false if @assign_type.to_s.length < 1
      return false if @contact_key.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@key_column1.nil? && @key_column1.to_s.length > 128
      return false if !@key_column2.nil? && @key_column2.to_s.length > 128
      return false if !@key_column3.nil? && @key_column3.to_s.length > 128
      return false if !@key_column4.nil? && @key_column4.to_s.length > 128
      return false if !@key_column5.nil? && @key_column5.to_s.length > 128
      return false if !@key_data_type1.nil? && @key_data_type1.to_s.length > 32
      return false if !@key_data_type2.nil? && @key_data_type2.to_s.length > 32
      return false if !@key_data_type3.nil? && @key_data_type3.to_s.length > 32
      return false if !@key_data_type4.nil? && @key_data_type4.to_s.length > 32
      return false if !@key_data_type5.nil? && @key_data_type5.to_s.length > 32
      return false if !@key_value1.nil? && @key_value1.to_s.length > 128
      return false if !@key_value2.nil? && @key_value2.to_s.length > 128
      return false if !@key_value3.nil? && @key_value3.to_s.length > 128
      return false if !@key_value4.nil? && @key_value4.to_s.length > 128
      return false if !@key_value5.nil? && @key_value5.to_s.length > 128
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_assign_key Value to be assigned
    def contact_assign_key=(contact_assign_key)
      if contact_assign_key.nil?
        fail ArgumentError, 'contact_assign_key cannot be nil'
      end

      @contact_assign_key = contact_assign_key
    end

    # Custom attribute writer method with validation
    # @param [Object] assign_type Value to be assigned
    def assign_type=(assign_type)
      if assign_type.nil?
        fail ArgumentError, 'assign_type cannot be nil'
      end

      if assign_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "assign_type", the character length must be smaller than or equal to 16.'
      end

      if assign_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "assign_type", the character length must be great than or equal to 1.'
      end

      @assign_type = assign_type
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_key Value to be assigned
    def contact_key=(contact_key)
      if contact_key.nil?
        fail ArgumentError, 'contact_key cannot be nil'
      end

      @contact_key = contact_key
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] key_column1 Value to be assigned
    def key_column1=(key_column1)
      if !key_column1.nil? && key_column1.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_column1", the character length must be smaller than or equal to 128.'
      end

      @key_column1 = key_column1
    end

    # Custom attribute writer method with validation
    # @param [Object] key_column2 Value to be assigned
    def key_column2=(key_column2)
      if !key_column2.nil? && key_column2.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_column2", the character length must be smaller than or equal to 128.'
      end

      @key_column2 = key_column2
    end

    # Custom attribute writer method with validation
    # @param [Object] key_column3 Value to be assigned
    def key_column3=(key_column3)
      if !key_column3.nil? && key_column3.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_column3", the character length must be smaller than or equal to 128.'
      end

      @key_column3 = key_column3
    end

    # Custom attribute writer method with validation
    # @param [Object] key_column4 Value to be assigned
    def key_column4=(key_column4)
      if !key_column4.nil? && key_column4.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_column4", the character length must be smaller than or equal to 128.'
      end

      @key_column4 = key_column4
    end

    # Custom attribute writer method with validation
    # @param [Object] key_column5 Value to be assigned
    def key_column5=(key_column5)
      if !key_column5.nil? && key_column5.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_column5", the character length must be smaller than or equal to 128.'
      end

      @key_column5 = key_column5
    end

    # Custom attribute writer method with validation
    # @param [Object] key_data_type1 Value to be assigned
    def key_data_type1=(key_data_type1)
      if !key_data_type1.nil? && key_data_type1.to_s.length > 32
        fail ArgumentError, 'invalid value for "key_data_type1", the character length must be smaller than or equal to 32.'
      end

      @key_data_type1 = key_data_type1
    end

    # Custom attribute writer method with validation
    # @param [Object] key_data_type2 Value to be assigned
    def key_data_type2=(key_data_type2)
      if !key_data_type2.nil? && key_data_type2.to_s.length > 32
        fail ArgumentError, 'invalid value for "key_data_type2", the character length must be smaller than or equal to 32.'
      end

      @key_data_type2 = key_data_type2
    end

    # Custom attribute writer method with validation
    # @param [Object] key_data_type3 Value to be assigned
    def key_data_type3=(key_data_type3)
      if !key_data_type3.nil? && key_data_type3.to_s.length > 32
        fail ArgumentError, 'invalid value for "key_data_type3", the character length must be smaller than or equal to 32.'
      end

      @key_data_type3 = key_data_type3
    end

    # Custom attribute writer method with validation
    # @param [Object] key_data_type4 Value to be assigned
    def key_data_type4=(key_data_type4)
      if !key_data_type4.nil? && key_data_type4.to_s.length > 32
        fail ArgumentError, 'invalid value for "key_data_type4", the character length must be smaller than or equal to 32.'
      end

      @key_data_type4 = key_data_type4
    end

    # Custom attribute writer method with validation
    # @param [Object] key_data_type5 Value to be assigned
    def key_data_type5=(key_data_type5)
      if !key_data_type5.nil? && key_data_type5.to_s.length > 32
        fail ArgumentError, 'invalid value for "key_data_type5", the character length must be smaller than or equal to 32.'
      end

      @key_data_type5 = key_data_type5
    end

    # Custom attribute writer method with validation
    # @param [Object] key_value1 Value to be assigned
    def key_value1=(key_value1)
      if !key_value1.nil? && key_value1.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_value1", the character length must be smaller than or equal to 128.'
      end

      @key_value1 = key_value1
    end

    # Custom attribute writer method with validation
    # @param [Object] key_value2 Value to be assigned
    def key_value2=(key_value2)
      if !key_value2.nil? && key_value2.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_value2", the character length must be smaller than or equal to 128.'
      end

      @key_value2 = key_value2
    end

    # Custom attribute writer method with validation
    # @param [Object] key_value3 Value to be assigned
    def key_value3=(key_value3)
      if !key_value3.nil? && key_value3.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_value3", the character length must be smaller than or equal to 128.'
      end

      @key_value3 = key_value3
    end

    # Custom attribute writer method with validation
    # @param [Object] key_value4 Value to be assigned
    def key_value4=(key_value4)
      if !key_value4.nil? && key_value4.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_value4", the character length must be smaller than or equal to 128.'
      end

      @key_value4 = key_value4
    end

    # Custom attribute writer method with validation
    # @param [Object] key_value5 Value to be assigned
    def key_value5=(key_value5)
      if !key_value5.nil? && key_value5.to_s.length > 128
        fail ArgumentError, 'invalid value for "key_value5", the character length must be smaller than or equal to 128.'
      end

      @key_value5 = key_value5
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          contact_assign_key == o.contact_assign_key &&
          assign_priority == o.assign_priority &&
          assign_type == o.assign_type &&
          contact_key == o.contact_key &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          key_column1 == o.key_column1 &&
          key_column2 == o.key_column2 &&
          key_column3 == o.key_column3 &&
          key_column4 == o.key_column4 &&
          key_column5 == o.key_column5 &&
          key_data_type1 == o.key_data_type1 &&
          key_data_type2 == o.key_data_type2 &&
          key_data_type3 == o.key_data_type3 &&
          key_data_type4 == o.key_data_type4 &&
          key_data_type5 == o.key_data_type5 &&
          key_value1 == o.key_value1 &&
          key_value2 == o.key_value2 &&
          key_value3 == o.key_value3 &&
          key_value4 == o.key_value4 &&
          key_value5 == o.key_value5 &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [contact_assign_key, assign_priority, assign_type, contact_key, effective_date, entry_date, entry_user, key_column1, key_column2, key_column3, key_column4, key_column5, key_data_type1, key_data_type2, key_data_type3, key_data_type4, key_data_type5, key_value1, key_value2, key_value3, key_value4, key_value5, term_date, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
