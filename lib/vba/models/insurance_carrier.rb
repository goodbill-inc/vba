=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class InsuranceCarrier
    attr_accessor :carrier_key

    attr_accessor :address

    attr_accessor :address2

    attr_accessor :co_b_carrier

    attr_accessor :carrier_id

    attr_accessor :carrier_type

    attr_accessor :city

    attr_accessor :contact_fax

    attr_accessor :contact_fax_country_code

    attr_accessor :contact_name

    attr_accessor :contact_phone

    attr_accessor :contact_phone_country_code

    attr_accessor :country_id

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :fax

    attr_accessor :fax_country_code

    attr_accessor :malpractice

    attr_accessor :medicare

    attr_accessor :name

    attr_accessor :over_spec_advance_fund

    attr_accessor :phone

    attr_accessor :phone_country_code

    attr_accessor :reinsurance

    attr_accessor :state

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :zip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'carrier_key' => :'carrier_Key',
        :'address' => :'address',
        :'address2' => :'address2',
        :'co_b_carrier' => :'coB_Carrier',
        :'carrier_id' => :'carrier_ID',
        :'carrier_type' => :'carrier_Type',
        :'city' => :'city',
        :'contact_fax' => :'contact_Fax',
        :'contact_fax_country_code' => :'contact_Fax_Country_Code',
        :'contact_name' => :'contact_Name',
        :'contact_phone' => :'contact_Phone',
        :'contact_phone_country_code' => :'contact_Phone_Country_Code',
        :'country_id' => :'country_ID',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'fax' => :'fax',
        :'fax_country_code' => :'fax_Country_Code',
        :'malpractice' => :'malpractice',
        :'medicare' => :'medicare',
        :'name' => :'name',
        :'over_spec_advance_fund' => :'over_Spec_Advance_Fund',
        :'phone' => :'phone',
        :'phone_country_code' => :'phone_Country_Code',
        :'reinsurance' => :'reinsurance',
        :'state' => :'state',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'zip' => :'zip'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'carrier_key' => :'Integer',
        :'address' => :'String',
        :'address2' => :'String',
        :'co_b_carrier' => :'String',
        :'carrier_id' => :'String',
        :'carrier_type' => :'String',
        :'city' => :'String',
        :'contact_fax' => :'String',
        :'contact_fax_country_code' => :'String',
        :'contact_name' => :'String',
        :'contact_phone' => :'String',
        :'contact_phone_country_code' => :'String',
        :'country_id' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'fax' => :'String',
        :'fax_country_code' => :'String',
        :'malpractice' => :'String',
        :'medicare' => :'Boolean',
        :'name' => :'String',
        :'over_spec_advance_fund' => :'Float',
        :'phone' => :'String',
        :'phone_country_code' => :'String',
        :'reinsurance' => :'String',
        :'state' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'zip' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address',
        :'address2',
        :'co_b_carrier',
        :'carrier_type',
        :'city',
        :'contact_fax',
        :'contact_fax_country_code',
        :'contact_name',
        :'contact_phone',
        :'contact_phone_country_code',
        :'country_id',
        :'entry_user',
        :'fax',
        :'fax_country_code',
        :'malpractice',
        :'medicare',
        :'name',
        :'over_spec_advance_fund',
        :'phone',
        :'phone_country_code',
        :'reinsurance',
        :'state',
        :'update_user',
        :'zip'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::InsuranceCarrier` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::InsuranceCarrier`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'carrier_key')
        self.carrier_key = attributes[:'carrier_key']
      else
        self.carrier_key = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'co_b_carrier')
        self.co_b_carrier = attributes[:'co_b_carrier']
      end

      if attributes.key?(:'carrier_id')
        self.carrier_id = attributes[:'carrier_id']
      else
        self.carrier_id = nil
      end

      if attributes.key?(:'carrier_type')
        self.carrier_type = attributes[:'carrier_type']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'contact_fax')
        self.contact_fax = attributes[:'contact_fax']
      end

      if attributes.key?(:'contact_fax_country_code')
        self.contact_fax_country_code = attributes[:'contact_fax_country_code']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_phone')
        self.contact_phone = attributes[:'contact_phone']
      end

      if attributes.key?(:'contact_phone_country_code')
        self.contact_phone_country_code = attributes[:'contact_phone_country_code']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'fax_country_code')
        self.fax_country_code = attributes[:'fax_country_code']
      end

      if attributes.key?(:'malpractice')
        self.malpractice = attributes[:'malpractice']
      end

      if attributes.key?(:'medicare')
        self.medicare = attributes[:'medicare']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'over_spec_advance_fund')
        self.over_spec_advance_fund = attributes[:'over_spec_advance_fund']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'reinsurance')
        self.reinsurance = attributes[:'reinsurance']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @carrier_key.nil?
        invalid_properties.push('invalid value for "carrier_key", carrier_key cannot be nil.')
      end

      if !@address.nil? && @address.to_s.length > 255
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 255.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if !@co_b_carrier.nil? && @co_b_carrier.to_s.length > 1
        invalid_properties.push('invalid value for "co_b_carrier", the character length must be smaller than or equal to 1.')
      end

      if @carrier_id.nil?
        invalid_properties.push('invalid value for "carrier_id", carrier_id cannot be nil.')
      end

      if @carrier_id.to_s.length > 16
        invalid_properties.push('invalid value for "carrier_id", the character length must be smaller than or equal to 16.')
      end

      if @carrier_id.to_s.length < 1
        invalid_properties.push('invalid value for "carrier_id", the character length must be great than or equal to 1.')
      end

      if !@carrier_type.nil? && @carrier_type.to_s.length > 6
        invalid_properties.push('invalid value for "carrier_type", the character length must be smaller than or equal to 6.')
      end

      if !@city.nil? && @city.to_s.length > 64
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 64.')
      end

      if !@contact_fax.nil? && @contact_fax.to_s.length > 32
        invalid_properties.push('invalid value for "contact_fax", the character length must be smaller than or equal to 32.')
      end

      if !@contact_fax_country_code.nil? && @contact_fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "contact_fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@contact_name.nil? && @contact_name.to_s.length > 64
        invalid_properties.push('invalid value for "contact_name", the character length must be smaller than or equal to 64.')
      end

      if !@contact_phone.nil? && @contact_phone.to_s.length > 32
        invalid_properties.push('invalid value for "contact_phone", the character length must be smaller than or equal to 32.')
      end

      if !@contact_phone_country_code.nil? && @contact_phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "contact_phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@fax.nil? && @fax.to_s.length > 32
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 32.')
      end

      if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@malpractice.nil? && @malpractice.to_s.length > 1
        invalid_properties.push('invalid value for "malpractice", the character length must be smaller than or equal to 1.')
      end

      if !@name.nil? && @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      if !@phone.nil? && @phone.to_s.length > 32
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 32.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@reinsurance.nil? && @reinsurance.to_s.length > 1
        invalid_properties.push('invalid value for "reinsurance", the character length must be smaller than or equal to 1.')
      end

      if !@state.nil? && @state.to_s.length > 32
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 32.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip.nil? && @zip.to_s.length > 32
        invalid_properties.push('invalid value for "zip", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @carrier_key.nil?
      return false if !@address.nil? && @address.to_s.length > 255
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if !@co_b_carrier.nil? && @co_b_carrier.to_s.length > 1
      return false if @carrier_id.nil?
      return false if @carrier_id.to_s.length > 16
      return false if @carrier_id.to_s.length < 1
      return false if !@carrier_type.nil? && @carrier_type.to_s.length > 6
      return false if !@city.nil? && @city.to_s.length > 64
      return false if !@contact_fax.nil? && @contact_fax.to_s.length > 32
      return false if !@contact_fax_country_code.nil? && @contact_fax_country_code.to_s.length > 8
      return false if !@contact_name.nil? && @contact_name.to_s.length > 64
      return false if !@contact_phone.nil? && @contact_phone.to_s.length > 32
      return false if !@contact_phone_country_code.nil? && @contact_phone_country_code.to_s.length > 8
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@fax.nil? && @fax.to_s.length > 32
      return false if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
      return false if !@malpractice.nil? && @malpractice.to_s.length > 1
      return false if !@name.nil? && @name.to_s.length > 64
      return false if !@phone.nil? && @phone.to_s.length > 32
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if !@reinsurance.nil? && @reinsurance.to_s.length > 1
      return false if !@state.nil? && @state.to_s.length > 32
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip.nil? && @zip.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_key Value to be assigned
    def carrier_key=(carrier_key)
      if carrier_key.nil?
        fail ArgumentError, 'carrier_key cannot be nil'
      end

      @carrier_key = carrier_key
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 255
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 255.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_carrier Value to be assigned
    def co_b_carrier=(co_b_carrier)
      if !co_b_carrier.nil? && co_b_carrier.to_s.length > 1
        fail ArgumentError, 'invalid value for "co_b_carrier", the character length must be smaller than or equal to 1.'
      end

      @co_b_carrier = co_b_carrier
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_id Value to be assigned
    def carrier_id=(carrier_id)
      if carrier_id.nil?
        fail ArgumentError, 'carrier_id cannot be nil'
      end

      if carrier_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "carrier_id", the character length must be smaller than or equal to 16.'
      end

      if carrier_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "carrier_id", the character length must be great than or equal to 1.'
      end

      @carrier_id = carrier_id
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_type Value to be assigned
    def carrier_type=(carrier_type)
      if !carrier_type.nil? && carrier_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "carrier_type", the character length must be smaller than or equal to 6.'
      end

      @carrier_type = carrier_type
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 64
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 64.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_fax Value to be assigned
    def contact_fax=(contact_fax)
      if !contact_fax.nil? && contact_fax.to_s.length > 32
        fail ArgumentError, 'invalid value for "contact_fax", the character length must be smaller than or equal to 32.'
      end

      @contact_fax = contact_fax
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_fax_country_code Value to be assigned
    def contact_fax_country_code=(contact_fax_country_code)
      if !contact_fax_country_code.nil? && contact_fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "contact_fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @contact_fax_country_code = contact_fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_name Value to be assigned
    def contact_name=(contact_name)
      if !contact_name.nil? && contact_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "contact_name", the character length must be smaller than or equal to 64.'
      end

      @contact_name = contact_name
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_phone Value to be assigned
    def contact_phone=(contact_phone)
      if !contact_phone.nil? && contact_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "contact_phone", the character length must be smaller than or equal to 32.'
      end

      @contact_phone = contact_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_phone_country_code Value to be assigned
    def contact_phone_country_code=(contact_phone_country_code)
      if !contact_phone_country_code.nil? && contact_phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "contact_phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @contact_phone_country_code = contact_phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 32
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 32.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_country_code Value to be assigned
    def fax_country_code=(fax_country_code)
      if !fax_country_code.nil? && fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @fax_country_code = fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] malpractice Value to be assigned
    def malpractice=(malpractice)
      if !malpractice.nil? && malpractice.to_s.length > 1
        fail ArgumentError, 'invalid value for "malpractice", the character length must be smaller than or equal to 1.'
      end

      @malpractice = malpractice
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 32.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] reinsurance Value to be assigned
    def reinsurance=(reinsurance)
      if !reinsurance.nil? && reinsurance.to_s.length > 1
        fail ArgumentError, 'invalid value for "reinsurance", the character length must be smaller than or equal to 1.'
      end

      @reinsurance = reinsurance
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 32
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 32.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip Value to be assigned
    def zip=(zip)
      if !zip.nil? && zip.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip", the character length must be smaller than or equal to 32.'
      end

      @zip = zip
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          carrier_key == o.carrier_key &&
          address == o.address &&
          address2 == o.address2 &&
          co_b_carrier == o.co_b_carrier &&
          carrier_id == o.carrier_id &&
          carrier_type == o.carrier_type &&
          city == o.city &&
          contact_fax == o.contact_fax &&
          contact_fax_country_code == o.contact_fax_country_code &&
          contact_name == o.contact_name &&
          contact_phone == o.contact_phone &&
          contact_phone_country_code == o.contact_phone_country_code &&
          country_id == o.country_id &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          fax == o.fax &&
          fax_country_code == o.fax_country_code &&
          malpractice == o.malpractice &&
          medicare == o.medicare &&
          name == o.name &&
          over_spec_advance_fund == o.over_spec_advance_fund &&
          phone == o.phone &&
          phone_country_code == o.phone_country_code &&
          reinsurance == o.reinsurance &&
          state == o.state &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          zip == o.zip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [carrier_key, address, address2, co_b_carrier, carrier_id, carrier_type, city, contact_fax, contact_fax_country_code, contact_name, contact_phone, contact_phone_country_code, country_id, entry_date, entry_user, fax, fax_country_code, malpractice, medicare, name, over_spec_advance_fund, phone, phone_country_code, reinsurance, state, update_date, update_user, zip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
