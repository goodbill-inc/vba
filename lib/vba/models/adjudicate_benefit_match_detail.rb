=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class AdjudicateBenefitMatchDetail
    attr_accessor :batch_number

    attr_accessor :batch_claim

    attr_accessor :claim_seq

    attr_accessor :adjustment_seq

    attr_accessor :service_date

    attr_accessor :benefit_code

    attr_accessor :place_of_service_match

    attr_accessor :procedure_code_match

    attr_accessor :diagnostic_code_match

    attr_accessor :provider_type_match

    attr_accessor :specialty_match

    attr_accessor :network_match

    attr_accessor :relationship_match

    attr_accessor :gender_match

    attr_accessor :service_age_match

    attr_accessor :received_age_match

    attr_accessor :months_enrolled_match

    attr_accessor :days_enrolled_match

    attr_accessor :modifier_match

    attr_accessor :billed_match

    attr_accessor :billing_taxonomy_match

    attr_accessor :rendering_taxonomy_match

    attr_accessor :service_facility_taxonomy_match

    attr_accessor :benefit_description

    attr_accessor :match_count

    attr_accessor :total_match_count

    attr_accessor :benefit_effective_date

    attr_accessor :benefit_term_date

    attr_accessor :federal_id_match

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_number' => :'batch_Number',
        :'batch_claim' => :'batch_Claim',
        :'claim_seq' => :'claim_Seq',
        :'adjustment_seq' => :'adjustment_Seq',
        :'service_date' => :'service_Date',
        :'benefit_code' => :'benefit_Code',
        :'place_of_service_match' => :'place_Of_Service_Match',
        :'procedure_code_match' => :'procedure_Code_Match',
        :'diagnostic_code_match' => :'diagnostic_Code_Match',
        :'provider_type_match' => :'provider_Type_Match',
        :'specialty_match' => :'specialty_Match',
        :'network_match' => :'network_Match',
        :'relationship_match' => :'relationship_Match',
        :'gender_match' => :'gender_Match',
        :'service_age_match' => :'service_Age_Match',
        :'received_age_match' => :'received_Age_Match',
        :'months_enrolled_match' => :'months_Enrolled_Match',
        :'days_enrolled_match' => :'days_Enrolled_Match',
        :'modifier_match' => :'modifier_Match',
        :'billed_match' => :'billed_Match',
        :'billing_taxonomy_match' => :'billing_Taxonomy_Match',
        :'rendering_taxonomy_match' => :'rendering_Taxonomy_Match',
        :'service_facility_taxonomy_match' => :'service_Facility_Taxonomy_Match',
        :'benefit_description' => :'benefit_Description',
        :'match_count' => :'match_Count',
        :'total_match_count' => :'total_Match_Count',
        :'benefit_effective_date' => :'benefit_Effective_Date',
        :'benefit_term_date' => :'benefit_Term_Date',
        :'federal_id_match' => :'federal_ID_Match'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_number' => :'Integer',
        :'batch_claim' => :'Integer',
        :'claim_seq' => :'String',
        :'adjustment_seq' => :'String',
        :'service_date' => :'Time',
        :'benefit_code' => :'String',
        :'place_of_service_match' => :'Integer',
        :'procedure_code_match' => :'Integer',
        :'diagnostic_code_match' => :'Integer',
        :'provider_type_match' => :'Integer',
        :'specialty_match' => :'Integer',
        :'network_match' => :'Integer',
        :'relationship_match' => :'Integer',
        :'gender_match' => :'Integer',
        :'service_age_match' => :'Integer',
        :'received_age_match' => :'Integer',
        :'months_enrolled_match' => :'Integer',
        :'days_enrolled_match' => :'Integer',
        :'modifier_match' => :'Integer',
        :'billed_match' => :'Integer',
        :'billing_taxonomy_match' => :'Integer',
        :'rendering_taxonomy_match' => :'Integer',
        :'service_facility_taxonomy_match' => :'Integer',
        :'benefit_description' => :'String',
        :'match_count' => :'Integer',
        :'total_match_count' => :'Integer',
        :'benefit_effective_date' => :'Time',
        :'benefit_term_date' => :'Time',
        :'federal_id_match' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'batch_number',
        :'batch_claim',
        :'claim_seq',
        :'adjustment_seq',
        :'service_date',
        :'benefit_code',
        :'place_of_service_match',
        :'procedure_code_match',
        :'diagnostic_code_match',
        :'provider_type_match',
        :'specialty_match',
        :'network_match',
        :'relationship_match',
        :'gender_match',
        :'service_age_match',
        :'received_age_match',
        :'months_enrolled_match',
        :'days_enrolled_match',
        :'modifier_match',
        :'billed_match',
        :'billing_taxonomy_match',
        :'rendering_taxonomy_match',
        :'service_facility_taxonomy_match',
        :'benefit_description',
        :'match_count',
        :'benefit_effective_date',
        :'benefit_term_date',
        :'federal_id_match'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::AdjudicateBenefitMatchDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::AdjudicateBenefitMatchDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      end

      if attributes.key?(:'batch_claim')
        self.batch_claim = attributes[:'batch_claim']
      end

      if attributes.key?(:'claim_seq')
        self.claim_seq = attributes[:'claim_seq']
      end

      if attributes.key?(:'adjustment_seq')
        self.adjustment_seq = attributes[:'adjustment_seq']
      end

      if attributes.key?(:'service_date')
        self.service_date = attributes[:'service_date']
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'place_of_service_match')
        self.place_of_service_match = attributes[:'place_of_service_match']
      end

      if attributes.key?(:'procedure_code_match')
        self.procedure_code_match = attributes[:'procedure_code_match']
      end

      if attributes.key?(:'diagnostic_code_match')
        self.diagnostic_code_match = attributes[:'diagnostic_code_match']
      end

      if attributes.key?(:'provider_type_match')
        self.provider_type_match = attributes[:'provider_type_match']
      end

      if attributes.key?(:'specialty_match')
        self.specialty_match = attributes[:'specialty_match']
      end

      if attributes.key?(:'network_match')
        self.network_match = attributes[:'network_match']
      end

      if attributes.key?(:'relationship_match')
        self.relationship_match = attributes[:'relationship_match']
      end

      if attributes.key?(:'gender_match')
        self.gender_match = attributes[:'gender_match']
      end

      if attributes.key?(:'service_age_match')
        self.service_age_match = attributes[:'service_age_match']
      end

      if attributes.key?(:'received_age_match')
        self.received_age_match = attributes[:'received_age_match']
      end

      if attributes.key?(:'months_enrolled_match')
        self.months_enrolled_match = attributes[:'months_enrolled_match']
      end

      if attributes.key?(:'days_enrolled_match')
        self.days_enrolled_match = attributes[:'days_enrolled_match']
      end

      if attributes.key?(:'modifier_match')
        self.modifier_match = attributes[:'modifier_match']
      end

      if attributes.key?(:'billed_match')
        self.billed_match = attributes[:'billed_match']
      end

      if attributes.key?(:'billing_taxonomy_match')
        self.billing_taxonomy_match = attributes[:'billing_taxonomy_match']
      end

      if attributes.key?(:'rendering_taxonomy_match')
        self.rendering_taxonomy_match = attributes[:'rendering_taxonomy_match']
      end

      if attributes.key?(:'service_facility_taxonomy_match')
        self.service_facility_taxonomy_match = attributes[:'service_facility_taxonomy_match']
      end

      if attributes.key?(:'benefit_description')
        self.benefit_description = attributes[:'benefit_description']
      end

      if attributes.key?(:'match_count')
        self.match_count = attributes[:'match_count']
      end

      if attributes.key?(:'total_match_count')
        self.total_match_count = attributes[:'total_match_count']
      end

      if attributes.key?(:'benefit_effective_date')
        self.benefit_effective_date = attributes[:'benefit_effective_date']
      end

      if attributes.key?(:'benefit_term_date')
        self.benefit_term_date = attributes[:'benefit_term_date']
      end

      if attributes.key?(:'federal_id_match')
        self.federal_id_match = attributes[:'federal_id_match']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_number == o.batch_number &&
          batch_claim == o.batch_claim &&
          claim_seq == o.claim_seq &&
          adjustment_seq == o.adjustment_seq &&
          service_date == o.service_date &&
          benefit_code == o.benefit_code &&
          place_of_service_match == o.place_of_service_match &&
          procedure_code_match == o.procedure_code_match &&
          diagnostic_code_match == o.diagnostic_code_match &&
          provider_type_match == o.provider_type_match &&
          specialty_match == o.specialty_match &&
          network_match == o.network_match &&
          relationship_match == o.relationship_match &&
          gender_match == o.gender_match &&
          service_age_match == o.service_age_match &&
          received_age_match == o.received_age_match &&
          months_enrolled_match == o.months_enrolled_match &&
          days_enrolled_match == o.days_enrolled_match &&
          modifier_match == o.modifier_match &&
          billed_match == o.billed_match &&
          billing_taxonomy_match == o.billing_taxonomy_match &&
          rendering_taxonomy_match == o.rendering_taxonomy_match &&
          service_facility_taxonomy_match == o.service_facility_taxonomy_match &&
          benefit_description == o.benefit_description &&
          match_count == o.match_count &&
          total_match_count == o.total_match_count &&
          benefit_effective_date == o.benefit_effective_date &&
          benefit_term_date == o.benefit_term_date &&
          federal_id_match == o.federal_id_match
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_number, batch_claim, claim_seq, adjustment_seq, service_date, benefit_code, place_of_service_match, procedure_code_match, diagnostic_code_match, provider_type_match, specialty_match, network_match, relationship_match, gender_match, service_age_match, received_age_match, months_enrolled_match, days_enrolled_match, modifier_match, billed_match, billing_taxonomy_match, rendering_taxonomy_match, service_facility_taxonomy_match, benefit_description, match_count, total_match_count, benefit_effective_date, benefit_term_date, federal_id_match].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
