=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CheckEditResult
    # Sequenced Unique Key for the Edit being performent.
    attr_accessor :unique_key

    # Object used by the check edit to process.
    attr_accessor :check_edit_object

    # Description of the check edit.
    attr_accessor :description

    # Name for the check edit.
    attr_accessor :display

    # The result of the Check Edit being performed. 0 is Success.  If -1 then error has occurred, look at Result_Message.  If > 0, then edit has found a problem that needs user review.
    attr_accessor :result

    # If there is an error in Result (-1), then this will hold the Result error message.
    attr_accessor :result_message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'unique_key' => :'unique_Key',
        :'check_edit_object' => :'checkEdit_Object',
        :'description' => :'description',
        :'display' => :'display',
        :'result' => :'result',
        :'result_message' => :'result_Message'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'unique_key' => :'Integer',
        :'check_edit_object' => :'String',
        :'description' => :'String',
        :'display' => :'String',
        :'result' => :'Integer',
        :'result_message' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'check_edit_object',
        :'description',
        :'display',
        :'result',
        :'result_message'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CheckEditResult` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CheckEditResult`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'unique_key')
        self.unique_key = attributes[:'unique_key']
      else
        self.unique_key = nil
      end

      if attributes.key?(:'check_edit_object')
        self.check_edit_object = attributes[:'check_edit_object']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display')
        self.display = attributes[:'display']
      end

      if attributes.key?(:'result')
        self.result = attributes[:'result']
      end

      if attributes.key?(:'result_message')
        self.result_message = attributes[:'result_message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @unique_key.nil?
        invalid_properties.push('invalid value for "unique_key", unique_key cannot be nil.')
      end

      if !@check_edit_object.nil? && @check_edit_object.to_s.length > 64
        invalid_properties.push('invalid value for "check_edit_object", the character length must be smaller than or equal to 64.')
      end

      if !@description.nil? && @description.to_s.length > 512
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 512.')
      end

      if !@display.nil? && @display.to_s.length > 64
        invalid_properties.push('invalid value for "display", the character length must be smaller than or equal to 64.')
      end

      if !@result_message.nil? && @result_message.to_s.length > 1024
        invalid_properties.push('invalid value for "result_message", the character length must be smaller than or equal to 1024.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @unique_key.nil?
      return false if !@check_edit_object.nil? && @check_edit_object.to_s.length > 64
      return false if !@description.nil? && @description.to_s.length > 512
      return false if !@display.nil? && @display.to_s.length > 64
      return false if !@result_message.nil? && @result_message.to_s.length > 1024
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] unique_key Value to be assigned
    def unique_key=(unique_key)
      if unique_key.nil?
        fail ArgumentError, 'unique_key cannot be nil'
      end

      @unique_key = unique_key
    end

    # Custom attribute writer method with validation
    # @param [Object] check_edit_object Value to be assigned
    def check_edit_object=(check_edit_object)
      if !check_edit_object.nil? && check_edit_object.to_s.length > 64
        fail ArgumentError, 'invalid value for "check_edit_object", the character length must be smaller than or equal to 64.'
      end

      @check_edit_object = check_edit_object
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 512
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 512.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] display Value to be assigned
    def display=(display)
      if !display.nil? && display.to_s.length > 64
        fail ArgumentError, 'invalid value for "display", the character length must be smaller than or equal to 64.'
      end

      @display = display
    end

    # Custom attribute writer method with validation
    # @param [Object] result_message Value to be assigned
    def result_message=(result_message)
      if !result_message.nil? && result_message.to_s.length > 1024
        fail ArgumentError, 'invalid value for "result_message", the character length must be smaller than or equal to 1024.'
      end

      @result_message = result_message
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          unique_key == o.unique_key &&
          check_edit_object == o.check_edit_object &&
          description == o.description &&
          display == o.display &&
          result == o.result &&
          result_message == o.result_message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [unique_key, check_edit_object, description, display, result, result_message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
