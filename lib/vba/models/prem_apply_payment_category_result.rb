=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PremApplyPaymentCategoryResult
    attr_accessor :apply_payment_category

    attr_accessor :adjustment_reason

    attr_accessor :reason_key

    attr_accessor :group_id

    attr_accessor :group_name

    attr_accessor :subscriber_id

    attr_accessor :ssn

    attr_accessor :subscriber_name

    attr_accessor :plan_type

    attr_accessor :payor_id

    attr_accessor :amount_due

    attr_accessor :on_account

    attr_accessor :apply_payment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'apply_payment_category' => :'apply_Payment_Category',
        :'adjustment_reason' => :'adjustment_Reason',
        :'reason_key' => :'reason_Key',
        :'group_id' => :'group_ID',
        :'group_name' => :'group_Name',
        :'subscriber_id' => :'subscriber_ID',
        :'ssn' => :'ssn',
        :'subscriber_name' => :'subscriber_Name',
        :'plan_type' => :'plan_Type',
        :'payor_id' => :'payor_ID',
        :'amount_due' => :'amount_Due',
        :'on_account' => :'on_Account',
        :'apply_payment' => :'apply_Payment'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'apply_payment_category' => :'String',
        :'adjustment_reason' => :'String',
        :'reason_key' => :'Integer',
        :'group_id' => :'String',
        :'group_name' => :'String',
        :'subscriber_id' => :'String',
        :'ssn' => :'String',
        :'subscriber_name' => :'String',
        :'plan_type' => :'String',
        :'payor_id' => :'String',
        :'amount_due' => :'Float',
        :'on_account' => :'Float',
        :'apply_payment' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'apply_payment_category',
        :'adjustment_reason',
        :'reason_key',
        :'group_id',
        :'group_name',
        :'subscriber_id',
        :'ssn',
        :'subscriber_name',
        :'plan_type',
        :'payor_id',
        :'amount_due',
        :'on_account',
        :'apply_payment'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PremApplyPaymentCategoryResult` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PremApplyPaymentCategoryResult`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'apply_payment_category')
        self.apply_payment_category = attributes[:'apply_payment_category']
      end

      if attributes.key?(:'adjustment_reason')
        self.adjustment_reason = attributes[:'adjustment_reason']
      end

      if attributes.key?(:'reason_key')
        self.reason_key = attributes[:'reason_key']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'group_name')
        self.group_name = attributes[:'group_name']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'ssn')
        self.ssn = attributes[:'ssn']
      end

      if attributes.key?(:'subscriber_name')
        self.subscriber_name = attributes[:'subscriber_name']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'amount_due')
        self.amount_due = attributes[:'amount_due']
      end

      if attributes.key?(:'on_account')
        self.on_account = attributes[:'on_account']
      end

      if attributes.key?(:'apply_payment')
        self.apply_payment = attributes[:'apply_payment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          apply_payment_category == o.apply_payment_category &&
          adjustment_reason == o.adjustment_reason &&
          reason_key == o.reason_key &&
          group_id == o.group_id &&
          group_name == o.group_name &&
          subscriber_id == o.subscriber_id &&
          ssn == o.ssn &&
          subscriber_name == o.subscriber_name &&
          plan_type == o.plan_type &&
          payor_id == o.payor_id &&
          amount_due == o.amount_due &&
          on_account == o.on_account &&
          apply_payment == o.apply_payment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [apply_payment_category, adjustment_reason, reason_key, group_id, group_name, subscriber_id, ssn, subscriber_name, plan_type, payor_id, amount_due, on_account, apply_payment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
