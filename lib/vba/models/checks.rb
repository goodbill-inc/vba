=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Checks
    # ID of the check. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :check_id

    # ACH (Automated Clearing House) number of the check.
    attr_accessor :ac_h_number

    # The account key associated with the check.
    attr_accessor :account_key

    # The second address line on the check.
    attr_accessor :address2_on_check

    # Address line 1 listed on the check.
    attr_accessor :address_on_check

    # An adjustment amount assigned to the check.
    attr_accessor :adjustment

    # Indicates any administrative fee associated with the check.
    attr_accessor :admin_amt

    # Amount that was written on the check.
    attr_accessor :amount_due

    # Identifies which batch the check belongs to.
    attr_accessor :check_batch

    # Date that was written on the check.
    attr_accessor :check_date

    # Number of the check.
    attr_accessor :check_number

    # The date the check was paid.
    attr_accessor :check_paid_date

    # Indicates the status of the check.
    attr_accessor :check_status

    # Indicates the type associated with the check.
    attr_accessor :check_type

    # City of the check's address.
    attr_accessor :city_on_check

    # The amount that was cleared.
    attr_accessor :cleared_amount

    # The date the check cleared.
    attr_accessor :cleared_date

    # The country ID on the check.
    attr_accessor :country_id_on_check

    # The date the check was created.
    attr_accessor :create_date

    # The user that created the check.
    attr_accessor :create_user

    # Date when the check was printed.
    attr_accessor :date_printed

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Flag that determines if an 835 was generated. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :generated_835

    # The interest amount of the check.
    attr_accessor :interest

    # Memo line of the check.
    attr_accessor :memo

    # The name associated with the address on the check.
    attr_accessor :name_on_address

    # Name that was written on the check.
    attr_accessor :name_on_check

    # The amount paid of the check.
    attr_accessor :paid_amount

    # The account the check was paid to.
    attr_accessor :pay_to_account_key

    # Pay_To_ID is the ID based on the Send_Check_To. 'P' = Payee_ID, 'V' = Provider_ID, 'S'= Subscriber_ID, 'G' = Group_ID, 'B' = Beneficiary_ID
    attr_accessor :pay_to_id

    # ID of the Payee associated with the check.
    attr_accessor :payee_id

    # Identifies the check as a check or wire transfer.
    attr_accessor :payment_method

    # ID of the Payor associated with the check.
    attr_accessor :payor_id

    # The reconcile key associated with the check.
    attr_accessor :reconcile_key

    # A code identifying who the check is sent to.
    attr_accessor :send_check_to

    # The signature key associated with the check.
    attr_accessor :signature_key

    # State of the check's address.
    attr_accessor :state_on_check

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # The date of the wire transfer.
    attr_accessor :wire_transfer_date

    # Zip code of the check's address.
    attr_accessor :zip_on_check

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'check_id' => :'check_ID',
        :'ac_h_number' => :'acH_Number',
        :'account_key' => :'account_Key',
        :'address2_on_check' => :'address2_On_Check',
        :'address_on_check' => :'address_On_Check',
        :'adjustment' => :'adjustment',
        :'admin_amt' => :'admin_Amt',
        :'amount_due' => :'amount_Due',
        :'check_batch' => :'check_Batch',
        :'check_date' => :'check_Date',
        :'check_number' => :'check_Number',
        :'check_paid_date' => :'check_Paid_Date',
        :'check_status' => :'check_Status',
        :'check_type' => :'check_Type',
        :'city_on_check' => :'city_On_Check',
        :'cleared_amount' => :'cleared_Amount',
        :'cleared_date' => :'cleared_Date',
        :'country_id_on_check' => :'country_ID_On_Check',
        :'create_date' => :'create_Date',
        :'create_user' => :'create_User',
        :'date_printed' => :'date_Printed',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'generated_835' => :'generated_835',
        :'interest' => :'interest',
        :'memo' => :'memo',
        :'name_on_address' => :'name_On_Address',
        :'name_on_check' => :'name_On_Check',
        :'paid_amount' => :'paid_Amount',
        :'pay_to_account_key' => :'pay_To_Account_Key',
        :'pay_to_id' => :'pay_To_ID',
        :'payee_id' => :'payee_ID',
        :'payment_method' => :'payment_Method',
        :'payor_id' => :'payor_ID',
        :'reconcile_key' => :'reconcile_Key',
        :'send_check_to' => :'send_Check_To',
        :'signature_key' => :'signature_Key',
        :'state_on_check' => :'state_On_Check',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'wire_transfer_date' => :'wire_Transfer_Date',
        :'zip_on_check' => :'zip_On_Check'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'check_id' => :'Integer',
        :'ac_h_number' => :'String',
        :'account_key' => :'Integer',
        :'address2_on_check' => :'String',
        :'address_on_check' => :'String',
        :'adjustment' => :'Float',
        :'admin_amt' => :'Float',
        :'amount_due' => :'Float',
        :'check_batch' => :'Integer',
        :'check_date' => :'Time',
        :'check_number' => :'String',
        :'check_paid_date' => :'Time',
        :'check_status' => :'String',
        :'check_type' => :'String',
        :'city_on_check' => :'String',
        :'cleared_amount' => :'Float',
        :'cleared_date' => :'Time',
        :'country_id_on_check' => :'String',
        :'create_date' => :'Time',
        :'create_user' => :'String',
        :'date_printed' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'generated_835' => :'Boolean',
        :'interest' => :'Float',
        :'memo' => :'String',
        :'name_on_address' => :'String',
        :'name_on_check' => :'String',
        :'paid_amount' => :'Float',
        :'pay_to_account_key' => :'Integer',
        :'pay_to_id' => :'String',
        :'payee_id' => :'String',
        :'payment_method' => :'String',
        :'payor_id' => :'String',
        :'reconcile_key' => :'Integer',
        :'send_check_to' => :'String',
        :'signature_key' => :'Integer',
        :'state_on_check' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'wire_transfer_date' => :'Time',
        :'zip_on_check' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ac_h_number',
        :'account_key',
        :'address2_on_check',
        :'address_on_check',
        :'adjustment',
        :'admin_amt',
        :'amount_due',
        :'check_batch',
        :'check_date',
        :'check_number',
        :'check_paid_date',
        :'check_status',
        :'check_type',
        :'city_on_check',
        :'cleared_amount',
        :'cleared_date',
        :'country_id_on_check',
        :'create_date',
        :'create_user',
        :'date_printed',
        :'entry_user',
        :'interest',
        :'memo',
        :'name_on_address',
        :'name_on_check',
        :'paid_amount',
        :'pay_to_account_key',
        :'pay_to_id',
        :'payee_id',
        :'payment_method',
        :'payor_id',
        :'reconcile_key',
        :'send_check_to',
        :'signature_key',
        :'state_on_check',
        :'update_user',
        :'wire_transfer_date',
        :'zip_on_check'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Checks` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Checks`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'check_id')
        self.check_id = attributes[:'check_id']
      else
        self.check_id = nil
      end

      if attributes.key?(:'ac_h_number')
        self.ac_h_number = attributes[:'ac_h_number']
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'address2_on_check')
        self.address2_on_check = attributes[:'address2_on_check']
      end

      if attributes.key?(:'address_on_check')
        self.address_on_check = attributes[:'address_on_check']
      end

      if attributes.key?(:'adjustment')
        self.adjustment = attributes[:'adjustment']
      end

      if attributes.key?(:'admin_amt')
        self.admin_amt = attributes[:'admin_amt']
      end

      if attributes.key?(:'amount_due')
        self.amount_due = attributes[:'amount_due']
      end

      if attributes.key?(:'check_batch')
        self.check_batch = attributes[:'check_batch']
      end

      if attributes.key?(:'check_date')
        self.check_date = attributes[:'check_date']
      end

      if attributes.key?(:'check_number')
        self.check_number = attributes[:'check_number']
      end

      if attributes.key?(:'check_paid_date')
        self.check_paid_date = attributes[:'check_paid_date']
      end

      if attributes.key?(:'check_status')
        self.check_status = attributes[:'check_status']
      end

      if attributes.key?(:'check_type')
        self.check_type = attributes[:'check_type']
      end

      if attributes.key?(:'city_on_check')
        self.city_on_check = attributes[:'city_on_check']
      end

      if attributes.key?(:'cleared_amount')
        self.cleared_amount = attributes[:'cleared_amount']
      end

      if attributes.key?(:'cleared_date')
        self.cleared_date = attributes[:'cleared_date']
      end

      if attributes.key?(:'country_id_on_check')
        self.country_id_on_check = attributes[:'country_id_on_check']
      end

      if attributes.key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.key?(:'create_user')
        self.create_user = attributes[:'create_user']
      end

      if attributes.key?(:'date_printed')
        self.date_printed = attributes[:'date_printed']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'generated_835')
        self.generated_835 = attributes[:'generated_835']
      else
        self.generated_835 = nil
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'name_on_address')
        self.name_on_address = attributes[:'name_on_address']
      end

      if attributes.key?(:'name_on_check')
        self.name_on_check = attributes[:'name_on_check']
      end

      if attributes.key?(:'paid_amount')
        self.paid_amount = attributes[:'paid_amount']
      end

      if attributes.key?(:'pay_to_account_key')
        self.pay_to_account_key = attributes[:'pay_to_account_key']
      end

      if attributes.key?(:'pay_to_id')
        self.pay_to_id = attributes[:'pay_to_id']
      end

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'reconcile_key')
        self.reconcile_key = attributes[:'reconcile_key']
      end

      if attributes.key?(:'send_check_to')
        self.send_check_to = attributes[:'send_check_to']
      end

      if attributes.key?(:'signature_key')
        self.signature_key = attributes[:'signature_key']
      end

      if attributes.key?(:'state_on_check')
        self.state_on_check = attributes[:'state_on_check']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'wire_transfer_date')
        self.wire_transfer_date = attributes[:'wire_transfer_date']
      end

      if attributes.key?(:'zip_on_check')
        self.zip_on_check = attributes[:'zip_on_check']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @check_id.nil?
        invalid_properties.push('invalid value for "check_id", check_id cannot be nil.')
      end

      if !@ac_h_number.nil? && @ac_h_number.to_s.length > 32
        invalid_properties.push('invalid value for "ac_h_number", the character length must be smaller than or equal to 32.')
      end

      if !@address2_on_check.nil? && @address2_on_check.to_s.length > 128
        invalid_properties.push('invalid value for "address2_on_check", the character length must be smaller than or equal to 128.')
      end

      if !@address_on_check.nil? && @address_on_check.to_s.length > 255
        invalid_properties.push('invalid value for "address_on_check", the character length must be smaller than or equal to 255.')
      end

      if !@check_number.nil? && @check_number.to_s.length > 20
        invalid_properties.push('invalid value for "check_number", the character length must be smaller than or equal to 20.')
      end

      if !@check_status.nil? && @check_status.to_s.length > 1
        invalid_properties.push('invalid value for "check_status", the character length must be smaller than or equal to 1.')
      end

      if !@check_type.nil? && @check_type.to_s.length > 3
        invalid_properties.push('invalid value for "check_type", the character length must be smaller than or equal to 3.')
      end

      if !@city_on_check.nil? && @city_on_check.to_s.length > 30
        invalid_properties.push('invalid value for "city_on_check", the character length must be smaller than or equal to 30.')
      end

      if !@country_id_on_check.nil? && @country_id_on_check.to_s.length > 8
        invalid_properties.push('invalid value for "country_id_on_check", the character length must be smaller than or equal to 8.')
      end

      if !@create_user.nil? && @create_user.to_s.length > 20
        invalid_properties.push('invalid value for "create_user", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @generated_835.nil?
        invalid_properties.push('invalid value for "generated_835", generated_835 cannot be nil.')
      end

      if !@memo.nil? && @memo.to_s.length > 64
        invalid_properties.push('invalid value for "memo", the character length must be smaller than or equal to 64.')
      end

      if !@name_on_address.nil? && @name_on_address.to_s.length > 50
        invalid_properties.push('invalid value for "name_on_address", the character length must be smaller than or equal to 50.')
      end

      if !@name_on_check.nil? && @name_on_check.to_s.length > 50
        invalid_properties.push('invalid value for "name_on_check", the character length must be smaller than or equal to 50.')
      end

      if !@pay_to_id.nil? && @pay_to_id.to_s.length > 20
        invalid_properties.push('invalid value for "pay_to_id", the character length must be smaller than or equal to 20.')
      end

      if !@payee_id.nil? && @payee_id.to_s.length > 20
        invalid_properties.push('invalid value for "payee_id", the character length must be smaller than or equal to 20.')
      end

      if !@payment_method.nil? && @payment_method.to_s.length > 3
        invalid_properties.push('invalid value for "payment_method", the character length must be smaller than or equal to 3.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@send_check_to.nil? && @send_check_to.to_s.length > 1
        invalid_properties.push('invalid value for "send_check_to", the character length must be smaller than or equal to 1.')
      end

      if !@state_on_check.nil? && @state_on_check.to_s.length > 2
        invalid_properties.push('invalid value for "state_on_check", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip_on_check.nil? && @zip_on_check.to_s.length > 32
        invalid_properties.push('invalid value for "zip_on_check", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @check_id.nil?
      return false if !@ac_h_number.nil? && @ac_h_number.to_s.length > 32
      return false if !@address2_on_check.nil? && @address2_on_check.to_s.length > 128
      return false if !@address_on_check.nil? && @address_on_check.to_s.length > 255
      return false if !@check_number.nil? && @check_number.to_s.length > 20
      return false if !@check_status.nil? && @check_status.to_s.length > 1
      return false if !@check_type.nil? && @check_type.to_s.length > 3
      return false if !@city_on_check.nil? && @city_on_check.to_s.length > 30
      return false if !@country_id_on_check.nil? && @country_id_on_check.to_s.length > 8
      return false if !@create_user.nil? && @create_user.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @generated_835.nil?
      return false if !@memo.nil? && @memo.to_s.length > 64
      return false if !@name_on_address.nil? && @name_on_address.to_s.length > 50
      return false if !@name_on_check.nil? && @name_on_check.to_s.length > 50
      return false if !@pay_to_id.nil? && @pay_to_id.to_s.length > 20
      return false if !@payee_id.nil? && @payee_id.to_s.length > 20
      return false if !@payment_method.nil? && @payment_method.to_s.length > 3
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@send_check_to.nil? && @send_check_to.to_s.length > 1
      return false if !@state_on_check.nil? && @state_on_check.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip_on_check.nil? && @zip_on_check.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] check_id Value to be assigned
    def check_id=(check_id)
      if check_id.nil?
        fail ArgumentError, 'check_id cannot be nil'
      end

      @check_id = check_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ac_h_number Value to be assigned
    def ac_h_number=(ac_h_number)
      if !ac_h_number.nil? && ac_h_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "ac_h_number", the character length must be smaller than or equal to 32.'
      end

      @ac_h_number = ac_h_number
    end

    # Custom attribute writer method with validation
    # @param [Object] address2_on_check Value to be assigned
    def address2_on_check=(address2_on_check)
      if !address2_on_check.nil? && address2_on_check.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2_on_check", the character length must be smaller than or equal to 128.'
      end

      @address2_on_check = address2_on_check
    end

    # Custom attribute writer method with validation
    # @param [Object] address_on_check Value to be assigned
    def address_on_check=(address_on_check)
      if !address_on_check.nil? && address_on_check.to_s.length > 255
        fail ArgumentError, 'invalid value for "address_on_check", the character length must be smaller than or equal to 255.'
      end

      @address_on_check = address_on_check
    end

    # Custom attribute writer method with validation
    # @param [Object] check_number Value to be assigned
    def check_number=(check_number)
      if !check_number.nil? && check_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "check_number", the character length must be smaller than or equal to 20.'
      end

      @check_number = check_number
    end

    # Custom attribute writer method with validation
    # @param [Object] check_status Value to be assigned
    def check_status=(check_status)
      if !check_status.nil? && check_status.to_s.length > 1
        fail ArgumentError, 'invalid value for "check_status", the character length must be smaller than or equal to 1.'
      end

      @check_status = check_status
    end

    # Custom attribute writer method with validation
    # @param [Object] check_type Value to be assigned
    def check_type=(check_type)
      if !check_type.nil? && check_type.to_s.length > 3
        fail ArgumentError, 'invalid value for "check_type", the character length must be smaller than or equal to 3.'
      end

      @check_type = check_type
    end

    # Custom attribute writer method with validation
    # @param [Object] city_on_check Value to be assigned
    def city_on_check=(city_on_check)
      if !city_on_check.nil? && city_on_check.to_s.length > 30
        fail ArgumentError, 'invalid value for "city_on_check", the character length must be smaller than or equal to 30.'
      end

      @city_on_check = city_on_check
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id_on_check Value to be assigned
    def country_id_on_check=(country_id_on_check)
      if !country_id_on_check.nil? && country_id_on_check.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id_on_check", the character length must be smaller than or equal to 8.'
      end

      @country_id_on_check = country_id_on_check
    end

    # Custom attribute writer method with validation
    # @param [Object] create_user Value to be assigned
    def create_user=(create_user)
      if !create_user.nil? && create_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "create_user", the character length must be smaller than or equal to 20.'
      end

      @create_user = create_user
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] generated_835 Value to be assigned
    def generated_835=(generated_835)
      if generated_835.nil?
        fail ArgumentError, 'generated_835 cannot be nil'
      end

      @generated_835 = generated_835
    end

    # Custom attribute writer method with validation
    # @param [Object] memo Value to be assigned
    def memo=(memo)
      if !memo.nil? && memo.to_s.length > 64
        fail ArgumentError, 'invalid value for "memo", the character length must be smaller than or equal to 64.'
      end

      @memo = memo
    end

    # Custom attribute writer method with validation
    # @param [Object] name_on_address Value to be assigned
    def name_on_address=(name_on_address)
      if !name_on_address.nil? && name_on_address.to_s.length > 50
        fail ArgumentError, 'invalid value for "name_on_address", the character length must be smaller than or equal to 50.'
      end

      @name_on_address = name_on_address
    end

    # Custom attribute writer method with validation
    # @param [Object] name_on_check Value to be assigned
    def name_on_check=(name_on_check)
      if !name_on_check.nil? && name_on_check.to_s.length > 50
        fail ArgumentError, 'invalid value for "name_on_check", the character length must be smaller than or equal to 50.'
      end

      @name_on_check = name_on_check
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_id Value to be assigned
    def pay_to_id=(pay_to_id)
      if !pay_to_id.nil? && pay_to_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "pay_to_id", the character length must be smaller than or equal to 20.'
      end

      @pay_to_id = pay_to_id
    end

    # Custom attribute writer method with validation
    # @param [Object] payee_id Value to be assigned
    def payee_id=(payee_id)
      if !payee_id.nil? && payee_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payee_id", the character length must be smaller than or equal to 20.'
      end

      @payee_id = payee_id
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if !payment_method.nil? && payment_method.to_s.length > 3
        fail ArgumentError, 'invalid value for "payment_method", the character length must be smaller than or equal to 3.'
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] send_check_to Value to be assigned
    def send_check_to=(send_check_to)
      if !send_check_to.nil? && send_check_to.to_s.length > 1
        fail ArgumentError, 'invalid value for "send_check_to", the character length must be smaller than or equal to 1.'
      end

      @send_check_to = send_check_to
    end

    # Custom attribute writer method with validation
    # @param [Object] state_on_check Value to be assigned
    def state_on_check=(state_on_check)
      if !state_on_check.nil? && state_on_check.to_s.length > 2
        fail ArgumentError, 'invalid value for "state_on_check", the character length must be smaller than or equal to 2.'
      end

      @state_on_check = state_on_check
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_on_check Value to be assigned
    def zip_on_check=(zip_on_check)
      if !zip_on_check.nil? && zip_on_check.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_on_check", the character length must be smaller than or equal to 32.'
      end

      @zip_on_check = zip_on_check
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          check_id == o.check_id &&
          ac_h_number == o.ac_h_number &&
          account_key == o.account_key &&
          address2_on_check == o.address2_on_check &&
          address_on_check == o.address_on_check &&
          adjustment == o.adjustment &&
          admin_amt == o.admin_amt &&
          amount_due == o.amount_due &&
          check_batch == o.check_batch &&
          check_date == o.check_date &&
          check_number == o.check_number &&
          check_paid_date == o.check_paid_date &&
          check_status == o.check_status &&
          check_type == o.check_type &&
          city_on_check == o.city_on_check &&
          cleared_amount == o.cleared_amount &&
          cleared_date == o.cleared_date &&
          country_id_on_check == o.country_id_on_check &&
          create_date == o.create_date &&
          create_user == o.create_user &&
          date_printed == o.date_printed &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          generated_835 == o.generated_835 &&
          interest == o.interest &&
          memo == o.memo &&
          name_on_address == o.name_on_address &&
          name_on_check == o.name_on_check &&
          paid_amount == o.paid_amount &&
          pay_to_account_key == o.pay_to_account_key &&
          pay_to_id == o.pay_to_id &&
          payee_id == o.payee_id &&
          payment_method == o.payment_method &&
          payor_id == o.payor_id &&
          reconcile_key == o.reconcile_key &&
          send_check_to == o.send_check_to &&
          signature_key == o.signature_key &&
          state_on_check == o.state_on_check &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          wire_transfer_date == o.wire_transfer_date &&
          zip_on_check == o.zip_on_check
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [check_id, ac_h_number, account_key, address2_on_check, address_on_check, adjustment, admin_amt, amount_due, check_batch, check_date, check_number, check_paid_date, check_status, check_type, city_on_check, cleared_amount, cleared_date, country_id_on_check, create_date, create_user, date_printed, entry_date, entry_user, generated_835, interest, memo, name_on_address, name_on_check, paid_amount, pay_to_account_key, pay_to_id, payee_id, payment_method, payor_id, reconcile_key, send_check_to, signature_key, state_on_check, update_date, update_user, wire_transfer_date, zip_on_check].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
