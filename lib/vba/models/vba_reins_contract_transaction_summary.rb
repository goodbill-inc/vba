=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAReinsContractTransactionSummary
    attr_accessor :reins_contract_trans_key

    attr_accessor :reins_contract_key

    attr_accessor :description

    attr_accessor :subscriber_id

    attr_accessor :member_seq

    attr_accessor :transaction_type

    attr_accessor :transaction_status

    attr_accessor :transaction_claim_number

    attr_accessor :transaction_amount

    attr_accessor :transaction_date

    attr_accessor :submitted_date

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :initial_transaction

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'reins_contract_trans_key' => :'reinsContractTrans_Key',
        :'reins_contract_key' => :'reinsContract_Key',
        :'description' => :'description',
        :'subscriber_id' => :'subscriber_ID',
        :'member_seq' => :'member_Seq',
        :'transaction_type' => :'transaction_Type',
        :'transaction_status' => :'transaction_Status',
        :'transaction_claim_number' => :'transaction_Claim_Number',
        :'transaction_amount' => :'transaction_Amount',
        :'transaction_date' => :'transaction_Date',
        :'submitted_date' => :'submitted_Date',
        :'first_name' => :'first_Name',
        :'last_name' => :'last_Name',
        :'initial_transaction' => :'initial_Transaction'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'reins_contract_trans_key' => :'Integer',
        :'reins_contract_key' => :'Integer',
        :'description' => :'String',
        :'subscriber_id' => :'String',
        :'member_seq' => :'String',
        :'transaction_type' => :'String',
        :'transaction_status' => :'String',
        :'transaction_claim_number' => :'String',
        :'transaction_amount' => :'Float',
        :'transaction_date' => :'Time',
        :'submitted_date' => :'Time',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'initial_transaction' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'subscriber_id',
        :'member_seq',
        :'transaction_type',
        :'transaction_status',
        :'transaction_claim_number',
        :'transaction_amount',
        :'transaction_date',
        :'submitted_date',
        :'first_name',
        :'last_name',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAReinsContractTransactionSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAReinsContractTransactionSummary`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'reins_contract_trans_key')
        self.reins_contract_trans_key = attributes[:'reins_contract_trans_key']
      end

      if attributes.key?(:'reins_contract_key')
        self.reins_contract_key = attributes[:'reins_contract_key']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'transaction_status')
        self.transaction_status = attributes[:'transaction_status']
      end

      if attributes.key?(:'transaction_claim_number')
        self.transaction_claim_number = attributes[:'transaction_claim_number']
      end

      if attributes.key?(:'transaction_amount')
        self.transaction_amount = attributes[:'transaction_amount']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'submitted_date')
        self.submitted_date = attributes[:'submitted_date']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'initial_transaction')
        self.initial_transaction = attributes[:'initial_transaction']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          reins_contract_trans_key == o.reins_contract_trans_key &&
          reins_contract_key == o.reins_contract_key &&
          description == o.description &&
          subscriber_id == o.subscriber_id &&
          member_seq == o.member_seq &&
          transaction_type == o.transaction_type &&
          transaction_status == o.transaction_status &&
          transaction_claim_number == o.transaction_claim_number &&
          transaction_amount == o.transaction_amount &&
          transaction_date == o.transaction_date &&
          submitted_date == o.submitted_date &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          initial_transaction == o.initial_transaction
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [reins_contract_trans_key, reins_contract_key, description, subscriber_id, member_seq, transaction_type, transaction_status, transaction_claim_number, transaction_amount, transaction_date, submitted_date, first_name, last_name, initial_transaction].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
