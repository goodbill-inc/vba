=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimBatchDetail
    # References the ClaimBatch.Batch_Number value on the parent record. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :batch_number

    # References the ClaimBatch.Batch_Claim value on the parent record. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :batch_claim

    # In combination with Adjustment_Seq, creates a unique sequence for each service line on this claim.
    attr_accessor :claim_seq

    # In combination with Claim_Seq, creates a unique sequence for each service line on this claim. Used to note adjustments, cascading, etc. when utlized. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :adjustment_seq

    # No longer in use.
    attr_accessor :ans_i_code

    # The APC code applied to this service if identified for calculation during adjudication.
    attr_accessor :ap_c_code

    # For reference purposes, this hold the individual service line funding payor/account. If multiple payor/accounts are found on different service lines for the same claim, adjudication spits out an error.
    attr_accessor :account_key

    # References the Adjustment_Seq value on the original claim that this claim is adjusting.
    attr_accessor :adjusted_from_adjustment_line

    # References the Claim_Seq value on the original claim that this claim is adjusting.
    attr_accessor :adjusted_from_line

    # The Auth Number for services that require authorization. References Auth.Auth_Number.
    attr_accessor :auth_number

    # If an Auth Penalty is applied during adjudication, that is housed here.
    attr_accessor :auth_penalty

    # Notes that this service lines required authorization.
    attr_accessor :auth_required

    # This is the benefit code assigned to this service line based on the Plan assigned on the Claim header. References BenefitCodes.Benefit_Code.
    attr_accessor :benefit_code

    # Benefit Rate being applied to this detail line.
    attr_accessor :benefit_rate_applied

    # The billed charges assigned by the provider for this service. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :billed_price

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :brand_indicator

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :buccal

    # No longer in use.
    attr_accessor :cli_a_number

    # Holds the Other Insurance calculated amount that would affect the payable amount for this service (calculated from COB_Hold, COB_Mem_Resp, COB_Savings, and COB_Savings_Used). Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_b_amt

    # Used in COB calculations (Dupe or Non-Dupe) to determine the COB_Amt to be applied.
    attr_accessor :co_b_hold

    # Used in COB calculations (Dupe or Non-Dupe) to determine the COB_Amt to be applied.
    attr_accessor :co_b_mem_resp

    # Used in COB calculations (Dupe or Non-Dupe) to determine the COB_Amt to be applied.
    attr_accessor :co_b_savings

    # Used in COB calculations (Dupe or Non-Dupe) to determine the COB_Amt to be applied.
    attr_accessor :co_b_savings_used

    # Used for Flex Claims to indicate the calendar year this claim applies.
    attr_accessor :calendar_year

    # Notes if this service line is captiated. If the Claim.Capitation_Claim value is flagged, it overrides this value and notes the entire claim and all service lines as capitated. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :capitation_claim

    # No longer in use.
    attr_accessor :check_id

    # The co-insurance amount applied by adjudication based on benefit definition. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_ins_amt

    # The co-pay amount applied by adjudication based on benefit definition. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_pay_amt

    # For currency calculations, this holds the destination currency.
    attr_accessor :currency_id

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :days_supply

    # If the service is eligiblity for deductible credits, they would be stored here.
    attr_accessor :ded_credit_amt

    # The deductible amount applied by adjudication based on benefit definition. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :deductible_amt

    # Indicates which Plan Year the service line correlates to from GroupPlanYear.Plan_Year
    attr_accessor :detail_plan_year

    # The diagnosis pointer for this service line indicating which Diagnostic Codes from the Claim are applicable to this service.
    attr_accessor :diagnosis_code

    # The difference between Billed and Allowed is stored as the Discount Amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :discount_amt

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :dispense_as_written

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :distal

    # For RX claims or medical claims that hold a drug code. References DrugCode.Drug_Code.
    attr_accessor :drug_code

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :drug_quantity

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_auth

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_benefit

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_count

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_covered

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_dates

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_diagnosis

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_ex_code

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_modifier

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_place

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_price

    # During adjudication, this holds the results of claim rules associated with this error code. For a list of valid Error Codes, check the ErrorCategoryType table.
    attr_accessor :error_procedure

    # A place for both user assigned reason codes applicable to this claim or for adjudication to automatically assign ex code. References ExplanationCodes.Ex_Code.
    attr_accessor :ex_code

    # A place for both user assigned reason codes applicable to this claim or for adjudication to automatically assign ex code. References ExplanationCodes.Ex_Code.
    attr_accessor :ex_code2

    # A place for both user assigned reason codes applicable to this claim or for adjudication to automatically assign ex code. References ExplanationCodes.Ex_Code.
    attr_accessor :ex_code3

    # The FICA tax amount for disability claims. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :fica

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :facial

    # Based on taxable amount and various configurations, this holds the Federal \"To Tax\" amount for disability claim.
    attr_accessor :federal_amount_to_tax

    # The calculated Federal tax amount based on the \"To Tax\" amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :federal_tax

    # A flat federal tax amount applied in addition to the calculated tax amount.
    attr_accessor :federal_tax_flat

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :fill_date

    # Manually entered description of this flex claim.
    attr_accessor :flex_description

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :formulary_indicator

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :incisal

    # If interest is calculated on a claim, it is stored here and applied to payable amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :interest

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :labial

    # The Life Benefit to be applied for Life claims processing.
    attr_accessor :life_benefit

    # The Life Benefit calculated volume based on benefit definition.
    attr_accessor :life_benefit_volume

    # Number added manually to claims and from 837 files and sent outbound on 835 files.
    attr_accessor :line_control_number

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :lingual

    # If a locality tax is applicable it would be housed here. Note: The database will apply a default value of `0` for this field if a value is not provided.
    attr_accessor :local_tax

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :mail_order_indicator

    # Based on taxable amount and various configurations, this holds the Medicare \"To Tax\" amount for disability claim.
    attr_accessor :medicare_amount_to_tax

    # The calculated Medicare tax amount based on the \"To Tax\" amount.
    attr_accessor :medicare_tax

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :mesial

    # This is for anesthesia, each Unit of anesthesia is equal to a specific amount of Minutes.
    attr_accessor :minutes_per_unit

    # The modifier applied to this service.
    attr_accessor :modifier

    # The modifier applied to this service.
    attr_accessor :modifier_2

    # The modifier applied to this service.
    attr_accessor :modifier_3

    # The modifier applied to this service.
    attr_accessor :modifier_4

    # The number of the units from this detail line that comes from the Modifier. This determines pricing for the line.
    attr_accessor :modifier_units

    # For not covered services, or partially not covered services, this reflects that deduction. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :not_covered_amt

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :occlusal

    # For dental claims this holds the oral cavity designation sent on the 837D.
    attr_accessor :oral_cavity_designation_code_1

    # For dental claims this holds the oral cavity designation sent on the 837D.
    attr_accessor :oral_cavity_designation_code_2

    # For dental claims this holds the oral cavity designation sent on the 837D.
    attr_accessor :oral_cavity_designation_code_3

    # For dental claims this holds the oral cavity designation sent on the 837D.
    attr_accessor :oral_cavity_designation_code_4

    # For dental claims this holds the oral cavity designation sent on the 837D.
    attr_accessor :oral_cavity_designation_code_5

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :other_deduction_amount

    # This flag indicates if the benefit code has been overridden. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_benefit_code

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_cob_amt

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_co_ins_amt

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_co_pay_amt

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_ded_credit_amt

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_deductible_amt

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_federal_tax

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_local_tax

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_medicare_tax

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_not_covered_amt

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_plan_price

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_social_security

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_state_tax

    # Notes that the associated amount field was manually overrided by an application user or automated process that would skip adjudication calculations for this amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_with_hold_amt

    # Information field used in custom processing and reporting.
    attr_accessor :pp_o_price_plan_price_diff

    # The final paid amount for this service line based on allowed amount (Plan_Price) minus all applicable deductions. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :paid_amt

    # The partial loss amount for disability claims. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :partial_loss

    # For reference purposes, this hold the individual service line funding payor/account. If multiple payor/accounts are found on different service lines for the same claim, adjudication spits out an error.
    attr_accessor :payor_id

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :pharmacy_name

    # The place of service for the services being rendered on this service line.
    attr_accessor :place_of_service

    # The allowed amount for this service based on fee schedule, pricing, repricing, etc. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :plan_price

    # The premium deduction amount for disability claims. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :premium_deduction

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :prescriber_id

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :prescription_date

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :prescription_number

    # For reprice claims (typically submitted via 837), this notes the reprice method used to reprice this service line.
    attr_accessor :pricing_method

    # The rate associated with the reprice method (Pricing_Method).
    attr_accessor :pricing_rate

    # For life claims, this holds the principal amount for reporting. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :principal

    # The service being rendered on this claim.
    attr_accessor :procedure_code

    # The secondary service being rendered on this claim.
    attr_accessor :procedure_code2

    # The number of th eunits from this detail line that comes from the Prtocedure Code. This determines pricing for the line.
    attr_accessor :procedure_code_units

    # QPA (Qualified Payment Amount) values received in upcoming EDI transactions for the NSA (No Surprise Act) mandate.
    attr_accessor :qualifying_payment_amount

    # No longer in use.
    attr_accessor :reason_code

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :refill_indicator

    # Holds the submitted reprice savings amount for services that include this amount in the pricing calculation.
    attr_accessor :repriced_savings_amount

    # For dental claims, notes if this surface had services rendered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :root

    # The start date of the services being rendered.
    attr_accessor :service_date

    # The end date of the services being rendered.
    attr_accessor :service_thru

    # Based on taxable amount and various configurations, this holds the Social Security \"To Tax\" amount for disability claim.
    attr_accessor :soc_sec_amount_to_tax

    # The calculated Social Security tax amount based on the \"To Tax\" amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :social_security

    # Based on taxable amount and various configurations, this holds the State \"To Tax\" amount for disability claim.
    attr_accessor :state_amount_to_tax

    # The calculated State tax amount based on the \"To Tax\" amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :state_tax

    # A flat state tax amount applied in addition to the calculated tax amount.
    attr_accessor :state_tax_flat

    # When state taxes are calculated, this indicates the state the tax amount was calculated against.
    attr_accessor :state_tax_state

    # Holds the individaul status of this service line based on Ex Codes. A - Payable, D - Denied, E - Pended.
    attr_accessor :status_code

    # The units applied to this service.
    attr_accessor :svc_count

    # This holds the starting taxable amount based on pre-tax and pre-gross deductions applied to this service.
    attr_accessor :taxable_amount

    # For dental claims, this identifies the tooth, quadrant or arch being worked for this service.
    attr_accessor :tooth_number

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :uc_r_price

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :unit_dose

    # Pharmacy claim information submitted via file submission and used in reporting and interfaces.
    attr_accessor :unit_of_measure

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # For plans that allow withhold, this amount is used to track that amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :with_hold_amt

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_number' => :'batch_Number',
        :'batch_claim' => :'batch_Claim',
        :'claim_seq' => :'claim_Seq',
        :'adjustment_seq' => :'adjustment_Seq',
        :'ans_i_code' => :'ansI_Code',
        :'ap_c_code' => :'apC_Code',
        :'account_key' => :'account_Key',
        :'adjusted_from_adjustment_line' => :'adjusted_From_Adjustment_Line',
        :'adjusted_from_line' => :'adjusted_From_Line',
        :'auth_number' => :'auth_Number',
        :'auth_penalty' => :'auth_Penalty',
        :'auth_required' => :'auth_Required',
        :'benefit_code' => :'benefit_Code',
        :'benefit_rate_applied' => :'benefit_Rate_Applied',
        :'billed_price' => :'billed_Price',
        :'brand_indicator' => :'brand_Indicator',
        :'buccal' => :'buccal',
        :'cli_a_number' => :'cliA_Number',
        :'co_b_amt' => :'coB_Amt',
        :'co_b_hold' => :'coB_Hold',
        :'co_b_mem_resp' => :'coB_Mem_Resp',
        :'co_b_savings' => :'coB_Savings',
        :'co_b_savings_used' => :'coB_Savings_Used',
        :'calendar_year' => :'calendar_Year',
        :'capitation_claim' => :'capitation_Claim',
        :'check_id' => :'check_ID',
        :'co_ins_amt' => :'co_Ins_Amt',
        :'co_pay_amt' => :'co_Pay_Amt',
        :'currency_id' => :'currency_ID',
        :'days_supply' => :'days_Supply',
        :'ded_credit_amt' => :'ded_Credit_Amt',
        :'deductible_amt' => :'deductible_Amt',
        :'detail_plan_year' => :'detail_Plan_Year',
        :'diagnosis_code' => :'diagnosis_Code',
        :'discount_amt' => :'discount_Amt',
        :'dispense_as_written' => :'dispense_As_Written',
        :'distal' => :'distal',
        :'drug_code' => :'drug_Code',
        :'drug_quantity' => :'drug_Quantity',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'error_auth' => :'error_Auth',
        :'error_benefit' => :'error_Benefit',
        :'error_count' => :'error_Count',
        :'error_covered' => :'error_Covered',
        :'error_dates' => :'error_Dates',
        :'error_diagnosis' => :'error_Diagnosis',
        :'error_ex_code' => :'error_ExCode',
        :'error_modifier' => :'error_Modifier',
        :'error_place' => :'error_Place',
        :'error_price' => :'error_Price',
        :'error_procedure' => :'error_Procedure',
        :'ex_code' => :'ex_Code',
        :'ex_code2' => :'ex_Code2',
        :'ex_code3' => :'ex_Code3',
        :'fica' => :'fica',
        :'facial' => :'facial',
        :'federal_amount_to_tax' => :'federal_Amount_To_Tax',
        :'federal_tax' => :'federal_Tax',
        :'federal_tax_flat' => :'federal_Tax_Flat',
        :'fill_date' => :'fill_Date',
        :'flex_description' => :'flex_Description',
        :'formulary_indicator' => :'formulary_Indicator',
        :'incisal' => :'incisal',
        :'interest' => :'interest',
        :'labial' => :'labial',
        :'life_benefit' => :'life_Benefit',
        :'life_benefit_volume' => :'life_Benefit_Volume',
        :'line_control_number' => :'line_Control_Number',
        :'lingual' => :'lingual',
        :'local_tax' => :'local_Tax',
        :'mail_order_indicator' => :'mail_Order_Indicator',
        :'medicare_amount_to_tax' => :'medicare_Amount_To_Tax',
        :'medicare_tax' => :'medicare_Tax',
        :'mesial' => :'mesial',
        :'minutes_per_unit' => :'minutes_Per_Unit',
        :'modifier' => :'modifier',
        :'modifier_2' => :'modifier_2',
        :'modifier_3' => :'modifier_3',
        :'modifier_4' => :'modifier_4',
        :'modifier_units' => :'modifier_Units',
        :'not_covered_amt' => :'not_Covered_Amt',
        :'occlusal' => :'occlusal',
        :'oral_cavity_designation_code_1' => :'oral_Cavity_Designation_Code_1',
        :'oral_cavity_designation_code_2' => :'oral_Cavity_Designation_Code_2',
        :'oral_cavity_designation_code_3' => :'oral_Cavity_Designation_Code_3',
        :'oral_cavity_designation_code_4' => :'oral_Cavity_Designation_Code_4',
        :'oral_cavity_designation_code_5' => :'oral_Cavity_Designation_Code_5',
        :'other_deduction_amount' => :'other_Deduction_Amount',
        :'override_benefit_code' => :'override_Benefit_Code',
        :'override_cob_amt' => :'override_COB_Amt',
        :'override_co_ins_amt' => :'override_Co_Ins_Amt',
        :'override_co_pay_amt' => :'override_Co_Pay_Amt',
        :'override_ded_credit_amt' => :'override_Ded_Credit_Amt',
        :'override_deductible_amt' => :'override_Deductible_Amt',
        :'override_federal_tax' => :'override_Federal_Tax',
        :'override_local_tax' => :'override_Local_Tax',
        :'override_medicare_tax' => :'override_Medicare_Tax',
        :'override_not_covered_amt' => :'override_Not_Covered_Amt',
        :'override_plan_price' => :'override_Plan_Price',
        :'override_social_security' => :'override_Social_Security',
        :'override_state_tax' => :'override_State_Tax',
        :'override_with_hold_amt' => :'override_With_Hold_Amt',
        :'pp_o_price_plan_price_diff' => :'ppO_Price_Plan_Price_Diff',
        :'paid_amt' => :'paid_Amt',
        :'partial_loss' => :'partial_Loss',
        :'payor_id' => :'payor_ID',
        :'pharmacy_name' => :'pharmacy_Name',
        :'place_of_service' => :'place_Of_Service',
        :'plan_price' => :'plan_Price',
        :'premium_deduction' => :'premium_Deduction',
        :'prescriber_id' => :'prescriber_ID',
        :'prescription_date' => :'prescription_Date',
        :'prescription_number' => :'prescription_Number',
        :'pricing_method' => :'pricing_Method',
        :'pricing_rate' => :'pricing_Rate',
        :'principal' => :'principal',
        :'procedure_code' => :'procedure_Code',
        :'procedure_code2' => :'procedure_Code2',
        :'procedure_code_units' => :'procedure_Code_Units',
        :'qualifying_payment_amount' => :'qualifying_Payment_Amount',
        :'reason_code' => :'reason_Code',
        :'refill_indicator' => :'refill_Indicator',
        :'repriced_savings_amount' => :'repriced_Savings_Amount',
        :'root' => :'root',
        :'service_date' => :'service_Date',
        :'service_thru' => :'service_Thru',
        :'soc_sec_amount_to_tax' => :'socSec_Amount_To_Tax',
        :'social_security' => :'social_Security',
        :'state_amount_to_tax' => :'state_Amount_To_Tax',
        :'state_tax' => :'state_Tax',
        :'state_tax_flat' => :'state_Tax_Flat',
        :'state_tax_state' => :'state_Tax_State',
        :'status_code' => :'status_Code',
        :'svc_count' => :'svc_Count',
        :'taxable_amount' => :'taxable_Amount',
        :'tooth_number' => :'tooth_Number',
        :'uc_r_price' => :'ucR_Price',
        :'unit_dose' => :'unit_Dose',
        :'unit_of_measure' => :'unit_Of_Measure',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'with_hold_amt' => :'with_Hold_Amt'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_number' => :'Integer',
        :'batch_claim' => :'Integer',
        :'claim_seq' => :'String',
        :'adjustment_seq' => :'String',
        :'ans_i_code' => :'String',
        :'ap_c_code' => :'String',
        :'account_key' => :'Integer',
        :'adjusted_from_adjustment_line' => :'String',
        :'adjusted_from_line' => :'String',
        :'auth_number' => :'String',
        :'auth_penalty' => :'Float',
        :'auth_required' => :'String',
        :'benefit_code' => :'String',
        :'benefit_rate_applied' => :'Float',
        :'billed_price' => :'Float',
        :'brand_indicator' => :'String',
        :'buccal' => :'Boolean',
        :'cli_a_number' => :'String',
        :'co_b_amt' => :'Float',
        :'co_b_hold' => :'Float',
        :'co_b_mem_resp' => :'Float',
        :'co_b_savings' => :'Float',
        :'co_b_savings_used' => :'Float',
        :'calendar_year' => :'String',
        :'capitation_claim' => :'Boolean',
        :'check_id' => :'Integer',
        :'co_ins_amt' => :'Float',
        :'co_pay_amt' => :'Float',
        :'currency_id' => :'String',
        :'days_supply' => :'Integer',
        :'ded_credit_amt' => :'Float',
        :'deductible_amt' => :'Float',
        :'detail_plan_year' => :'String',
        :'diagnosis_code' => :'String',
        :'discount_amt' => :'Float',
        :'dispense_as_written' => :'Integer',
        :'distal' => :'Boolean',
        :'drug_code' => :'String',
        :'drug_quantity' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'error_auth' => :'String',
        :'error_benefit' => :'String',
        :'error_count' => :'String',
        :'error_covered' => :'String',
        :'error_dates' => :'String',
        :'error_diagnosis' => :'String',
        :'error_ex_code' => :'String',
        :'error_modifier' => :'String',
        :'error_place' => :'String',
        :'error_price' => :'String',
        :'error_procedure' => :'String',
        :'ex_code' => :'String',
        :'ex_code2' => :'String',
        :'ex_code3' => :'String',
        :'fica' => :'Float',
        :'facial' => :'Boolean',
        :'federal_amount_to_tax' => :'Float',
        :'federal_tax' => :'Float',
        :'federal_tax_flat' => :'Float',
        :'fill_date' => :'Time',
        :'flex_description' => :'String',
        :'formulary_indicator' => :'String',
        :'incisal' => :'Boolean',
        :'interest' => :'Float',
        :'labial' => :'Boolean',
        :'life_benefit' => :'String',
        :'life_benefit_volume' => :'Float',
        :'line_control_number' => :'String',
        :'lingual' => :'Boolean',
        :'local_tax' => :'Float',
        :'mail_order_indicator' => :'String',
        :'medicare_amount_to_tax' => :'Float',
        :'medicare_tax' => :'Float',
        :'mesial' => :'Boolean',
        :'minutes_per_unit' => :'Float',
        :'modifier' => :'String',
        :'modifier_2' => :'String',
        :'modifier_3' => :'String',
        :'modifier_4' => :'String',
        :'modifier_units' => :'Float',
        :'not_covered_amt' => :'Float',
        :'occlusal' => :'Boolean',
        :'oral_cavity_designation_code_1' => :'String',
        :'oral_cavity_designation_code_2' => :'String',
        :'oral_cavity_designation_code_3' => :'String',
        :'oral_cavity_designation_code_4' => :'String',
        :'oral_cavity_designation_code_5' => :'String',
        :'other_deduction_amount' => :'Float',
        :'override_benefit_code' => :'Boolean',
        :'override_cob_amt' => :'Boolean',
        :'override_co_ins_amt' => :'Boolean',
        :'override_co_pay_amt' => :'Boolean',
        :'override_ded_credit_amt' => :'Boolean',
        :'override_deductible_amt' => :'Boolean',
        :'override_federal_tax' => :'Boolean',
        :'override_local_tax' => :'Boolean',
        :'override_medicare_tax' => :'Boolean',
        :'override_not_covered_amt' => :'Boolean',
        :'override_plan_price' => :'Boolean',
        :'override_social_security' => :'Boolean',
        :'override_state_tax' => :'Boolean',
        :'override_with_hold_amt' => :'Boolean',
        :'pp_o_price_plan_price_diff' => :'Float',
        :'paid_amt' => :'Float',
        :'partial_loss' => :'Float',
        :'payor_id' => :'String',
        :'pharmacy_name' => :'String',
        :'place_of_service' => :'String',
        :'plan_price' => :'Float',
        :'premium_deduction' => :'Float',
        :'prescriber_id' => :'String',
        :'prescription_date' => :'Time',
        :'prescription_number' => :'String',
        :'pricing_method' => :'String',
        :'pricing_rate' => :'Float',
        :'principal' => :'Float',
        :'procedure_code' => :'String',
        :'procedure_code2' => :'String',
        :'procedure_code_units' => :'Float',
        :'qualifying_payment_amount' => :'Float',
        :'reason_code' => :'Integer',
        :'refill_indicator' => :'Integer',
        :'repriced_savings_amount' => :'Float',
        :'root' => :'Boolean',
        :'service_date' => :'Time',
        :'service_thru' => :'Time',
        :'soc_sec_amount_to_tax' => :'Float',
        :'social_security' => :'Float',
        :'state_amount_to_tax' => :'Float',
        :'state_tax' => :'Float',
        :'state_tax_flat' => :'Float',
        :'state_tax_state' => :'String',
        :'status_code' => :'String',
        :'svc_count' => :'Float',
        :'taxable_amount' => :'Float',
        :'tooth_number' => :'Integer',
        :'uc_r_price' => :'Float',
        :'unit_dose' => :'Integer',
        :'unit_of_measure' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'with_hold_amt' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ans_i_code',
        :'ap_c_code',
        :'account_key',
        :'adjusted_from_adjustment_line',
        :'adjusted_from_line',
        :'auth_number',
        :'auth_penalty',
        :'auth_required',
        :'benefit_code',
        :'benefit_rate_applied',
        :'brand_indicator',
        :'cli_a_number',
        :'co_b_hold',
        :'co_b_mem_resp',
        :'co_b_savings',
        :'co_b_savings_used',
        :'calendar_year',
        :'check_id',
        :'currency_id',
        :'days_supply',
        :'ded_credit_amt',
        :'detail_plan_year',
        :'diagnosis_code',
        :'dispense_as_written',
        :'drug_code',
        :'drug_quantity',
        :'entry_user',
        :'error_auth',
        :'error_benefit',
        :'error_count',
        :'error_covered',
        :'error_dates',
        :'error_diagnosis',
        :'error_ex_code',
        :'error_modifier',
        :'error_place',
        :'error_price',
        :'error_procedure',
        :'ex_code',
        :'ex_code2',
        :'ex_code3',
        :'federal_amount_to_tax',
        :'federal_tax_flat',
        :'fill_date',
        :'flex_description',
        :'formulary_indicator',
        :'life_benefit',
        :'life_benefit_volume',
        :'line_control_number',
        :'local_tax',
        :'mail_order_indicator',
        :'medicare_amount_to_tax',
        :'medicare_tax',
        :'minutes_per_unit',
        :'modifier',
        :'modifier_2',
        :'modifier_3',
        :'modifier_4',
        :'modifier_units',
        :'oral_cavity_designation_code_1',
        :'oral_cavity_designation_code_2',
        :'oral_cavity_designation_code_3',
        :'oral_cavity_designation_code_4',
        :'oral_cavity_designation_code_5',
        :'other_deduction_amount',
        :'pp_o_price_plan_price_diff',
        :'payor_id',
        :'pharmacy_name',
        :'place_of_service',
        :'prescriber_id',
        :'prescription_date',
        :'prescription_number',
        :'pricing_method',
        :'pricing_rate',
        :'procedure_code',
        :'procedure_code2',
        :'procedure_code_units',
        :'qualifying_payment_amount',
        :'reason_code',
        :'refill_indicator',
        :'repriced_savings_amount',
        :'service_date',
        :'service_thru',
        :'soc_sec_amount_to_tax',
        :'state_amount_to_tax',
        :'state_tax_flat',
        :'state_tax_state',
        :'status_code',
        :'svc_count',
        :'taxable_amount',
        :'tooth_number',
        :'unit_dose',
        :'unit_of_measure',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimBatchDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimBatchDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'batch_claim')
        self.batch_claim = attributes[:'batch_claim']
      else
        self.batch_claim = nil
      end

      if attributes.key?(:'claim_seq')
        self.claim_seq = attributes[:'claim_seq']
      else
        self.claim_seq = nil
      end

      if attributes.key?(:'adjustment_seq')
        self.adjustment_seq = attributes[:'adjustment_seq']
      else
        self.adjustment_seq = nil
      end

      if attributes.key?(:'ans_i_code')
        self.ans_i_code = attributes[:'ans_i_code']
      end

      if attributes.key?(:'ap_c_code')
        self.ap_c_code = attributes[:'ap_c_code']
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'adjusted_from_adjustment_line')
        self.adjusted_from_adjustment_line = attributes[:'adjusted_from_adjustment_line']
      end

      if attributes.key?(:'adjusted_from_line')
        self.adjusted_from_line = attributes[:'adjusted_from_line']
      end

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      end

      if attributes.key?(:'auth_penalty')
        self.auth_penalty = attributes[:'auth_penalty']
      end

      if attributes.key?(:'auth_required')
        self.auth_required = attributes[:'auth_required']
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'benefit_rate_applied')
        self.benefit_rate_applied = attributes[:'benefit_rate_applied']
      end

      if attributes.key?(:'billed_price')
        self.billed_price = attributes[:'billed_price']
      else
        self.billed_price = nil
      end

      if attributes.key?(:'brand_indicator')
        self.brand_indicator = attributes[:'brand_indicator']
      end

      if attributes.key?(:'buccal')
        self.buccal = attributes[:'buccal']
      else
        self.buccal = nil
      end

      if attributes.key?(:'cli_a_number')
        self.cli_a_number = attributes[:'cli_a_number']
      end

      if attributes.key?(:'co_b_amt')
        self.co_b_amt = attributes[:'co_b_amt']
      else
        self.co_b_amt = nil
      end

      if attributes.key?(:'co_b_hold')
        self.co_b_hold = attributes[:'co_b_hold']
      end

      if attributes.key?(:'co_b_mem_resp')
        self.co_b_mem_resp = attributes[:'co_b_mem_resp']
      end

      if attributes.key?(:'co_b_savings')
        self.co_b_savings = attributes[:'co_b_savings']
      end

      if attributes.key?(:'co_b_savings_used')
        self.co_b_savings_used = attributes[:'co_b_savings_used']
      end

      if attributes.key?(:'calendar_year')
        self.calendar_year = attributes[:'calendar_year']
      end

      if attributes.key?(:'capitation_claim')
        self.capitation_claim = attributes[:'capitation_claim']
      else
        self.capitation_claim = nil
      end

      if attributes.key?(:'check_id')
        self.check_id = attributes[:'check_id']
      end

      if attributes.key?(:'co_ins_amt')
        self.co_ins_amt = attributes[:'co_ins_amt']
      else
        self.co_ins_amt = nil
      end

      if attributes.key?(:'co_pay_amt')
        self.co_pay_amt = attributes[:'co_pay_amt']
      else
        self.co_pay_amt = nil
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'days_supply')
        self.days_supply = attributes[:'days_supply']
      end

      if attributes.key?(:'ded_credit_amt')
        self.ded_credit_amt = attributes[:'ded_credit_amt']
      end

      if attributes.key?(:'deductible_amt')
        self.deductible_amt = attributes[:'deductible_amt']
      else
        self.deductible_amt = nil
      end

      if attributes.key?(:'detail_plan_year')
        self.detail_plan_year = attributes[:'detail_plan_year']
      end

      if attributes.key?(:'diagnosis_code')
        self.diagnosis_code = attributes[:'diagnosis_code']
      end

      if attributes.key?(:'discount_amt')
        self.discount_amt = attributes[:'discount_amt']
      else
        self.discount_amt = nil
      end

      if attributes.key?(:'dispense_as_written')
        self.dispense_as_written = attributes[:'dispense_as_written']
      end

      if attributes.key?(:'distal')
        self.distal = attributes[:'distal']
      else
        self.distal = nil
      end

      if attributes.key?(:'drug_code')
        self.drug_code = attributes[:'drug_code']
      end

      if attributes.key?(:'drug_quantity')
        self.drug_quantity = attributes[:'drug_quantity']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'error_auth')
        self.error_auth = attributes[:'error_auth']
      end

      if attributes.key?(:'error_benefit')
        self.error_benefit = attributes[:'error_benefit']
      end

      if attributes.key?(:'error_count')
        self.error_count = attributes[:'error_count']
      end

      if attributes.key?(:'error_covered')
        self.error_covered = attributes[:'error_covered']
      end

      if attributes.key?(:'error_dates')
        self.error_dates = attributes[:'error_dates']
      end

      if attributes.key?(:'error_diagnosis')
        self.error_diagnosis = attributes[:'error_diagnosis']
      end

      if attributes.key?(:'error_ex_code')
        self.error_ex_code = attributes[:'error_ex_code']
      end

      if attributes.key?(:'error_modifier')
        self.error_modifier = attributes[:'error_modifier']
      end

      if attributes.key?(:'error_place')
        self.error_place = attributes[:'error_place']
      end

      if attributes.key?(:'error_price')
        self.error_price = attributes[:'error_price']
      end

      if attributes.key?(:'error_procedure')
        self.error_procedure = attributes[:'error_procedure']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'ex_code2')
        self.ex_code2 = attributes[:'ex_code2']
      end

      if attributes.key?(:'ex_code3')
        self.ex_code3 = attributes[:'ex_code3']
      end

      if attributes.key?(:'fica')
        self.fica = attributes[:'fica']
      else
        self.fica = nil
      end

      if attributes.key?(:'facial')
        self.facial = attributes[:'facial']
      else
        self.facial = nil
      end

      if attributes.key?(:'federal_amount_to_tax')
        self.federal_amount_to_tax = attributes[:'federal_amount_to_tax']
      end

      if attributes.key?(:'federal_tax')
        self.federal_tax = attributes[:'federal_tax']
      else
        self.federal_tax = nil
      end

      if attributes.key?(:'federal_tax_flat')
        self.federal_tax_flat = attributes[:'federal_tax_flat']
      end

      if attributes.key?(:'fill_date')
        self.fill_date = attributes[:'fill_date']
      end

      if attributes.key?(:'flex_description')
        self.flex_description = attributes[:'flex_description']
      end

      if attributes.key?(:'formulary_indicator')
        self.formulary_indicator = attributes[:'formulary_indicator']
      end

      if attributes.key?(:'incisal')
        self.incisal = attributes[:'incisal']
      else
        self.incisal = nil
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      else
        self.interest = nil
      end

      if attributes.key?(:'labial')
        self.labial = attributes[:'labial']
      else
        self.labial = nil
      end

      if attributes.key?(:'life_benefit')
        self.life_benefit = attributes[:'life_benefit']
      end

      if attributes.key?(:'life_benefit_volume')
        self.life_benefit_volume = attributes[:'life_benefit_volume']
      end

      if attributes.key?(:'line_control_number')
        self.line_control_number = attributes[:'line_control_number']
      end

      if attributes.key?(:'lingual')
        self.lingual = attributes[:'lingual']
      else
        self.lingual = nil
      end

      if attributes.key?(:'local_tax')
        self.local_tax = attributes[:'local_tax']
      end

      if attributes.key?(:'mail_order_indicator')
        self.mail_order_indicator = attributes[:'mail_order_indicator']
      end

      if attributes.key?(:'medicare_amount_to_tax')
        self.medicare_amount_to_tax = attributes[:'medicare_amount_to_tax']
      end

      if attributes.key?(:'medicare_tax')
        self.medicare_tax = attributes[:'medicare_tax']
      end

      if attributes.key?(:'mesial')
        self.mesial = attributes[:'mesial']
      else
        self.mesial = nil
      end

      if attributes.key?(:'minutes_per_unit')
        self.minutes_per_unit = attributes[:'minutes_per_unit']
      end

      if attributes.key?(:'modifier')
        self.modifier = attributes[:'modifier']
      end

      if attributes.key?(:'modifier_2')
        self.modifier_2 = attributes[:'modifier_2']
      end

      if attributes.key?(:'modifier_3')
        self.modifier_3 = attributes[:'modifier_3']
      end

      if attributes.key?(:'modifier_4')
        self.modifier_4 = attributes[:'modifier_4']
      end

      if attributes.key?(:'modifier_units')
        self.modifier_units = attributes[:'modifier_units']
      end

      if attributes.key?(:'not_covered_amt')
        self.not_covered_amt = attributes[:'not_covered_amt']
      else
        self.not_covered_amt = nil
      end

      if attributes.key?(:'occlusal')
        self.occlusal = attributes[:'occlusal']
      else
        self.occlusal = nil
      end

      if attributes.key?(:'oral_cavity_designation_code_1')
        self.oral_cavity_designation_code_1 = attributes[:'oral_cavity_designation_code_1']
      end

      if attributes.key?(:'oral_cavity_designation_code_2')
        self.oral_cavity_designation_code_2 = attributes[:'oral_cavity_designation_code_2']
      end

      if attributes.key?(:'oral_cavity_designation_code_3')
        self.oral_cavity_designation_code_3 = attributes[:'oral_cavity_designation_code_3']
      end

      if attributes.key?(:'oral_cavity_designation_code_4')
        self.oral_cavity_designation_code_4 = attributes[:'oral_cavity_designation_code_4']
      end

      if attributes.key?(:'oral_cavity_designation_code_5')
        self.oral_cavity_designation_code_5 = attributes[:'oral_cavity_designation_code_5']
      end

      if attributes.key?(:'other_deduction_amount')
        self.other_deduction_amount = attributes[:'other_deduction_amount']
      end

      if attributes.key?(:'override_benefit_code')
        self.override_benefit_code = attributes[:'override_benefit_code']
      else
        self.override_benefit_code = nil
      end

      if attributes.key?(:'override_cob_amt')
        self.override_cob_amt = attributes[:'override_cob_amt']
      else
        self.override_cob_amt = nil
      end

      if attributes.key?(:'override_co_ins_amt')
        self.override_co_ins_amt = attributes[:'override_co_ins_amt']
      else
        self.override_co_ins_amt = nil
      end

      if attributes.key?(:'override_co_pay_amt')
        self.override_co_pay_amt = attributes[:'override_co_pay_amt']
      else
        self.override_co_pay_amt = nil
      end

      if attributes.key?(:'override_ded_credit_amt')
        self.override_ded_credit_amt = attributes[:'override_ded_credit_amt']
      else
        self.override_ded_credit_amt = nil
      end

      if attributes.key?(:'override_deductible_amt')
        self.override_deductible_amt = attributes[:'override_deductible_amt']
      else
        self.override_deductible_amt = nil
      end

      if attributes.key?(:'override_federal_tax')
        self.override_federal_tax = attributes[:'override_federal_tax']
      else
        self.override_federal_tax = nil
      end

      if attributes.key?(:'override_local_tax')
        self.override_local_tax = attributes[:'override_local_tax']
      else
        self.override_local_tax = nil
      end

      if attributes.key?(:'override_medicare_tax')
        self.override_medicare_tax = attributes[:'override_medicare_tax']
      else
        self.override_medicare_tax = nil
      end

      if attributes.key?(:'override_not_covered_amt')
        self.override_not_covered_amt = attributes[:'override_not_covered_amt']
      else
        self.override_not_covered_amt = nil
      end

      if attributes.key?(:'override_plan_price')
        self.override_plan_price = attributes[:'override_plan_price']
      else
        self.override_plan_price = nil
      end

      if attributes.key?(:'override_social_security')
        self.override_social_security = attributes[:'override_social_security']
      else
        self.override_social_security = nil
      end

      if attributes.key?(:'override_state_tax')
        self.override_state_tax = attributes[:'override_state_tax']
      else
        self.override_state_tax = nil
      end

      if attributes.key?(:'override_with_hold_amt')
        self.override_with_hold_amt = attributes[:'override_with_hold_amt']
      else
        self.override_with_hold_amt = nil
      end

      if attributes.key?(:'pp_o_price_plan_price_diff')
        self.pp_o_price_plan_price_diff = attributes[:'pp_o_price_plan_price_diff']
      end

      if attributes.key?(:'paid_amt')
        self.paid_amt = attributes[:'paid_amt']
      else
        self.paid_amt = nil
      end

      if attributes.key?(:'partial_loss')
        self.partial_loss = attributes[:'partial_loss']
      else
        self.partial_loss = nil
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'pharmacy_name')
        self.pharmacy_name = attributes[:'pharmacy_name']
      end

      if attributes.key?(:'place_of_service')
        self.place_of_service = attributes[:'place_of_service']
      end

      if attributes.key?(:'plan_price')
        self.plan_price = attributes[:'plan_price']
      else
        self.plan_price = nil
      end

      if attributes.key?(:'premium_deduction')
        self.premium_deduction = attributes[:'premium_deduction']
      else
        self.premium_deduction = nil
      end

      if attributes.key?(:'prescriber_id')
        self.prescriber_id = attributes[:'prescriber_id']
      end

      if attributes.key?(:'prescription_date')
        self.prescription_date = attributes[:'prescription_date']
      end

      if attributes.key?(:'prescription_number')
        self.prescription_number = attributes[:'prescription_number']
      end

      if attributes.key?(:'pricing_method')
        self.pricing_method = attributes[:'pricing_method']
      end

      if attributes.key?(:'pricing_rate')
        self.pricing_rate = attributes[:'pricing_rate']
      end

      if attributes.key?(:'principal')
        self.principal = attributes[:'principal']
      else
        self.principal = nil
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'procedure_code2')
        self.procedure_code2 = attributes[:'procedure_code2']
      end

      if attributes.key?(:'procedure_code_units')
        self.procedure_code_units = attributes[:'procedure_code_units']
      end

      if attributes.key?(:'qualifying_payment_amount')
        self.qualifying_payment_amount = attributes[:'qualifying_payment_amount']
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'refill_indicator')
        self.refill_indicator = attributes[:'refill_indicator']
      end

      if attributes.key?(:'repriced_savings_amount')
        self.repriced_savings_amount = attributes[:'repriced_savings_amount']
      end

      if attributes.key?(:'root')
        self.root = attributes[:'root']
      else
        self.root = nil
      end

      if attributes.key?(:'service_date')
        self.service_date = attributes[:'service_date']
      end

      if attributes.key?(:'service_thru')
        self.service_thru = attributes[:'service_thru']
      end

      if attributes.key?(:'soc_sec_amount_to_tax')
        self.soc_sec_amount_to_tax = attributes[:'soc_sec_amount_to_tax']
      end

      if attributes.key?(:'social_security')
        self.social_security = attributes[:'social_security']
      else
        self.social_security = nil
      end

      if attributes.key?(:'state_amount_to_tax')
        self.state_amount_to_tax = attributes[:'state_amount_to_tax']
      end

      if attributes.key?(:'state_tax')
        self.state_tax = attributes[:'state_tax']
      else
        self.state_tax = nil
      end

      if attributes.key?(:'state_tax_flat')
        self.state_tax_flat = attributes[:'state_tax_flat']
      end

      if attributes.key?(:'state_tax_state')
        self.state_tax_state = attributes[:'state_tax_state']
      end

      if attributes.key?(:'status_code')
        self.status_code = attributes[:'status_code']
      end

      if attributes.key?(:'svc_count')
        self.svc_count = attributes[:'svc_count']
      end

      if attributes.key?(:'taxable_amount')
        self.taxable_amount = attributes[:'taxable_amount']
      end

      if attributes.key?(:'tooth_number')
        self.tooth_number = attributes[:'tooth_number']
      end

      if attributes.key?(:'uc_r_price')
        self.uc_r_price = attributes[:'uc_r_price']
      else
        self.uc_r_price = nil
      end

      if attributes.key?(:'unit_dose')
        self.unit_dose = attributes[:'unit_dose']
      end

      if attributes.key?(:'unit_of_measure')
        self.unit_of_measure = attributes[:'unit_of_measure']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'with_hold_amt')
        self.with_hold_amt = attributes[:'with_hold_amt']
      else
        self.with_hold_amt = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if @batch_claim.nil?
        invalid_properties.push('invalid value for "batch_claim", batch_claim cannot be nil.')
      end

      if @claim_seq.nil?
        invalid_properties.push('invalid value for "claim_seq", claim_seq cannot be nil.')
      end

      if @claim_seq.to_s.length > 2
        invalid_properties.push('invalid value for "claim_seq", the character length must be smaller than or equal to 2.')
      end

      if @claim_seq.to_s.length < 1
        invalid_properties.push('invalid value for "claim_seq", the character length must be great than or equal to 1.')
      end

      if @adjustment_seq.nil?
        invalid_properties.push('invalid value for "adjustment_seq", adjustment_seq cannot be nil.')
      end

      if @adjustment_seq.to_s.length > 3
        invalid_properties.push('invalid value for "adjustment_seq", the character length must be smaller than or equal to 3.')
      end

      if @adjustment_seq.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_seq", the character length must be great than or equal to 1.')
      end

      if !@ans_i_code.nil? && @ans_i_code.to_s.length > 8
        invalid_properties.push('invalid value for "ans_i_code", the character length must be smaller than or equal to 8.')
      end

      if !@ap_c_code.nil? && @ap_c_code.to_s.length > 8
        invalid_properties.push('invalid value for "ap_c_code", the character length must be smaller than or equal to 8.')
      end

      if !@adjusted_from_adjustment_line.nil? && @adjusted_from_adjustment_line.to_s.length > 3
        invalid_properties.push('invalid value for "adjusted_from_adjustment_line", the character length must be smaller than or equal to 3.')
      end

      if !@adjusted_from_line.nil? && @adjusted_from_line.to_s.length > 2
        invalid_properties.push('invalid value for "adjusted_from_line", the character length must be smaller than or equal to 2.')
      end

      if !@auth_number.nil? && @auth_number.to_s.length > 20
        invalid_properties.push('invalid value for "auth_number", the character length must be smaller than or equal to 20.')
      end

      if !@auth_required.nil? && @auth_required.to_s.length > 1
        invalid_properties.push('invalid value for "auth_required", the character length must be smaller than or equal to 1.')
      end

      if !@benefit_code.nil? && @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if @billed_price.nil?
        invalid_properties.push('invalid value for "billed_price", billed_price cannot be nil.')
      end

      if !@brand_indicator.nil? && @brand_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "brand_indicator", the character length must be smaller than or equal to 1.')
      end

      if @buccal.nil?
        invalid_properties.push('invalid value for "buccal", buccal cannot be nil.')
      end

      if !@cli_a_number.nil? && @cli_a_number.to_s.length > 32
        invalid_properties.push('invalid value for "cli_a_number", the character length must be smaller than or equal to 32.')
      end

      if @co_b_amt.nil?
        invalid_properties.push('invalid value for "co_b_amt", co_b_amt cannot be nil.')
      end

      if !@calendar_year.nil? && @calendar_year.to_s.length > 4
        invalid_properties.push('invalid value for "calendar_year", the character length must be smaller than or equal to 4.')
      end

      if @capitation_claim.nil?
        invalid_properties.push('invalid value for "capitation_claim", capitation_claim cannot be nil.')
      end

      if @co_ins_amt.nil?
        invalid_properties.push('invalid value for "co_ins_amt", co_ins_amt cannot be nil.')
      end

      if @co_pay_amt.nil?
        invalid_properties.push('invalid value for "co_pay_amt", co_pay_amt cannot be nil.')
      end

      if !@currency_id.nil? && @currency_id.to_s.length > 16
        invalid_properties.push('invalid value for "currency_id", the character length must be smaller than or equal to 16.')
      end

      if @deductible_amt.nil?
        invalid_properties.push('invalid value for "deductible_amt", deductible_amt cannot be nil.')
      end

      if !@detail_plan_year.nil? && @detail_plan_year.to_s.length > 8
        invalid_properties.push('invalid value for "detail_plan_year", the character length must be smaller than or equal to 8.')
      end

      if !@diagnosis_code.nil? && @diagnosis_code.to_s.length > 8
        invalid_properties.push('invalid value for "diagnosis_code", the character length must be smaller than or equal to 8.')
      end

      if @discount_amt.nil?
        invalid_properties.push('invalid value for "discount_amt", discount_amt cannot be nil.')
      end

      if @distal.nil?
        invalid_properties.push('invalid value for "distal", distal cannot be nil.')
      end

      if !@drug_code.nil? && @drug_code.to_s.length > 20
        invalid_properties.push('invalid value for "drug_code", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@error_auth.nil? && @error_auth.to_s.length > 1
        invalid_properties.push('invalid value for "error_auth", the character length must be smaller than or equal to 1.')
      end

      if !@error_benefit.nil? && @error_benefit.to_s.length > 1
        invalid_properties.push('invalid value for "error_benefit", the character length must be smaller than or equal to 1.')
      end

      if !@error_count.nil? && @error_count.to_s.length > 1
        invalid_properties.push('invalid value for "error_count", the character length must be smaller than or equal to 1.')
      end

      if !@error_covered.nil? && @error_covered.to_s.length > 1
        invalid_properties.push('invalid value for "error_covered", the character length must be smaller than or equal to 1.')
      end

      if !@error_dates.nil? && @error_dates.to_s.length > 1
        invalid_properties.push('invalid value for "error_dates", the character length must be smaller than or equal to 1.')
      end

      if !@error_diagnosis.nil? && @error_diagnosis.to_s.length > 1
        invalid_properties.push('invalid value for "error_diagnosis", the character length must be smaller than or equal to 1.')
      end

      if !@error_ex_code.nil? && @error_ex_code.to_s.length > 1
        invalid_properties.push('invalid value for "error_ex_code", the character length must be smaller than or equal to 1.')
      end

      if !@error_modifier.nil? && @error_modifier.to_s.length > 1
        invalid_properties.push('invalid value for "error_modifier", the character length must be smaller than or equal to 1.')
      end

      if !@error_place.nil? && @error_place.to_s.length > 1
        invalid_properties.push('invalid value for "error_place", the character length must be smaller than or equal to 1.')
      end

      if !@error_price.nil? && @error_price.to_s.length > 1
        invalid_properties.push('invalid value for "error_price", the character length must be smaller than or equal to 1.')
      end

      if !@error_procedure.nil? && @error_procedure.to_s.length > 1
        invalid_properties.push('invalid value for "error_procedure", the character length must be smaller than or equal to 1.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@ex_code2.nil? && @ex_code2.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code2", the character length must be smaller than or equal to 6.')
      end

      if !@ex_code3.nil? && @ex_code3.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code3", the character length must be smaller than or equal to 6.')
      end

      if @fica.nil?
        invalid_properties.push('invalid value for "fica", fica cannot be nil.')
      end

      if @facial.nil?
        invalid_properties.push('invalid value for "facial", facial cannot be nil.')
      end

      if @federal_tax.nil?
        invalid_properties.push('invalid value for "federal_tax", federal_tax cannot be nil.')
      end

      if !@flex_description.nil? && @flex_description.to_s.length > 128
        invalid_properties.push('invalid value for "flex_description", the character length must be smaller than or equal to 128.')
      end

      if !@formulary_indicator.nil? && @formulary_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "formulary_indicator", the character length must be smaller than or equal to 1.')
      end

      if @incisal.nil?
        invalid_properties.push('invalid value for "incisal", incisal cannot be nil.')
      end

      if @interest.nil?
        invalid_properties.push('invalid value for "interest", interest cannot be nil.')
      end

      if @labial.nil?
        invalid_properties.push('invalid value for "labial", labial cannot be nil.')
      end

      if !@life_benefit.nil? && @life_benefit.to_s.length > 10
        invalid_properties.push('invalid value for "life_benefit", the character length must be smaller than or equal to 10.')
      end

      if !@line_control_number.nil? && @line_control_number.to_s.length > 64
        invalid_properties.push('invalid value for "line_control_number", the character length must be smaller than or equal to 64.')
      end

      if @lingual.nil?
        invalid_properties.push('invalid value for "lingual", lingual cannot be nil.')
      end

      if !@mail_order_indicator.nil? && @mail_order_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "mail_order_indicator", the character length must be smaller than or equal to 1.')
      end

      if @mesial.nil?
        invalid_properties.push('invalid value for "mesial", mesial cannot be nil.')
      end

      if !@modifier.nil? && @modifier.to_s.length > 8
        invalid_properties.push('invalid value for "modifier", the character length must be smaller than or equal to 8.')
      end

      if !@modifier_2.nil? && @modifier_2.to_s.length > 8
        invalid_properties.push('invalid value for "modifier_2", the character length must be smaller than or equal to 8.')
      end

      if !@modifier_3.nil? && @modifier_3.to_s.length > 8
        invalid_properties.push('invalid value for "modifier_3", the character length must be smaller than or equal to 8.')
      end

      if !@modifier_4.nil? && @modifier_4.to_s.length > 8
        invalid_properties.push('invalid value for "modifier_4", the character length must be smaller than or equal to 8.')
      end

      if @not_covered_amt.nil?
        invalid_properties.push('invalid value for "not_covered_amt", not_covered_amt cannot be nil.')
      end

      if @occlusal.nil?
        invalid_properties.push('invalid value for "occlusal", occlusal cannot be nil.')
      end

      if !@oral_cavity_designation_code_1.nil? && @oral_cavity_designation_code_1.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_1", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_2.nil? && @oral_cavity_designation_code_2.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_2", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_3.nil? && @oral_cavity_designation_code_3.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_3", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_4.nil? && @oral_cavity_designation_code_4.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_4", the character length must be smaller than or equal to 3.')
      end

      if !@oral_cavity_designation_code_5.nil? && @oral_cavity_designation_code_5.to_s.length > 3
        invalid_properties.push('invalid value for "oral_cavity_designation_code_5", the character length must be smaller than or equal to 3.')
      end

      if @override_benefit_code.nil?
        invalid_properties.push('invalid value for "override_benefit_code", override_benefit_code cannot be nil.')
      end

      if @override_cob_amt.nil?
        invalid_properties.push('invalid value for "override_cob_amt", override_cob_amt cannot be nil.')
      end

      if @override_co_ins_amt.nil?
        invalid_properties.push('invalid value for "override_co_ins_amt", override_co_ins_amt cannot be nil.')
      end

      if @override_co_pay_amt.nil?
        invalid_properties.push('invalid value for "override_co_pay_amt", override_co_pay_amt cannot be nil.')
      end

      if @override_ded_credit_amt.nil?
        invalid_properties.push('invalid value for "override_ded_credit_amt", override_ded_credit_amt cannot be nil.')
      end

      if @override_deductible_amt.nil?
        invalid_properties.push('invalid value for "override_deductible_amt", override_deductible_amt cannot be nil.')
      end

      if @override_federal_tax.nil?
        invalid_properties.push('invalid value for "override_federal_tax", override_federal_tax cannot be nil.')
      end

      if @override_local_tax.nil?
        invalid_properties.push('invalid value for "override_local_tax", override_local_tax cannot be nil.')
      end

      if @override_medicare_tax.nil?
        invalid_properties.push('invalid value for "override_medicare_tax", override_medicare_tax cannot be nil.')
      end

      if @override_not_covered_amt.nil?
        invalid_properties.push('invalid value for "override_not_covered_amt", override_not_covered_amt cannot be nil.')
      end

      if @override_plan_price.nil?
        invalid_properties.push('invalid value for "override_plan_price", override_plan_price cannot be nil.')
      end

      if @override_social_security.nil?
        invalid_properties.push('invalid value for "override_social_security", override_social_security cannot be nil.')
      end

      if @override_state_tax.nil?
        invalid_properties.push('invalid value for "override_state_tax", override_state_tax cannot be nil.')
      end

      if @override_with_hold_amt.nil?
        invalid_properties.push('invalid value for "override_with_hold_amt", override_with_hold_amt cannot be nil.')
      end

      if @paid_amt.nil?
        invalid_properties.push('invalid value for "paid_amt", paid_amt cannot be nil.')
      end

      if @partial_loss.nil?
        invalid_properties.push('invalid value for "partial_loss", partial_loss cannot be nil.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@pharmacy_name.nil? && @pharmacy_name.to_s.length > 128
        invalid_properties.push('invalid value for "pharmacy_name", the character length must be smaller than or equal to 128.')
      end

      if !@place_of_service.nil? && @place_of_service.to_s.length > 5
        invalid_properties.push('invalid value for "place_of_service", the character length must be smaller than or equal to 5.')
      end

      if @plan_price.nil?
        invalid_properties.push('invalid value for "plan_price", plan_price cannot be nil.')
      end

      if @premium_deduction.nil?
        invalid_properties.push('invalid value for "premium_deduction", premium_deduction cannot be nil.')
      end

      if !@prescriber_id.nil? && @prescriber_id.to_s.length > 32
        invalid_properties.push('invalid value for "prescriber_id", the character length must be smaller than or equal to 32.')
      end

      if !@prescription_number.nil? && @prescription_number.to_s.length > 50
        invalid_properties.push('invalid value for "prescription_number", the character length must be smaller than or equal to 50.')
      end

      if !@pricing_method.nil? && @pricing_method.to_s.length > 8
        invalid_properties.push('invalid value for "pricing_method", the character length must be smaller than or equal to 8.')
      end

      if @principal.nil?
        invalid_properties.push('invalid value for "principal", principal cannot be nil.')
      end

      if !@procedure_code.nil? && @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      if !@procedure_code2.nil? && @procedure_code2.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code2", the character length must be smaller than or equal to 8.')
      end

      if @root.nil?
        invalid_properties.push('invalid value for "root", root cannot be nil.')
      end

      if @social_security.nil?
        invalid_properties.push('invalid value for "social_security", social_security cannot be nil.')
      end

      if @state_tax.nil?
        invalid_properties.push('invalid value for "state_tax", state_tax cannot be nil.')
      end

      if !@state_tax_state.nil? && @state_tax_state.to_s.length > 2
        invalid_properties.push('invalid value for "state_tax_state", the character length must be smaller than or equal to 2.')
      end

      if !@status_code.nil? && @status_code.to_s.length > 1
        invalid_properties.push('invalid value for "status_code", the character length must be smaller than or equal to 1.')
      end

      if @uc_r_price.nil?
        invalid_properties.push('invalid value for "uc_r_price", uc_r_price cannot be nil.')
      end

      if !@unit_of_measure.nil? && @unit_of_measure.to_s.length > 2
        invalid_properties.push('invalid value for "unit_of_measure", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @with_hold_amt.nil?
        invalid_properties.push('invalid value for "with_hold_amt", with_hold_amt cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @batch_number.nil?
      return false if @batch_claim.nil?
      return false if @claim_seq.nil?
      return false if @claim_seq.to_s.length > 2
      return false if @claim_seq.to_s.length < 1
      return false if @adjustment_seq.nil?
      return false if @adjustment_seq.to_s.length > 3
      return false if @adjustment_seq.to_s.length < 1
      return false if !@ans_i_code.nil? && @ans_i_code.to_s.length > 8
      return false if !@ap_c_code.nil? && @ap_c_code.to_s.length > 8
      return false if !@adjusted_from_adjustment_line.nil? && @adjusted_from_adjustment_line.to_s.length > 3
      return false if !@adjusted_from_line.nil? && @adjusted_from_line.to_s.length > 2
      return false if !@auth_number.nil? && @auth_number.to_s.length > 20
      return false if !@auth_required.nil? && @auth_required.to_s.length > 1
      return false if !@benefit_code.nil? && @benefit_code.to_s.length > 10
      return false if @billed_price.nil?
      return false if !@brand_indicator.nil? && @brand_indicator.to_s.length > 1
      return false if @buccal.nil?
      return false if !@cli_a_number.nil? && @cli_a_number.to_s.length > 32
      return false if @co_b_amt.nil?
      return false if !@calendar_year.nil? && @calendar_year.to_s.length > 4
      return false if @capitation_claim.nil?
      return false if @co_ins_amt.nil?
      return false if @co_pay_amt.nil?
      return false if !@currency_id.nil? && @currency_id.to_s.length > 16
      return false if @deductible_amt.nil?
      return false if !@detail_plan_year.nil? && @detail_plan_year.to_s.length > 8
      return false if !@diagnosis_code.nil? && @diagnosis_code.to_s.length > 8
      return false if @discount_amt.nil?
      return false if @distal.nil?
      return false if !@drug_code.nil? && @drug_code.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@error_auth.nil? && @error_auth.to_s.length > 1
      return false if !@error_benefit.nil? && @error_benefit.to_s.length > 1
      return false if !@error_count.nil? && @error_count.to_s.length > 1
      return false if !@error_covered.nil? && @error_covered.to_s.length > 1
      return false if !@error_dates.nil? && @error_dates.to_s.length > 1
      return false if !@error_diagnosis.nil? && @error_diagnosis.to_s.length > 1
      return false if !@error_ex_code.nil? && @error_ex_code.to_s.length > 1
      return false if !@error_modifier.nil? && @error_modifier.to_s.length > 1
      return false if !@error_place.nil? && @error_place.to_s.length > 1
      return false if !@error_price.nil? && @error_price.to_s.length > 1
      return false if !@error_procedure.nil? && @error_procedure.to_s.length > 1
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@ex_code2.nil? && @ex_code2.to_s.length > 6
      return false if !@ex_code3.nil? && @ex_code3.to_s.length > 6
      return false if @fica.nil?
      return false if @facial.nil?
      return false if @federal_tax.nil?
      return false if !@flex_description.nil? && @flex_description.to_s.length > 128
      return false if !@formulary_indicator.nil? && @formulary_indicator.to_s.length > 1
      return false if @incisal.nil?
      return false if @interest.nil?
      return false if @labial.nil?
      return false if !@life_benefit.nil? && @life_benefit.to_s.length > 10
      return false if !@line_control_number.nil? && @line_control_number.to_s.length > 64
      return false if @lingual.nil?
      return false if !@mail_order_indicator.nil? && @mail_order_indicator.to_s.length > 1
      return false if @mesial.nil?
      return false if !@modifier.nil? && @modifier.to_s.length > 8
      return false if !@modifier_2.nil? && @modifier_2.to_s.length > 8
      return false if !@modifier_3.nil? && @modifier_3.to_s.length > 8
      return false if !@modifier_4.nil? && @modifier_4.to_s.length > 8
      return false if @not_covered_amt.nil?
      return false if @occlusal.nil?
      return false if !@oral_cavity_designation_code_1.nil? && @oral_cavity_designation_code_1.to_s.length > 3
      return false if !@oral_cavity_designation_code_2.nil? && @oral_cavity_designation_code_2.to_s.length > 3
      return false if !@oral_cavity_designation_code_3.nil? && @oral_cavity_designation_code_3.to_s.length > 3
      return false if !@oral_cavity_designation_code_4.nil? && @oral_cavity_designation_code_4.to_s.length > 3
      return false if !@oral_cavity_designation_code_5.nil? && @oral_cavity_designation_code_5.to_s.length > 3
      return false if @override_benefit_code.nil?
      return false if @override_cob_amt.nil?
      return false if @override_co_ins_amt.nil?
      return false if @override_co_pay_amt.nil?
      return false if @override_ded_credit_amt.nil?
      return false if @override_deductible_amt.nil?
      return false if @override_federal_tax.nil?
      return false if @override_local_tax.nil?
      return false if @override_medicare_tax.nil?
      return false if @override_not_covered_amt.nil?
      return false if @override_plan_price.nil?
      return false if @override_social_security.nil?
      return false if @override_state_tax.nil?
      return false if @override_with_hold_amt.nil?
      return false if @paid_amt.nil?
      return false if @partial_loss.nil?
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@pharmacy_name.nil? && @pharmacy_name.to_s.length > 128
      return false if !@place_of_service.nil? && @place_of_service.to_s.length > 5
      return false if @plan_price.nil?
      return false if @premium_deduction.nil?
      return false if !@prescriber_id.nil? && @prescriber_id.to_s.length > 32
      return false if !@prescription_number.nil? && @prescription_number.to_s.length > 50
      return false if !@pricing_method.nil? && @pricing_method.to_s.length > 8
      return false if @principal.nil?
      return false if !@procedure_code.nil? && @procedure_code.to_s.length > 8
      return false if !@procedure_code2.nil? && @procedure_code2.to_s.length > 8
      return false if @root.nil?
      return false if @social_security.nil?
      return false if @state_tax.nil?
      return false if !@state_tax_state.nil? && @state_tax_state.to_s.length > 2
      return false if !@status_code.nil? && @status_code.to_s.length > 1
      return false if @uc_r_price.nil?
      return false if !@unit_of_measure.nil? && @unit_of_measure.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @with_hold_amt.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_claim Value to be assigned
    def batch_claim=(batch_claim)
      if batch_claim.nil?
        fail ArgumentError, 'batch_claim cannot be nil'
      end

      @batch_claim = batch_claim
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_seq Value to be assigned
    def claim_seq=(claim_seq)
      if claim_seq.nil?
        fail ArgumentError, 'claim_seq cannot be nil'
      end

      if claim_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "claim_seq", the character length must be smaller than or equal to 2.'
      end

      if claim_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "claim_seq", the character length must be great than or equal to 1.'
      end

      @claim_seq = claim_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_seq Value to be assigned
    def adjustment_seq=(adjustment_seq)
      if adjustment_seq.nil?
        fail ArgumentError, 'adjustment_seq cannot be nil'
      end

      if adjustment_seq.to_s.length > 3
        fail ArgumentError, 'invalid value for "adjustment_seq", the character length must be smaller than or equal to 3.'
      end

      if adjustment_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_seq", the character length must be great than or equal to 1.'
      end

      @adjustment_seq = adjustment_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] ans_i_code Value to be assigned
    def ans_i_code=(ans_i_code)
      if !ans_i_code.nil? && ans_i_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "ans_i_code", the character length must be smaller than or equal to 8.'
      end

      @ans_i_code = ans_i_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ap_c_code Value to be assigned
    def ap_c_code=(ap_c_code)
      if !ap_c_code.nil? && ap_c_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "ap_c_code", the character length must be smaller than or equal to 8.'
      end

      @ap_c_code = ap_c_code
    end

    # Custom attribute writer method with validation
    # @param [Object] adjusted_from_adjustment_line Value to be assigned
    def adjusted_from_adjustment_line=(adjusted_from_adjustment_line)
      if !adjusted_from_adjustment_line.nil? && adjusted_from_adjustment_line.to_s.length > 3
        fail ArgumentError, 'invalid value for "adjusted_from_adjustment_line", the character length must be smaller than or equal to 3.'
      end

      @adjusted_from_adjustment_line = adjusted_from_adjustment_line
    end

    # Custom attribute writer method with validation
    # @param [Object] adjusted_from_line Value to be assigned
    def adjusted_from_line=(adjusted_from_line)
      if !adjusted_from_line.nil? && adjusted_from_line.to_s.length > 2
        fail ArgumentError, 'invalid value for "adjusted_from_line", the character length must be smaller than or equal to 2.'
      end

      @adjusted_from_line = adjusted_from_line
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if !auth_number.nil? && auth_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "auth_number", the character length must be smaller than or equal to 20.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_required Value to be assigned
    def auth_required=(auth_required)
      if !auth_required.nil? && auth_required.to_s.length > 1
        fail ArgumentError, 'invalid value for "auth_required", the character length must be smaller than or equal to 1.'
      end

      @auth_required = auth_required
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if !benefit_code.nil? && benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] billed_price Value to be assigned
    def billed_price=(billed_price)
      if billed_price.nil?
        fail ArgumentError, 'billed_price cannot be nil'
      end

      @billed_price = billed_price
    end

    # Custom attribute writer method with validation
    # @param [Object] brand_indicator Value to be assigned
    def brand_indicator=(brand_indicator)
      if !brand_indicator.nil? && brand_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "brand_indicator", the character length must be smaller than or equal to 1.'
      end

      @brand_indicator = brand_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] buccal Value to be assigned
    def buccal=(buccal)
      if buccal.nil?
        fail ArgumentError, 'buccal cannot be nil'
      end

      @buccal = buccal
    end

    # Custom attribute writer method with validation
    # @param [Object] cli_a_number Value to be assigned
    def cli_a_number=(cli_a_number)
      if !cli_a_number.nil? && cli_a_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "cli_a_number", the character length must be smaller than or equal to 32.'
      end

      @cli_a_number = cli_a_number
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_amt Value to be assigned
    def co_b_amt=(co_b_amt)
      if co_b_amt.nil?
        fail ArgumentError, 'co_b_amt cannot be nil'
      end

      @co_b_amt = co_b_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] calendar_year Value to be assigned
    def calendar_year=(calendar_year)
      if !calendar_year.nil? && calendar_year.to_s.length > 4
        fail ArgumentError, 'invalid value for "calendar_year", the character length must be smaller than or equal to 4.'
      end

      @calendar_year = calendar_year
    end

    # Custom attribute writer method with validation
    # @param [Object] capitation_claim Value to be assigned
    def capitation_claim=(capitation_claim)
      if capitation_claim.nil?
        fail ArgumentError, 'capitation_claim cannot be nil'
      end

      @capitation_claim = capitation_claim
    end

    # Custom attribute writer method with validation
    # @param [Object] co_ins_amt Value to be assigned
    def co_ins_amt=(co_ins_amt)
      if co_ins_amt.nil?
        fail ArgumentError, 'co_ins_amt cannot be nil'
      end

      @co_ins_amt = co_ins_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] co_pay_amt Value to be assigned
    def co_pay_amt=(co_pay_amt)
      if co_pay_amt.nil?
        fail ArgumentError, 'co_pay_amt cannot be nil'
      end

      @co_pay_amt = co_pay_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_id Value to be assigned
    def currency_id=(currency_id)
      if !currency_id.nil? && currency_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "currency_id", the character length must be smaller than or equal to 16.'
      end

      @currency_id = currency_id
    end

    # Custom attribute writer method with validation
    # @param [Object] deductible_amt Value to be assigned
    def deductible_amt=(deductible_amt)
      if deductible_amt.nil?
        fail ArgumentError, 'deductible_amt cannot be nil'
      end

      @deductible_amt = deductible_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] detail_plan_year Value to be assigned
    def detail_plan_year=(detail_plan_year)
      if !detail_plan_year.nil? && detail_plan_year.to_s.length > 8
        fail ArgumentError, 'invalid value for "detail_plan_year", the character length must be smaller than or equal to 8.'
      end

      @detail_plan_year = detail_plan_year
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnosis_code Value to be assigned
    def diagnosis_code=(diagnosis_code)
      if !diagnosis_code.nil? && diagnosis_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnosis_code", the character length must be smaller than or equal to 8.'
      end

      @diagnosis_code = diagnosis_code
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_amt Value to be assigned
    def discount_amt=(discount_amt)
      if discount_amt.nil?
        fail ArgumentError, 'discount_amt cannot be nil'
      end

      @discount_amt = discount_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] distal Value to be assigned
    def distal=(distal)
      if distal.nil?
        fail ArgumentError, 'distal cannot be nil'
      end

      @distal = distal
    end

    # Custom attribute writer method with validation
    # @param [Object] drug_code Value to be assigned
    def drug_code=(drug_code)
      if !drug_code.nil? && drug_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "drug_code", the character length must be smaller than or equal to 20.'
      end

      @drug_code = drug_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] error_auth Value to be assigned
    def error_auth=(error_auth)
      if !error_auth.nil? && error_auth.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_auth", the character length must be smaller than or equal to 1.'
      end

      @error_auth = error_auth
    end

    # Custom attribute writer method with validation
    # @param [Object] error_benefit Value to be assigned
    def error_benefit=(error_benefit)
      if !error_benefit.nil? && error_benefit.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_benefit", the character length must be smaller than or equal to 1.'
      end

      @error_benefit = error_benefit
    end

    # Custom attribute writer method with validation
    # @param [Object] error_count Value to be assigned
    def error_count=(error_count)
      if !error_count.nil? && error_count.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_count", the character length must be smaller than or equal to 1.'
      end

      @error_count = error_count
    end

    # Custom attribute writer method with validation
    # @param [Object] error_covered Value to be assigned
    def error_covered=(error_covered)
      if !error_covered.nil? && error_covered.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_covered", the character length must be smaller than or equal to 1.'
      end

      @error_covered = error_covered
    end

    # Custom attribute writer method with validation
    # @param [Object] error_dates Value to be assigned
    def error_dates=(error_dates)
      if !error_dates.nil? && error_dates.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_dates", the character length must be smaller than or equal to 1.'
      end

      @error_dates = error_dates
    end

    # Custom attribute writer method with validation
    # @param [Object] error_diagnosis Value to be assigned
    def error_diagnosis=(error_diagnosis)
      if !error_diagnosis.nil? && error_diagnosis.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_diagnosis", the character length must be smaller than or equal to 1.'
      end

      @error_diagnosis = error_diagnosis
    end

    # Custom attribute writer method with validation
    # @param [Object] error_ex_code Value to be assigned
    def error_ex_code=(error_ex_code)
      if !error_ex_code.nil? && error_ex_code.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_ex_code", the character length must be smaller than or equal to 1.'
      end

      @error_ex_code = error_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] error_modifier Value to be assigned
    def error_modifier=(error_modifier)
      if !error_modifier.nil? && error_modifier.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_modifier", the character length must be smaller than or equal to 1.'
      end

      @error_modifier = error_modifier
    end

    # Custom attribute writer method with validation
    # @param [Object] error_place Value to be assigned
    def error_place=(error_place)
      if !error_place.nil? && error_place.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_place", the character length must be smaller than or equal to 1.'
      end

      @error_place = error_place
    end

    # Custom attribute writer method with validation
    # @param [Object] error_price Value to be assigned
    def error_price=(error_price)
      if !error_price.nil? && error_price.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_price", the character length must be smaller than or equal to 1.'
      end

      @error_price = error_price
    end

    # Custom attribute writer method with validation
    # @param [Object] error_procedure Value to be assigned
    def error_procedure=(error_procedure)
      if !error_procedure.nil? && error_procedure.to_s.length > 1
        fail ArgumentError, 'invalid value for "error_procedure", the character length must be smaller than or equal to 1.'
      end

      @error_procedure = error_procedure
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code2 Value to be assigned
    def ex_code2=(ex_code2)
      if !ex_code2.nil? && ex_code2.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code2", the character length must be smaller than or equal to 6.'
      end

      @ex_code2 = ex_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code3 Value to be assigned
    def ex_code3=(ex_code3)
      if !ex_code3.nil? && ex_code3.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code3", the character length must be smaller than or equal to 6.'
      end

      @ex_code3 = ex_code3
    end

    # Custom attribute writer method with validation
    # @param [Object] fica Value to be assigned
    def fica=(fica)
      if fica.nil?
        fail ArgumentError, 'fica cannot be nil'
      end

      @fica = fica
    end

    # Custom attribute writer method with validation
    # @param [Object] facial Value to be assigned
    def facial=(facial)
      if facial.nil?
        fail ArgumentError, 'facial cannot be nil'
      end

      @facial = facial
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_tax Value to be assigned
    def federal_tax=(federal_tax)
      if federal_tax.nil?
        fail ArgumentError, 'federal_tax cannot be nil'
      end

      @federal_tax = federal_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_description Value to be assigned
    def flex_description=(flex_description)
      if !flex_description.nil? && flex_description.to_s.length > 128
        fail ArgumentError, 'invalid value for "flex_description", the character length must be smaller than or equal to 128.'
      end

      @flex_description = flex_description
    end

    # Custom attribute writer method with validation
    # @param [Object] formulary_indicator Value to be assigned
    def formulary_indicator=(formulary_indicator)
      if !formulary_indicator.nil? && formulary_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "formulary_indicator", the character length must be smaller than or equal to 1.'
      end

      @formulary_indicator = formulary_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] incisal Value to be assigned
    def incisal=(incisal)
      if incisal.nil?
        fail ArgumentError, 'incisal cannot be nil'
      end

      @incisal = incisal
    end

    # Custom attribute writer method with validation
    # @param [Object] interest Value to be assigned
    def interest=(interest)
      if interest.nil?
        fail ArgumentError, 'interest cannot be nil'
      end

      @interest = interest
    end

    # Custom attribute writer method with validation
    # @param [Object] labial Value to be assigned
    def labial=(labial)
      if labial.nil?
        fail ArgumentError, 'labial cannot be nil'
      end

      @labial = labial
    end

    # Custom attribute writer method with validation
    # @param [Object] life_benefit Value to be assigned
    def life_benefit=(life_benefit)
      if !life_benefit.nil? && life_benefit.to_s.length > 10
        fail ArgumentError, 'invalid value for "life_benefit", the character length must be smaller than or equal to 10.'
      end

      @life_benefit = life_benefit
    end

    # Custom attribute writer method with validation
    # @param [Object] line_control_number Value to be assigned
    def line_control_number=(line_control_number)
      if !line_control_number.nil? && line_control_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "line_control_number", the character length must be smaller than or equal to 64.'
      end

      @line_control_number = line_control_number
    end

    # Custom attribute writer method with validation
    # @param [Object] lingual Value to be assigned
    def lingual=(lingual)
      if lingual.nil?
        fail ArgumentError, 'lingual cannot be nil'
      end

      @lingual = lingual
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_order_indicator Value to be assigned
    def mail_order_indicator=(mail_order_indicator)
      if !mail_order_indicator.nil? && mail_order_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "mail_order_indicator", the character length must be smaller than or equal to 1.'
      end

      @mail_order_indicator = mail_order_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] mesial Value to be assigned
    def mesial=(mesial)
      if mesial.nil?
        fail ArgumentError, 'mesial cannot be nil'
      end

      @mesial = mesial
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier Value to be assigned
    def modifier=(modifier)
      if !modifier.nil? && modifier.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier", the character length must be smaller than or equal to 8.'
      end

      @modifier = modifier
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier_2 Value to be assigned
    def modifier_2=(modifier_2)
      if !modifier_2.nil? && modifier_2.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier_2", the character length must be smaller than or equal to 8.'
      end

      @modifier_2 = modifier_2
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier_3 Value to be assigned
    def modifier_3=(modifier_3)
      if !modifier_3.nil? && modifier_3.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier_3", the character length must be smaller than or equal to 8.'
      end

      @modifier_3 = modifier_3
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier_4 Value to be assigned
    def modifier_4=(modifier_4)
      if !modifier_4.nil? && modifier_4.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier_4", the character length must be smaller than or equal to 8.'
      end

      @modifier_4 = modifier_4
    end

    # Custom attribute writer method with validation
    # @param [Object] not_covered_amt Value to be assigned
    def not_covered_amt=(not_covered_amt)
      if not_covered_amt.nil?
        fail ArgumentError, 'not_covered_amt cannot be nil'
      end

      @not_covered_amt = not_covered_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] occlusal Value to be assigned
    def occlusal=(occlusal)
      if occlusal.nil?
        fail ArgumentError, 'occlusal cannot be nil'
      end

      @occlusal = occlusal
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_1 Value to be assigned
    def oral_cavity_designation_code_1=(oral_cavity_designation_code_1)
      if !oral_cavity_designation_code_1.nil? && oral_cavity_designation_code_1.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_1", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_1 = oral_cavity_designation_code_1
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_2 Value to be assigned
    def oral_cavity_designation_code_2=(oral_cavity_designation_code_2)
      if !oral_cavity_designation_code_2.nil? && oral_cavity_designation_code_2.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_2", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_2 = oral_cavity_designation_code_2
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_3 Value to be assigned
    def oral_cavity_designation_code_3=(oral_cavity_designation_code_3)
      if !oral_cavity_designation_code_3.nil? && oral_cavity_designation_code_3.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_3", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_3 = oral_cavity_designation_code_3
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_4 Value to be assigned
    def oral_cavity_designation_code_4=(oral_cavity_designation_code_4)
      if !oral_cavity_designation_code_4.nil? && oral_cavity_designation_code_4.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_4", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_4 = oral_cavity_designation_code_4
    end

    # Custom attribute writer method with validation
    # @param [Object] oral_cavity_designation_code_5 Value to be assigned
    def oral_cavity_designation_code_5=(oral_cavity_designation_code_5)
      if !oral_cavity_designation_code_5.nil? && oral_cavity_designation_code_5.to_s.length > 3
        fail ArgumentError, 'invalid value for "oral_cavity_designation_code_5", the character length must be smaller than or equal to 3.'
      end

      @oral_cavity_designation_code_5 = oral_cavity_designation_code_5
    end

    # Custom attribute writer method with validation
    # @param [Object] override_benefit_code Value to be assigned
    def override_benefit_code=(override_benefit_code)
      if override_benefit_code.nil?
        fail ArgumentError, 'override_benefit_code cannot be nil'
      end

      @override_benefit_code = override_benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] override_cob_amt Value to be assigned
    def override_cob_amt=(override_cob_amt)
      if override_cob_amt.nil?
        fail ArgumentError, 'override_cob_amt cannot be nil'
      end

      @override_cob_amt = override_cob_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] override_co_ins_amt Value to be assigned
    def override_co_ins_amt=(override_co_ins_amt)
      if override_co_ins_amt.nil?
        fail ArgumentError, 'override_co_ins_amt cannot be nil'
      end

      @override_co_ins_amt = override_co_ins_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] override_co_pay_amt Value to be assigned
    def override_co_pay_amt=(override_co_pay_amt)
      if override_co_pay_amt.nil?
        fail ArgumentError, 'override_co_pay_amt cannot be nil'
      end

      @override_co_pay_amt = override_co_pay_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] override_ded_credit_amt Value to be assigned
    def override_ded_credit_amt=(override_ded_credit_amt)
      if override_ded_credit_amt.nil?
        fail ArgumentError, 'override_ded_credit_amt cannot be nil'
      end

      @override_ded_credit_amt = override_ded_credit_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] override_deductible_amt Value to be assigned
    def override_deductible_amt=(override_deductible_amt)
      if override_deductible_amt.nil?
        fail ArgumentError, 'override_deductible_amt cannot be nil'
      end

      @override_deductible_amt = override_deductible_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] override_federal_tax Value to be assigned
    def override_federal_tax=(override_federal_tax)
      if override_federal_tax.nil?
        fail ArgumentError, 'override_federal_tax cannot be nil'
      end

      @override_federal_tax = override_federal_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] override_local_tax Value to be assigned
    def override_local_tax=(override_local_tax)
      if override_local_tax.nil?
        fail ArgumentError, 'override_local_tax cannot be nil'
      end

      @override_local_tax = override_local_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] override_medicare_tax Value to be assigned
    def override_medicare_tax=(override_medicare_tax)
      if override_medicare_tax.nil?
        fail ArgumentError, 'override_medicare_tax cannot be nil'
      end

      @override_medicare_tax = override_medicare_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] override_not_covered_amt Value to be assigned
    def override_not_covered_amt=(override_not_covered_amt)
      if override_not_covered_amt.nil?
        fail ArgumentError, 'override_not_covered_amt cannot be nil'
      end

      @override_not_covered_amt = override_not_covered_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] override_plan_price Value to be assigned
    def override_plan_price=(override_plan_price)
      if override_plan_price.nil?
        fail ArgumentError, 'override_plan_price cannot be nil'
      end

      @override_plan_price = override_plan_price
    end

    # Custom attribute writer method with validation
    # @param [Object] override_social_security Value to be assigned
    def override_social_security=(override_social_security)
      if override_social_security.nil?
        fail ArgumentError, 'override_social_security cannot be nil'
      end

      @override_social_security = override_social_security
    end

    # Custom attribute writer method with validation
    # @param [Object] override_state_tax Value to be assigned
    def override_state_tax=(override_state_tax)
      if override_state_tax.nil?
        fail ArgumentError, 'override_state_tax cannot be nil'
      end

      @override_state_tax = override_state_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] override_with_hold_amt Value to be assigned
    def override_with_hold_amt=(override_with_hold_amt)
      if override_with_hold_amt.nil?
        fail ArgumentError, 'override_with_hold_amt cannot be nil'
      end

      @override_with_hold_amt = override_with_hold_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] paid_amt Value to be assigned
    def paid_amt=(paid_amt)
      if paid_amt.nil?
        fail ArgumentError, 'paid_amt cannot be nil'
      end

      @paid_amt = paid_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] partial_loss Value to be assigned
    def partial_loss=(partial_loss)
      if partial_loss.nil?
        fail ArgumentError, 'partial_loss cannot be nil'
      end

      @partial_loss = partial_loss
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pharmacy_name Value to be assigned
    def pharmacy_name=(pharmacy_name)
      if !pharmacy_name.nil? && pharmacy_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "pharmacy_name", the character length must be smaller than or equal to 128.'
      end

      @pharmacy_name = pharmacy_name
    end

    # Custom attribute writer method with validation
    # @param [Object] place_of_service Value to be assigned
    def place_of_service=(place_of_service)
      if !place_of_service.nil? && place_of_service.to_s.length > 5
        fail ArgumentError, 'invalid value for "place_of_service", the character length must be smaller than or equal to 5.'
      end

      @place_of_service = place_of_service
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_price Value to be assigned
    def plan_price=(plan_price)
      if plan_price.nil?
        fail ArgumentError, 'plan_price cannot be nil'
      end

      @plan_price = plan_price
    end

    # Custom attribute writer method with validation
    # @param [Object] premium_deduction Value to be assigned
    def premium_deduction=(premium_deduction)
      if premium_deduction.nil?
        fail ArgumentError, 'premium_deduction cannot be nil'
      end

      @premium_deduction = premium_deduction
    end

    # Custom attribute writer method with validation
    # @param [Object] prescriber_id Value to be assigned
    def prescriber_id=(prescriber_id)
      if !prescriber_id.nil? && prescriber_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "prescriber_id", the character length must be smaller than or equal to 32.'
      end

      @prescriber_id = prescriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] prescription_number Value to be assigned
    def prescription_number=(prescription_number)
      if !prescription_number.nil? && prescription_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "prescription_number", the character length must be smaller than or equal to 50.'
      end

      @prescription_number = prescription_number
    end

    # Custom attribute writer method with validation
    # @param [Object] pricing_method Value to be assigned
    def pricing_method=(pricing_method)
      if !pricing_method.nil? && pricing_method.to_s.length > 8
        fail ArgumentError, 'invalid value for "pricing_method", the character length must be smaller than or equal to 8.'
      end

      @pricing_method = pricing_method
    end

    # Custom attribute writer method with validation
    # @param [Object] principal Value to be assigned
    def principal=(principal)
      if principal.nil?
        fail ArgumentError, 'principal cannot be nil'
      end

      @principal = principal
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if !procedure_code.nil? && procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      @procedure_code = procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code2 Value to be assigned
    def procedure_code2=(procedure_code2)
      if !procedure_code2.nil? && procedure_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code2", the character length must be smaller than or equal to 8.'
      end

      @procedure_code2 = procedure_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] root Value to be assigned
    def root=(root)
      if root.nil?
        fail ArgumentError, 'root cannot be nil'
      end

      @root = root
    end

    # Custom attribute writer method with validation
    # @param [Object] social_security Value to be assigned
    def social_security=(social_security)
      if social_security.nil?
        fail ArgumentError, 'social_security cannot be nil'
      end

      @social_security = social_security
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax Value to be assigned
    def state_tax=(state_tax)
      if state_tax.nil?
        fail ArgumentError, 'state_tax cannot be nil'
      end

      @state_tax = state_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax_state Value to be assigned
    def state_tax_state=(state_tax_state)
      if !state_tax_state.nil? && state_tax_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state_tax_state", the character length must be smaller than or equal to 2.'
      end

      @state_tax_state = state_tax_state
    end

    # Custom attribute writer method with validation
    # @param [Object] status_code Value to be assigned
    def status_code=(status_code)
      if !status_code.nil? && status_code.to_s.length > 1
        fail ArgumentError, 'invalid value for "status_code", the character length must be smaller than or equal to 1.'
      end

      @status_code = status_code
    end

    # Custom attribute writer method with validation
    # @param [Object] uc_r_price Value to be assigned
    def uc_r_price=(uc_r_price)
      if uc_r_price.nil?
        fail ArgumentError, 'uc_r_price cannot be nil'
      end

      @uc_r_price = uc_r_price
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_of_measure Value to be assigned
    def unit_of_measure=(unit_of_measure)
      if !unit_of_measure.nil? && unit_of_measure.to_s.length > 2
        fail ArgumentError, 'invalid value for "unit_of_measure", the character length must be smaller than or equal to 2.'
      end

      @unit_of_measure = unit_of_measure
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] with_hold_amt Value to be assigned
    def with_hold_amt=(with_hold_amt)
      if with_hold_amt.nil?
        fail ArgumentError, 'with_hold_amt cannot be nil'
      end

      @with_hold_amt = with_hold_amt
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_number == o.batch_number &&
          batch_claim == o.batch_claim &&
          claim_seq == o.claim_seq &&
          adjustment_seq == o.adjustment_seq &&
          ans_i_code == o.ans_i_code &&
          ap_c_code == o.ap_c_code &&
          account_key == o.account_key &&
          adjusted_from_adjustment_line == o.adjusted_from_adjustment_line &&
          adjusted_from_line == o.adjusted_from_line &&
          auth_number == o.auth_number &&
          auth_penalty == o.auth_penalty &&
          auth_required == o.auth_required &&
          benefit_code == o.benefit_code &&
          benefit_rate_applied == o.benefit_rate_applied &&
          billed_price == o.billed_price &&
          brand_indicator == o.brand_indicator &&
          buccal == o.buccal &&
          cli_a_number == o.cli_a_number &&
          co_b_amt == o.co_b_amt &&
          co_b_hold == o.co_b_hold &&
          co_b_mem_resp == o.co_b_mem_resp &&
          co_b_savings == o.co_b_savings &&
          co_b_savings_used == o.co_b_savings_used &&
          calendar_year == o.calendar_year &&
          capitation_claim == o.capitation_claim &&
          check_id == o.check_id &&
          co_ins_amt == o.co_ins_amt &&
          co_pay_amt == o.co_pay_amt &&
          currency_id == o.currency_id &&
          days_supply == o.days_supply &&
          ded_credit_amt == o.ded_credit_amt &&
          deductible_amt == o.deductible_amt &&
          detail_plan_year == o.detail_plan_year &&
          diagnosis_code == o.diagnosis_code &&
          discount_amt == o.discount_amt &&
          dispense_as_written == o.dispense_as_written &&
          distal == o.distal &&
          drug_code == o.drug_code &&
          drug_quantity == o.drug_quantity &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          error_auth == o.error_auth &&
          error_benefit == o.error_benefit &&
          error_count == o.error_count &&
          error_covered == o.error_covered &&
          error_dates == o.error_dates &&
          error_diagnosis == o.error_diagnosis &&
          error_ex_code == o.error_ex_code &&
          error_modifier == o.error_modifier &&
          error_place == o.error_place &&
          error_price == o.error_price &&
          error_procedure == o.error_procedure &&
          ex_code == o.ex_code &&
          ex_code2 == o.ex_code2 &&
          ex_code3 == o.ex_code3 &&
          fica == o.fica &&
          facial == o.facial &&
          federal_amount_to_tax == o.federal_amount_to_tax &&
          federal_tax == o.federal_tax &&
          federal_tax_flat == o.federal_tax_flat &&
          fill_date == o.fill_date &&
          flex_description == o.flex_description &&
          formulary_indicator == o.formulary_indicator &&
          incisal == o.incisal &&
          interest == o.interest &&
          labial == o.labial &&
          life_benefit == o.life_benefit &&
          life_benefit_volume == o.life_benefit_volume &&
          line_control_number == o.line_control_number &&
          lingual == o.lingual &&
          local_tax == o.local_tax &&
          mail_order_indicator == o.mail_order_indicator &&
          medicare_amount_to_tax == o.medicare_amount_to_tax &&
          medicare_tax == o.medicare_tax &&
          mesial == o.mesial &&
          minutes_per_unit == o.minutes_per_unit &&
          modifier == o.modifier &&
          modifier_2 == o.modifier_2 &&
          modifier_3 == o.modifier_3 &&
          modifier_4 == o.modifier_4 &&
          modifier_units == o.modifier_units &&
          not_covered_amt == o.not_covered_amt &&
          occlusal == o.occlusal &&
          oral_cavity_designation_code_1 == o.oral_cavity_designation_code_1 &&
          oral_cavity_designation_code_2 == o.oral_cavity_designation_code_2 &&
          oral_cavity_designation_code_3 == o.oral_cavity_designation_code_3 &&
          oral_cavity_designation_code_4 == o.oral_cavity_designation_code_4 &&
          oral_cavity_designation_code_5 == o.oral_cavity_designation_code_5 &&
          other_deduction_amount == o.other_deduction_amount &&
          override_benefit_code == o.override_benefit_code &&
          override_cob_amt == o.override_cob_amt &&
          override_co_ins_amt == o.override_co_ins_amt &&
          override_co_pay_amt == o.override_co_pay_amt &&
          override_ded_credit_amt == o.override_ded_credit_amt &&
          override_deductible_amt == o.override_deductible_amt &&
          override_federal_tax == o.override_federal_tax &&
          override_local_tax == o.override_local_tax &&
          override_medicare_tax == o.override_medicare_tax &&
          override_not_covered_amt == o.override_not_covered_amt &&
          override_plan_price == o.override_plan_price &&
          override_social_security == o.override_social_security &&
          override_state_tax == o.override_state_tax &&
          override_with_hold_amt == o.override_with_hold_amt &&
          pp_o_price_plan_price_diff == o.pp_o_price_plan_price_diff &&
          paid_amt == o.paid_amt &&
          partial_loss == o.partial_loss &&
          payor_id == o.payor_id &&
          pharmacy_name == o.pharmacy_name &&
          place_of_service == o.place_of_service &&
          plan_price == o.plan_price &&
          premium_deduction == o.premium_deduction &&
          prescriber_id == o.prescriber_id &&
          prescription_date == o.prescription_date &&
          prescription_number == o.prescription_number &&
          pricing_method == o.pricing_method &&
          pricing_rate == o.pricing_rate &&
          principal == o.principal &&
          procedure_code == o.procedure_code &&
          procedure_code2 == o.procedure_code2 &&
          procedure_code_units == o.procedure_code_units &&
          qualifying_payment_amount == o.qualifying_payment_amount &&
          reason_code == o.reason_code &&
          refill_indicator == o.refill_indicator &&
          repriced_savings_amount == o.repriced_savings_amount &&
          root == o.root &&
          service_date == o.service_date &&
          service_thru == o.service_thru &&
          soc_sec_amount_to_tax == o.soc_sec_amount_to_tax &&
          social_security == o.social_security &&
          state_amount_to_tax == o.state_amount_to_tax &&
          state_tax == o.state_tax &&
          state_tax_flat == o.state_tax_flat &&
          state_tax_state == o.state_tax_state &&
          status_code == o.status_code &&
          svc_count == o.svc_count &&
          taxable_amount == o.taxable_amount &&
          tooth_number == o.tooth_number &&
          uc_r_price == o.uc_r_price &&
          unit_dose == o.unit_dose &&
          unit_of_measure == o.unit_of_measure &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          with_hold_amt == o.with_hold_amt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_number, batch_claim, claim_seq, adjustment_seq, ans_i_code, ap_c_code, account_key, adjusted_from_adjustment_line, adjusted_from_line, auth_number, auth_penalty, auth_required, benefit_code, benefit_rate_applied, billed_price, brand_indicator, buccal, cli_a_number, co_b_amt, co_b_hold, co_b_mem_resp, co_b_savings, co_b_savings_used, calendar_year, capitation_claim, check_id, co_ins_amt, co_pay_amt, currency_id, days_supply, ded_credit_amt, deductible_amt, detail_plan_year, diagnosis_code, discount_amt, dispense_as_written, distal, drug_code, drug_quantity, entry_date, entry_user, error_auth, error_benefit, error_count, error_covered, error_dates, error_diagnosis, error_ex_code, error_modifier, error_place, error_price, error_procedure, ex_code, ex_code2, ex_code3, fica, facial, federal_amount_to_tax, federal_tax, federal_tax_flat, fill_date, flex_description, formulary_indicator, incisal, interest, labial, life_benefit, life_benefit_volume, line_control_number, lingual, local_tax, mail_order_indicator, medicare_amount_to_tax, medicare_tax, mesial, minutes_per_unit, modifier, modifier_2, modifier_3, modifier_4, modifier_units, not_covered_amt, occlusal, oral_cavity_designation_code_1, oral_cavity_designation_code_2, oral_cavity_designation_code_3, oral_cavity_designation_code_4, oral_cavity_designation_code_5, other_deduction_amount, override_benefit_code, override_cob_amt, override_co_ins_amt, override_co_pay_amt, override_ded_credit_amt, override_deductible_amt, override_federal_tax, override_local_tax, override_medicare_tax, override_not_covered_amt, override_plan_price, override_social_security, override_state_tax, override_with_hold_amt, pp_o_price_plan_price_diff, paid_amt, partial_loss, payor_id, pharmacy_name, place_of_service, plan_price, premium_deduction, prescriber_id, prescription_date, prescription_number, pricing_method, pricing_rate, principal, procedure_code, procedure_code2, procedure_code_units, qualifying_payment_amount, reason_code, refill_indicator, repriced_savings_amount, root, service_date, service_thru, soc_sec_amount_to_tax, social_security, state_amount_to_tax, state_tax, state_tax_flat, state_tax_state, status_code, svc_count, taxable_amount, tooth_number, uc_r_price, unit_dose, unit_of_measure, update_date, update_user, with_hold_amt].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
