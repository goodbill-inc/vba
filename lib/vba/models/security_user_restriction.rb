=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class SecurityUserRestriction
    # User Retriction Key
    attr_accessor :security_user_restriction_key

    # No Longer in use
    attr_accessor :restriction_all

    # Selecting this option means that the User will have access to every subject of the same type EXCEPT the selected subject.
    attr_accessor :restriction_exclude

    # Identifies the subject of the associated restriction.
    attr_accessor :restriction_field

    # Subject that the restriction is being determined for. The User will ONLY have access to the selected subject - unless the ‘Exclude’ option is selected.
    attr_accessor :restriction_value

    # ID of the User to whom the restrictions will be applied.
    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'security_user_restriction_key' => :'securityUserRestriction_Key',
        :'restriction_all' => :'restriction_All',
        :'restriction_exclude' => :'restriction_Exclude',
        :'restriction_field' => :'restriction_Field',
        :'restriction_value' => :'restriction_Value',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'security_user_restriction_key' => :'Integer',
        :'restriction_all' => :'Boolean',
        :'restriction_exclude' => :'Boolean',
        :'restriction_field' => :'String',
        :'restriction_value' => :'String',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'restriction_field',
        :'restriction_value',
        :'user_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::SecurityUserRestriction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::SecurityUserRestriction`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'security_user_restriction_key')
        self.security_user_restriction_key = attributes[:'security_user_restriction_key']
      else
        self.security_user_restriction_key = nil
      end

      if attributes.key?(:'restriction_all')
        self.restriction_all = attributes[:'restriction_all']
      else
        self.restriction_all = nil
      end

      if attributes.key?(:'restriction_exclude')
        self.restriction_exclude = attributes[:'restriction_exclude']
      else
        self.restriction_exclude = nil
      end

      if attributes.key?(:'restriction_field')
        self.restriction_field = attributes[:'restriction_field']
      end

      if attributes.key?(:'restriction_value')
        self.restriction_value = attributes[:'restriction_value']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @security_user_restriction_key.nil?
        invalid_properties.push('invalid value for "security_user_restriction_key", security_user_restriction_key cannot be nil.')
      end

      if @restriction_all.nil?
        invalid_properties.push('invalid value for "restriction_all", restriction_all cannot be nil.')
      end

      if @restriction_exclude.nil?
        invalid_properties.push('invalid value for "restriction_exclude", restriction_exclude cannot be nil.')
      end

      if !@restriction_field.nil? && @restriction_field.to_s.length > 64
        invalid_properties.push('invalid value for "restriction_field", the character length must be smaller than or equal to 64.')
      end

      if !@restriction_value.nil? && @restriction_value.to_s.length > 128
        invalid_properties.push('invalid value for "restriction_value", the character length must be smaller than or equal to 128.')
      end

      if !@user_id.nil? && @user_id.to_s.length > 20
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @security_user_restriction_key.nil?
      return false if @restriction_all.nil?
      return false if @restriction_exclude.nil?
      return false if !@restriction_field.nil? && @restriction_field.to_s.length > 64
      return false if !@restriction_value.nil? && @restriction_value.to_s.length > 128
      return false if !@user_id.nil? && @user_id.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] security_user_restriction_key Value to be assigned
    def security_user_restriction_key=(security_user_restriction_key)
      if security_user_restriction_key.nil?
        fail ArgumentError, 'security_user_restriction_key cannot be nil'
      end

      @security_user_restriction_key = security_user_restriction_key
    end

    # Custom attribute writer method with validation
    # @param [Object] restriction_all Value to be assigned
    def restriction_all=(restriction_all)
      if restriction_all.nil?
        fail ArgumentError, 'restriction_all cannot be nil'
      end

      @restriction_all = restriction_all
    end

    # Custom attribute writer method with validation
    # @param [Object] restriction_exclude Value to be assigned
    def restriction_exclude=(restriction_exclude)
      if restriction_exclude.nil?
        fail ArgumentError, 'restriction_exclude cannot be nil'
      end

      @restriction_exclude = restriction_exclude
    end

    # Custom attribute writer method with validation
    # @param [Object] restriction_field Value to be assigned
    def restriction_field=(restriction_field)
      if !restriction_field.nil? && restriction_field.to_s.length > 64
        fail ArgumentError, 'invalid value for "restriction_field", the character length must be smaller than or equal to 64.'
      end

      @restriction_field = restriction_field
    end

    # Custom attribute writer method with validation
    # @param [Object] restriction_value Value to be assigned
    def restriction_value=(restriction_value)
      if !restriction_value.nil? && restriction_value.to_s.length > 128
        fail ArgumentError, 'invalid value for "restriction_value", the character length must be smaller than or equal to 128.'
      end

      @restriction_value = restriction_value
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 20.'
      end

      @user_id = user_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          security_user_restriction_key == o.security_user_restriction_key &&
          restriction_all == o.restriction_all &&
          restriction_exclude == o.restriction_exclude &&
          restriction_field == o.restriction_field &&
          restriction_value == o.restriction_value &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [security_user_restriction_key, restriction_all, restriction_exclude, restriction_field, restriction_value, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
