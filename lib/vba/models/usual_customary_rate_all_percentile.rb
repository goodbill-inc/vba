=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class UsualCustomaryRateAllPercentile
    attr_accessor :claim_type

    attr_accessor :zip_code_start

    attr_accessor :zip_code_end

    attr_accessor :modifier

    attr_accessor :procedure_code

    attr_accessor :effective_date

    attr_accessor :term_date

    attr_accessor :rate_50

    attr_accessor :rate_60

    attr_accessor :rate_70

    attr_accessor :rate_75

    attr_accessor :rate_80

    attr_accessor :rate_85

    attr_accessor :rate_90

    attr_accessor :rate_95

    attr_accessor :rate_medicare

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_type' => :'claim_Type',
        :'zip_code_start' => :'zip_Code_Start',
        :'zip_code_end' => :'zip_Code_End',
        :'modifier' => :'modifier',
        :'procedure_code' => :'procedure_Code',
        :'effective_date' => :'effective_Date',
        :'term_date' => :'term_Date',
        :'rate_50' => :'rate_50',
        :'rate_60' => :'rate_60',
        :'rate_70' => :'rate_70',
        :'rate_75' => :'rate_75',
        :'rate_80' => :'rate_80',
        :'rate_85' => :'rate_85',
        :'rate_90' => :'rate_90',
        :'rate_95' => :'rate_95',
        :'rate_medicare' => :'rate_Medicare'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_type' => :'String',
        :'zip_code_start' => :'String',
        :'zip_code_end' => :'String',
        :'modifier' => :'String',
        :'procedure_code' => :'String',
        :'effective_date' => :'Time',
        :'term_date' => :'Time',
        :'rate_50' => :'Float',
        :'rate_60' => :'Float',
        :'rate_70' => :'Float',
        :'rate_75' => :'Float',
        :'rate_80' => :'Float',
        :'rate_85' => :'Float',
        :'rate_90' => :'Float',
        :'rate_95' => :'Float',
        :'rate_medicare' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'claim_type',
        :'zip_code_start',
        :'zip_code_end',
        :'modifier',
        :'procedure_code',
        :'effective_date',
        :'term_date',
        :'rate_50',
        :'rate_60',
        :'rate_70',
        :'rate_75',
        :'rate_80',
        :'rate_85',
        :'rate_90',
        :'rate_95',
        :'rate_medicare'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::UsualCustomaryRateAllPercentile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::UsualCustomaryRateAllPercentile`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_type')
        self.claim_type = attributes[:'claim_type']
      end

      if attributes.key?(:'zip_code_start')
        self.zip_code_start = attributes[:'zip_code_start']
      end

      if attributes.key?(:'zip_code_end')
        self.zip_code_end = attributes[:'zip_code_end']
      end

      if attributes.key?(:'modifier')
        self.modifier = attributes[:'modifier']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'rate_50')
        self.rate_50 = attributes[:'rate_50']
      end

      if attributes.key?(:'rate_60')
        self.rate_60 = attributes[:'rate_60']
      end

      if attributes.key?(:'rate_70')
        self.rate_70 = attributes[:'rate_70']
      end

      if attributes.key?(:'rate_75')
        self.rate_75 = attributes[:'rate_75']
      end

      if attributes.key?(:'rate_80')
        self.rate_80 = attributes[:'rate_80']
      end

      if attributes.key?(:'rate_85')
        self.rate_85 = attributes[:'rate_85']
      end

      if attributes.key?(:'rate_90')
        self.rate_90 = attributes[:'rate_90']
      end

      if attributes.key?(:'rate_95')
        self.rate_95 = attributes[:'rate_95']
      end

      if attributes.key?(:'rate_medicare')
        self.rate_medicare = attributes[:'rate_medicare']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_type == o.claim_type &&
          zip_code_start == o.zip_code_start &&
          zip_code_end == o.zip_code_end &&
          modifier == o.modifier &&
          procedure_code == o.procedure_code &&
          effective_date == o.effective_date &&
          term_date == o.term_date &&
          rate_50 == o.rate_50 &&
          rate_60 == o.rate_60 &&
          rate_70 == o.rate_70 &&
          rate_75 == o.rate_75 &&
          rate_80 == o.rate_80 &&
          rate_85 == o.rate_85 &&
          rate_90 == o.rate_90 &&
          rate_95 == o.rate_95 &&
          rate_medicare == o.rate_medicare
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_type, zip_code_start, zip_code_end, modifier, procedure_code, effective_date, term_date, rate_50, rate_60, rate_70, rate_75, rate_80, rate_85, rate_90, rate_95, rate_medicare].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
