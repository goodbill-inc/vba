=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimRule
    attr_accessor :claim_rule_key

    attr_accessor :claim_rule_object

    attr_accessor :claim_rule_result

    attr_accessor :debug

    attr_accessor :description

    attr_accessor :display

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :error_code

    attr_accessor :error_type

    attr_accessor :ex_code

    attr_accessor :process_if_error

    attr_accessor :process_if_override

    attr_accessor :required

    attr_accessor :system_rule

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_rule_key' => :'claimRule_Key',
        :'claim_rule_object' => :'claimRule_Object',
        :'claim_rule_result' => :'claimRule_Result',
        :'debug' => :'debug',
        :'description' => :'description',
        :'display' => :'display',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'error_code' => :'error_Code',
        :'error_type' => :'error_Type',
        :'ex_code' => :'ex_Code',
        :'process_if_error' => :'process_If_Error',
        :'process_if_override' => :'process_If_Override',
        :'required' => :'required',
        :'system_rule' => :'system_Rule',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_rule_key' => :'Integer',
        :'claim_rule_object' => :'String',
        :'claim_rule_result' => :'String',
        :'debug' => :'Boolean',
        :'description' => :'String',
        :'display' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'error_code' => :'String',
        :'error_type' => :'String',
        :'ex_code' => :'String',
        :'process_if_error' => :'Boolean',
        :'process_if_override' => :'Boolean',
        :'required' => :'Boolean',
        :'system_rule' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'claim_rule_object',
        :'claim_rule_result',
        :'description',
        :'display',
        :'entry_user',
        :'error_code',
        :'error_type',
        :'ex_code',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimRule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimRule`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_rule_key')
        self.claim_rule_key = attributes[:'claim_rule_key']
      else
        self.claim_rule_key = nil
      end

      if attributes.key?(:'claim_rule_object')
        self.claim_rule_object = attributes[:'claim_rule_object']
      end

      if attributes.key?(:'claim_rule_result')
        self.claim_rule_result = attributes[:'claim_rule_result']
      end

      if attributes.key?(:'debug')
        self.debug = attributes[:'debug']
      else
        self.debug = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display')
        self.display = attributes[:'display']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.key?(:'error_type')
        self.error_type = attributes[:'error_type']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'process_if_error')
        self.process_if_error = attributes[:'process_if_error']
      else
        self.process_if_error = nil
      end

      if attributes.key?(:'process_if_override')
        self.process_if_override = attributes[:'process_if_override']
      else
        self.process_if_override = nil
      end

      if attributes.key?(:'required')
        self.required = attributes[:'required']
      else
        self.required = nil
      end

      if attributes.key?(:'system_rule')
        self.system_rule = attributes[:'system_rule']
      else
        self.system_rule = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_rule_key.nil?
        invalid_properties.push('invalid value for "claim_rule_key", claim_rule_key cannot be nil.')
      end

      if !@claim_rule_object.nil? && @claim_rule_object.to_s.length > 64
        invalid_properties.push('invalid value for "claim_rule_object", the character length must be smaller than or equal to 64.')
      end

      if !@claim_rule_result.nil? && @claim_rule_result.to_s.length > 1
        invalid_properties.push('invalid value for "claim_rule_result", the character length must be smaller than or equal to 1.')
      end

      if @debug.nil?
        invalid_properties.push('invalid value for "debug", debug cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 512
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 512.')
      end

      if !@display.nil? && @display.to_s.length > 64
        invalid_properties.push('invalid value for "display", the character length must be smaller than or equal to 64.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@error_code.nil? && @error_code.to_s.length > 8
        invalid_properties.push('invalid value for "error_code", the character length must be smaller than or equal to 8.')
      end

      if !@error_type.nil? && @error_type.to_s.length > 32
        invalid_properties.push('invalid value for "error_type", the character length must be smaller than or equal to 32.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if @process_if_error.nil?
        invalid_properties.push('invalid value for "process_if_error", process_if_error cannot be nil.')
      end

      if @process_if_override.nil?
        invalid_properties.push('invalid value for "process_if_override", process_if_override cannot be nil.')
      end

      if @required.nil?
        invalid_properties.push('invalid value for "required", required cannot be nil.')
      end

      if @system_rule.nil?
        invalid_properties.push('invalid value for "system_rule", system_rule cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_rule_key.nil?
      return false if !@claim_rule_object.nil? && @claim_rule_object.to_s.length > 64
      return false if !@claim_rule_result.nil? && @claim_rule_result.to_s.length > 1
      return false if @debug.nil?
      return false if !@description.nil? && @description.to_s.length > 512
      return false if !@display.nil? && @display.to_s.length > 64
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@error_code.nil? && @error_code.to_s.length > 8
      return false if !@error_type.nil? && @error_type.to_s.length > 32
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if @process_if_error.nil?
      return false if @process_if_override.nil?
      return false if @required.nil?
      return false if @system_rule.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_rule_key Value to be assigned
    def claim_rule_key=(claim_rule_key)
      if claim_rule_key.nil?
        fail ArgumentError, 'claim_rule_key cannot be nil'
      end

      @claim_rule_key = claim_rule_key
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_rule_object Value to be assigned
    def claim_rule_object=(claim_rule_object)
      if !claim_rule_object.nil? && claim_rule_object.to_s.length > 64
        fail ArgumentError, 'invalid value for "claim_rule_object", the character length must be smaller than or equal to 64.'
      end

      @claim_rule_object = claim_rule_object
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_rule_result Value to be assigned
    def claim_rule_result=(claim_rule_result)
      if !claim_rule_result.nil? && claim_rule_result.to_s.length > 1
        fail ArgumentError, 'invalid value for "claim_rule_result", the character length must be smaller than or equal to 1.'
      end

      @claim_rule_result = claim_rule_result
    end

    # Custom attribute writer method with validation
    # @param [Object] debug Value to be assigned
    def debug=(debug)
      if debug.nil?
        fail ArgumentError, 'debug cannot be nil'
      end

      @debug = debug
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 512
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 512.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] display Value to be assigned
    def display=(display)
      if !display.nil? && display.to_s.length > 64
        fail ArgumentError, 'invalid value for "display", the character length must be smaller than or equal to 64.'
      end

      @display = display
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] error_code Value to be assigned
    def error_code=(error_code)
      if !error_code.nil? && error_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "error_code", the character length must be smaller than or equal to 8.'
      end

      @error_code = error_code
    end

    # Custom attribute writer method with validation
    # @param [Object] error_type Value to be assigned
    def error_type=(error_type)
      if !error_type.nil? && error_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "error_type", the character length must be smaller than or equal to 32.'
      end

      @error_type = error_type
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] process_if_error Value to be assigned
    def process_if_error=(process_if_error)
      if process_if_error.nil?
        fail ArgumentError, 'process_if_error cannot be nil'
      end

      @process_if_error = process_if_error
    end

    # Custom attribute writer method with validation
    # @param [Object] process_if_override Value to be assigned
    def process_if_override=(process_if_override)
      if process_if_override.nil?
        fail ArgumentError, 'process_if_override cannot be nil'
      end

      @process_if_override = process_if_override
    end

    # Custom attribute writer method with validation
    # @param [Object] required Value to be assigned
    def required=(required)
      if required.nil?
        fail ArgumentError, 'required cannot be nil'
      end

      @required = required
    end

    # Custom attribute writer method with validation
    # @param [Object] system_rule Value to be assigned
    def system_rule=(system_rule)
      if system_rule.nil?
        fail ArgumentError, 'system_rule cannot be nil'
      end

      @system_rule = system_rule
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_rule_key == o.claim_rule_key &&
          claim_rule_object == o.claim_rule_object &&
          claim_rule_result == o.claim_rule_result &&
          debug == o.debug &&
          description == o.description &&
          display == o.display &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          error_code == o.error_code &&
          error_type == o.error_type &&
          ex_code == o.ex_code &&
          process_if_error == o.process_if_error &&
          process_if_override == o.process_if_override &&
          required == o.required &&
          system_rule == o.system_rule &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_rule_key, claim_rule_object, claim_rule_result, debug, description, display, entry_date, entry_user, error_code, error_type, ex_code, process_if_error, process_if_override, required, system_rule, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
