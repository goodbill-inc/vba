=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ExplanationCodes
    attr_accessor :ex_code

    attr_accessor :admin_override

    attr_accessor :category

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :ex_description

    attr_accessor :ex_result

    attr_accessor :hipa_a_code

    attr_accessor :hipa_a_group_code

    attr_accessor :long_description

    attr_accessor :no_print_on_remit

    attr_accessor :override_denied

    attr_accessor :override_pend

    attr_accessor :patient_responsibility

    attr_accessor :print_only

    attr_accessor :suppress_eob_remit

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ex_code' => :'ex_Code',
        :'admin_override' => :'admin_Override',
        :'category' => :'category',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_description' => :'ex_Description',
        :'ex_result' => :'ex_Result',
        :'hipa_a_code' => :'hipaA_Code',
        :'hipa_a_group_code' => :'hipaA_Group_Code',
        :'long_description' => :'long_Description',
        :'no_print_on_remit' => :'no_Print_On_Remit',
        :'override_denied' => :'override_Denied',
        :'override_pend' => :'override_Pend',
        :'patient_responsibility' => :'patient_Responsibility',
        :'print_only' => :'print_Only',
        :'suppress_eob_remit' => :'suppress_EOB_Remit',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ex_code' => :'String',
        :'admin_override' => :'String',
        :'category' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_description' => :'String',
        :'ex_result' => :'String',
        :'hipa_a_code' => :'String',
        :'hipa_a_group_code' => :'String',
        :'long_description' => :'String',
        :'no_print_on_remit' => :'String',
        :'override_denied' => :'Boolean',
        :'override_pend' => :'Boolean',
        :'patient_responsibility' => :'Boolean',
        :'print_only' => :'Boolean',
        :'suppress_eob_remit' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'category',
        :'entry_user',
        :'ex_description',
        :'ex_result',
        :'hipa_a_code',
        :'hipa_a_group_code',
        :'long_description',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ExplanationCodes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ExplanationCodes`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      else
        self.ex_code = nil
      end

      if attributes.key?(:'admin_override')
        self.admin_override = attributes[:'admin_override']
      else
        self.admin_override = nil
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_description')
        self.ex_description = attributes[:'ex_description']
      end

      if attributes.key?(:'ex_result')
        self.ex_result = attributes[:'ex_result']
      end

      if attributes.key?(:'hipa_a_code')
        self.hipa_a_code = attributes[:'hipa_a_code']
      end

      if attributes.key?(:'hipa_a_group_code')
        self.hipa_a_group_code = attributes[:'hipa_a_group_code']
      end

      if attributes.key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.key?(:'no_print_on_remit')
        self.no_print_on_remit = attributes[:'no_print_on_remit']
      else
        self.no_print_on_remit = nil
      end

      if attributes.key?(:'override_denied')
        self.override_denied = attributes[:'override_denied']
      else
        self.override_denied = nil
      end

      if attributes.key?(:'override_pend')
        self.override_pend = attributes[:'override_pend']
      else
        self.override_pend = nil
      end

      if attributes.key?(:'patient_responsibility')
        self.patient_responsibility = attributes[:'patient_responsibility']
      else
        self.patient_responsibility = nil
      end

      if attributes.key?(:'print_only')
        self.print_only = attributes[:'print_only']
      else
        self.print_only = nil
      end

      if attributes.key?(:'suppress_eob_remit')
        self.suppress_eob_remit = attributes[:'suppress_eob_remit']
      else
        self.suppress_eob_remit = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @ex_code.nil?
        invalid_properties.push('invalid value for "ex_code", ex_code cannot be nil.')
      end

      if @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if @ex_code.to_s.length < 1
        invalid_properties.push('invalid value for "ex_code", the character length must be great than or equal to 1.')
      end

      if @admin_override.nil?
        invalid_properties.push('invalid value for "admin_override", admin_override cannot be nil.')
      end

      if @admin_override.to_s.length > 1
        invalid_properties.push('invalid value for "admin_override", the character length must be smaller than or equal to 1.')
      end

      if @admin_override.to_s.length < 1
        invalid_properties.push('invalid value for "admin_override", the character length must be great than or equal to 1.')
      end

      if !@category.nil? && @category.to_s.length > 6
        invalid_properties.push('invalid value for "category", the character length must be smaller than or equal to 6.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_description.nil? && @ex_description.to_s.length > 64
        invalid_properties.push('invalid value for "ex_description", the character length must be smaller than or equal to 64.')
      end

      if !@ex_result.nil? && @ex_result.to_s.length > 1
        invalid_properties.push('invalid value for "ex_result", the character length must be smaller than or equal to 1.')
      end

      if !@hipa_a_code.nil? && @hipa_a_code.to_s.length > 8
        invalid_properties.push('invalid value for "hipa_a_code", the character length must be smaller than or equal to 8.')
      end

      if !@hipa_a_group_code.nil? && @hipa_a_group_code.to_s.length > 8
        invalid_properties.push('invalid value for "hipa_a_group_code", the character length must be smaller than or equal to 8.')
      end

      if !@long_description.nil? && @long_description.to_s.length > 1024
        invalid_properties.push('invalid value for "long_description", the character length must be smaller than or equal to 1024.')
      end

      if @no_print_on_remit.nil?
        invalid_properties.push('invalid value for "no_print_on_remit", no_print_on_remit cannot be nil.')
      end

      if @no_print_on_remit.to_s.length > 1
        invalid_properties.push('invalid value for "no_print_on_remit", the character length must be smaller than or equal to 1.')
      end

      if @no_print_on_remit.to_s.length < 1
        invalid_properties.push('invalid value for "no_print_on_remit", the character length must be great than or equal to 1.')
      end

      if @override_denied.nil?
        invalid_properties.push('invalid value for "override_denied", override_denied cannot be nil.')
      end

      if @override_pend.nil?
        invalid_properties.push('invalid value for "override_pend", override_pend cannot be nil.')
      end

      if @patient_responsibility.nil?
        invalid_properties.push('invalid value for "patient_responsibility", patient_responsibility cannot be nil.')
      end

      if @print_only.nil?
        invalid_properties.push('invalid value for "print_only", print_only cannot be nil.')
      end

      if @suppress_eob_remit.nil?
        invalid_properties.push('invalid value for "suppress_eob_remit", suppress_eob_remit cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @ex_code.nil?
      return false if @ex_code.to_s.length > 6
      return false if @ex_code.to_s.length < 1
      return false if @admin_override.nil?
      return false if @admin_override.to_s.length > 1
      return false if @admin_override.to_s.length < 1
      return false if !@category.nil? && @category.to_s.length > 6
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_description.nil? && @ex_description.to_s.length > 64
      return false if !@ex_result.nil? && @ex_result.to_s.length > 1
      return false if !@hipa_a_code.nil? && @hipa_a_code.to_s.length > 8
      return false if !@hipa_a_group_code.nil? && @hipa_a_group_code.to_s.length > 8
      return false if !@long_description.nil? && @long_description.to_s.length > 1024
      return false if @no_print_on_remit.nil?
      return false if @no_print_on_remit.to_s.length > 1
      return false if @no_print_on_remit.to_s.length < 1
      return false if @override_denied.nil?
      return false if @override_pend.nil?
      return false if @patient_responsibility.nil?
      return false if @print_only.nil?
      return false if @suppress_eob_remit.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if ex_code.nil?
        fail ArgumentError, 'ex_code cannot be nil'
      end

      if ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      if ex_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "ex_code", the character length must be great than or equal to 1.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] admin_override Value to be assigned
    def admin_override=(admin_override)
      if admin_override.nil?
        fail ArgumentError, 'admin_override cannot be nil'
      end

      if admin_override.to_s.length > 1
        fail ArgumentError, 'invalid value for "admin_override", the character length must be smaller than or equal to 1.'
      end

      if admin_override.to_s.length < 1
        fail ArgumentError, 'invalid value for "admin_override", the character length must be great than or equal to 1.'
      end

      @admin_override = admin_override
    end

    # Custom attribute writer method with validation
    # @param [Object] category Value to be assigned
    def category=(category)
      if !category.nil? && category.to_s.length > 6
        fail ArgumentError, 'invalid value for "category", the character length must be smaller than or equal to 6.'
      end

      @category = category
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_description Value to be assigned
    def ex_description=(ex_description)
      if !ex_description.nil? && ex_description.to_s.length > 64
        fail ArgumentError, 'invalid value for "ex_description", the character length must be smaller than or equal to 64.'
      end

      @ex_description = ex_description
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_result Value to be assigned
    def ex_result=(ex_result)
      if !ex_result.nil? && ex_result.to_s.length > 1
        fail ArgumentError, 'invalid value for "ex_result", the character length must be smaller than or equal to 1.'
      end

      @ex_result = ex_result
    end

    # Custom attribute writer method with validation
    # @param [Object] hipa_a_code Value to be assigned
    def hipa_a_code=(hipa_a_code)
      if !hipa_a_code.nil? && hipa_a_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "hipa_a_code", the character length must be smaller than or equal to 8.'
      end

      @hipa_a_code = hipa_a_code
    end

    # Custom attribute writer method with validation
    # @param [Object] hipa_a_group_code Value to be assigned
    def hipa_a_group_code=(hipa_a_group_code)
      if !hipa_a_group_code.nil? && hipa_a_group_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "hipa_a_group_code", the character length must be smaller than or equal to 8.'
      end

      @hipa_a_group_code = hipa_a_group_code
    end

    # Custom attribute writer method with validation
    # @param [Object] long_description Value to be assigned
    def long_description=(long_description)
      if !long_description.nil? && long_description.to_s.length > 1024
        fail ArgumentError, 'invalid value for "long_description", the character length must be smaller than or equal to 1024.'
      end

      @long_description = long_description
    end

    # Custom attribute writer method with validation
    # @param [Object] no_print_on_remit Value to be assigned
    def no_print_on_remit=(no_print_on_remit)
      if no_print_on_remit.nil?
        fail ArgumentError, 'no_print_on_remit cannot be nil'
      end

      if no_print_on_remit.to_s.length > 1
        fail ArgumentError, 'invalid value for "no_print_on_remit", the character length must be smaller than or equal to 1.'
      end

      if no_print_on_remit.to_s.length < 1
        fail ArgumentError, 'invalid value for "no_print_on_remit", the character length must be great than or equal to 1.'
      end

      @no_print_on_remit = no_print_on_remit
    end

    # Custom attribute writer method with validation
    # @param [Object] override_denied Value to be assigned
    def override_denied=(override_denied)
      if override_denied.nil?
        fail ArgumentError, 'override_denied cannot be nil'
      end

      @override_denied = override_denied
    end

    # Custom attribute writer method with validation
    # @param [Object] override_pend Value to be assigned
    def override_pend=(override_pend)
      if override_pend.nil?
        fail ArgumentError, 'override_pend cannot be nil'
      end

      @override_pend = override_pend
    end

    # Custom attribute writer method with validation
    # @param [Object] patient_responsibility Value to be assigned
    def patient_responsibility=(patient_responsibility)
      if patient_responsibility.nil?
        fail ArgumentError, 'patient_responsibility cannot be nil'
      end

      @patient_responsibility = patient_responsibility
    end

    # Custom attribute writer method with validation
    # @param [Object] print_only Value to be assigned
    def print_only=(print_only)
      if print_only.nil?
        fail ArgumentError, 'print_only cannot be nil'
      end

      @print_only = print_only
    end

    # Custom attribute writer method with validation
    # @param [Object] suppress_eob_remit Value to be assigned
    def suppress_eob_remit=(suppress_eob_remit)
      if suppress_eob_remit.nil?
        fail ArgumentError, 'suppress_eob_remit cannot be nil'
      end

      @suppress_eob_remit = suppress_eob_remit
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ex_code == o.ex_code &&
          admin_override == o.admin_override &&
          category == o.category &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_description == o.ex_description &&
          ex_result == o.ex_result &&
          hipa_a_code == o.hipa_a_code &&
          hipa_a_group_code == o.hipa_a_group_code &&
          long_description == o.long_description &&
          no_print_on_remit == o.no_print_on_remit &&
          override_denied == o.override_denied &&
          override_pend == o.override_pend &&
          patient_responsibility == o.patient_responsibility &&
          print_only == o.print_only &&
          suppress_eob_remit == o.suppress_eob_remit &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ex_code, admin_override, category, entry_date, entry_user, ex_description, ex_result, hipa_a_code, hipa_a_group_code, long_description, no_print_on_remit, override_denied, override_pend, patient_responsibility, print_only, suppress_eob_remit, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
