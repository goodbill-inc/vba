=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupFlex
    # References Groups.Group_ID value on the parent record.
    attr_accessor :group_id

    # References the Plans.Plan_ID on the parent record. Must be a plan with a plan type flagged as Flex.
    attr_accessor :plan_id

    # The numeric calendar year for this flex period. For example, 2022.
    attr_accessor :calendar_year

    # This is the employer contribution amount.
    attr_accessor :contribution_amount

    # Indicates if the amount entered in \"Contribution_Amount\" is a percent or flat amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :contribution_pct

    # When \"Contribution_Pct\" is used, this notes what the contribution percentage is based upon: EMPELE - % of Employee Contribution, SALNET - % of Employee Net Salary, SALGROSS - % of Employee Gross Salary.
    attr_accessor :contribution_pct_type

    # References ContributionSchedule.Contribution_Schedule to define the employer contribution schedule for this flex offering.
    attr_accessor :contribution_schedule

    # The effective date for this flex period. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :effective_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Notes the date that is the start date that employer contribution schedule will build upon to lay out the contributions for the flex period.
    attr_accessor :first_contribution_date

    # Notes the date that is the start date that payment schedule will build upon to lay out the payment for the flex period.
    attr_accessor :first_payment_date

    # Notes the date that is the start date that reimbursement schedule will build upon to lay out the reimbursments for the flex period.
    attr_accessor :first_reimburse_date

    # For EDI processing and integrations, notes the external flex vendor used for procesisng (typically card swipes).
    attr_accessor :flex_vendor

    # The grace period value based on \"Grace_Period_Type\" for how long you have to process a flex claim after the term date.
    attr_accessor :grace_period

    # Combined with \"Grace_Period\", notes the grace period in: D - Days or M - Months.
    attr_accessor :grace_period_type

    # The Max Election a member can enter for this offering.
    attr_accessor :max_election

    # The minimum payment that can be applied during flex claims processing.
    attr_accessor :minimum_payment

    # References PaymentSchedule.Payment_Schedule to define the payment schedule for this flex offering.
    attr_accessor :payment_schedule

    # References ReimburseSchedule.Reimburse_Schedule to define the reimbursement schedule for this flex offering.
    attr_accessor :reimburse_schedule

    # The amount of flex contribution that can be rolled over to a subsquent flex offering on this same group.
    attr_accessor :rollover_amount

    # The submit period value based on \"Submit_Period_Type\" for how long you have to submit a flex claim after the term date.
    attr_accessor :submit_period

    # Combined with \"Submit_Period\", notes the submission period in: D - Days or M - Months.
    attr_accessor :submit_period_type

    # The term date for this flex period. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :term_date

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'plan_id' => :'plan_ID',
        :'calendar_year' => :'calendar_Year',
        :'contribution_amount' => :'contribution_Amount',
        :'contribution_pct' => :'contribution_Pct',
        :'contribution_pct_type' => :'contribution_Pct_Type',
        :'contribution_schedule' => :'contribution_Schedule',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'first_contribution_date' => :'first_Contribution_Date',
        :'first_payment_date' => :'first_Payment_Date',
        :'first_reimburse_date' => :'first_Reimburse_Date',
        :'flex_vendor' => :'flex_Vendor',
        :'grace_period' => :'grace_Period',
        :'grace_period_type' => :'grace_Period_Type',
        :'max_election' => :'max_Election',
        :'minimum_payment' => :'minimum_Payment',
        :'payment_schedule' => :'payment_Schedule',
        :'reimburse_schedule' => :'reimburse_Schedule',
        :'rollover_amount' => :'rollover_Amount',
        :'submit_period' => :'submit_Period',
        :'submit_period_type' => :'submit_Period_Type',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'plan_id' => :'String',
        :'calendar_year' => :'String',
        :'contribution_amount' => :'Float',
        :'contribution_pct' => :'Boolean',
        :'contribution_pct_type' => :'String',
        :'contribution_schedule' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'first_contribution_date' => :'Time',
        :'first_payment_date' => :'Time',
        :'first_reimburse_date' => :'Time',
        :'flex_vendor' => :'String',
        :'grace_period' => :'Integer',
        :'grace_period_type' => :'String',
        :'max_election' => :'Float',
        :'minimum_payment' => :'Float',
        :'payment_schedule' => :'String',
        :'reimburse_schedule' => :'String',
        :'rollover_amount' => :'Float',
        :'submit_period' => :'Integer',
        :'submit_period_type' => :'String',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'contribution_amount',
        :'contribution_pct_type',
        :'contribution_schedule',
        :'entry_user',
        :'first_contribution_date',
        :'first_payment_date',
        :'first_reimburse_date',
        :'flex_vendor',
        :'grace_period',
        :'grace_period_type',
        :'max_election',
        :'minimum_payment',
        :'payment_schedule',
        :'reimburse_schedule',
        :'rollover_amount',
        :'submit_period',
        :'submit_period_type',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupFlex` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupFlex`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'calendar_year')
        self.calendar_year = attributes[:'calendar_year']
      else
        self.calendar_year = nil
      end

      if attributes.key?(:'contribution_amount')
        self.contribution_amount = attributes[:'contribution_amount']
      end

      if attributes.key?(:'contribution_pct')
        self.contribution_pct = attributes[:'contribution_pct']
      else
        self.contribution_pct = nil
      end

      if attributes.key?(:'contribution_pct_type')
        self.contribution_pct_type = attributes[:'contribution_pct_type']
      end

      if attributes.key?(:'contribution_schedule')
        self.contribution_schedule = attributes[:'contribution_schedule']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'first_contribution_date')
        self.first_contribution_date = attributes[:'first_contribution_date']
      end

      if attributes.key?(:'first_payment_date')
        self.first_payment_date = attributes[:'first_payment_date']
      end

      if attributes.key?(:'first_reimburse_date')
        self.first_reimburse_date = attributes[:'first_reimburse_date']
      end

      if attributes.key?(:'flex_vendor')
        self.flex_vendor = attributes[:'flex_vendor']
      end

      if attributes.key?(:'grace_period')
        self.grace_period = attributes[:'grace_period']
      end

      if attributes.key?(:'grace_period_type')
        self.grace_period_type = attributes[:'grace_period_type']
      end

      if attributes.key?(:'max_election')
        self.max_election = attributes[:'max_election']
      end

      if attributes.key?(:'minimum_payment')
        self.minimum_payment = attributes[:'minimum_payment']
      end

      if attributes.key?(:'payment_schedule')
        self.payment_schedule = attributes[:'payment_schedule']
      end

      if attributes.key?(:'reimburse_schedule')
        self.reimburse_schedule = attributes[:'reimburse_schedule']
      end

      if attributes.key?(:'rollover_amount')
        self.rollover_amount = attributes[:'rollover_amount']
      end

      if attributes.key?(:'submit_period')
        self.submit_period = attributes[:'submit_period']
      end

      if attributes.key?(:'submit_period_type')
        self.submit_period_type = attributes[:'submit_period_type']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      else
        self.term_date = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if @calendar_year.nil?
        invalid_properties.push('invalid value for "calendar_year", calendar_year cannot be nil.')
      end

      if @calendar_year.to_s.length > 4
        invalid_properties.push('invalid value for "calendar_year", the character length must be smaller than or equal to 4.')
      end

      if @calendar_year.to_s.length < 1
        invalid_properties.push('invalid value for "calendar_year", the character length must be great than or equal to 1.')
      end

      if @contribution_pct.nil?
        invalid_properties.push('invalid value for "contribution_pct", contribution_pct cannot be nil.')
      end

      if !@contribution_pct_type.nil? && @contribution_pct_type.to_s.length > 16
        invalid_properties.push('invalid value for "contribution_pct_type", the character length must be smaller than or equal to 16.')
      end

      if !@contribution_schedule.nil? && @contribution_schedule.to_s.length > 32
        invalid_properties.push('invalid value for "contribution_schedule", the character length must be smaller than or equal to 32.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@flex_vendor.nil? && @flex_vendor.to_s.length > 32
        invalid_properties.push('invalid value for "flex_vendor", the character length must be smaller than or equal to 32.')
      end

      if !@grace_period_type.nil? && @grace_period_type.to_s.length > 16
        invalid_properties.push('invalid value for "grace_period_type", the character length must be smaller than or equal to 16.')
      end

      if !@payment_schedule.nil? && @payment_schedule.to_s.length > 32
        invalid_properties.push('invalid value for "payment_schedule", the character length must be smaller than or equal to 32.')
      end

      if !@reimburse_schedule.nil? && @reimburse_schedule.to_s.length > 32
        invalid_properties.push('invalid value for "reimburse_schedule", the character length must be smaller than or equal to 32.')
      end

      if !@submit_period_type.nil? && @submit_period_type.to_s.length > 16
        invalid_properties.push('invalid value for "submit_period_type", the character length must be smaller than or equal to 16.')
      end

      if @term_date.nil?
        invalid_properties.push('invalid value for "term_date", term_date cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if @calendar_year.nil?
      return false if @calendar_year.to_s.length > 4
      return false if @calendar_year.to_s.length < 1
      return false if @contribution_pct.nil?
      return false if !@contribution_pct_type.nil? && @contribution_pct_type.to_s.length > 16
      return false if !@contribution_schedule.nil? && @contribution_schedule.to_s.length > 32
      return false if @effective_date.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@flex_vendor.nil? && @flex_vendor.to_s.length > 32
      return false if !@grace_period_type.nil? && @grace_period_type.to_s.length > 16
      return false if !@payment_schedule.nil? && @payment_schedule.to_s.length > 32
      return false if !@reimburse_schedule.nil? && @reimburse_schedule.to_s.length > 32
      return false if !@submit_period_type.nil? && @submit_period_type.to_s.length > 16
      return false if @term_date.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] calendar_year Value to be assigned
    def calendar_year=(calendar_year)
      if calendar_year.nil?
        fail ArgumentError, 'calendar_year cannot be nil'
      end

      if calendar_year.to_s.length > 4
        fail ArgumentError, 'invalid value for "calendar_year", the character length must be smaller than or equal to 4.'
      end

      if calendar_year.to_s.length < 1
        fail ArgumentError, 'invalid value for "calendar_year", the character length must be great than or equal to 1.'
      end

      @calendar_year = calendar_year
    end

    # Custom attribute writer method with validation
    # @param [Object] contribution_pct Value to be assigned
    def contribution_pct=(contribution_pct)
      if contribution_pct.nil?
        fail ArgumentError, 'contribution_pct cannot be nil'
      end

      @contribution_pct = contribution_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] contribution_pct_type Value to be assigned
    def contribution_pct_type=(contribution_pct_type)
      if !contribution_pct_type.nil? && contribution_pct_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "contribution_pct_type", the character length must be smaller than or equal to 16.'
      end

      @contribution_pct_type = contribution_pct_type
    end

    # Custom attribute writer method with validation
    # @param [Object] contribution_schedule Value to be assigned
    def contribution_schedule=(contribution_schedule)
      if !contribution_schedule.nil? && contribution_schedule.to_s.length > 32
        fail ArgumentError, 'invalid value for "contribution_schedule", the character length must be smaller than or equal to 32.'
      end

      @contribution_schedule = contribution_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      if effective_date.nil?
        fail ArgumentError, 'effective_date cannot be nil'
      end

      @effective_date = effective_date
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_vendor Value to be assigned
    def flex_vendor=(flex_vendor)
      if !flex_vendor.nil? && flex_vendor.to_s.length > 32
        fail ArgumentError, 'invalid value for "flex_vendor", the character length must be smaller than or equal to 32.'
      end

      @flex_vendor = flex_vendor
    end

    # Custom attribute writer method with validation
    # @param [Object] grace_period_type Value to be assigned
    def grace_period_type=(grace_period_type)
      if !grace_period_type.nil? && grace_period_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "grace_period_type", the character length must be smaller than or equal to 16.'
      end

      @grace_period_type = grace_period_type
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_schedule Value to be assigned
    def payment_schedule=(payment_schedule)
      if !payment_schedule.nil? && payment_schedule.to_s.length > 32
        fail ArgumentError, 'invalid value for "payment_schedule", the character length must be smaller than or equal to 32.'
      end

      @payment_schedule = payment_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] reimburse_schedule Value to be assigned
    def reimburse_schedule=(reimburse_schedule)
      if !reimburse_schedule.nil? && reimburse_schedule.to_s.length > 32
        fail ArgumentError, 'invalid value for "reimburse_schedule", the character length must be smaller than or equal to 32.'
      end

      @reimburse_schedule = reimburse_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] submit_period_type Value to be assigned
    def submit_period_type=(submit_period_type)
      if !submit_period_type.nil? && submit_period_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "submit_period_type", the character length must be smaller than or equal to 16.'
      end

      @submit_period_type = submit_period_type
    end

    # Custom attribute writer method with validation
    # @param [Object] term_date Value to be assigned
    def term_date=(term_date)
      if term_date.nil?
        fail ArgumentError, 'term_date cannot be nil'
      end

      @term_date = term_date
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          plan_id == o.plan_id &&
          calendar_year == o.calendar_year &&
          contribution_amount == o.contribution_amount &&
          contribution_pct == o.contribution_pct &&
          contribution_pct_type == o.contribution_pct_type &&
          contribution_schedule == o.contribution_schedule &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          first_contribution_date == o.first_contribution_date &&
          first_payment_date == o.first_payment_date &&
          first_reimburse_date == o.first_reimburse_date &&
          flex_vendor == o.flex_vendor &&
          grace_period == o.grace_period &&
          grace_period_type == o.grace_period_type &&
          max_election == o.max_election &&
          minimum_payment == o.minimum_payment &&
          payment_schedule == o.payment_schedule &&
          reimburse_schedule == o.reimburse_schedule &&
          rollover_amount == o.rollover_amount &&
          submit_period == o.submit_period &&
          submit_period_type == o.submit_period_type &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, plan_id, calendar_year, contribution_amount, contribution_pct, contribution_pct_type, contribution_schedule, effective_date, entry_date, entry_user, first_contribution_date, first_payment_date, first_reimburse_date, flex_vendor, grace_period, grace_period_type, max_election, minimum_payment, payment_schedule, reimburse_schedule, rollover_amount, submit_period, submit_period_type, term_date, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
