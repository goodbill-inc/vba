=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PremRate
    # Unique identifier for the PremRate Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :prem_rate_key

    # Used to identify Add On rates by Group
    attr_accessor :add_on_grouping_id

    # Address the additional invoice is sent to
    attr_accessor :additional_invoice_address

    # Frequency of the additional invoice
    attr_accessor :additional_invoice_frequency

    # Allows split billing at this level
    attr_accessor :additional_invoice_level

    # Level of the Address used to determine if the rate applies
    attr_accessor :address_type

    # Adjustment Reason of the PremRate
    attr_accessor :adjustment_reason

    # Flag used to determine if the rate applies to Adults Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :adult

    # Beginning Age range of the PremRate
    attr_accessor :age_from

    # Ending Age range of the PremRate
    attr_accessor :age_thru

    # Detemines what date is used to calculate Age
    attr_accessor :age_type

    # Detemines what Month is used if the Month Type is selected
    attr_accessor :age_type_month

    # Flag to determine if the rate applies to new Divisions Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :assign_to_new_division

    # Flag to determine if the rate applies to new Groups Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :assign_to_new_group

    # Flag to determine if the rate applies to new Members Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :assign_to_new_member

    # Flag that determines if the rate is automatically adjusted Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :auto_adjust

    # Reason applied to automatic adjustments
    attr_accessor :auto_adjust_reason

    # This flag indicates prevention of the retro logic from creating backout adjustments for this rate Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :avoid_retro

    # Benefit Code of the PremRate
    attr_accessor :benefit_code

    # This is the Billing Cycle the invoice was gerenated for.
    attr_accessor :billing_cycle_id

    # Flag used to determine if the rate applies to Children Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :child

    # City of the Address used to determine if the rate applies
    attr_accessor :city

    # Class Code for the PremRate
    attr_accessor :class_code

    # Country ID of the Address used to determine if the rate applies
    attr_accessor :country_id

    # Country Code of the Address used to determine if the rate applies
    attr_accessor :county_code

    # Description of the PremRate
    attr_accessor :description

    # Unique identifier for the Division
    attr_accessor :division_id

    # Effective Date of the PremRate
    attr_accessor :effective_date

    # Determines the logic that modifies the Effective Date of the PremRate to a date based on the enrollment of the member. Note: The database will apply a default value of `NORMAL` for this field if a value is not provided.
    attr_accessor :effective_date_type

    # Determines if the contribution is Employee or Employer
    attr_accessor :employee_employer_contribution

    # Amount of the contribution
    attr_accessor :employer_contribution

    # Determines if the contribution is a percentage Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :employer_contribution_pct

    # Decimal value that defines the base employer rate
    attr_accessor :employer_rate

    # Maximum the employer rate will be regardless of the calculation
    attr_accessor :employer_rate_max

    # Minimum the employer rate will be regardless of the calculation
    attr_accessor :employer_rate_minimum

    # Type of Employer Rate
    attr_accessor :employer_rate_type

    # First variable used in calculating the employer rate based on the type
    attr_accessor :employer_rate_variable1

    # Second variable used in calculating the employer rate based on the type
    attr_accessor :employer_rate_variable2

    # Third variable used in calculating the employer rate based on the type
    attr_accessor :employer_rate_variable3

    # Precision that the employerrate is rounded to
    attr_accessor :employer_round_precision

    # Type that determine how the employer rate is rounded
    attr_accessor :employer_round_type

    # Beginning range based on number of enrollments
    attr_accessor :enrolled_count_from

    # Ending range based on number of enrollments
    attr_accessor :enrolled_count_thru

    # Type of enrollments used to calculate the number of enrollments
    attr_accessor :enrolled_count_type

    # Beginning range based on length of enrollment
    attr_accessor :enrolled_duration_from

    # Minimum length of enrollment
    attr_accessor :enrolled_duration_min

    # Determines if the date is based on the Member or the Plan enrollment
    attr_accessor :enrolled_duration_option

    # Ending range based on length of enrollment
    attr_accessor :enrolled_duration_thru

    # Type of date used to determine the enrollment range
    attr_accessor :enrolled_duration_type

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Used to determine which records are updated when applying changes to a template Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_division_offering

    # Unique identifier for the Group
    attr_accessor :group_id

    # Unique sequence for a Member
    attr_accessor :member_seq

    # Unique identifier for the Network
    attr_accessor :network_id

    # Type of Network
    attr_accessor :network_type

    # Flag that determines the Age based on the date of hire Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :new_hire_age

    # This flag indicates the rate should be paid if enrolled in for even a single day during the month. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :override_enrolled_dates

    # PremRate_Key of the template rate this rate was created from
    attr_accessor :parent_prem_rate_key

    # The primary key of the payment method
    attr_accessor :payment_method

    # Unique identifier for the Plan
    attr_accessor :plan_id

    # Type of Plan
    attr_accessor :plan_type

    # Basis of the PremRate
    attr_accessor :prem_rate_basis

    # Category of the PremRate
    attr_accessor :prem_rate_category

    # Unique identifier for the PremRate
    attr_accessor :prem_rate_id

    # Type of the PremRate
    attr_accessor :prem_rate_type

    # Flag that determines if the rate is prorated Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :premium_proration

    # Decimal value that defines the base rate
    attr_accessor :rate

    # Maximum the rate will be regardless of the calculation
    attr_accessor :rate_max

    # Minimum the rate will be regardless of the calculation
    attr_accessor :rate_minimum

    # How often the rate applies
    attr_accessor :rate_pace

    # The day the rate applies when the pace is weekly
    attr_accessor :rate_pace_type

    # Precision that the rate is rounded to
    attr_accessor :rate_round_precision

    # Type that determine how the rate is rounded
    attr_accessor :rate_round_type

    # Type of Rate
    attr_accessor :rate_type

    # First variable used in calculating the rate based on the type
    attr_accessor :rate_variable1

    # Second variable used in calculating the rate based on the type
    attr_accessor :rate_variable2

    # Third variable used in calculating the rate based on the type
    attr_accessor :rate_variable3

    # Region Code of the Address used to determine if the rate applies
    attr_accessor :region_code

    # Relationship for the PremRate
    attr_accessor :relationship

    # Flag used to determine what Sex the rate applies to
    attr_accessor :sex

    # Flag to determine if the rate applies to Smokers
    attr_accessor :smoker

    # State of the Address used to determine if the rate applies
    attr_accessor :state

    # Unique identifier for the Subscriber
    attr_accessor :subscriber_id

    # Term Date of the PremRate
    attr_accessor :term_date

    # Determines the logic that modifies the Term Date of the PremRate to a date based on the enrollment of the member. Note: The database will apply a default value of `NORMAL` for this field if a value is not provided.
    attr_accessor :term_date_type

    # Tier of the PremRate
    attr_accessor :tier

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Beginning Zip Code of the Address used to determine if the rate applies
    attr_accessor :zip_code_from

    # Ending Zip Code of the Address used to determine if the rate applies
    attr_accessor :zip_code_thru

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'prem_rate_key' => :'premRate_Key',
        :'add_on_grouping_id' => :'add_On_Grouping_ID',
        :'additional_invoice_address' => :'additional_Invoice_Address',
        :'additional_invoice_frequency' => :'additional_Invoice_Frequency',
        :'additional_invoice_level' => :'additional_Invoice_Level',
        :'address_type' => :'address_Type',
        :'adjustment_reason' => :'adjustment_Reason',
        :'adult' => :'adult',
        :'age_from' => :'age_From',
        :'age_thru' => :'age_Thru',
        :'age_type' => :'age_Type',
        :'age_type_month' => :'age_Type_Month',
        :'assign_to_new_division' => :'assign_To_New_Division',
        :'assign_to_new_group' => :'assign_To_New_Group',
        :'assign_to_new_member' => :'assign_To_New_Member',
        :'auto_adjust' => :'auto_Adjust',
        :'auto_adjust_reason' => :'auto_Adjust_Reason',
        :'avoid_retro' => :'avoid_Retro',
        :'benefit_code' => :'benefit_Code',
        :'billing_cycle_id' => :'billing_Cycle_ID',
        :'child' => :'child',
        :'city' => :'city',
        :'class_code' => :'class_Code',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'description' => :'description',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'effective_date_type' => :'effective_Date_Type',
        :'employee_employer_contribution' => :'employee_Employer_Contribution',
        :'employer_contribution' => :'employer_Contribution',
        :'employer_contribution_pct' => :'employer_Contribution_Pct',
        :'employer_rate' => :'employer_Rate',
        :'employer_rate_max' => :'employer_Rate_Max',
        :'employer_rate_minimum' => :'employer_Rate_Minimum',
        :'employer_rate_type' => :'employer_Rate_Type',
        :'employer_rate_variable1' => :'employer_Rate_Variable1',
        :'employer_rate_variable2' => :'employer_Rate_Variable2',
        :'employer_rate_variable3' => :'employer_Rate_Variable3',
        :'employer_round_precision' => :'employer_Round_Precision',
        :'employer_round_type' => :'employer_Round_Type',
        :'enrolled_count_from' => :'enrolled_Count_From',
        :'enrolled_count_thru' => :'enrolled_Count_Thru',
        :'enrolled_count_type' => :'enrolled_Count_Type',
        :'enrolled_duration_from' => :'enrolled_Duration_From',
        :'enrolled_duration_min' => :'enrolled_Duration_Min',
        :'enrolled_duration_option' => :'enrolled_Duration_Option',
        :'enrolled_duration_thru' => :'enrolled_Duration_Thru',
        :'enrolled_duration_type' => :'enrolled_Duration_Type',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_division_offering' => :'group_Division_Offering',
        :'group_id' => :'group_ID',
        :'member_seq' => :'member_Seq',
        :'network_id' => :'network_ID',
        :'network_type' => :'network_Type',
        :'new_hire_age' => :'new_Hire_Age',
        :'override_enrolled_dates' => :'override_Enrolled_Dates',
        :'parent_prem_rate_key' => :'parent_PremRate_Key',
        :'payment_method' => :'payment_Method',
        :'plan_id' => :'plan_ID',
        :'plan_type' => :'plan_Type',
        :'prem_rate_basis' => :'premRate_Basis',
        :'prem_rate_category' => :'premRate_Category',
        :'prem_rate_id' => :'premRate_ID',
        :'prem_rate_type' => :'premRate_Type',
        :'premium_proration' => :'premium_Proration',
        :'rate' => :'rate',
        :'rate_max' => :'rate_Max',
        :'rate_minimum' => :'rate_Minimum',
        :'rate_pace' => :'rate_Pace',
        :'rate_pace_type' => :'rate_Pace_Type',
        :'rate_round_precision' => :'rate_Round_Precision',
        :'rate_round_type' => :'rate_Round_Type',
        :'rate_type' => :'rate_Type',
        :'rate_variable1' => :'rate_Variable1',
        :'rate_variable2' => :'rate_Variable2',
        :'rate_variable3' => :'rate_Variable3',
        :'region_code' => :'region_Code',
        :'relationship' => :'relationship',
        :'sex' => :'sex',
        :'smoker' => :'smoker',
        :'state' => :'state',
        :'subscriber_id' => :'subscriber_ID',
        :'term_date' => :'term_Date',
        :'term_date_type' => :'term_Date_type',
        :'tier' => :'tier',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'zip_code_from' => :'zip_Code_From',
        :'zip_code_thru' => :'zip_Code_Thru'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'prem_rate_key' => :'Integer',
        :'add_on_grouping_id' => :'String',
        :'additional_invoice_address' => :'String',
        :'additional_invoice_frequency' => :'String',
        :'additional_invoice_level' => :'String',
        :'address_type' => :'String',
        :'adjustment_reason' => :'Integer',
        :'adult' => :'Boolean',
        :'age_from' => :'Integer',
        :'age_thru' => :'Integer',
        :'age_type' => :'String',
        :'age_type_month' => :'String',
        :'assign_to_new_division' => :'Boolean',
        :'assign_to_new_group' => :'Boolean',
        :'assign_to_new_member' => :'Boolean',
        :'auto_adjust' => :'Boolean',
        :'auto_adjust_reason' => :'Integer',
        :'avoid_retro' => :'Boolean',
        :'benefit_code' => :'String',
        :'billing_cycle_id' => :'String',
        :'child' => :'Boolean',
        :'city' => :'String',
        :'class_code' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'description' => :'String',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'effective_date_type' => :'String',
        :'employee_employer_contribution' => :'String',
        :'employer_contribution' => :'Float',
        :'employer_contribution_pct' => :'Boolean',
        :'employer_rate' => :'Float',
        :'employer_rate_max' => :'Float',
        :'employer_rate_minimum' => :'Float',
        :'employer_rate_type' => :'String',
        :'employer_rate_variable1' => :'Float',
        :'employer_rate_variable2' => :'Float',
        :'employer_rate_variable3' => :'Float',
        :'employer_round_precision' => :'Integer',
        :'employer_round_type' => :'String',
        :'enrolled_count_from' => :'Integer',
        :'enrolled_count_thru' => :'Integer',
        :'enrolled_count_type' => :'String',
        :'enrolled_duration_from' => :'Integer',
        :'enrolled_duration_min' => :'Integer',
        :'enrolled_duration_option' => :'String',
        :'enrolled_duration_thru' => :'Integer',
        :'enrolled_duration_type' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_division_offering' => :'Boolean',
        :'group_id' => :'String',
        :'member_seq' => :'String',
        :'network_id' => :'String',
        :'network_type' => :'String',
        :'new_hire_age' => :'Boolean',
        :'override_enrolled_dates' => :'Boolean',
        :'parent_prem_rate_key' => :'Integer',
        :'payment_method' => :'String',
        :'plan_id' => :'String',
        :'plan_type' => :'String',
        :'prem_rate_basis' => :'String',
        :'prem_rate_category' => :'String',
        :'prem_rate_id' => :'String',
        :'prem_rate_type' => :'String',
        :'premium_proration' => :'Boolean',
        :'rate' => :'Float',
        :'rate_max' => :'Float',
        :'rate_minimum' => :'Float',
        :'rate_pace' => :'String',
        :'rate_pace_type' => :'String',
        :'rate_round_precision' => :'Integer',
        :'rate_round_type' => :'String',
        :'rate_type' => :'String',
        :'rate_variable1' => :'Float',
        :'rate_variable2' => :'Float',
        :'rate_variable3' => :'Float',
        :'region_code' => :'String',
        :'relationship' => :'String',
        :'sex' => :'String',
        :'smoker' => :'String',
        :'state' => :'String',
        :'subscriber_id' => :'String',
        :'term_date' => :'Time',
        :'term_date_type' => :'String',
        :'tier' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'zip_code_from' => :'String',
        :'zip_code_thru' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'add_on_grouping_id',
        :'additional_invoice_address',
        :'additional_invoice_frequency',
        :'additional_invoice_level',
        :'address_type',
        :'adjustment_reason',
        :'age_from',
        :'age_thru',
        :'age_type',
        :'age_type_month',
        :'auto_adjust_reason',
        :'benefit_code',
        :'billing_cycle_id',
        :'city',
        :'class_code',
        :'country_id',
        :'county_code',
        :'description',
        :'division_id',
        :'effective_date',
        :'effective_date_type',
        :'employee_employer_contribution',
        :'employer_contribution',
        :'employer_rate',
        :'employer_rate_max',
        :'employer_rate_minimum',
        :'employer_rate_type',
        :'employer_rate_variable1',
        :'employer_rate_variable2',
        :'employer_rate_variable3',
        :'employer_round_precision',
        :'employer_round_type',
        :'enrolled_count_from',
        :'enrolled_count_thru',
        :'enrolled_count_type',
        :'enrolled_duration_from',
        :'enrolled_duration_min',
        :'enrolled_duration_option',
        :'enrolled_duration_thru',
        :'enrolled_duration_type',
        :'entry_user',
        :'group_id',
        :'member_seq',
        :'network_id',
        :'network_type',
        :'parent_prem_rate_key',
        :'payment_method',
        :'plan_id',
        :'plan_type',
        :'prem_rate_basis',
        :'prem_rate_category',
        :'prem_rate_id',
        :'prem_rate_type',
        :'rate',
        :'rate_max',
        :'rate_minimum',
        :'rate_pace',
        :'rate_pace_type',
        :'rate_round_precision',
        :'rate_round_type',
        :'rate_type',
        :'rate_variable1',
        :'rate_variable2',
        :'rate_variable3',
        :'region_code',
        :'relationship',
        :'sex',
        :'smoker',
        :'state',
        :'subscriber_id',
        :'term_date',
        :'term_date_type',
        :'tier',
        :'update_user',
        :'zip_code_from',
        :'zip_code_thru'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PremRate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PremRate`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      else
        self.prem_rate_key = nil
      end

      if attributes.key?(:'add_on_grouping_id')
        self.add_on_grouping_id = attributes[:'add_on_grouping_id']
      end

      if attributes.key?(:'additional_invoice_address')
        self.additional_invoice_address = attributes[:'additional_invoice_address']
      end

      if attributes.key?(:'additional_invoice_frequency')
        self.additional_invoice_frequency = attributes[:'additional_invoice_frequency']
      end

      if attributes.key?(:'additional_invoice_level')
        self.additional_invoice_level = attributes[:'additional_invoice_level']
      end

      if attributes.key?(:'address_type')
        self.address_type = attributes[:'address_type']
      end

      if attributes.key?(:'adjustment_reason')
        self.adjustment_reason = attributes[:'adjustment_reason']
      end

      if attributes.key?(:'adult')
        self.adult = attributes[:'adult']
      else
        self.adult = nil
      end

      if attributes.key?(:'age_from')
        self.age_from = attributes[:'age_from']
      end

      if attributes.key?(:'age_thru')
        self.age_thru = attributes[:'age_thru']
      end

      if attributes.key?(:'age_type')
        self.age_type = attributes[:'age_type']
      end

      if attributes.key?(:'age_type_month')
        self.age_type_month = attributes[:'age_type_month']
      end

      if attributes.key?(:'assign_to_new_division')
        self.assign_to_new_division = attributes[:'assign_to_new_division']
      else
        self.assign_to_new_division = nil
      end

      if attributes.key?(:'assign_to_new_group')
        self.assign_to_new_group = attributes[:'assign_to_new_group']
      else
        self.assign_to_new_group = nil
      end

      if attributes.key?(:'assign_to_new_member')
        self.assign_to_new_member = attributes[:'assign_to_new_member']
      else
        self.assign_to_new_member = nil
      end

      if attributes.key?(:'auto_adjust')
        self.auto_adjust = attributes[:'auto_adjust']
      else
        self.auto_adjust = nil
      end

      if attributes.key?(:'auto_adjust_reason')
        self.auto_adjust_reason = attributes[:'auto_adjust_reason']
      end

      if attributes.key?(:'avoid_retro')
        self.avoid_retro = attributes[:'avoid_retro']
      else
        self.avoid_retro = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'billing_cycle_id')
        self.billing_cycle_id = attributes[:'billing_cycle_id']
      end

      if attributes.key?(:'child')
        self.child = attributes[:'child']
      else
        self.child = nil
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'class_code')
        self.class_code = attributes[:'class_code']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'effective_date_type')
        self.effective_date_type = attributes[:'effective_date_type']
      end

      if attributes.key?(:'employee_employer_contribution')
        self.employee_employer_contribution = attributes[:'employee_employer_contribution']
      end

      if attributes.key?(:'employer_contribution')
        self.employer_contribution = attributes[:'employer_contribution']
      end

      if attributes.key?(:'employer_contribution_pct')
        self.employer_contribution_pct = attributes[:'employer_contribution_pct']
      else
        self.employer_contribution_pct = nil
      end

      if attributes.key?(:'employer_rate')
        self.employer_rate = attributes[:'employer_rate']
      end

      if attributes.key?(:'employer_rate_max')
        self.employer_rate_max = attributes[:'employer_rate_max']
      end

      if attributes.key?(:'employer_rate_minimum')
        self.employer_rate_minimum = attributes[:'employer_rate_minimum']
      end

      if attributes.key?(:'employer_rate_type')
        self.employer_rate_type = attributes[:'employer_rate_type']
      end

      if attributes.key?(:'employer_rate_variable1')
        self.employer_rate_variable1 = attributes[:'employer_rate_variable1']
      end

      if attributes.key?(:'employer_rate_variable2')
        self.employer_rate_variable2 = attributes[:'employer_rate_variable2']
      end

      if attributes.key?(:'employer_rate_variable3')
        self.employer_rate_variable3 = attributes[:'employer_rate_variable3']
      end

      if attributes.key?(:'employer_round_precision')
        self.employer_round_precision = attributes[:'employer_round_precision']
      end

      if attributes.key?(:'employer_round_type')
        self.employer_round_type = attributes[:'employer_round_type']
      end

      if attributes.key?(:'enrolled_count_from')
        self.enrolled_count_from = attributes[:'enrolled_count_from']
      end

      if attributes.key?(:'enrolled_count_thru')
        self.enrolled_count_thru = attributes[:'enrolled_count_thru']
      end

      if attributes.key?(:'enrolled_count_type')
        self.enrolled_count_type = attributes[:'enrolled_count_type']
      end

      if attributes.key?(:'enrolled_duration_from')
        self.enrolled_duration_from = attributes[:'enrolled_duration_from']
      end

      if attributes.key?(:'enrolled_duration_min')
        self.enrolled_duration_min = attributes[:'enrolled_duration_min']
      end

      if attributes.key?(:'enrolled_duration_option')
        self.enrolled_duration_option = attributes[:'enrolled_duration_option']
      end

      if attributes.key?(:'enrolled_duration_thru')
        self.enrolled_duration_thru = attributes[:'enrolled_duration_thru']
      end

      if attributes.key?(:'enrolled_duration_type')
        self.enrolled_duration_type = attributes[:'enrolled_duration_type']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_division_offering')
        self.group_division_offering = attributes[:'group_division_offering']
      else
        self.group_division_offering = nil
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end

      if attributes.key?(:'network_type')
        self.network_type = attributes[:'network_type']
      end

      if attributes.key?(:'new_hire_age')
        self.new_hire_age = attributes[:'new_hire_age']
      else
        self.new_hire_age = nil
      end

      if attributes.key?(:'override_enrolled_dates')
        self.override_enrolled_dates = attributes[:'override_enrolled_dates']
      else
        self.override_enrolled_dates = nil
      end

      if attributes.key?(:'parent_prem_rate_key')
        self.parent_prem_rate_key = attributes[:'parent_prem_rate_key']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'prem_rate_basis')
        self.prem_rate_basis = attributes[:'prem_rate_basis']
      end

      if attributes.key?(:'prem_rate_category')
        self.prem_rate_category = attributes[:'prem_rate_category']
      end

      if attributes.key?(:'prem_rate_id')
        self.prem_rate_id = attributes[:'prem_rate_id']
      end

      if attributes.key?(:'prem_rate_type')
        self.prem_rate_type = attributes[:'prem_rate_type']
      end

      if attributes.key?(:'premium_proration')
        self.premium_proration = attributes[:'premium_proration']
      else
        self.premium_proration = nil
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.key?(:'rate_max')
        self.rate_max = attributes[:'rate_max']
      end

      if attributes.key?(:'rate_minimum')
        self.rate_minimum = attributes[:'rate_minimum']
      end

      if attributes.key?(:'rate_pace')
        self.rate_pace = attributes[:'rate_pace']
      end

      if attributes.key?(:'rate_pace_type')
        self.rate_pace_type = attributes[:'rate_pace_type']
      end

      if attributes.key?(:'rate_round_precision')
        self.rate_round_precision = attributes[:'rate_round_precision']
      end

      if attributes.key?(:'rate_round_type')
        self.rate_round_type = attributes[:'rate_round_type']
      end

      if attributes.key?(:'rate_type')
        self.rate_type = attributes[:'rate_type']
      end

      if attributes.key?(:'rate_variable1')
        self.rate_variable1 = attributes[:'rate_variable1']
      end

      if attributes.key?(:'rate_variable2')
        self.rate_variable2 = attributes[:'rate_variable2']
      end

      if attributes.key?(:'rate_variable3')
        self.rate_variable3 = attributes[:'rate_variable3']
      end

      if attributes.key?(:'region_code')
        self.region_code = attributes[:'region_code']
      end

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'smoker')
        self.smoker = attributes[:'smoker']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'term_date_type')
        self.term_date_type = attributes[:'term_date_type']
      end

      if attributes.key?(:'tier')
        self.tier = attributes[:'tier']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'zip_code_from')
        self.zip_code_from = attributes[:'zip_code_from']
      end

      if attributes.key?(:'zip_code_thru')
        self.zip_code_thru = attributes[:'zip_code_thru']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @prem_rate_key.nil?
        invalid_properties.push('invalid value for "prem_rate_key", prem_rate_key cannot be nil.')
      end

      if !@add_on_grouping_id.nil? && @add_on_grouping_id.to_s.length > 32
        invalid_properties.push('invalid value for "add_on_grouping_id", the character length must be smaller than or equal to 32.')
      end

      if !@additional_invoice_address.nil? && @additional_invoice_address.to_s.length > 4
        invalid_properties.push('invalid value for "additional_invoice_address", the character length must be smaller than or equal to 4.')
      end

      if !@additional_invoice_frequency.nil? && @additional_invoice_frequency.to_s.length > 2
        invalid_properties.push('invalid value for "additional_invoice_frequency", the character length must be smaller than or equal to 2.')
      end

      if !@additional_invoice_level.nil? && @additional_invoice_level.to_s.length > 16
        invalid_properties.push('invalid value for "additional_invoice_level", the character length must be smaller than or equal to 16.')
      end

      if !@address_type.nil? && @address_type.to_s.length > 16
        invalid_properties.push('invalid value for "address_type", the character length must be smaller than or equal to 16.')
      end

      if @adult.nil?
        invalid_properties.push('invalid value for "adult", adult cannot be nil.')
      end

      if !@age_type.nil? && @age_type.to_s.length > 16
        invalid_properties.push('invalid value for "age_type", the character length must be smaller than or equal to 16.')
      end

      if !@age_type_month.nil? && @age_type_month.to_s.length > 2
        invalid_properties.push('invalid value for "age_type_month", the character length must be smaller than or equal to 2.')
      end

      if @assign_to_new_division.nil?
        invalid_properties.push('invalid value for "assign_to_new_division", assign_to_new_division cannot be nil.')
      end

      if @assign_to_new_group.nil?
        invalid_properties.push('invalid value for "assign_to_new_group", assign_to_new_group cannot be nil.')
      end

      if @assign_to_new_member.nil?
        invalid_properties.push('invalid value for "assign_to_new_member", assign_to_new_member cannot be nil.')
      end

      if @auto_adjust.nil?
        invalid_properties.push('invalid value for "auto_adjust", auto_adjust cannot be nil.')
      end

      if @avoid_retro.nil?
        invalid_properties.push('invalid value for "avoid_retro", avoid_retro cannot be nil.')
      end

      if !@benefit_code.nil? && @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
        invalid_properties.push('invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.')
      end

      if @child.nil?
        invalid_properties.push('invalid value for "child", child cannot be nil.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@class_code.nil? && @class_code.to_s.length > 32
        invalid_properties.push('invalid value for "class_code", the character length must be smaller than or equal to 32.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if !@description.nil? && @description.to_s.length > 128
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 128.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@effective_date_type.nil? && @effective_date_type.to_s.length > 16
        invalid_properties.push('invalid value for "effective_date_type", the character length must be smaller than or equal to 16.')
      end

      if !@employee_employer_contribution.nil? && @employee_employer_contribution.to_s.length > 2
        invalid_properties.push('invalid value for "employee_employer_contribution", the character length must be smaller than or equal to 2.')
      end

      if @employer_contribution_pct.nil?
        invalid_properties.push('invalid value for "employer_contribution_pct", employer_contribution_pct cannot be nil.')
      end

      if !@employer_rate_type.nil? && @employer_rate_type.to_s.length > 32
        invalid_properties.push('invalid value for "employer_rate_type", the character length must be smaller than or equal to 32.')
      end

      if !@employer_round_type.nil? && @employer_round_type.to_s.length > 16
        invalid_properties.push('invalid value for "employer_round_type", the character length must be smaller than or equal to 16.')
      end

      if !@enrolled_count_type.nil? && @enrolled_count_type.to_s.length > 16
        invalid_properties.push('invalid value for "enrolled_count_type", the character length must be smaller than or equal to 16.')
      end

      if !@enrolled_duration_option.nil? && @enrolled_duration_option.to_s.length > 16
        invalid_properties.push('invalid value for "enrolled_duration_option", the character length must be smaller than or equal to 16.')
      end

      if !@enrolled_duration_type.nil? && @enrolled_duration_type.to_s.length > 16
        invalid_properties.push('invalid value for "enrolled_duration_type", the character length must be smaller than or equal to 16.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @group_division_offering.nil?
        invalid_properties.push('invalid value for "group_division_offering", group_division_offering cannot be nil.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@network_id.nil? && @network_id.to_s.length > 10
        invalid_properties.push('invalid value for "network_id", the character length must be smaller than or equal to 10.')
      end

      if !@network_type.nil? && @network_type.to_s.length > 16
        invalid_properties.push('invalid value for "network_type", the character length must be smaller than or equal to 16.')
      end

      if @new_hire_age.nil?
        invalid_properties.push('invalid value for "new_hire_age", new_hire_age cannot be nil.')
      end

      if @override_enrolled_dates.nil?
        invalid_properties.push('invalid value for "override_enrolled_dates", override_enrolled_dates cannot be nil.')
      end

      if !@payment_method.nil? && @payment_method.to_s.length > 20
        invalid_properties.push('invalid value for "payment_method", the character length must be smaller than or equal to 20.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_type.nil? && @plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "plan_type", the character length must be smaller than or equal to 6.')
      end

      if !@prem_rate_basis.nil? && @prem_rate_basis.to_s.length > 32
        invalid_properties.push('invalid value for "prem_rate_basis", the character length must be smaller than or equal to 32.')
      end

      if !@prem_rate_category.nil? && @prem_rate_category.to_s.length > 32
        invalid_properties.push('invalid value for "prem_rate_category", the character length must be smaller than or equal to 32.')
      end

      if !@prem_rate_id.nil? && @prem_rate_id.to_s.length > 32
        invalid_properties.push('invalid value for "prem_rate_id", the character length must be smaller than or equal to 32.')
      end

      if !@prem_rate_type.nil? && @prem_rate_type.to_s.length > 16
        invalid_properties.push('invalid value for "prem_rate_type", the character length must be smaller than or equal to 16.')
      end

      if @premium_proration.nil?
        invalid_properties.push('invalid value for "premium_proration", premium_proration cannot be nil.')
      end

      if !@rate_pace.nil? && @rate_pace.to_s.length > 16
        invalid_properties.push('invalid value for "rate_pace", the character length must be smaller than or equal to 16.')
      end

      if !@rate_pace_type.nil? && @rate_pace_type.to_s.length > 16
        invalid_properties.push('invalid value for "rate_pace_type", the character length must be smaller than or equal to 16.')
      end

      if !@rate_round_type.nil? && @rate_round_type.to_s.length > 16
        invalid_properties.push('invalid value for "rate_round_type", the character length must be smaller than or equal to 16.')
      end

      if !@rate_type.nil? && @rate_type.to_s.length > 32
        invalid_properties.push('invalid value for "rate_type", the character length must be smaller than or equal to 32.')
      end

      if !@region_code.nil? && @region_code.to_s.length > 32
        invalid_properties.push('invalid value for "region_code", the character length must be smaller than or equal to 32.')
      end

      if !@relationship.nil? && @relationship.to_s.length > 12
        invalid_properties.push('invalid value for "relationship", the character length must be smaller than or equal to 12.')
      end

      if !@sex.nil? && @sex.to_s.length > 1
        invalid_properties.push('invalid value for "sex", the character length must be smaller than or equal to 1.')
      end

      if !@smoker.nil? && @smoker.to_s.length > 1
        invalid_properties.push('invalid value for "smoker", the character length must be smaller than or equal to 1.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@term_date_type.nil? && @term_date_type.to_s.length > 16
        invalid_properties.push('invalid value for "term_date_type", the character length must be smaller than or equal to 16.')
      end

      if !@tier.nil? && @tier.to_s.length > 2
        invalid_properties.push('invalid value for "tier", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip_code_from.nil? && @zip_code_from.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code_from", the character length must be smaller than or equal to 32.')
      end

      if !@zip_code_thru.nil? && @zip_code_thru.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code_thru", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @prem_rate_key.nil?
      return false if !@add_on_grouping_id.nil? && @add_on_grouping_id.to_s.length > 32
      return false if !@additional_invoice_address.nil? && @additional_invoice_address.to_s.length > 4
      return false if !@additional_invoice_frequency.nil? && @additional_invoice_frequency.to_s.length > 2
      return false if !@additional_invoice_level.nil? && @additional_invoice_level.to_s.length > 16
      return false if !@address_type.nil? && @address_type.to_s.length > 16
      return false if @adult.nil?
      return false if !@age_type.nil? && @age_type.to_s.length > 16
      return false if !@age_type_month.nil? && @age_type_month.to_s.length > 2
      return false if @assign_to_new_division.nil?
      return false if @assign_to_new_group.nil?
      return false if @assign_to_new_member.nil?
      return false if @auto_adjust.nil?
      return false if @avoid_retro.nil?
      return false if !@benefit_code.nil? && @benefit_code.to_s.length > 10
      return false if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
      return false if @child.nil?
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@class_code.nil? && @class_code.to_s.length > 32
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if !@description.nil? && @description.to_s.length > 128
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@effective_date_type.nil? && @effective_date_type.to_s.length > 16
      return false if !@employee_employer_contribution.nil? && @employee_employer_contribution.to_s.length > 2
      return false if @employer_contribution_pct.nil?
      return false if !@employer_rate_type.nil? && @employer_rate_type.to_s.length > 32
      return false if !@employer_round_type.nil? && @employer_round_type.to_s.length > 16
      return false if !@enrolled_count_type.nil? && @enrolled_count_type.to_s.length > 16
      return false if !@enrolled_duration_option.nil? && @enrolled_duration_option.to_s.length > 16
      return false if !@enrolled_duration_type.nil? && @enrolled_duration_type.to_s.length > 16
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @group_division_offering.nil?
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@network_id.nil? && @network_id.to_s.length > 10
      return false if !@network_type.nil? && @network_type.to_s.length > 16
      return false if @new_hire_age.nil?
      return false if @override_enrolled_dates.nil?
      return false if !@payment_method.nil? && @payment_method.to_s.length > 20
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@plan_type.nil? && @plan_type.to_s.length > 6
      return false if !@prem_rate_basis.nil? && @prem_rate_basis.to_s.length > 32
      return false if !@prem_rate_category.nil? && @prem_rate_category.to_s.length > 32
      return false if !@prem_rate_id.nil? && @prem_rate_id.to_s.length > 32
      return false if !@prem_rate_type.nil? && @prem_rate_type.to_s.length > 16
      return false if @premium_proration.nil?
      return false if !@rate_pace.nil? && @rate_pace.to_s.length > 16
      return false if !@rate_pace_type.nil? && @rate_pace_type.to_s.length > 16
      return false if !@rate_round_type.nil? && @rate_round_type.to_s.length > 16
      return false if !@rate_type.nil? && @rate_type.to_s.length > 32
      return false if !@region_code.nil? && @region_code.to_s.length > 32
      return false if !@relationship.nil? && @relationship.to_s.length > 12
      return false if !@sex.nil? && @sex.to_s.length > 1
      return false if !@smoker.nil? && @smoker.to_s.length > 1
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@term_date_type.nil? && @term_date_type.to_s.length > 16
      return false if !@tier.nil? && @tier.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip_code_from.nil? && @zip_code_from.to_s.length > 32
      return false if !@zip_code_thru.nil? && @zip_code_thru.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] prem_rate_key Value to be assigned
    def prem_rate_key=(prem_rate_key)
      if prem_rate_key.nil?
        fail ArgumentError, 'prem_rate_key cannot be nil'
      end

      @prem_rate_key = prem_rate_key
    end

    # Custom attribute writer method with validation
    # @param [Object] add_on_grouping_id Value to be assigned
    def add_on_grouping_id=(add_on_grouping_id)
      if !add_on_grouping_id.nil? && add_on_grouping_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "add_on_grouping_id", the character length must be smaller than or equal to 32.'
      end

      @add_on_grouping_id = add_on_grouping_id
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_invoice_address Value to be assigned
    def additional_invoice_address=(additional_invoice_address)
      if !additional_invoice_address.nil? && additional_invoice_address.to_s.length > 4
        fail ArgumentError, 'invalid value for "additional_invoice_address", the character length must be smaller than or equal to 4.'
      end

      @additional_invoice_address = additional_invoice_address
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_invoice_frequency Value to be assigned
    def additional_invoice_frequency=(additional_invoice_frequency)
      if !additional_invoice_frequency.nil? && additional_invoice_frequency.to_s.length > 2
        fail ArgumentError, 'invalid value for "additional_invoice_frequency", the character length must be smaller than or equal to 2.'
      end

      @additional_invoice_frequency = additional_invoice_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_invoice_level Value to be assigned
    def additional_invoice_level=(additional_invoice_level)
      if !additional_invoice_level.nil? && additional_invoice_level.to_s.length > 16
        fail ArgumentError, 'invalid value for "additional_invoice_level", the character length must be smaller than or equal to 16.'
      end

      @additional_invoice_level = additional_invoice_level
    end

    # Custom attribute writer method with validation
    # @param [Object] address_type Value to be assigned
    def address_type=(address_type)
      if !address_type.nil? && address_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "address_type", the character length must be smaller than or equal to 16.'
      end

      @address_type = address_type
    end

    # Custom attribute writer method with validation
    # @param [Object] adult Value to be assigned
    def adult=(adult)
      if adult.nil?
        fail ArgumentError, 'adult cannot be nil'
      end

      @adult = adult
    end

    # Custom attribute writer method with validation
    # @param [Object] age_type Value to be assigned
    def age_type=(age_type)
      if !age_type.nil? && age_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "age_type", the character length must be smaller than or equal to 16.'
      end

      @age_type = age_type
    end

    # Custom attribute writer method with validation
    # @param [Object] age_type_month Value to be assigned
    def age_type_month=(age_type_month)
      if !age_type_month.nil? && age_type_month.to_s.length > 2
        fail ArgumentError, 'invalid value for "age_type_month", the character length must be smaller than or equal to 2.'
      end

      @age_type_month = age_type_month
    end

    # Custom attribute writer method with validation
    # @param [Object] assign_to_new_division Value to be assigned
    def assign_to_new_division=(assign_to_new_division)
      if assign_to_new_division.nil?
        fail ArgumentError, 'assign_to_new_division cannot be nil'
      end

      @assign_to_new_division = assign_to_new_division
    end

    # Custom attribute writer method with validation
    # @param [Object] assign_to_new_group Value to be assigned
    def assign_to_new_group=(assign_to_new_group)
      if assign_to_new_group.nil?
        fail ArgumentError, 'assign_to_new_group cannot be nil'
      end

      @assign_to_new_group = assign_to_new_group
    end

    # Custom attribute writer method with validation
    # @param [Object] assign_to_new_member Value to be assigned
    def assign_to_new_member=(assign_to_new_member)
      if assign_to_new_member.nil?
        fail ArgumentError, 'assign_to_new_member cannot be nil'
      end

      @assign_to_new_member = assign_to_new_member
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_adjust Value to be assigned
    def auto_adjust=(auto_adjust)
      if auto_adjust.nil?
        fail ArgumentError, 'auto_adjust cannot be nil'
      end

      @auto_adjust = auto_adjust
    end

    # Custom attribute writer method with validation
    # @param [Object] avoid_retro Value to be assigned
    def avoid_retro=(avoid_retro)
      if avoid_retro.nil?
        fail ArgumentError, 'avoid_retro cannot be nil'
      end

      @avoid_retro = avoid_retro
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if !benefit_code.nil? && benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_cycle_id Value to be assigned
    def billing_cycle_id=(billing_cycle_id)
      if !billing_cycle_id.nil? && billing_cycle_id.to_s.length > 2
        fail ArgumentError, 'invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.'
      end

      @billing_cycle_id = billing_cycle_id
    end

    # Custom attribute writer method with validation
    # @param [Object] child Value to be assigned
    def child=(child)
      if child.nil?
        fail ArgumentError, 'child cannot be nil'
      end

      @child = child
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] class_code Value to be assigned
    def class_code=(class_code)
      if !class_code.nil? && class_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "class_code", the character length must be smaller than or equal to 32.'
      end

      @class_code = class_code
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 128
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 128.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date_type Value to be assigned
    def effective_date_type=(effective_date_type)
      if !effective_date_type.nil? && effective_date_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "effective_date_type", the character length must be smaller than or equal to 16.'
      end

      @effective_date_type = effective_date_type
    end

    # Custom attribute writer method with validation
    # @param [Object] employee_employer_contribution Value to be assigned
    def employee_employer_contribution=(employee_employer_contribution)
      if !employee_employer_contribution.nil? && employee_employer_contribution.to_s.length > 2
        fail ArgumentError, 'invalid value for "employee_employer_contribution", the character length must be smaller than or equal to 2.'
      end

      @employee_employer_contribution = employee_employer_contribution
    end

    # Custom attribute writer method with validation
    # @param [Object] employer_contribution_pct Value to be assigned
    def employer_contribution_pct=(employer_contribution_pct)
      if employer_contribution_pct.nil?
        fail ArgumentError, 'employer_contribution_pct cannot be nil'
      end

      @employer_contribution_pct = employer_contribution_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] employer_rate_type Value to be assigned
    def employer_rate_type=(employer_rate_type)
      if !employer_rate_type.nil? && employer_rate_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "employer_rate_type", the character length must be smaller than or equal to 32.'
      end

      @employer_rate_type = employer_rate_type
    end

    # Custom attribute writer method with validation
    # @param [Object] employer_round_type Value to be assigned
    def employer_round_type=(employer_round_type)
      if !employer_round_type.nil? && employer_round_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "employer_round_type", the character length must be smaller than or equal to 16.'
      end

      @employer_round_type = employer_round_type
    end

    # Custom attribute writer method with validation
    # @param [Object] enrolled_count_type Value to be assigned
    def enrolled_count_type=(enrolled_count_type)
      if !enrolled_count_type.nil? && enrolled_count_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "enrolled_count_type", the character length must be smaller than or equal to 16.'
      end

      @enrolled_count_type = enrolled_count_type
    end

    # Custom attribute writer method with validation
    # @param [Object] enrolled_duration_option Value to be assigned
    def enrolled_duration_option=(enrolled_duration_option)
      if !enrolled_duration_option.nil? && enrolled_duration_option.to_s.length > 16
        fail ArgumentError, 'invalid value for "enrolled_duration_option", the character length must be smaller than or equal to 16.'
      end

      @enrolled_duration_option = enrolled_duration_option
    end

    # Custom attribute writer method with validation
    # @param [Object] enrolled_duration_type Value to be assigned
    def enrolled_duration_type=(enrolled_duration_type)
      if !enrolled_duration_type.nil? && enrolled_duration_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "enrolled_duration_type", the character length must be smaller than or equal to 16.'
      end

      @enrolled_duration_type = enrolled_duration_type
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_division_offering Value to be assigned
    def group_division_offering=(group_division_offering)
      if group_division_offering.nil?
        fail ArgumentError, 'group_division_offering cannot be nil'
      end

      @group_division_offering = group_division_offering
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id)
      if !network_id.nil? && network_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "network_id", the character length must be smaller than or equal to 10.'
      end

      @network_id = network_id
    end

    # Custom attribute writer method with validation
    # @param [Object] network_type Value to be assigned
    def network_type=(network_type)
      if !network_type.nil? && network_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "network_type", the character length must be smaller than or equal to 16.'
      end

      @network_type = network_type
    end

    # Custom attribute writer method with validation
    # @param [Object] new_hire_age Value to be assigned
    def new_hire_age=(new_hire_age)
      if new_hire_age.nil?
        fail ArgumentError, 'new_hire_age cannot be nil'
      end

      @new_hire_age = new_hire_age
    end

    # Custom attribute writer method with validation
    # @param [Object] override_enrolled_dates Value to be assigned
    def override_enrolled_dates=(override_enrolled_dates)
      if override_enrolled_dates.nil?
        fail ArgumentError, 'override_enrolled_dates cannot be nil'
      end

      @override_enrolled_dates = override_enrolled_dates
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if !payment_method.nil? && payment_method.to_s.length > 20
        fail ArgumentError, 'invalid value for "payment_method", the character length must be smaller than or equal to 20.'
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type Value to be assigned
    def plan_type=(plan_type)
      if !plan_type.nil? && plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "plan_type", the character length must be smaller than or equal to 6.'
      end

      @plan_type = plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] prem_rate_basis Value to be assigned
    def prem_rate_basis=(prem_rate_basis)
      if !prem_rate_basis.nil? && prem_rate_basis.to_s.length > 32
        fail ArgumentError, 'invalid value for "prem_rate_basis", the character length must be smaller than or equal to 32.'
      end

      @prem_rate_basis = prem_rate_basis
    end

    # Custom attribute writer method with validation
    # @param [Object] prem_rate_category Value to be assigned
    def prem_rate_category=(prem_rate_category)
      if !prem_rate_category.nil? && prem_rate_category.to_s.length > 32
        fail ArgumentError, 'invalid value for "prem_rate_category", the character length must be smaller than or equal to 32.'
      end

      @prem_rate_category = prem_rate_category
    end

    # Custom attribute writer method with validation
    # @param [Object] prem_rate_id Value to be assigned
    def prem_rate_id=(prem_rate_id)
      if !prem_rate_id.nil? && prem_rate_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "prem_rate_id", the character length must be smaller than or equal to 32.'
      end

      @prem_rate_id = prem_rate_id
    end

    # Custom attribute writer method with validation
    # @param [Object] prem_rate_type Value to be assigned
    def prem_rate_type=(prem_rate_type)
      if !prem_rate_type.nil? && prem_rate_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "prem_rate_type", the character length must be smaller than or equal to 16.'
      end

      @prem_rate_type = prem_rate_type
    end

    # Custom attribute writer method with validation
    # @param [Object] premium_proration Value to be assigned
    def premium_proration=(premium_proration)
      if premium_proration.nil?
        fail ArgumentError, 'premium_proration cannot be nil'
      end

      @premium_proration = premium_proration
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_pace Value to be assigned
    def rate_pace=(rate_pace)
      if !rate_pace.nil? && rate_pace.to_s.length > 16
        fail ArgumentError, 'invalid value for "rate_pace", the character length must be smaller than or equal to 16.'
      end

      @rate_pace = rate_pace
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_pace_type Value to be assigned
    def rate_pace_type=(rate_pace_type)
      if !rate_pace_type.nil? && rate_pace_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "rate_pace_type", the character length must be smaller than or equal to 16.'
      end

      @rate_pace_type = rate_pace_type
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_round_type Value to be assigned
    def rate_round_type=(rate_round_type)
      if !rate_round_type.nil? && rate_round_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "rate_round_type", the character length must be smaller than or equal to 16.'
      end

      @rate_round_type = rate_round_type
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_type Value to be assigned
    def rate_type=(rate_type)
      if !rate_type.nil? && rate_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "rate_type", the character length must be smaller than or equal to 32.'
      end

      @rate_type = rate_type
    end

    # Custom attribute writer method with validation
    # @param [Object] region_code Value to be assigned
    def region_code=(region_code)
      if !region_code.nil? && region_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "region_code", the character length must be smaller than or equal to 32.'
      end

      @region_code = region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] relationship Value to be assigned
    def relationship=(relationship)
      if !relationship.nil? && relationship.to_s.length > 12
        fail ArgumentError, 'invalid value for "relationship", the character length must be smaller than or equal to 12.'
      end

      @relationship = relationship
    end

    # Custom attribute writer method with validation
    # @param [Object] sex Value to be assigned
    def sex=(sex)
      if !sex.nil? && sex.to_s.length > 1
        fail ArgumentError, 'invalid value for "sex", the character length must be smaller than or equal to 1.'
      end

      @sex = sex
    end

    # Custom attribute writer method with validation
    # @param [Object] smoker Value to be assigned
    def smoker=(smoker)
      if !smoker.nil? && smoker.to_s.length > 1
        fail ArgumentError, 'invalid value for "smoker", the character length must be smaller than or equal to 1.'
      end

      @smoker = smoker
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] term_date_type Value to be assigned
    def term_date_type=(term_date_type)
      if !term_date_type.nil? && term_date_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "term_date_type", the character length must be smaller than or equal to 16.'
      end

      @term_date_type = term_date_type
    end

    # Custom attribute writer method with validation
    # @param [Object] tier Value to be assigned
    def tier=(tier)
      if !tier.nil? && tier.to_s.length > 2
        fail ArgumentError, 'invalid value for "tier", the character length must be smaller than or equal to 2.'
      end

      @tier = tier
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code_from Value to be assigned
    def zip_code_from=(zip_code_from)
      if !zip_code_from.nil? && zip_code_from.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code_from", the character length must be smaller than or equal to 32.'
      end

      @zip_code_from = zip_code_from
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code_thru Value to be assigned
    def zip_code_thru=(zip_code_thru)
      if !zip_code_thru.nil? && zip_code_thru.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code_thru", the character length must be smaller than or equal to 32.'
      end

      @zip_code_thru = zip_code_thru
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          prem_rate_key == o.prem_rate_key &&
          add_on_grouping_id == o.add_on_grouping_id &&
          additional_invoice_address == o.additional_invoice_address &&
          additional_invoice_frequency == o.additional_invoice_frequency &&
          additional_invoice_level == o.additional_invoice_level &&
          address_type == o.address_type &&
          adjustment_reason == o.adjustment_reason &&
          adult == o.adult &&
          age_from == o.age_from &&
          age_thru == o.age_thru &&
          age_type == o.age_type &&
          age_type_month == o.age_type_month &&
          assign_to_new_division == o.assign_to_new_division &&
          assign_to_new_group == o.assign_to_new_group &&
          assign_to_new_member == o.assign_to_new_member &&
          auto_adjust == o.auto_adjust &&
          auto_adjust_reason == o.auto_adjust_reason &&
          avoid_retro == o.avoid_retro &&
          benefit_code == o.benefit_code &&
          billing_cycle_id == o.billing_cycle_id &&
          child == o.child &&
          city == o.city &&
          class_code == o.class_code &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          description == o.description &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          effective_date_type == o.effective_date_type &&
          employee_employer_contribution == o.employee_employer_contribution &&
          employer_contribution == o.employer_contribution &&
          employer_contribution_pct == o.employer_contribution_pct &&
          employer_rate == o.employer_rate &&
          employer_rate_max == o.employer_rate_max &&
          employer_rate_minimum == o.employer_rate_minimum &&
          employer_rate_type == o.employer_rate_type &&
          employer_rate_variable1 == o.employer_rate_variable1 &&
          employer_rate_variable2 == o.employer_rate_variable2 &&
          employer_rate_variable3 == o.employer_rate_variable3 &&
          employer_round_precision == o.employer_round_precision &&
          employer_round_type == o.employer_round_type &&
          enrolled_count_from == o.enrolled_count_from &&
          enrolled_count_thru == o.enrolled_count_thru &&
          enrolled_count_type == o.enrolled_count_type &&
          enrolled_duration_from == o.enrolled_duration_from &&
          enrolled_duration_min == o.enrolled_duration_min &&
          enrolled_duration_option == o.enrolled_duration_option &&
          enrolled_duration_thru == o.enrolled_duration_thru &&
          enrolled_duration_type == o.enrolled_duration_type &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_division_offering == o.group_division_offering &&
          group_id == o.group_id &&
          member_seq == o.member_seq &&
          network_id == o.network_id &&
          network_type == o.network_type &&
          new_hire_age == o.new_hire_age &&
          override_enrolled_dates == o.override_enrolled_dates &&
          parent_prem_rate_key == o.parent_prem_rate_key &&
          payment_method == o.payment_method &&
          plan_id == o.plan_id &&
          plan_type == o.plan_type &&
          prem_rate_basis == o.prem_rate_basis &&
          prem_rate_category == o.prem_rate_category &&
          prem_rate_id == o.prem_rate_id &&
          prem_rate_type == o.prem_rate_type &&
          premium_proration == o.premium_proration &&
          rate == o.rate &&
          rate_max == o.rate_max &&
          rate_minimum == o.rate_minimum &&
          rate_pace == o.rate_pace &&
          rate_pace_type == o.rate_pace_type &&
          rate_round_precision == o.rate_round_precision &&
          rate_round_type == o.rate_round_type &&
          rate_type == o.rate_type &&
          rate_variable1 == o.rate_variable1 &&
          rate_variable2 == o.rate_variable2 &&
          rate_variable3 == o.rate_variable3 &&
          region_code == o.region_code &&
          relationship == o.relationship &&
          sex == o.sex &&
          smoker == o.smoker &&
          state == o.state &&
          subscriber_id == o.subscriber_id &&
          term_date == o.term_date &&
          term_date_type == o.term_date_type &&
          tier == o.tier &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          zip_code_from == o.zip_code_from &&
          zip_code_thru == o.zip_code_thru
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [prem_rate_key, add_on_grouping_id, additional_invoice_address, additional_invoice_frequency, additional_invoice_level, address_type, adjustment_reason, adult, age_from, age_thru, age_type, age_type_month, assign_to_new_division, assign_to_new_group, assign_to_new_member, auto_adjust, auto_adjust_reason, avoid_retro, benefit_code, billing_cycle_id, child, city, class_code, country_id, county_code, description, division_id, effective_date, effective_date_type, employee_employer_contribution, employer_contribution, employer_contribution_pct, employer_rate, employer_rate_max, employer_rate_minimum, employer_rate_type, employer_rate_variable1, employer_rate_variable2, employer_rate_variable3, employer_round_precision, employer_round_type, enrolled_count_from, enrolled_count_thru, enrolled_count_type, enrolled_duration_from, enrolled_duration_min, enrolled_duration_option, enrolled_duration_thru, enrolled_duration_type, entry_date, entry_user, group_division_offering, group_id, member_seq, network_id, network_type, new_hire_age, override_enrolled_dates, parent_prem_rate_key, payment_method, plan_id, plan_type, prem_rate_basis, prem_rate_category, prem_rate_id, prem_rate_type, premium_proration, rate, rate_max, rate_minimum, rate_pace, rate_pace_type, rate_round_precision, rate_round_type, rate_type, rate_variable1, rate_variable2, rate_variable3, region_code, relationship, sex, smoker, state, subscriber_id, term_date, term_date_type, tier, update_date, update_user, zip_code_from, zip_code_thru].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
