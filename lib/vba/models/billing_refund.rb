=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class BillingRefund
    attr_accessor :invoice_key

    attr_accessor :group_id

    attr_accessor :division_id

    attr_accessor :subscriber_id

    attr_accessor :prem_rate_key

    attr_accessor :amount

    attr_accessor :amount_received

    attr_accessor :volume

    attr_accessor :payee_level

    attr_accessor :payor_id

    attr_accessor :account_key

    attr_accessor :prem_payment_key

    attr_accessor :refund_amount

    attr_accessor :payment_id

    attr_accessor :payment_name

    attr_accessor :invoice_level

    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invoice_key' => :'invoice_Key',
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'subscriber_id' => :'subscriber_ID',
        :'prem_rate_key' => :'premRate_Key',
        :'amount' => :'amount',
        :'amount_received' => :'amount_Received',
        :'volume' => :'volume',
        :'payee_level' => :'payee_Level',
        :'payor_id' => :'payor_ID',
        :'account_key' => :'account_Key',
        :'prem_payment_key' => :'premPayment_Key',
        :'refund_amount' => :'refund_Amount',
        :'payment_id' => :'payment_ID',
        :'payment_name' => :'payment_Name',
        :'invoice_level' => :'invoice_Level',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'invoice_key' => :'Integer',
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'subscriber_id' => :'String',
        :'prem_rate_key' => :'Integer',
        :'amount' => :'Float',
        :'amount_received' => :'Float',
        :'volume' => :'Float',
        :'payee_level' => :'String',
        :'payor_id' => :'String',
        :'account_key' => :'Integer',
        :'prem_payment_key' => :'Integer',
        :'refund_amount' => :'Float',
        :'payment_id' => :'String',
        :'payment_name' => :'String',
        :'invoice_level' => :'String',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'invoice_key',
        :'group_id',
        :'division_id',
        :'subscriber_id',
        :'prem_rate_key',
        :'amount',
        :'amount_received',
        :'volume',
        :'payee_level',
        :'payor_id',
        :'account_key',
        :'prem_payment_key',
        :'refund_amount',
        :'payment_id',
        :'payment_name',
        :'invoice_level',
        :'user_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::BillingRefund` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::BillingRefund`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'invoice_key')
        self.invoice_key = attributes[:'invoice_key']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'amount_received')
        self.amount_received = attributes[:'amount_received']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'payee_level')
        self.payee_level = attributes[:'payee_level']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'prem_payment_key')
        self.prem_payment_key = attributes[:'prem_payment_key']
      end

      if attributes.key?(:'refund_amount')
        self.refund_amount = attributes[:'refund_amount']
      end

      if attributes.key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.key?(:'payment_name')
        self.payment_name = attributes[:'payment_name']
      end

      if attributes.key?(:'invoice_level')
        self.invoice_level = attributes[:'invoice_level']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invoice_key == o.invoice_key &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          subscriber_id == o.subscriber_id &&
          prem_rate_key == o.prem_rate_key &&
          amount == o.amount &&
          amount_received == o.amount_received &&
          volume == o.volume &&
          payee_level == o.payee_level &&
          payor_id == o.payor_id &&
          account_key == o.account_key &&
          prem_payment_key == o.prem_payment_key &&
          refund_amount == o.refund_amount &&
          payment_id == o.payment_id &&
          payment_name == o.payment_name &&
          invoice_level == o.invoice_level &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [invoice_key, group_id, division_id, subscriber_id, prem_rate_key, amount, amount_received, volume, payee_level, payor_id, account_key, prem_payment_key, refund_amount, payment_id, payment_name, invoice_level, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
