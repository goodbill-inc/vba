=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PlanType
    # Unique identifier for each plan type that Identifies the Type of Plan (medical, dental, etc.).
    attr_accessor :plan_type

    # Indicates whether the associated plan should be capitated. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :capitated

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :claims

    # Indicates whether the specified plan type is a Dental Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :dental

    # A description area used to provider more detail about the plan type.
    attr_accessor :description

    # Indicates whether the specified plan type is associated with a Discount Fee. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :disc_fee

    # Indicates whether the specified plan type is a associated with a discount card. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :discount_card

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :encounters

    # Date when the record was added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # HIPAA Code associated with the specified plan type.
    attr_accessor :hipa_a_code

    # Indicates whether the specified plan type is a HRA Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :hra

    # Indicates whether the specified plan type is a HSA Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :hsa

    # Shortened description of the plan type that is used to print on ID cards.
    attr_accessor :i_d_card_description

    # Indicates whether the specified plan type is an Indemnity Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :indemnity

    # Indicates if this plan type is a LTC plan type. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ltc

    # Indicates whether the specified plan type is a Long-Term Disability Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ltd

    # Indicates whether the specified plan type is a Life/ADD Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :life_add

    # Indicates whether the specified plan type is a Medical Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :medical

    # Indicates if this plan type is a miscellaneous plan type.
    attr_accessor :misc

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :pay_as_you_go

    # Indicates if this plan type is a Pension plan type. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :pension

    # Indicates whether the specified plan type is a Pharmacy Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :pharmacy

    # Indicates whether the specified plan type should be printed on ID cards. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :print_on_id

    # Indicates whether the specified plan type is a Short-Term Disability Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :std

    # Indicates whether the specified plan type is a Section 125 Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :section125

    # This flag indicates Tier is a required field when updating an enrollment Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :tier_required

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Indicates whether the specified plan type is a Vision Plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :vision

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'plan_type' => :'plan_Type',
        :'capitated' => :'capitated',
        :'claims' => :'claims',
        :'dental' => :'dental',
        :'description' => :'description',
        :'disc_fee' => :'disc_Fee',
        :'discount_card' => :'discountCard',
        :'encounters' => :'encounters',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'hipa_a_code' => :'hipaA_Code',
        :'hra' => :'hra',
        :'hsa' => :'hsa',
        :'i_d_card_description' => :'iD_Card_Description',
        :'indemnity' => :'indemnity',
        :'ltc' => :'ltc',
        :'ltd' => :'ltd',
        :'life_add' => :'lifeADD',
        :'medical' => :'medical',
        :'misc' => :'misc',
        :'pay_as_you_go' => :'pay_As_You_Go',
        :'pension' => :'pension',
        :'pharmacy' => :'pharmacy',
        :'print_on_id' => :'print_On_ID',
        :'std' => :'std',
        :'section125' => :'section125',
        :'tier_required' => :'tier_Required',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'vision' => :'vision'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'plan_type' => :'String',
        :'capitated' => :'Boolean',
        :'claims' => :'Boolean',
        :'dental' => :'Boolean',
        :'description' => :'String',
        :'disc_fee' => :'Boolean',
        :'discount_card' => :'Boolean',
        :'encounters' => :'Boolean',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'hipa_a_code' => :'String',
        :'hra' => :'Boolean',
        :'hsa' => :'Boolean',
        :'i_d_card_description' => :'String',
        :'indemnity' => :'Boolean',
        :'ltc' => :'Boolean',
        :'ltd' => :'Boolean',
        :'life_add' => :'Boolean',
        :'medical' => :'Boolean',
        :'misc' => :'Boolean',
        :'pay_as_you_go' => :'Boolean',
        :'pension' => :'Boolean',
        :'pharmacy' => :'Boolean',
        :'print_on_id' => :'Boolean',
        :'std' => :'Boolean',
        :'section125' => :'Boolean',
        :'tier_required' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'vision' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'entry_user',
        :'hipa_a_code',
        :'i_d_card_description',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PlanType` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PlanType`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      else
        self.plan_type = nil
      end

      if attributes.key?(:'capitated')
        self.capitated = attributes[:'capitated']
      else
        self.capitated = nil
      end

      if attributes.key?(:'claims')
        self.claims = attributes[:'claims']
      else
        self.claims = nil
      end

      if attributes.key?(:'dental')
        self.dental = attributes[:'dental']
      else
        self.dental = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'disc_fee')
        self.disc_fee = attributes[:'disc_fee']
      else
        self.disc_fee = nil
      end

      if attributes.key?(:'discount_card')
        self.discount_card = attributes[:'discount_card']
      else
        self.discount_card = nil
      end

      if attributes.key?(:'encounters')
        self.encounters = attributes[:'encounters']
      else
        self.encounters = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'hipa_a_code')
        self.hipa_a_code = attributes[:'hipa_a_code']
      end

      if attributes.key?(:'hra')
        self.hra = attributes[:'hra']
      else
        self.hra = nil
      end

      if attributes.key?(:'hsa')
        self.hsa = attributes[:'hsa']
      else
        self.hsa = nil
      end

      if attributes.key?(:'i_d_card_description')
        self.i_d_card_description = attributes[:'i_d_card_description']
      end

      if attributes.key?(:'indemnity')
        self.indemnity = attributes[:'indemnity']
      else
        self.indemnity = nil
      end

      if attributes.key?(:'ltc')
        self.ltc = attributes[:'ltc']
      else
        self.ltc = nil
      end

      if attributes.key?(:'ltd')
        self.ltd = attributes[:'ltd']
      else
        self.ltd = nil
      end

      if attributes.key?(:'life_add')
        self.life_add = attributes[:'life_add']
      else
        self.life_add = nil
      end

      if attributes.key?(:'medical')
        self.medical = attributes[:'medical']
      else
        self.medical = nil
      end

      if attributes.key?(:'misc')
        self.misc = attributes[:'misc']
      else
        self.misc = nil
      end

      if attributes.key?(:'pay_as_you_go')
        self.pay_as_you_go = attributes[:'pay_as_you_go']
      else
        self.pay_as_you_go = nil
      end

      if attributes.key?(:'pension')
        self.pension = attributes[:'pension']
      else
        self.pension = nil
      end

      if attributes.key?(:'pharmacy')
        self.pharmacy = attributes[:'pharmacy']
      else
        self.pharmacy = nil
      end

      if attributes.key?(:'print_on_id')
        self.print_on_id = attributes[:'print_on_id']
      else
        self.print_on_id = nil
      end

      if attributes.key?(:'std')
        self.std = attributes[:'std']
      else
        self.std = nil
      end

      if attributes.key?(:'section125')
        self.section125 = attributes[:'section125']
      else
        self.section125 = nil
      end

      if attributes.key?(:'tier_required')
        self.tier_required = attributes[:'tier_required']
      else
        self.tier_required = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'vision')
        self.vision = attributes[:'vision']
      else
        self.vision = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @plan_type.nil?
        invalid_properties.push('invalid value for "plan_type", plan_type cannot be nil.')
      end

      if @plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "plan_type", the character length must be smaller than or equal to 6.')
      end

      if @plan_type.to_s.length < 1
        invalid_properties.push('invalid value for "plan_type", the character length must be great than or equal to 1.')
      end

      if @capitated.nil?
        invalid_properties.push('invalid value for "capitated", capitated cannot be nil.')
      end

      if @claims.nil?
        invalid_properties.push('invalid value for "claims", claims cannot be nil.')
      end

      if @dental.nil?
        invalid_properties.push('invalid value for "dental", dental cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 50
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 50.')
      end

      if @disc_fee.nil?
        invalid_properties.push('invalid value for "disc_fee", disc_fee cannot be nil.')
      end

      if @discount_card.nil?
        invalid_properties.push('invalid value for "discount_card", discount_card cannot be nil.')
      end

      if @encounters.nil?
        invalid_properties.push('invalid value for "encounters", encounters cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@hipa_a_code.nil? && @hipa_a_code.to_s.length > 8
        invalid_properties.push('invalid value for "hipa_a_code", the character length must be smaller than or equal to 8.')
      end

      if @hra.nil?
        invalid_properties.push('invalid value for "hra", hra cannot be nil.')
      end

      if @hsa.nil?
        invalid_properties.push('invalid value for "hsa", hsa cannot be nil.')
      end

      if !@i_d_card_description.nil? && @i_d_card_description.to_s.length > 8
        invalid_properties.push('invalid value for "i_d_card_description", the character length must be smaller than or equal to 8.')
      end

      if @indemnity.nil?
        invalid_properties.push('invalid value for "indemnity", indemnity cannot be nil.')
      end

      if @ltc.nil?
        invalid_properties.push('invalid value for "ltc", ltc cannot be nil.')
      end

      if @ltd.nil?
        invalid_properties.push('invalid value for "ltd", ltd cannot be nil.')
      end

      if @life_add.nil?
        invalid_properties.push('invalid value for "life_add", life_add cannot be nil.')
      end

      if @medical.nil?
        invalid_properties.push('invalid value for "medical", medical cannot be nil.')
      end

      if @misc.nil?
        invalid_properties.push('invalid value for "misc", misc cannot be nil.')
      end

      if @pay_as_you_go.nil?
        invalid_properties.push('invalid value for "pay_as_you_go", pay_as_you_go cannot be nil.')
      end

      if @pension.nil?
        invalid_properties.push('invalid value for "pension", pension cannot be nil.')
      end

      if @pharmacy.nil?
        invalid_properties.push('invalid value for "pharmacy", pharmacy cannot be nil.')
      end

      if @print_on_id.nil?
        invalid_properties.push('invalid value for "print_on_id", print_on_id cannot be nil.')
      end

      if @std.nil?
        invalid_properties.push('invalid value for "std", std cannot be nil.')
      end

      if @section125.nil?
        invalid_properties.push('invalid value for "section125", section125 cannot be nil.')
      end

      if @tier_required.nil?
        invalid_properties.push('invalid value for "tier_required", tier_required cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @vision.nil?
        invalid_properties.push('invalid value for "vision", vision cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @plan_type.nil?
      return false if @plan_type.to_s.length > 6
      return false if @plan_type.to_s.length < 1
      return false if @capitated.nil?
      return false if @claims.nil?
      return false if @dental.nil?
      return false if !@description.nil? && @description.to_s.length > 50
      return false if @disc_fee.nil?
      return false if @discount_card.nil?
      return false if @encounters.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@hipa_a_code.nil? && @hipa_a_code.to_s.length > 8
      return false if @hra.nil?
      return false if @hsa.nil?
      return false if !@i_d_card_description.nil? && @i_d_card_description.to_s.length > 8
      return false if @indemnity.nil?
      return false if @ltc.nil?
      return false if @ltd.nil?
      return false if @life_add.nil?
      return false if @medical.nil?
      return false if @misc.nil?
      return false if @pay_as_you_go.nil?
      return false if @pension.nil?
      return false if @pharmacy.nil?
      return false if @print_on_id.nil?
      return false if @std.nil?
      return false if @section125.nil?
      return false if @tier_required.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @vision.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type Value to be assigned
    def plan_type=(plan_type)
      if plan_type.nil?
        fail ArgumentError, 'plan_type cannot be nil'
      end

      if plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "plan_type", the character length must be smaller than or equal to 6.'
      end

      if plan_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_type", the character length must be great than or equal to 1.'
      end

      @plan_type = plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] capitated Value to be assigned
    def capitated=(capitated)
      if capitated.nil?
        fail ArgumentError, 'capitated cannot be nil'
      end

      @capitated = capitated
    end

    # Custom attribute writer method with validation
    # @param [Object] claims Value to be assigned
    def claims=(claims)
      if claims.nil?
        fail ArgumentError, 'claims cannot be nil'
      end

      @claims = claims
    end

    # Custom attribute writer method with validation
    # @param [Object] dental Value to be assigned
    def dental=(dental)
      if dental.nil?
        fail ArgumentError, 'dental cannot be nil'
      end

      @dental = dental
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 50
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 50.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] disc_fee Value to be assigned
    def disc_fee=(disc_fee)
      if disc_fee.nil?
        fail ArgumentError, 'disc_fee cannot be nil'
      end

      @disc_fee = disc_fee
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_card Value to be assigned
    def discount_card=(discount_card)
      if discount_card.nil?
        fail ArgumentError, 'discount_card cannot be nil'
      end

      @discount_card = discount_card
    end

    # Custom attribute writer method with validation
    # @param [Object] encounters Value to be assigned
    def encounters=(encounters)
      if encounters.nil?
        fail ArgumentError, 'encounters cannot be nil'
      end

      @encounters = encounters
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] hipa_a_code Value to be assigned
    def hipa_a_code=(hipa_a_code)
      if !hipa_a_code.nil? && hipa_a_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "hipa_a_code", the character length must be smaller than or equal to 8.'
      end

      @hipa_a_code = hipa_a_code
    end

    # Custom attribute writer method with validation
    # @param [Object] hra Value to be assigned
    def hra=(hra)
      if hra.nil?
        fail ArgumentError, 'hra cannot be nil'
      end

      @hra = hra
    end

    # Custom attribute writer method with validation
    # @param [Object] hsa Value to be assigned
    def hsa=(hsa)
      if hsa.nil?
        fail ArgumentError, 'hsa cannot be nil'
      end

      @hsa = hsa
    end

    # Custom attribute writer method with validation
    # @param [Object] i_d_card_description Value to be assigned
    def i_d_card_description=(i_d_card_description)
      if !i_d_card_description.nil? && i_d_card_description.to_s.length > 8
        fail ArgumentError, 'invalid value for "i_d_card_description", the character length must be smaller than or equal to 8.'
      end

      @i_d_card_description = i_d_card_description
    end

    # Custom attribute writer method with validation
    # @param [Object] indemnity Value to be assigned
    def indemnity=(indemnity)
      if indemnity.nil?
        fail ArgumentError, 'indemnity cannot be nil'
      end

      @indemnity = indemnity
    end

    # Custom attribute writer method with validation
    # @param [Object] ltc Value to be assigned
    def ltc=(ltc)
      if ltc.nil?
        fail ArgumentError, 'ltc cannot be nil'
      end

      @ltc = ltc
    end

    # Custom attribute writer method with validation
    # @param [Object] ltd Value to be assigned
    def ltd=(ltd)
      if ltd.nil?
        fail ArgumentError, 'ltd cannot be nil'
      end

      @ltd = ltd
    end

    # Custom attribute writer method with validation
    # @param [Object] life_add Value to be assigned
    def life_add=(life_add)
      if life_add.nil?
        fail ArgumentError, 'life_add cannot be nil'
      end

      @life_add = life_add
    end

    # Custom attribute writer method with validation
    # @param [Object] medical Value to be assigned
    def medical=(medical)
      if medical.nil?
        fail ArgumentError, 'medical cannot be nil'
      end

      @medical = medical
    end

    # Custom attribute writer method with validation
    # @param [Object] misc Value to be assigned
    def misc=(misc)
      if misc.nil?
        fail ArgumentError, 'misc cannot be nil'
      end

      @misc = misc
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_as_you_go Value to be assigned
    def pay_as_you_go=(pay_as_you_go)
      if pay_as_you_go.nil?
        fail ArgumentError, 'pay_as_you_go cannot be nil'
      end

      @pay_as_you_go = pay_as_you_go
    end

    # Custom attribute writer method with validation
    # @param [Object] pension Value to be assigned
    def pension=(pension)
      if pension.nil?
        fail ArgumentError, 'pension cannot be nil'
      end

      @pension = pension
    end

    # Custom attribute writer method with validation
    # @param [Object] pharmacy Value to be assigned
    def pharmacy=(pharmacy)
      if pharmacy.nil?
        fail ArgumentError, 'pharmacy cannot be nil'
      end

      @pharmacy = pharmacy
    end

    # Custom attribute writer method with validation
    # @param [Object] print_on_id Value to be assigned
    def print_on_id=(print_on_id)
      if print_on_id.nil?
        fail ArgumentError, 'print_on_id cannot be nil'
      end

      @print_on_id = print_on_id
    end

    # Custom attribute writer method with validation
    # @param [Object] std Value to be assigned
    def std=(std)
      if std.nil?
        fail ArgumentError, 'std cannot be nil'
      end

      @std = std
    end

    # Custom attribute writer method with validation
    # @param [Object] section125 Value to be assigned
    def section125=(section125)
      if section125.nil?
        fail ArgumentError, 'section125 cannot be nil'
      end

      @section125 = section125
    end

    # Custom attribute writer method with validation
    # @param [Object] tier_required Value to be assigned
    def tier_required=(tier_required)
      if tier_required.nil?
        fail ArgumentError, 'tier_required cannot be nil'
      end

      @tier_required = tier_required
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] vision Value to be assigned
    def vision=(vision)
      if vision.nil?
        fail ArgumentError, 'vision cannot be nil'
      end

      @vision = vision
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          plan_type == o.plan_type &&
          capitated == o.capitated &&
          claims == o.claims &&
          dental == o.dental &&
          description == o.description &&
          disc_fee == o.disc_fee &&
          discount_card == o.discount_card &&
          encounters == o.encounters &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          hipa_a_code == o.hipa_a_code &&
          hra == o.hra &&
          hsa == o.hsa &&
          i_d_card_description == o.i_d_card_description &&
          indemnity == o.indemnity &&
          ltc == o.ltc &&
          ltd == o.ltd &&
          life_add == o.life_add &&
          medical == o.medical &&
          misc == o.misc &&
          pay_as_you_go == o.pay_as_you_go &&
          pension == o.pension &&
          pharmacy == o.pharmacy &&
          print_on_id == o.print_on_id &&
          std == o.std &&
          section125 == o.section125 &&
          tier_required == o.tier_required &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          vision == o.vision
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [plan_type, capitated, claims, dental, description, disc_fee, discount_card, encounters, entry_date, entry_user, hipa_a_code, hra, hsa, i_d_card_description, indemnity, ltc, ltd, life_add, medical, misc, pay_as_you_go, pension, pharmacy, print_on_id, std, section125, tier_required, update_date, update_user, vision].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
