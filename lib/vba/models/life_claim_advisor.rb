=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class LifeClaimAdvisor
    attr_accessor :subscriber_id

    attr_accessor :member_seq

    attr_accessor :plan_id

    attr_accessor :volume

    attr_accessor :claim_number

    attr_accessor :death_date

    attr_accessor :last_day_worked

    attr_accessor :cause_of_death

    attr_accessor :illness

    attr_accessor :illness_duration

    attr_accessor :illness_duration_type

    attr_accessor :attending_provider_id

    attr_accessor :attending_first_name

    attr_accessor :attending_last_name

    attr_accessor :attending_org_name

    attr_accessor :attending_address

    attr_accessor :attending_address2

    attr_accessor :attending_city

    attr_accessor :attending_state

    attr_accessor :attending_zip_code

    attr_accessor :attending_entity_id

    attr_accessor :diag_type

    attr_accessor :diag1

    attr_accessor :diag2

    attr_accessor :diag3

    attr_accessor :diag4

    attr_accessor :pay_to

    attr_accessor :mail_to

    attr_accessor :ex_code1

    attr_accessor :ex_code2

    attr_accessor :place

    attr_accessor :received_date

    attr_accessor :procedure_code

    attr_accessor :create_payment

    attr_accessor :custom_fields

    attr_accessor :beneficiaries

    attr_accessor :life_benefits

    attr_accessor :documents

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'member_seq' => :'member_Seq',
        :'plan_id' => :'plan_ID',
        :'volume' => :'volume',
        :'claim_number' => :'claimNumber',
        :'death_date' => :'deathDate',
        :'last_day_worked' => :'lastDayWorked',
        :'cause_of_death' => :'causeOfDeath',
        :'illness' => :'illness',
        :'illness_duration' => :'illnessDuration',
        :'illness_duration_type' => :'illnessDurationType',
        :'attending_provider_id' => :'attendingProviderID',
        :'attending_first_name' => :'attendingFirstName',
        :'attending_last_name' => :'attendingLastName',
        :'attending_org_name' => :'attendingOrgName',
        :'attending_address' => :'attendingAddress',
        :'attending_address2' => :'attendingAddress2',
        :'attending_city' => :'attendingCity',
        :'attending_state' => :'attendingState',
        :'attending_zip_code' => :'attendingZipCode',
        :'attending_entity_id' => :'attendingEntityID',
        :'diag_type' => :'diagType',
        :'diag1' => :'diag1',
        :'diag2' => :'diag2',
        :'diag3' => :'diag3',
        :'diag4' => :'diag4',
        :'pay_to' => :'payTo',
        :'mail_to' => :'mailTo',
        :'ex_code1' => :'exCode1',
        :'ex_code2' => :'exCode2',
        :'place' => :'place',
        :'received_date' => :'receivedDate',
        :'procedure_code' => :'procedureCode',
        :'create_payment' => :'createPayment',
        :'custom_fields' => :'customFields',
        :'beneficiaries' => :'beneficiaries',
        :'life_benefits' => :'lifeBenefits',
        :'documents' => :'documents'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'member_seq' => :'String',
        :'plan_id' => :'String',
        :'volume' => :'Float',
        :'claim_number' => :'String',
        :'death_date' => :'Time',
        :'last_day_worked' => :'Time',
        :'cause_of_death' => :'Integer',
        :'illness' => :'Integer',
        :'illness_duration' => :'Integer',
        :'illness_duration_type' => :'String',
        :'attending_provider_id' => :'String',
        :'attending_first_name' => :'String',
        :'attending_last_name' => :'String',
        :'attending_org_name' => :'String',
        :'attending_address' => :'String',
        :'attending_address2' => :'String',
        :'attending_city' => :'String',
        :'attending_state' => :'String',
        :'attending_zip_code' => :'String',
        :'attending_entity_id' => :'String',
        :'diag_type' => :'String',
        :'diag1' => :'String',
        :'diag2' => :'String',
        :'diag3' => :'String',
        :'diag4' => :'String',
        :'pay_to' => :'String',
        :'mail_to' => :'String',
        :'ex_code1' => :'String',
        :'ex_code2' => :'String',
        :'place' => :'String',
        :'received_date' => :'Time',
        :'procedure_code' => :'String',
        :'create_payment' => :'Boolean',
        :'custom_fields' => :'Array<IDCodeValue>',
        :'beneficiaries' => :'Array<MemberBeneficiary>',
        :'life_benefits' => :'Array<ClaimBatchLifeBenefit>',
        :'documents' => :'Array<NoteNoteAttachment>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'subscriber_id',
        :'member_seq',
        :'plan_id',
        :'volume',
        :'claim_number',
        :'death_date',
        :'last_day_worked',
        :'cause_of_death',
        :'illness',
        :'illness_duration',
        :'illness_duration_type',
        :'attending_provider_id',
        :'attending_first_name',
        :'attending_last_name',
        :'attending_org_name',
        :'attending_address',
        :'attending_address2',
        :'attending_city',
        :'attending_state',
        :'attending_zip_code',
        :'attending_entity_id',
        :'diag_type',
        :'diag1',
        :'diag2',
        :'diag3',
        :'diag4',
        :'pay_to',
        :'mail_to',
        :'ex_code1',
        :'ex_code2',
        :'place',
        :'received_date',
        :'procedure_code',
        :'custom_fields',
        :'beneficiaries',
        :'life_benefits',
        :'documents'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::LifeClaimAdvisor` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::LifeClaimAdvisor`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'claim_number')
        self.claim_number = attributes[:'claim_number']
      end

      if attributes.key?(:'death_date')
        self.death_date = attributes[:'death_date']
      end

      if attributes.key?(:'last_day_worked')
        self.last_day_worked = attributes[:'last_day_worked']
      end

      if attributes.key?(:'cause_of_death')
        self.cause_of_death = attributes[:'cause_of_death']
      end

      if attributes.key?(:'illness')
        self.illness = attributes[:'illness']
      end

      if attributes.key?(:'illness_duration')
        self.illness_duration = attributes[:'illness_duration']
      end

      if attributes.key?(:'illness_duration_type')
        self.illness_duration_type = attributes[:'illness_duration_type']
      end

      if attributes.key?(:'attending_provider_id')
        self.attending_provider_id = attributes[:'attending_provider_id']
      end

      if attributes.key?(:'attending_first_name')
        self.attending_first_name = attributes[:'attending_first_name']
      end

      if attributes.key?(:'attending_last_name')
        self.attending_last_name = attributes[:'attending_last_name']
      end

      if attributes.key?(:'attending_org_name')
        self.attending_org_name = attributes[:'attending_org_name']
      end

      if attributes.key?(:'attending_address')
        self.attending_address = attributes[:'attending_address']
      end

      if attributes.key?(:'attending_address2')
        self.attending_address2 = attributes[:'attending_address2']
      end

      if attributes.key?(:'attending_city')
        self.attending_city = attributes[:'attending_city']
      end

      if attributes.key?(:'attending_state')
        self.attending_state = attributes[:'attending_state']
      end

      if attributes.key?(:'attending_zip_code')
        self.attending_zip_code = attributes[:'attending_zip_code']
      end

      if attributes.key?(:'attending_entity_id')
        self.attending_entity_id = attributes[:'attending_entity_id']
      end

      if attributes.key?(:'diag_type')
        self.diag_type = attributes[:'diag_type']
      end

      if attributes.key?(:'diag1')
        self.diag1 = attributes[:'diag1']
      end

      if attributes.key?(:'diag2')
        self.diag2 = attributes[:'diag2']
      end

      if attributes.key?(:'diag3')
        self.diag3 = attributes[:'diag3']
      end

      if attributes.key?(:'diag4')
        self.diag4 = attributes[:'diag4']
      end

      if attributes.key?(:'pay_to')
        self.pay_to = attributes[:'pay_to']
      end

      if attributes.key?(:'mail_to')
        self.mail_to = attributes[:'mail_to']
      end

      if attributes.key?(:'ex_code1')
        self.ex_code1 = attributes[:'ex_code1']
      end

      if attributes.key?(:'ex_code2')
        self.ex_code2 = attributes[:'ex_code2']
      end

      if attributes.key?(:'place')
        self.place = attributes[:'place']
      end

      if attributes.key?(:'received_date')
        self.received_date = attributes[:'received_date']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'create_payment')
        self.create_payment = attributes[:'create_payment']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'beneficiaries')
        if (value = attributes[:'beneficiaries']).is_a?(Array)
          self.beneficiaries = value
        end
      end

      if attributes.key?(:'life_benefits')
        if (value = attributes[:'life_benefits']).is_a?(Array)
          self.life_benefits = value
        end
      end

      if attributes.key?(:'documents')
        if (value = attributes[:'documents']).is_a?(Array)
          self.documents = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          member_seq == o.member_seq &&
          plan_id == o.plan_id &&
          volume == o.volume &&
          claim_number == o.claim_number &&
          death_date == o.death_date &&
          last_day_worked == o.last_day_worked &&
          cause_of_death == o.cause_of_death &&
          illness == o.illness &&
          illness_duration == o.illness_duration &&
          illness_duration_type == o.illness_duration_type &&
          attending_provider_id == o.attending_provider_id &&
          attending_first_name == o.attending_first_name &&
          attending_last_name == o.attending_last_name &&
          attending_org_name == o.attending_org_name &&
          attending_address == o.attending_address &&
          attending_address2 == o.attending_address2 &&
          attending_city == o.attending_city &&
          attending_state == o.attending_state &&
          attending_zip_code == o.attending_zip_code &&
          attending_entity_id == o.attending_entity_id &&
          diag_type == o.diag_type &&
          diag1 == o.diag1 &&
          diag2 == o.diag2 &&
          diag3 == o.diag3 &&
          diag4 == o.diag4 &&
          pay_to == o.pay_to &&
          mail_to == o.mail_to &&
          ex_code1 == o.ex_code1 &&
          ex_code2 == o.ex_code2 &&
          place == o.place &&
          received_date == o.received_date &&
          procedure_code == o.procedure_code &&
          create_payment == o.create_payment &&
          custom_fields == o.custom_fields &&
          beneficiaries == o.beneficiaries &&
          life_benefits == o.life_benefits &&
          documents == o.documents
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, member_seq, plan_id, volume, claim_number, death_date, last_day_worked, cause_of_death, illness, illness_duration, illness_duration_type, attending_provider_id, attending_first_name, attending_last_name, attending_org_name, attending_address, attending_address2, attending_city, attending_state, attending_zip_code, attending_entity_id, diag_type, diag1, diag2, diag3, diag4, pay_to, mail_to, ex_code1, ex_code2, place, received_date, procedure_code, create_payment, custom_fields, beneficiaries, life_benefits, documents].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
