=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Networks
    # Unique identifier assigned to the network.
    attr_accessor :network_id

    # Identifies the default APC schedule that is to be used for the network.
    attr_accessor :ap_c_schedule

    # Address line 1 of the network.
    attr_accessor :address

    # Address line 2 of the network.
    attr_accessor :address_2

    # City of the network's address.
    attr_accessor :city

    # This option is informational only and currently has no functionality.
    attr_accessor :claim_days_allowed

    # Identifies the default DRG schedule that is to be used for the network.
    attr_accessor :dr_g_schedule

    # Email of the Network.
    attr_accessor :e_mail

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Specifies the Ex Code that will be applied while the Ex Code flag is selected.
    attr_accessor :ex_code

    # This option tells adjudication to apply an Ex Code to claims associated with the network.
    attr_accessor :ex_code_flag

    # Fax number of the Network.
    attr_accessor :fax

    # Allows the User to upload a logo that can be attached to custom reporting.
    attr_accessor :logo_file

    # Description of the associated network.
    attr_accessor :network_description

    # Phone number of the Network.
    attr_accessor :phone

    # State of the network's address.
    attr_accessor :state

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # This option is informational only and currently has no functionality.
    attr_accessor :withhold_percent

    # Zip code of the Network's address.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'network_id' => :'networkID',
        :'ap_c_schedule' => :'apC_Schedule',
        :'address' => :'address',
        :'address_2' => :'address_2',
        :'city' => :'city',
        :'claim_days_allowed' => :'claim_Days_Allowed',
        :'dr_g_schedule' => :'drG_Schedule',
        :'e_mail' => :'eMail',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'ex_code_flag' => :'ex_Code_Flag',
        :'fax' => :'fax',
        :'logo_file' => :'logo_File',
        :'network_description' => :'networkDescription',
        :'phone' => :'phone',
        :'state' => :'state',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'withhold_percent' => :'withhold_Percent',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'network_id' => :'String',
        :'ap_c_schedule' => :'String',
        :'address' => :'String',
        :'address_2' => :'String',
        :'city' => :'String',
        :'claim_days_allowed' => :'Integer',
        :'dr_g_schedule' => :'String',
        :'e_mail' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'ex_code_flag' => :'String',
        :'fax' => :'String',
        :'logo_file' => :'String',
        :'network_description' => :'String',
        :'phone' => :'String',
        :'state' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'withhold_percent' => :'Float',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ap_c_schedule',
        :'address',
        :'address_2',
        :'city',
        :'claim_days_allowed',
        :'dr_g_schedule',
        :'e_mail',
        :'entry_user',
        :'ex_code',
        :'ex_code_flag',
        :'fax',
        :'logo_file',
        :'network_description',
        :'phone',
        :'state',
        :'update_user',
        :'withhold_percent',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Networks` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Networks`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      else
        self.network_id = nil
      end

      if attributes.key?(:'ap_c_schedule')
        self.ap_c_schedule = attributes[:'ap_c_schedule']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address_2')
        self.address_2 = attributes[:'address_2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'claim_days_allowed')
        self.claim_days_allowed = attributes[:'claim_days_allowed']
      end

      if attributes.key?(:'dr_g_schedule')
        self.dr_g_schedule = attributes[:'dr_g_schedule']
      end

      if attributes.key?(:'e_mail')
        self.e_mail = attributes[:'e_mail']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'ex_code_flag')
        self.ex_code_flag = attributes[:'ex_code_flag']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'logo_file')
        self.logo_file = attributes[:'logo_file']
      end

      if attributes.key?(:'network_description')
        self.network_description = attributes[:'network_description']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'withhold_percent')
        self.withhold_percent = attributes[:'withhold_percent']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @network_id.to_s.length > 10
        invalid_properties.push('invalid value for "network_id", the character length must be smaller than or equal to 10.')
      end

      if @network_id.to_s.length < 1
        invalid_properties.push('invalid value for "network_id", the character length must be great than or equal to 1.')
      end

      if !@ap_c_schedule.nil? && @ap_c_schedule.to_s.length > 16
        invalid_properties.push('invalid value for "ap_c_schedule", the character length must be smaller than or equal to 16.')
      end

      if !@address.nil? && @address.to_s.length > 128
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 128.')
      end

      if !@address_2.nil? && @address_2.to_s.length > 128
        invalid_properties.push('invalid value for "address_2", the character length must be smaller than or equal to 128.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@dr_g_schedule.nil? && @dr_g_schedule.to_s.length > 16
        invalid_properties.push('invalid value for "dr_g_schedule", the character length must be smaller than or equal to 16.')
      end

      if !@e_mail.nil? && @e_mail.to_s.length > 128
        invalid_properties.push('invalid value for "e_mail", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 8.')
      end

      if !@ex_code_flag.nil? && @ex_code_flag.to_s.length > 1
        invalid_properties.push('invalid value for "ex_code_flag", the character length must be smaller than or equal to 1.')
      end

      if !@fax.nil? && @fax.to_s.length > 32
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 32.')
      end

      if !@logo_file.nil? && @logo_file.to_s.length > 255
        invalid_properties.push('invalid value for "logo_file", the character length must be smaller than or equal to 255.')
      end

      if !@network_description.nil? && @network_description.to_s.length > 512
        invalid_properties.push('invalid value for "network_description", the character length must be smaller than or equal to 512.')
      end

      if !@phone.nil? && @phone.to_s.length > 32
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 32.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @network_id.nil?
      return false if @network_id.to_s.length > 10
      return false if @network_id.to_s.length < 1
      return false if !@ap_c_schedule.nil? && @ap_c_schedule.to_s.length > 16
      return false if !@address.nil? && @address.to_s.length > 128
      return false if !@address_2.nil? && @address_2.to_s.length > 128
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@dr_g_schedule.nil? && @dr_g_schedule.to_s.length > 16
      return false if !@e_mail.nil? && @e_mail.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 8
      return false if !@ex_code_flag.nil? && @ex_code_flag.to_s.length > 1
      return false if !@fax.nil? && @fax.to_s.length > 32
      return false if !@logo_file.nil? && @logo_file.to_s.length > 255
      return false if !@network_description.nil? && @network_description.to_s.length > 512
      return false if !@phone.nil? && @phone.to_s.length > 32
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id)
      if network_id.nil?
        fail ArgumentError, 'network_id cannot be nil'
      end

      if network_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "network_id", the character length must be smaller than or equal to 10.'
      end

      if network_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "network_id", the character length must be great than or equal to 1.'
      end

      @network_id = network_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ap_c_schedule Value to be assigned
    def ap_c_schedule=(ap_c_schedule)
      if !ap_c_schedule.nil? && ap_c_schedule.to_s.length > 16
        fail ArgumentError, 'invalid value for "ap_c_schedule", the character length must be smaller than or equal to 16.'
      end

      @ap_c_schedule = ap_c_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 128
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 128.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address_2 Value to be assigned
    def address_2=(address_2)
      if !address_2.nil? && address_2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address_2", the character length must be smaller than or equal to 128.'
      end

      @address_2 = address_2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] dr_g_schedule Value to be assigned
    def dr_g_schedule=(dr_g_schedule)
      if !dr_g_schedule.nil? && dr_g_schedule.to_s.length > 16
        fail ArgumentError, 'invalid value for "dr_g_schedule", the character length must be smaller than or equal to 16.'
      end

      @dr_g_schedule = dr_g_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] e_mail Value to be assigned
    def e_mail=(e_mail)
      if !e_mail.nil? && e_mail.to_s.length > 128
        fail ArgumentError, 'invalid value for "e_mail", the character length must be smaller than or equal to 128.'
      end

      @e_mail = e_mail
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 8.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code_flag Value to be assigned
    def ex_code_flag=(ex_code_flag)
      if !ex_code_flag.nil? && ex_code_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "ex_code_flag", the character length must be smaller than or equal to 1.'
      end

      @ex_code_flag = ex_code_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 32
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 32.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] logo_file Value to be assigned
    def logo_file=(logo_file)
      if !logo_file.nil? && logo_file.to_s.length > 255
        fail ArgumentError, 'invalid value for "logo_file", the character length must be smaller than or equal to 255.'
      end

      @logo_file = logo_file
    end

    # Custom attribute writer method with validation
    # @param [Object] network_description Value to be assigned
    def network_description=(network_description)
      if !network_description.nil? && network_description.to_s.length > 512
        fail ArgumentError, 'invalid value for "network_description", the character length must be smaller than or equal to 512.'
      end

      @network_description = network_description
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 32.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          network_id == o.network_id &&
          ap_c_schedule == o.ap_c_schedule &&
          address == o.address &&
          address_2 == o.address_2 &&
          city == o.city &&
          claim_days_allowed == o.claim_days_allowed &&
          dr_g_schedule == o.dr_g_schedule &&
          e_mail == o.e_mail &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          ex_code_flag == o.ex_code_flag &&
          fax == o.fax &&
          logo_file == o.logo_file &&
          network_description == o.network_description &&
          phone == o.phone &&
          state == o.state &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          withhold_percent == o.withhold_percent &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [network_id, ap_c_schedule, address, address_2, city, claim_days_allowed, dr_g_schedule, e_mail, entry_date, entry_user, ex_code, ex_code_flag, fax, logo_file, network_description, phone, state, update_date, update_user, withhold_percent, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
