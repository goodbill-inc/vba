=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CoveredBenefit
    attr_accessor :benefit_code

    attr_accessor :hipa_a_code

    attr_accessor :description

    attr_accessor :benefit_category

    # Indicates that the Plan Benefit Co-Insurance amounts will abide by the Plan level amounts.
    attr_accessor :use_plan_co_ins

    # Total Co-Insurance amount for the Family.
    attr_accessor :co_ins_max_sub

    # In Network Co-Insurance amount for the Family.
    attr_accessor :co_ins_max_mem

    # Out of Network Co-Insurance amount for the Family.
    attr_accessor :co_ins_max_net_sub

    # Total Co-Insurance amount for the Member.
    attr_accessor :co_ins_max_net_mem

    # In Network Co-Insurance amount for the Member.
    attr_accessor :co_ins_max_oon_sub

    # Out of Network Co-Insurance amount for the Member.
    attr_accessor :co_ins_max_oon_mem

    # Indicates that the Plan Benefit Deductible amounts will abide by the Plan level amounts.
    attr_accessor :use_plan_ded

    # Total deductible amount for the Family both In Network and Out of Network.
    attr_accessor :ded_max_sub

    # Total deductible amount for the Member both In Network and Out of Network.
    attr_accessor :ded_max_mem

    # Deductible amount for the Family In Network.
    attr_accessor :ded_max_net_sub

    # Deductible amount for the Member In Network.
    attr_accessor :ded_max_net_mem

    # Deductible amount for the Family Out of Network.
    attr_accessor :ded_max_oon_sub

    # Deductible amount for the Member Out of Network.
    attr_accessor :ded_max_oon_mem

    # Indicates that the Plan Benefit Out of Pocket amounts will abide by the Plan level amounts.
    attr_accessor :use_plan_oop

    # Total In-Network and Out of Network Out of Pocket maximum for the Family.
    attr_accessor :oo_p_max_sub

    # Total In-Network and Out of Network Out of Pocket maximum for the Member.
    attr_accessor :oo_p_max_mem

    # In-Network Out of Pocket maximum for the Family.
    attr_accessor :oo_p_max_net_sub

    # In-Network Out of Pocket maximum for the Member.
    attr_accessor :oo_p_max_net_mem

    # Out of Network Out of Pocket for the Family.
    attr_accessor :oo_p_max_oon_sub

    # Out of Network Out of Pocket for the Member.
    attr_accessor :oo_p_max_oon_mem

    # Formula used to calculate Out of Pocket amounts.
    attr_accessor :oo_p_calc_option

    # Identifies whether the Benefit Code is covered for this Plan. This can be populated from the 'Plan' screen.
    attr_accessor :covered

    # Indicates that the selected Benefit applies to Primary Care Physician only. If a claim is processed against this Benefit Code without a PCP, the claim will apply the “PCP Only“ Ex Code defined on the VBA Control Panel.
    attr_accessor :pc_p_only

    # Checking this option indicates that the Benefit is covered only when services are rendered by an In-Network provider. If a claim is processed against this Benefit Code as Out of Network, the claim will apply the “Covered In-Network Only“ Ex Code defined on the VBA Control Panel.
    attr_accessor :covered_in_net_only

    # This flag determines if adjudication calculates the Deductible before the CoPay is calculated.
    attr_accessor :deductible_before_co_pay

    # Identifies whether the Benefit Code is excluded for this Plan.  This allows the benefit to be on a claim preventing an error for no matching benefit and then applying a not covered ex code.
    attr_accessor :excluded

    # Indicates that an Ex Code should be applied to any service line with this Benefit Code.
    attr_accessor :apply_ex_code

    # If the Apply_Ex_Code flag is set, this field will contain the Ex Code to be applied.
    attr_accessor :ex_code

    attr_accessor :plan_ben_levels

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'benefit_code' => :'benefit_Code',
        :'hipa_a_code' => :'hipaA_Code',
        :'description' => :'description',
        :'benefit_category' => :'benefit_Category',
        :'use_plan_co_ins' => :'use_Plan_CoIns',
        :'co_ins_max_sub' => :'coIns_Max_Sub',
        :'co_ins_max_mem' => :'coIns_Max_Mem',
        :'co_ins_max_net_sub' => :'coIns_Max_Net_Sub',
        :'co_ins_max_net_mem' => :'coIns_Max_Net_Mem',
        :'co_ins_max_oon_sub' => :'coIns_Max_OON_Sub',
        :'co_ins_max_oon_mem' => :'coIns_Max_OON_Mem',
        :'use_plan_ded' => :'use_Plan_Ded',
        :'ded_max_sub' => :'ded_Max_Sub',
        :'ded_max_mem' => :'ded_Max_Mem',
        :'ded_max_net_sub' => :'ded_Max_Net_Sub',
        :'ded_max_net_mem' => :'ded_Max_Net_Mem',
        :'ded_max_oon_sub' => :'ded_Max_OON_Sub',
        :'ded_max_oon_mem' => :'ded_Max_OON_Mem',
        :'use_plan_oop' => :'use_Plan_OOP',
        :'oo_p_max_sub' => :'ooP_Max_Sub',
        :'oo_p_max_mem' => :'ooP_Max_Mem',
        :'oo_p_max_net_sub' => :'ooP_Max_Net_Sub',
        :'oo_p_max_net_mem' => :'ooP_Max_Net_Mem',
        :'oo_p_max_oon_sub' => :'ooP_Max_OON_Sub',
        :'oo_p_max_oon_mem' => :'ooP_Max_OON_Mem',
        :'oo_p_calc_option' => :'ooP_Calc_Option',
        :'covered' => :'covered',
        :'pc_p_only' => :'pcP_Only',
        :'covered_in_net_only' => :'covered_In_Net_Only',
        :'deductible_before_co_pay' => :'deductible_Before_CoPay',
        :'excluded' => :'excluded',
        :'apply_ex_code' => :'apply_Ex_Code',
        :'ex_code' => :'ex_Code',
        :'plan_ben_levels' => :'planBenLevels'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'benefit_code' => :'String',
        :'hipa_a_code' => :'String',
        :'description' => :'String',
        :'benefit_category' => :'String',
        :'use_plan_co_ins' => :'Boolean',
        :'co_ins_max_sub' => :'Float',
        :'co_ins_max_mem' => :'Float',
        :'co_ins_max_net_sub' => :'Float',
        :'co_ins_max_net_mem' => :'Float',
        :'co_ins_max_oon_sub' => :'Float',
        :'co_ins_max_oon_mem' => :'Float',
        :'use_plan_ded' => :'Boolean',
        :'ded_max_sub' => :'Float',
        :'ded_max_mem' => :'Float',
        :'ded_max_net_sub' => :'Float',
        :'ded_max_net_mem' => :'Float',
        :'ded_max_oon_sub' => :'Float',
        :'ded_max_oon_mem' => :'Float',
        :'use_plan_oop' => :'Boolean',
        :'oo_p_max_sub' => :'Float',
        :'oo_p_max_mem' => :'Float',
        :'oo_p_max_net_sub' => :'Float',
        :'oo_p_max_net_mem' => :'Float',
        :'oo_p_max_oon_sub' => :'Float',
        :'oo_p_max_oon_mem' => :'Float',
        :'oo_p_calc_option' => :'String',
        :'covered' => :'Boolean',
        :'pc_p_only' => :'Boolean',
        :'covered_in_net_only' => :'Boolean',
        :'deductible_before_co_pay' => :'Boolean',
        :'excluded' => :'Boolean',
        :'apply_ex_code' => :'Boolean',
        :'ex_code' => :'String',
        :'plan_ben_levels' => :'Array<PlanBenefitLevel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'benefit_code',
        :'hipa_a_code',
        :'description',
        :'benefit_category',
        :'co_ins_max_sub',
        :'co_ins_max_mem',
        :'co_ins_max_net_sub',
        :'co_ins_max_net_mem',
        :'co_ins_max_oon_sub',
        :'co_ins_max_oon_mem',
        :'ded_max_sub',
        :'ded_max_mem',
        :'ded_max_net_sub',
        :'ded_max_net_mem',
        :'ded_max_oon_sub',
        :'ded_max_oon_mem',
        :'oo_p_max_sub',
        :'oo_p_max_mem',
        :'oo_p_max_net_sub',
        :'oo_p_max_net_mem',
        :'oo_p_max_oon_sub',
        :'oo_p_max_oon_mem',
        :'oo_p_calc_option',
        :'ex_code',
        :'plan_ben_levels'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CoveredBenefit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CoveredBenefit`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'hipa_a_code')
        self.hipa_a_code = attributes[:'hipa_a_code']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'benefit_category')
        self.benefit_category = attributes[:'benefit_category']
      end

      if attributes.key?(:'use_plan_co_ins')
        self.use_plan_co_ins = attributes[:'use_plan_co_ins']
      end

      if attributes.key?(:'co_ins_max_sub')
        self.co_ins_max_sub = attributes[:'co_ins_max_sub']
      end

      if attributes.key?(:'co_ins_max_mem')
        self.co_ins_max_mem = attributes[:'co_ins_max_mem']
      end

      if attributes.key?(:'co_ins_max_net_sub')
        self.co_ins_max_net_sub = attributes[:'co_ins_max_net_sub']
      end

      if attributes.key?(:'co_ins_max_net_mem')
        self.co_ins_max_net_mem = attributes[:'co_ins_max_net_mem']
      end

      if attributes.key?(:'co_ins_max_oon_sub')
        self.co_ins_max_oon_sub = attributes[:'co_ins_max_oon_sub']
      end

      if attributes.key?(:'co_ins_max_oon_mem')
        self.co_ins_max_oon_mem = attributes[:'co_ins_max_oon_mem']
      end

      if attributes.key?(:'use_plan_ded')
        self.use_plan_ded = attributes[:'use_plan_ded']
      end

      if attributes.key?(:'ded_max_sub')
        self.ded_max_sub = attributes[:'ded_max_sub']
      end

      if attributes.key?(:'ded_max_mem')
        self.ded_max_mem = attributes[:'ded_max_mem']
      end

      if attributes.key?(:'ded_max_net_sub')
        self.ded_max_net_sub = attributes[:'ded_max_net_sub']
      end

      if attributes.key?(:'ded_max_net_mem')
        self.ded_max_net_mem = attributes[:'ded_max_net_mem']
      end

      if attributes.key?(:'ded_max_oon_sub')
        self.ded_max_oon_sub = attributes[:'ded_max_oon_sub']
      end

      if attributes.key?(:'ded_max_oon_mem')
        self.ded_max_oon_mem = attributes[:'ded_max_oon_mem']
      end

      if attributes.key?(:'use_plan_oop')
        self.use_plan_oop = attributes[:'use_plan_oop']
      end

      if attributes.key?(:'oo_p_max_sub')
        self.oo_p_max_sub = attributes[:'oo_p_max_sub']
      end

      if attributes.key?(:'oo_p_max_mem')
        self.oo_p_max_mem = attributes[:'oo_p_max_mem']
      end

      if attributes.key?(:'oo_p_max_net_sub')
        self.oo_p_max_net_sub = attributes[:'oo_p_max_net_sub']
      end

      if attributes.key?(:'oo_p_max_net_mem')
        self.oo_p_max_net_mem = attributes[:'oo_p_max_net_mem']
      end

      if attributes.key?(:'oo_p_max_oon_sub')
        self.oo_p_max_oon_sub = attributes[:'oo_p_max_oon_sub']
      end

      if attributes.key?(:'oo_p_max_oon_mem')
        self.oo_p_max_oon_mem = attributes[:'oo_p_max_oon_mem']
      end

      if attributes.key?(:'oo_p_calc_option')
        self.oo_p_calc_option = attributes[:'oo_p_calc_option']
      end

      if attributes.key?(:'covered')
        self.covered = attributes[:'covered']
      end

      if attributes.key?(:'pc_p_only')
        self.pc_p_only = attributes[:'pc_p_only']
      end

      if attributes.key?(:'covered_in_net_only')
        self.covered_in_net_only = attributes[:'covered_in_net_only']
      end

      if attributes.key?(:'deductible_before_co_pay')
        self.deductible_before_co_pay = attributes[:'deductible_before_co_pay']
      end

      if attributes.key?(:'excluded')
        self.excluded = attributes[:'excluded']
      end

      if attributes.key?(:'apply_ex_code')
        self.apply_ex_code = attributes[:'apply_ex_code']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'plan_ben_levels')
        if (value = attributes[:'plan_ben_levels']).is_a?(Array)
          self.plan_ben_levels = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          benefit_code == o.benefit_code &&
          hipa_a_code == o.hipa_a_code &&
          description == o.description &&
          benefit_category == o.benefit_category &&
          use_plan_co_ins == o.use_plan_co_ins &&
          co_ins_max_sub == o.co_ins_max_sub &&
          co_ins_max_mem == o.co_ins_max_mem &&
          co_ins_max_net_sub == o.co_ins_max_net_sub &&
          co_ins_max_net_mem == o.co_ins_max_net_mem &&
          co_ins_max_oon_sub == o.co_ins_max_oon_sub &&
          co_ins_max_oon_mem == o.co_ins_max_oon_mem &&
          use_plan_ded == o.use_plan_ded &&
          ded_max_sub == o.ded_max_sub &&
          ded_max_mem == o.ded_max_mem &&
          ded_max_net_sub == o.ded_max_net_sub &&
          ded_max_net_mem == o.ded_max_net_mem &&
          ded_max_oon_sub == o.ded_max_oon_sub &&
          ded_max_oon_mem == o.ded_max_oon_mem &&
          use_plan_oop == o.use_plan_oop &&
          oo_p_max_sub == o.oo_p_max_sub &&
          oo_p_max_mem == o.oo_p_max_mem &&
          oo_p_max_net_sub == o.oo_p_max_net_sub &&
          oo_p_max_net_mem == o.oo_p_max_net_mem &&
          oo_p_max_oon_sub == o.oo_p_max_oon_sub &&
          oo_p_max_oon_mem == o.oo_p_max_oon_mem &&
          oo_p_calc_option == o.oo_p_calc_option &&
          covered == o.covered &&
          pc_p_only == o.pc_p_only &&
          covered_in_net_only == o.covered_in_net_only &&
          deductible_before_co_pay == o.deductible_before_co_pay &&
          excluded == o.excluded &&
          apply_ex_code == o.apply_ex_code &&
          ex_code == o.ex_code &&
          plan_ben_levels == o.plan_ben_levels
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [benefit_code, hipa_a_code, description, benefit_category, use_plan_co_ins, co_ins_max_sub, co_ins_max_mem, co_ins_max_net_sub, co_ins_max_net_mem, co_ins_max_oon_sub, co_ins_max_oon_mem, use_plan_ded, ded_max_sub, ded_max_mem, ded_max_net_sub, ded_max_net_mem, ded_max_oon_sub, ded_max_oon_mem, use_plan_oop, oo_p_max_sub, oo_p_max_mem, oo_p_max_net_sub, oo_p_max_net_mem, oo_p_max_oon_sub, oo_p_max_oon_mem, oo_p_calc_option, covered, pc_p_only, covered_in_net_only, deductible_before_co_pay, excluded, apply_ex_code, ex_code, plan_ben_levels].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
