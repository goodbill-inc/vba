=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class AuthProcCodes
    # Unique identifier for each record.
    attr_accessor :auth_proc_codes_key

    # Unique identifier assigned to the authorization.
    attr_accessor :auth_number

    # Checking this box means that adjudication will not require a match on the procedure modifiers when automatically assigning this auth.
    attr_accessor :exclude_modifier_match

    # Required modifier for adjudication to match this authorization to a claim.
    attr_accessor :modifier1

    # Required modifier for adjudication to match this authorization to a claim.
    attr_accessor :modifier2

    # Required modifier for adjudication to match this authorization to a claim.
    attr_accessor :modifier3

    # Required modifier for adjudication to match this authorization to a claim.
    attr_accessor :modifier4

    # Allows the User to apply a procedure cluster to the procedure code line. This can be selected by right-clicking within the field and selecting 'Lookup' from the context menu.
    attr_accessor :procedure_cluster

    # Unique identifier assigned to the procedure that will be tied to the authorization. This can be selected by right-clicking within the field and selecting 'Lookup' from the context menu.
    attr_accessor :procedure_code

    # Total number of approved units of the associated procedure that have been used.
    attr_accessor :units_actual

    # Approved number of units of the associated procedure.
    attr_accessor :units_approved

    # Requested number of units of the associated procedure.
    attr_accessor :units_requested

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_proc_codes_key' => :'authProcCodes_Key',
        :'auth_number' => :'auth_Number',
        :'exclude_modifier_match' => :'exclude_Modifier_Match',
        :'modifier1' => :'modifier1',
        :'modifier2' => :'modifier2',
        :'modifier3' => :'modifier3',
        :'modifier4' => :'modifier4',
        :'procedure_cluster' => :'procedure_Cluster',
        :'procedure_code' => :'procedure_Code',
        :'units_actual' => :'units_Actual',
        :'units_approved' => :'units_Approved',
        :'units_requested' => :'units_Requested'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auth_proc_codes_key' => :'Integer',
        :'auth_number' => :'String',
        :'exclude_modifier_match' => :'Boolean',
        :'modifier1' => :'String',
        :'modifier2' => :'String',
        :'modifier3' => :'String',
        :'modifier4' => :'String',
        :'procedure_cluster' => :'String',
        :'procedure_code' => :'String',
        :'units_actual' => :'Float',
        :'units_approved' => :'Float',
        :'units_requested' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'modifier1',
        :'modifier2',
        :'modifier3',
        :'modifier4',
        :'procedure_cluster',
        :'procedure_code',
        :'units_actual',
        :'units_approved',
        :'units_requested'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::AuthProcCodes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::AuthProcCodes`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_proc_codes_key')
        self.auth_proc_codes_key = attributes[:'auth_proc_codes_key']
      else
        self.auth_proc_codes_key = nil
      end

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      else
        self.auth_number = nil
      end

      if attributes.key?(:'exclude_modifier_match')
        self.exclude_modifier_match = attributes[:'exclude_modifier_match']
      else
        self.exclude_modifier_match = nil
      end

      if attributes.key?(:'modifier1')
        self.modifier1 = attributes[:'modifier1']
      end

      if attributes.key?(:'modifier2')
        self.modifier2 = attributes[:'modifier2']
      end

      if attributes.key?(:'modifier3')
        self.modifier3 = attributes[:'modifier3']
      end

      if attributes.key?(:'modifier4')
        self.modifier4 = attributes[:'modifier4']
      end

      if attributes.key?(:'procedure_cluster')
        self.procedure_cluster = attributes[:'procedure_cluster']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'units_actual')
        self.units_actual = attributes[:'units_actual']
      end

      if attributes.key?(:'units_approved')
        self.units_approved = attributes[:'units_approved']
      end

      if attributes.key?(:'units_requested')
        self.units_requested = attributes[:'units_requested']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @auth_proc_codes_key.nil?
        invalid_properties.push('invalid value for "auth_proc_codes_key", auth_proc_codes_key cannot be nil.')
      end

      if @auth_number.nil?
        invalid_properties.push('invalid value for "auth_number", auth_number cannot be nil.')
      end

      if @auth_number.to_s.length > 20
        invalid_properties.push('invalid value for "auth_number", the character length must be smaller than or equal to 20.')
      end

      if @auth_number.to_s.length < 1
        invalid_properties.push('invalid value for "auth_number", the character length must be great than or equal to 1.')
      end

      if @exclude_modifier_match.nil?
        invalid_properties.push('invalid value for "exclude_modifier_match", exclude_modifier_match cannot be nil.')
      end

      if !@modifier1.nil? && @modifier1.to_s.length > 8
        invalid_properties.push('invalid value for "modifier1", the character length must be smaller than or equal to 8.')
      end

      if !@modifier2.nil? && @modifier2.to_s.length > 8
        invalid_properties.push('invalid value for "modifier2", the character length must be smaller than or equal to 8.')
      end

      if !@modifier3.nil? && @modifier3.to_s.length > 8
        invalid_properties.push('invalid value for "modifier3", the character length must be smaller than or equal to 8.')
      end

      if !@modifier4.nil? && @modifier4.to_s.length > 8
        invalid_properties.push('invalid value for "modifier4", the character length must be smaller than or equal to 8.')
      end

      if !@procedure_cluster.nil? && @procedure_cluster.to_s.length > 32
        invalid_properties.push('invalid value for "procedure_cluster", the character length must be smaller than or equal to 32.')
      end

      if !@procedure_code.nil? && @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @auth_proc_codes_key.nil?
      return false if @auth_number.nil?
      return false if @auth_number.to_s.length > 20
      return false if @auth_number.to_s.length < 1
      return false if @exclude_modifier_match.nil?
      return false if !@modifier1.nil? && @modifier1.to_s.length > 8
      return false if !@modifier2.nil? && @modifier2.to_s.length > 8
      return false if !@modifier3.nil? && @modifier3.to_s.length > 8
      return false if !@modifier4.nil? && @modifier4.to_s.length > 8
      return false if !@procedure_cluster.nil? && @procedure_cluster.to_s.length > 32
      return false if !@procedure_code.nil? && @procedure_code.to_s.length > 8
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_proc_codes_key Value to be assigned
    def auth_proc_codes_key=(auth_proc_codes_key)
      if auth_proc_codes_key.nil?
        fail ArgumentError, 'auth_proc_codes_key cannot be nil'
      end

      @auth_proc_codes_key = auth_proc_codes_key
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if auth_number.nil?
        fail ArgumentError, 'auth_number cannot be nil'
      end

      if auth_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "auth_number", the character length must be smaller than or equal to 20.'
      end

      if auth_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "auth_number", the character length must be great than or equal to 1.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_modifier_match Value to be assigned
    def exclude_modifier_match=(exclude_modifier_match)
      if exclude_modifier_match.nil?
        fail ArgumentError, 'exclude_modifier_match cannot be nil'
      end

      @exclude_modifier_match = exclude_modifier_match
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier1 Value to be assigned
    def modifier1=(modifier1)
      if !modifier1.nil? && modifier1.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier1", the character length must be smaller than or equal to 8.'
      end

      @modifier1 = modifier1
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier2 Value to be assigned
    def modifier2=(modifier2)
      if !modifier2.nil? && modifier2.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier2", the character length must be smaller than or equal to 8.'
      end

      @modifier2 = modifier2
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier3 Value to be assigned
    def modifier3=(modifier3)
      if !modifier3.nil? && modifier3.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier3", the character length must be smaller than or equal to 8.'
      end

      @modifier3 = modifier3
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier4 Value to be assigned
    def modifier4=(modifier4)
      if !modifier4.nil? && modifier4.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier4", the character length must be smaller than or equal to 8.'
      end

      @modifier4 = modifier4
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_cluster Value to be assigned
    def procedure_cluster=(procedure_cluster)
      if !procedure_cluster.nil? && procedure_cluster.to_s.length > 32
        fail ArgumentError, 'invalid value for "procedure_cluster", the character length must be smaller than or equal to 32.'
      end

      @procedure_cluster = procedure_cluster
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if !procedure_code.nil? && procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      @procedure_code = procedure_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_proc_codes_key == o.auth_proc_codes_key &&
          auth_number == o.auth_number &&
          exclude_modifier_match == o.exclude_modifier_match &&
          modifier1 == o.modifier1 &&
          modifier2 == o.modifier2 &&
          modifier3 == o.modifier3 &&
          modifier4 == o.modifier4 &&
          procedure_cluster == o.procedure_cluster &&
          procedure_code == o.procedure_code &&
          units_actual == o.units_actual &&
          units_approved == o.units_approved &&
          units_requested == o.units_requested
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auth_proc_codes_key, auth_number, exclude_modifier_match, modifier1, modifier2, modifier3, modifier4, procedure_cluster, procedure_code, units_actual, units_approved, units_requested].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
