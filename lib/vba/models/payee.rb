=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Payee
    # Unique identifier assigned to the Payee.  If a Payee ID is not provided, one will be assigned at the time of creation.
    attr_accessor :payee_id

    # Address of the Payee.
    attr_accessor :address

    # Address line 2 of the Payee.
    attr_accessor :address2

    # Field using for storing a custom alternate ID associated with this Payee.
    attr_accessor :alternate_id

    # The BaseLoad identifier associated with this Billing entity (Payee).
    attr_accessor :blid

    # City of the Payee's address.
    attr_accessor :city

    # Name of the desired contact person associated with the Payee.
    attr_accessor :contact

    # Identifier of the country where the Payee resides.
    attr_accessor :country_id

    # Email address of the Payee.
    attr_accessor :email_address

    # Date when the record was added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Country code of the Payee's fax number.
    attr_accessor :fax_country_code

    # Fax number of the Payee.
    attr_accessor :fax_number

    # Identifier assigned to the Payee that is used for federal tax purposes.
    attr_accessor :federal_id

    # This field indicates that the Payee is currently inactive  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :inactive

    # Latitudinal coordinates for the Payee's location.
    attr_accessor :latitude

    # Longitudinal coordinate for the Payee's location.
    attr_accessor :longitude

    # Name of the Payee.
    attr_accessor :name

    # Name that should be writen on checks that are made out to the Payee. Only provide this information if the name differs from the Payee name.
    attr_accessor :name_for_check

    # Indicates that the Payee needs a 1099 generated yearly by VBA. Checking this box enables additional 1099 address information. Only provide this information if it differs from the Payee address.
    attr_accessor :need_1099

    # Address that should be used for payments to the Payee. Payments will default to the Payee address if this field is not completed.
    attr_accessor :pay_to_address

    # Line 2 of the address that should be used for payments to the Payee.
    attr_accessor :pay_to_address2

    # City of the address that should be used for payments to the Payee.
    attr_accessor :pay_to_city

    # Identifier of the country where the Payee's payments are received.
    attr_accessor :pay_to_country_id

    # State of the Payee's address used for payments.
    attr_accessor :pay_to_state

    # Zip Code of the Payee's address used for payments.
    attr_accessor :pay_to_zip

    # Specifies the Ex Code that should be applied when the 'Apply Ex Code' option is selected.
    attr_accessor :pend_ex_code

    # Indicates whether an Ex Code should be applied to claims that involve payments to the selected Payee.
    attr_accessor :pend_flag

    # Country code of the Payee's phone number.
    attr_accessor :phone_country_code

    # Phone number of the Payee.
    attr_accessor :phone_number

    # State of the Payee's address.
    attr_accessor :state

    # Address that the Payee uses for tax purposes.
    attr_accessor :tax_address

    # Address line 2 that the Payee uses for tax purposes.
    attr_accessor :tax_address2

    # City of the address that the Payee uses for tax purposes.
    attr_accessor :tax_city

    # Contact that the Payee uses for tax purposes.
    attr_accessor :tax_contact

    # Fax number of the Contact that the Payee uses for tax purposes.
    attr_accessor :tax_fax_number

    # Name that the Payee uses for tax purposes.
    attr_accessor :tax_name

    # Phone number of the Contact that the Payee uses for tax purposes.
    attr_accessor :tax_phone_number

    # State of the address that the Payee uses for tax purposes.
    attr_accessor :tax_state

    # Zip Code of the address that the Payee uses for tax purposes.
    attr_accessor :tax_zip_code

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Indicates whether the Payee functions as a virtual office. This can be used for data exporting purposes.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :virtual_office

    # No longer in use.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :void_checks

    # This field indicates that a W9 has been received from this Payee. This field is informational only.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :w9_received

    # Website of the Payee.
    attr_accessor :website

    # Indicates whether the Payee account accepts wire transfers.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :wire_transfer

    # Zip Code of the Payee's address.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payee_id' => :'payee_ID',
        :'address' => :'address',
        :'address2' => :'address2',
        :'alternate_id' => :'alternate_ID',
        :'blid' => :'blid',
        :'city' => :'city',
        :'contact' => :'contact',
        :'country_id' => :'country_ID',
        :'email_address' => :'email_Address',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'fax_country_code' => :'fax_Country_Code',
        :'fax_number' => :'fax_Number',
        :'federal_id' => :'federal_ID',
        :'inactive' => :'inactive',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'name' => :'name',
        :'name_for_check' => :'name_For_Check',
        :'need_1099' => :'need_1099',
        :'pay_to_address' => :'payTo_Address',
        :'pay_to_address2' => :'payTo_Address2',
        :'pay_to_city' => :'payTo_City',
        :'pay_to_country_id' => :'payTo_Country_ID',
        :'pay_to_state' => :'payTo_State',
        :'pay_to_zip' => :'payTo_Zip',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'phone_country_code' => :'phone_Country_Code',
        :'phone_number' => :'phone_Number',
        :'state' => :'state',
        :'tax_address' => :'tax_Address',
        :'tax_address2' => :'tax_Address2',
        :'tax_city' => :'tax_City',
        :'tax_contact' => :'tax_Contact',
        :'tax_fax_number' => :'tax_Fax_Number',
        :'tax_name' => :'tax_Name',
        :'tax_phone_number' => :'tax_Phone_Number',
        :'tax_state' => :'tax_State',
        :'tax_zip_code' => :'tax_Zip_Code',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'virtual_office' => :'virtual_Office',
        :'void_checks' => :'void_Checks',
        :'w9_received' => :'w9_Received',
        :'website' => :'website',
        :'wire_transfer' => :'wire_Transfer',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payee_id' => :'String',
        :'address' => :'String',
        :'address2' => :'String',
        :'alternate_id' => :'String',
        :'blid' => :'String',
        :'city' => :'String',
        :'contact' => :'String',
        :'country_id' => :'String',
        :'email_address' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'fax_country_code' => :'String',
        :'fax_number' => :'String',
        :'federal_id' => :'String',
        :'inactive' => :'Boolean',
        :'latitude' => :'Float',
        :'longitude' => :'Float',
        :'name' => :'String',
        :'name_for_check' => :'String',
        :'need_1099' => :'String',
        :'pay_to_address' => :'String',
        :'pay_to_address2' => :'String',
        :'pay_to_city' => :'String',
        :'pay_to_country_id' => :'String',
        :'pay_to_state' => :'String',
        :'pay_to_zip' => :'String',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'Boolean',
        :'phone_country_code' => :'String',
        :'phone_number' => :'String',
        :'state' => :'String',
        :'tax_address' => :'String',
        :'tax_address2' => :'String',
        :'tax_city' => :'String',
        :'tax_contact' => :'String',
        :'tax_fax_number' => :'String',
        :'tax_name' => :'String',
        :'tax_phone_number' => :'String',
        :'tax_state' => :'String',
        :'tax_zip_code' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'virtual_office' => :'Boolean',
        :'void_checks' => :'Boolean',
        :'w9_received' => :'Boolean',
        :'website' => :'String',
        :'wire_transfer' => :'Boolean',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'payee_id',
        :'address',
        :'address2',
        :'alternate_id',
        :'blid',
        :'city',
        :'contact',
        :'country_id',
        :'email_address',
        :'entry_user',
        :'fax_country_code',
        :'fax_number',
        :'federal_id',
        :'latitude',
        :'longitude',
        :'name',
        :'name_for_check',
        :'need_1099',
        :'pay_to_address',
        :'pay_to_address2',
        :'pay_to_city',
        :'pay_to_country_id',
        :'pay_to_state',
        :'pay_to_zip',
        :'pend_ex_code',
        :'pend_flag',
        :'phone_country_code',
        :'phone_number',
        :'state',
        :'tax_address',
        :'tax_address2',
        :'tax_city',
        :'tax_contact',
        :'tax_fax_number',
        :'tax_name',
        :'tax_phone_number',
        :'tax_state',
        :'tax_zip_code',
        :'update_user',
        :'website',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Payee` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Payee`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'alternate_id')
        self.alternate_id = attributes[:'alternate_id']
      end

      if attributes.key?(:'blid')
        self.blid = attributes[:'blid']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'fax_country_code')
        self.fax_country_code = attributes[:'fax_country_code']
      end

      if attributes.key?(:'fax_number')
        self.fax_number = attributes[:'fax_number']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'inactive')
        self.inactive = attributes[:'inactive']
      else
        self.inactive = nil
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'name_for_check')
        self.name_for_check = attributes[:'name_for_check']
      end

      if attributes.key?(:'need_1099')
        self.need_1099 = attributes[:'need_1099']
      end

      if attributes.key?(:'pay_to_address')
        self.pay_to_address = attributes[:'pay_to_address']
      end

      if attributes.key?(:'pay_to_address2')
        self.pay_to_address2 = attributes[:'pay_to_address2']
      end

      if attributes.key?(:'pay_to_city')
        self.pay_to_city = attributes[:'pay_to_city']
      end

      if attributes.key?(:'pay_to_country_id')
        self.pay_to_country_id = attributes[:'pay_to_country_id']
      end

      if attributes.key?(:'pay_to_state')
        self.pay_to_state = attributes[:'pay_to_state']
      end

      if attributes.key?(:'pay_to_zip')
        self.pay_to_zip = attributes[:'pay_to_zip']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'tax_address')
        self.tax_address = attributes[:'tax_address']
      end

      if attributes.key?(:'tax_address2')
        self.tax_address2 = attributes[:'tax_address2']
      end

      if attributes.key?(:'tax_city')
        self.tax_city = attributes[:'tax_city']
      end

      if attributes.key?(:'tax_contact')
        self.tax_contact = attributes[:'tax_contact']
      end

      if attributes.key?(:'tax_fax_number')
        self.tax_fax_number = attributes[:'tax_fax_number']
      end

      if attributes.key?(:'tax_name')
        self.tax_name = attributes[:'tax_name']
      end

      if attributes.key?(:'tax_phone_number')
        self.tax_phone_number = attributes[:'tax_phone_number']
      end

      if attributes.key?(:'tax_state')
        self.tax_state = attributes[:'tax_state']
      end

      if attributes.key?(:'tax_zip_code')
        self.tax_zip_code = attributes[:'tax_zip_code']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'virtual_office')
        self.virtual_office = attributes[:'virtual_office']
      else
        self.virtual_office = nil
      end

      if attributes.key?(:'void_checks')
        self.void_checks = attributes[:'void_checks']
      else
        self.void_checks = nil
      end

      if attributes.key?(:'w9_received')
        self.w9_received = attributes[:'w9_received']
      else
        self.w9_received = nil
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'wire_transfer')
        self.wire_transfer = attributes[:'wire_transfer']
      else
        self.wire_transfer = nil
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@payee_id.nil? && @payee_id.to_s.length > 20
        invalid_properties.push('invalid value for "payee_id", the character length must be smaller than or equal to 20.')
      end

      if !@address.nil? && @address.to_s.length > 255
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 255.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if !@alternate_id.nil? && @alternate_id.to_s.length > 20
        invalid_properties.push('invalid value for "alternate_id", the character length must be smaller than or equal to 20.')
      end

      if !@blid.nil? && @blid.to_s.length > 64
        invalid_properties.push('invalid value for "blid", the character length must be smaller than or equal to 64.')
      end

      if !@city.nil? && @city.to_s.length > 30
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 30.')
      end

      if !@contact.nil? && @contact.to_s.length > 50
        invalid_properties.push('invalid value for "contact", the character length must be smaller than or equal to 50.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@email_address.nil? && @email_address.to_s.length > 128
        invalid_properties.push('invalid value for "email_address", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@fax_number.nil? && @fax_number.to_s.length > 20
        invalid_properties.push('invalid value for "fax_number", the character length must be smaller than or equal to 20.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 15
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 15.')
      end

      if @inactive.nil?
        invalid_properties.push('invalid value for "inactive", inactive cannot be nil.')
      end

      if !@name.nil? && @name.to_s.length > 128
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 128.')
      end

      if !@name_for_check.nil? && @name_for_check.to_s.length > 128
        invalid_properties.push('invalid value for "name_for_check", the character length must be smaller than or equal to 128.')
      end

      if !@need_1099.nil? && @need_1099.to_s.length > 1
        invalid_properties.push('invalid value for "need_1099", the character length must be smaller than or equal to 1.')
      end

      if !@pay_to_address.nil? && @pay_to_address.to_s.length > 128
        invalid_properties.push('invalid value for "pay_to_address", the character length must be smaller than or equal to 128.')
      end

      if !@pay_to_address2.nil? && @pay_to_address2.to_s.length > 128
        invalid_properties.push('invalid value for "pay_to_address2", the character length must be smaller than or equal to 128.')
      end

      if !@pay_to_city.nil? && @pay_to_city.to_s.length > 30
        invalid_properties.push('invalid value for "pay_to_city", the character length must be smaller than or equal to 30.')
      end

      if !@pay_to_country_id.nil? && @pay_to_country_id.to_s.length > 8
        invalid_properties.push('invalid value for "pay_to_country_id", the character length must be smaller than or equal to 8.')
      end

      if !@pay_to_state.nil? && @pay_to_state.to_s.length > 2
        invalid_properties.push('invalid value for "pay_to_state", the character length must be smaller than or equal to 2.')
      end

      if !@pay_to_zip.nil? && @pay_to_zip.to_s.length > 32
        invalid_properties.push('invalid value for "pay_to_zip", the character length must be smaller than or equal to 32.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length > 20
        invalid_properties.push('invalid value for "phone_number", the character length must be smaller than or equal to 20.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@tax_address.nil? && @tax_address.to_s.length > 128
        invalid_properties.push('invalid value for "tax_address", the character length must be smaller than or equal to 128.')
      end

      if !@tax_address2.nil? && @tax_address2.to_s.length > 128
        invalid_properties.push('invalid value for "tax_address2", the character length must be smaller than or equal to 128.')
      end

      if !@tax_city.nil? && @tax_city.to_s.length > 32
        invalid_properties.push('invalid value for "tax_city", the character length must be smaller than or equal to 32.')
      end

      if !@tax_contact.nil? && @tax_contact.to_s.length > 64
        invalid_properties.push('invalid value for "tax_contact", the character length must be smaller than or equal to 64.')
      end

      if !@tax_fax_number.nil? && @tax_fax_number.to_s.length > 16
        invalid_properties.push('invalid value for "tax_fax_number", the character length must be smaller than or equal to 16.')
      end

      if !@tax_name.nil? && @tax_name.to_s.length > 64
        invalid_properties.push('invalid value for "tax_name", the character length must be smaller than or equal to 64.')
      end

      if !@tax_phone_number.nil? && @tax_phone_number.to_s.length > 16
        invalid_properties.push('invalid value for "tax_phone_number", the character length must be smaller than or equal to 16.')
      end

      if !@tax_state.nil? && @tax_state.to_s.length > 2
        invalid_properties.push('invalid value for "tax_state", the character length must be smaller than or equal to 2.')
      end

      if !@tax_zip_code.nil? && @tax_zip_code.to_s.length > 16
        invalid_properties.push('invalid value for "tax_zip_code", the character length must be smaller than or equal to 16.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @virtual_office.nil?
        invalid_properties.push('invalid value for "virtual_office", virtual_office cannot be nil.')
      end

      if @void_checks.nil?
        invalid_properties.push('invalid value for "void_checks", void_checks cannot be nil.')
      end

      if @w9_received.nil?
        invalid_properties.push('invalid value for "w9_received", w9_received cannot be nil.')
      end

      if !@website.nil? && @website.to_s.length > 256
        invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 256.')
      end

      if @wire_transfer.nil?
        invalid_properties.push('invalid value for "wire_transfer", wire_transfer cannot be nil.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@payee_id.nil? && @payee_id.to_s.length > 20
      return false if !@address.nil? && @address.to_s.length > 255
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if !@alternate_id.nil? && @alternate_id.to_s.length > 20
      return false if !@blid.nil? && @blid.to_s.length > 64
      return false if !@city.nil? && @city.to_s.length > 30
      return false if !@contact.nil? && @contact.to_s.length > 50
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@email_address.nil? && @email_address.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
      return false if !@fax_number.nil? && @fax_number.to_s.length > 20
      return false if !@federal_id.nil? && @federal_id.to_s.length > 15
      return false if @inactive.nil?
      return false if !@name.nil? && @name.to_s.length > 128
      return false if !@name_for_check.nil? && @name_for_check.to_s.length > 128
      return false if !@need_1099.nil? && @need_1099.to_s.length > 1
      return false if !@pay_to_address.nil? && @pay_to_address.to_s.length > 128
      return false if !@pay_to_address2.nil? && @pay_to_address2.to_s.length > 128
      return false if !@pay_to_city.nil? && @pay_to_city.to_s.length > 30
      return false if !@pay_to_country_id.nil? && @pay_to_country_id.to_s.length > 8
      return false if !@pay_to_state.nil? && @pay_to_state.to_s.length > 2
      return false if !@pay_to_zip.nil? && @pay_to_zip.to_s.length > 32
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if !@phone_number.nil? && @phone_number.to_s.length > 20
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@tax_address.nil? && @tax_address.to_s.length > 128
      return false if !@tax_address2.nil? && @tax_address2.to_s.length > 128
      return false if !@tax_city.nil? && @tax_city.to_s.length > 32
      return false if !@tax_contact.nil? && @tax_contact.to_s.length > 64
      return false if !@tax_fax_number.nil? && @tax_fax_number.to_s.length > 16
      return false if !@tax_name.nil? && @tax_name.to_s.length > 64
      return false if !@tax_phone_number.nil? && @tax_phone_number.to_s.length > 16
      return false if !@tax_state.nil? && @tax_state.to_s.length > 2
      return false if !@tax_zip_code.nil? && @tax_zip_code.to_s.length > 16
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @virtual_office.nil?
      return false if @void_checks.nil?
      return false if @w9_received.nil?
      return false if !@website.nil? && @website.to_s.length > 256
      return false if @wire_transfer.nil?
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payee_id Value to be assigned
    def payee_id=(payee_id)
      if !payee_id.nil? && payee_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payee_id", the character length must be smaller than or equal to 20.'
      end

      @payee_id = payee_id
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 255
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 255.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_id Value to be assigned
    def alternate_id=(alternate_id)
      if !alternate_id.nil? && alternate_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "alternate_id", the character length must be smaller than or equal to 20.'
      end

      @alternate_id = alternate_id
    end

    # Custom attribute writer method with validation
    # @param [Object] blid Value to be assigned
    def blid=(blid)
      if !blid.nil? && blid.to_s.length > 64
        fail ArgumentError, 'invalid value for "blid", the character length must be smaller than or equal to 64.'
      end

      @blid = blid
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 30
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 30.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] contact Value to be assigned
    def contact=(contact)
      if !contact.nil? && contact.to_s.length > 50
        fail ArgumentError, 'invalid value for "contact", the character length must be smaller than or equal to 50.'
      end

      @contact = contact
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] email_address Value to be assigned
    def email_address=(email_address)
      if !email_address.nil? && email_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "email_address", the character length must be smaller than or equal to 128.'
      end

      @email_address = email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_country_code Value to be assigned
    def fax_country_code=(fax_country_code)
      if !fax_country_code.nil? && fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @fax_country_code = fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_number Value to be assigned
    def fax_number=(fax_number)
      if !fax_number.nil? && fax_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax_number", the character length must be smaller than or equal to 20.'
      end

      @fax_number = fax_number
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 15
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 15.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] inactive Value to be assigned
    def inactive=(inactive)
      if inactive.nil?
        fail ArgumentError, 'inactive cannot be nil'
      end

      @inactive = inactive
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 128
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 128.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_for_check Value to be assigned
    def name_for_check=(name_for_check)
      if !name_for_check.nil? && name_for_check.to_s.length > 128
        fail ArgumentError, 'invalid value for "name_for_check", the character length must be smaller than or equal to 128.'
      end

      @name_for_check = name_for_check
    end

    # Custom attribute writer method with validation
    # @param [Object] need_1099 Value to be assigned
    def need_1099=(need_1099)
      if !need_1099.nil? && need_1099.to_s.length > 1
        fail ArgumentError, 'invalid value for "need_1099", the character length must be smaller than or equal to 1.'
      end

      @need_1099 = need_1099
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_address Value to be assigned
    def pay_to_address=(pay_to_address)
      if !pay_to_address.nil? && pay_to_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "pay_to_address", the character length must be smaller than or equal to 128.'
      end

      @pay_to_address = pay_to_address
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_address2 Value to be assigned
    def pay_to_address2=(pay_to_address2)
      if !pay_to_address2.nil? && pay_to_address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "pay_to_address2", the character length must be smaller than or equal to 128.'
      end

      @pay_to_address2 = pay_to_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_city Value to be assigned
    def pay_to_city=(pay_to_city)
      if !pay_to_city.nil? && pay_to_city.to_s.length > 30
        fail ArgumentError, 'invalid value for "pay_to_city", the character length must be smaller than or equal to 30.'
      end

      @pay_to_city = pay_to_city
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_country_id Value to be assigned
    def pay_to_country_id=(pay_to_country_id)
      if !pay_to_country_id.nil? && pay_to_country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "pay_to_country_id", the character length must be smaller than or equal to 8.'
      end

      @pay_to_country_id = pay_to_country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_state Value to be assigned
    def pay_to_state=(pay_to_state)
      if !pay_to_state.nil? && pay_to_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "pay_to_state", the character length must be smaller than or equal to 2.'
      end

      @pay_to_state = pay_to_state
    end

    # Custom attribute writer method with validation
    # @param [Object] pay_to_zip Value to be assigned
    def pay_to_zip=(pay_to_zip)
      if !pay_to_zip.nil? && pay_to_zip.to_s.length > 32
        fail ArgumentError, 'invalid value for "pay_to_zip", the character length must be smaller than or equal to 32.'
      end

      @pay_to_zip = pay_to_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone_number", the character length must be smaller than or equal to 20.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_address Value to be assigned
    def tax_address=(tax_address)
      if !tax_address.nil? && tax_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "tax_address", the character length must be smaller than or equal to 128.'
      end

      @tax_address = tax_address
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_address2 Value to be assigned
    def tax_address2=(tax_address2)
      if !tax_address2.nil? && tax_address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "tax_address2", the character length must be smaller than or equal to 128.'
      end

      @tax_address2 = tax_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_city Value to be assigned
    def tax_city=(tax_city)
      if !tax_city.nil? && tax_city.to_s.length > 32
        fail ArgumentError, 'invalid value for "tax_city", the character length must be smaller than or equal to 32.'
      end

      @tax_city = tax_city
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_contact Value to be assigned
    def tax_contact=(tax_contact)
      if !tax_contact.nil? && tax_contact.to_s.length > 64
        fail ArgumentError, 'invalid value for "tax_contact", the character length must be smaller than or equal to 64.'
      end

      @tax_contact = tax_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_fax_number Value to be assigned
    def tax_fax_number=(tax_fax_number)
      if !tax_fax_number.nil? && tax_fax_number.to_s.length > 16
        fail ArgumentError, 'invalid value for "tax_fax_number", the character length must be smaller than or equal to 16.'
      end

      @tax_fax_number = tax_fax_number
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_name Value to be assigned
    def tax_name=(tax_name)
      if !tax_name.nil? && tax_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "tax_name", the character length must be smaller than or equal to 64.'
      end

      @tax_name = tax_name
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_phone_number Value to be assigned
    def tax_phone_number=(tax_phone_number)
      if !tax_phone_number.nil? && tax_phone_number.to_s.length > 16
        fail ArgumentError, 'invalid value for "tax_phone_number", the character length must be smaller than or equal to 16.'
      end

      @tax_phone_number = tax_phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_state Value to be assigned
    def tax_state=(tax_state)
      if !tax_state.nil? && tax_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "tax_state", the character length must be smaller than or equal to 2.'
      end

      @tax_state = tax_state
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_zip_code Value to be assigned
    def tax_zip_code=(tax_zip_code)
      if !tax_zip_code.nil? && tax_zip_code.to_s.length > 16
        fail ArgumentError, 'invalid value for "tax_zip_code", the character length must be smaller than or equal to 16.'
      end

      @tax_zip_code = tax_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] virtual_office Value to be assigned
    def virtual_office=(virtual_office)
      if virtual_office.nil?
        fail ArgumentError, 'virtual_office cannot be nil'
      end

      @virtual_office = virtual_office
    end

    # Custom attribute writer method with validation
    # @param [Object] void_checks Value to be assigned
    def void_checks=(void_checks)
      if void_checks.nil?
        fail ArgumentError, 'void_checks cannot be nil'
      end

      @void_checks = void_checks
    end

    # Custom attribute writer method with validation
    # @param [Object] w9_received Value to be assigned
    def w9_received=(w9_received)
      if w9_received.nil?
        fail ArgumentError, 'w9_received cannot be nil'
      end

      @w9_received = w9_received
    end

    # Custom attribute writer method with validation
    # @param [Object] website Value to be assigned
    def website=(website)
      if !website.nil? && website.to_s.length > 256
        fail ArgumentError, 'invalid value for "website", the character length must be smaller than or equal to 256.'
      end

      @website = website
    end

    # Custom attribute writer method with validation
    # @param [Object] wire_transfer Value to be assigned
    def wire_transfer=(wire_transfer)
      if wire_transfer.nil?
        fail ArgumentError, 'wire_transfer cannot be nil'
      end

      @wire_transfer = wire_transfer
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payee_id == o.payee_id &&
          address == o.address &&
          address2 == o.address2 &&
          alternate_id == o.alternate_id &&
          blid == o.blid &&
          city == o.city &&
          contact == o.contact &&
          country_id == o.country_id &&
          email_address == o.email_address &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          fax_country_code == o.fax_country_code &&
          fax_number == o.fax_number &&
          federal_id == o.federal_id &&
          inactive == o.inactive &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          name == o.name &&
          name_for_check == o.name_for_check &&
          need_1099 == o.need_1099 &&
          pay_to_address == o.pay_to_address &&
          pay_to_address2 == o.pay_to_address2 &&
          pay_to_city == o.pay_to_city &&
          pay_to_country_id == o.pay_to_country_id &&
          pay_to_state == o.pay_to_state &&
          pay_to_zip == o.pay_to_zip &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          phone_country_code == o.phone_country_code &&
          phone_number == o.phone_number &&
          state == o.state &&
          tax_address == o.tax_address &&
          tax_address2 == o.tax_address2 &&
          tax_city == o.tax_city &&
          tax_contact == o.tax_contact &&
          tax_fax_number == o.tax_fax_number &&
          tax_name == o.tax_name &&
          tax_phone_number == o.tax_phone_number &&
          tax_state == o.tax_state &&
          tax_zip_code == o.tax_zip_code &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          virtual_office == o.virtual_office &&
          void_checks == o.void_checks &&
          w9_received == o.w9_received &&
          website == o.website &&
          wire_transfer == o.wire_transfer &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payee_id, address, address2, alternate_id, blid, city, contact, country_id, email_address, entry_date, entry_user, fax_country_code, fax_number, federal_id, inactive, latitude, longitude, name, name_for_check, need_1099, pay_to_address, pay_to_address2, pay_to_city, pay_to_country_id, pay_to_state, pay_to_zip, pend_ex_code, pend_flag, phone_country_code, phone_number, state, tax_address, tax_address2, tax_city, tax_contact, tax_fax_number, tax_name, tax_phone_number, tax_state, tax_zip_code, update_date, update_user, virtual_office, void_checks, w9_received, website, wire_transfer, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
