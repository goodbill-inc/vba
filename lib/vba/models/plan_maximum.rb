=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PlanMaximum
    # References the PlanBenefits.Plan_ID value in parent table.
    attr_accessor :plan_id

    # References the PlanBenefits.Benefit_Code value in parent table.
    attr_accessor :benefit_code

    # User-defined Identifier for the Maximum being entered.
    attr_accessor :max_id

    # Specifies the Dental Designation options including Tooth, Quadrant, and Arch.
    attr_accessor :dental_designation

    # Having effective and term dates for the maximums allows for changes throughout the life of the plan. The dates defined reference to the date of service of the claim to determine which maximum applies.
    attr_accessor :effective_date

    # Date when the record was added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Having effective and term dates for the maximums allows for changes throughout the life of the plan. The dates defined reference to the date of service of the claim to determine which maximum applies.
    attr_accessor :expire_date

    # The frequency defined here states how many of the Max Per apply for the Maximum line. This field has the logic of: Current minus Freq. A zero in this field will force the Maximum to calculate within the year, day, etc. defined in the Max Per. A 4 in this field will force the Maximum to calculate within 5 years, days, etc. defined in the Max Per.
    attr_accessor :frequency

    # Description identifying the Plan Maximum.
    attr_accessor :max_description

    # Each maximum needs and Ex Code defined for explanation during adjudication and for Remittance and EOB's. A denial Ex Code can only be used Visit Maximums as payable type Maximums can have partially paid lines. A denial code on at claim detail line that should be partially paid will result in the entire line being denied and the Maximum not being fulfilled.
    attr_accessor :max_ex_code

    # Used for dollar maximums. The Ex Code in field 11 would be an informational code which allows the amount over the max to roll to the next line and apply the Denial Ex Code.
    attr_accessor :max_payable_ex_code

    # Defines the timeframe that applies to the Maximum: Day - per service date. Month - per every 30 or 31 days. Calendar Month - per calendar month in which the services were rendered. Calendar Year - per calendar year in which the services were rendered. Plan Year - per plan year as defined for the Member. Lifetime - per lifetime. Occurrence - per occurrence date on the claim header. Birth Date Year - per year defined by the Member's date of birth. Visit - per service date per Provider.
    attr_accessor :max_per

    # Each Maximum needs to be sequenced in order for adjudication to determine which Maximum line should apply first.
    attr_accessor :max_sequence

    # Indicates the type of Maximum: Visits - per service date. Svc Count - per units on service line. Payable Amount - payable amounts from claims. Co-pay Amount - co-pay amounts from claims. Co-Ins Amount - co-ins amounts from claims. Deductible Amount - deductible amounts from claims. Occurrence Payable - payable amount per occurrence date. Occurrence - per occurrence date on the claim header. Svc Count_Payable - payable amount on the service line divided by the number of units on the claim. This will pay the amount per unit for the number of units that are allowed by the rule.
    attr_accessor :max_type

    # Indicates whether both In and/or Out of Network benefits apply.
    attr_accessor :max_type_net

    # Indicates whether the Maximum applies to the Family or each Member. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :member_family

    # Defines the dollar or count quantity that should apply to the Maximum.
    attr_accessor :quantity

    # Checking this box indicates that this benefit maximum represents a maximum that must be paid out in full regardless of the billed amount on the claim or allowable. A new claim will be created to pay any difference to the Subscriber. Note: The database will apply a default value of `False` for this field if a value is not provided.
    attr_accessor :subscriber_reimbursement

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # No longer in use.
    attr_accessor :visit_criteria

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'plan_id' => :'plan_ID',
        :'benefit_code' => :'benefit_Code',
        :'max_id' => :'max_ID',
        :'dental_designation' => :'dental_Designation',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'expire_date' => :'expire_Date',
        :'frequency' => :'frequency',
        :'max_description' => :'max_Description',
        :'max_ex_code' => :'max_Ex_Code',
        :'max_payable_ex_code' => :'max_Payable_Ex_Code',
        :'max_per' => :'max_Per',
        :'max_sequence' => :'max_Sequence',
        :'max_type' => :'max_Type',
        :'max_type_net' => :'max_Type_Net',
        :'member_family' => :'member_Family',
        :'quantity' => :'quantity',
        :'subscriber_reimbursement' => :'subscriber_Reimbursement',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'visit_criteria' => :'visit_Criteria'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'plan_id' => :'String',
        :'benefit_code' => :'String',
        :'max_id' => :'String',
        :'dental_designation' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'expire_date' => :'Time',
        :'frequency' => :'Integer',
        :'max_description' => :'String',
        :'max_ex_code' => :'String',
        :'max_payable_ex_code' => :'String',
        :'max_per' => :'String',
        :'max_sequence' => :'Integer',
        :'max_type' => :'String',
        :'max_type_net' => :'String',
        :'member_family' => :'String',
        :'quantity' => :'Float',
        :'subscriber_reimbursement' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'visit_criteria' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'dental_designation',
        :'effective_date',
        :'entry_user',
        :'expire_date',
        :'frequency',
        :'max_description',
        :'max_ex_code',
        :'max_payable_ex_code',
        :'max_per',
        :'max_sequence',
        :'max_type',
        :'max_type_net',
        :'quantity',
        :'subscriber_reimbursement',
        :'update_user',
        :'visit_criteria'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PlanMaximum` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PlanMaximum`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      else
        self.benefit_code = nil
      end

      if attributes.key?(:'max_id')
        self.max_id = attributes[:'max_id']
      else
        self.max_id = nil
      end

      if attributes.key?(:'dental_designation')
        self.dental_designation = attributes[:'dental_designation']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'expire_date')
        self.expire_date = attributes[:'expire_date']
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.key?(:'max_description')
        self.max_description = attributes[:'max_description']
      end

      if attributes.key?(:'max_ex_code')
        self.max_ex_code = attributes[:'max_ex_code']
      end

      if attributes.key?(:'max_payable_ex_code')
        self.max_payable_ex_code = attributes[:'max_payable_ex_code']
      end

      if attributes.key?(:'max_per')
        self.max_per = attributes[:'max_per']
      end

      if attributes.key?(:'max_sequence')
        self.max_sequence = attributes[:'max_sequence']
      end

      if attributes.key?(:'max_type')
        self.max_type = attributes[:'max_type']
      end

      if attributes.key?(:'max_type_net')
        self.max_type_net = attributes[:'max_type_net']
      end

      if attributes.key?(:'member_family')
        self.member_family = attributes[:'member_family']
      else
        self.member_family = nil
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'subscriber_reimbursement')
        self.subscriber_reimbursement = attributes[:'subscriber_reimbursement']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'visit_criteria')
        self.visit_criteria = attributes[:'visit_criteria']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if @benefit_code.nil?
        invalid_properties.push('invalid value for "benefit_code", benefit_code cannot be nil.')
      end

      if @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if @benefit_code.to_s.length < 1
        invalid_properties.push('invalid value for "benefit_code", the character length must be great than or equal to 1.')
      end

      if @max_id.nil?
        invalid_properties.push('invalid value for "max_id", max_id cannot be nil.')
      end

      if @max_id.to_s.length > 10
        invalid_properties.push('invalid value for "max_id", the character length must be smaller than or equal to 10.')
      end

      if @max_id.to_s.length < 1
        invalid_properties.push('invalid value for "max_id", the character length must be great than or equal to 1.')
      end

      if !@dental_designation.nil? && @dental_designation.to_s.length > 1
        invalid_properties.push('invalid value for "dental_designation", the character length must be smaller than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@max_description.nil? && @max_description.to_s.length > 512
        invalid_properties.push('invalid value for "max_description", the character length must be smaller than or equal to 512.')
      end

      if !@max_ex_code.nil? && @max_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "max_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@max_payable_ex_code.nil? && @max_payable_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "max_payable_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@max_per.nil? && @max_per.to_s.length > 1
        invalid_properties.push('invalid value for "max_per", the character length must be smaller than or equal to 1.')
      end

      if !@max_type.nil? && @max_type.to_s.length > 1
        invalid_properties.push('invalid value for "max_type", the character length must be smaller than or equal to 1.')
      end

      if !@max_type_net.nil? && @max_type_net.to_s.length > 1
        invalid_properties.push('invalid value for "max_type_net", the character length must be smaller than or equal to 1.')
      end

      if @member_family.nil?
        invalid_properties.push('invalid value for "member_family", member_family cannot be nil.')
      end

      if @member_family.to_s.length > 1
        invalid_properties.push('invalid value for "member_family", the character length must be smaller than or equal to 1.')
      end

      if @member_family.to_s.length < 1
        invalid_properties.push('invalid value for "member_family", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if @benefit_code.nil?
      return false if @benefit_code.to_s.length > 10
      return false if @benefit_code.to_s.length < 1
      return false if @max_id.nil?
      return false if @max_id.to_s.length > 10
      return false if @max_id.to_s.length < 1
      return false if !@dental_designation.nil? && @dental_designation.to_s.length > 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@max_description.nil? && @max_description.to_s.length > 512
      return false if !@max_ex_code.nil? && @max_ex_code.to_s.length > 6
      return false if !@max_payable_ex_code.nil? && @max_payable_ex_code.to_s.length > 6
      return false if !@max_per.nil? && @max_per.to_s.length > 1
      return false if !@max_type.nil? && @max_type.to_s.length > 1
      return false if !@max_type_net.nil? && @max_type_net.to_s.length > 1
      return false if @member_family.nil?
      return false if @member_family.to_s.length > 1
      return false if @member_family.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if benefit_code.nil?
        fail ArgumentError, 'benefit_code cannot be nil'
      end

      if benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      if benefit_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be great than or equal to 1.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] max_id Value to be assigned
    def max_id=(max_id)
      if max_id.nil?
        fail ArgumentError, 'max_id cannot be nil'
      end

      if max_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "max_id", the character length must be smaller than or equal to 10.'
      end

      if max_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "max_id", the character length must be great than or equal to 1.'
      end

      @max_id = max_id
    end

    # Custom attribute writer method with validation
    # @param [Object] dental_designation Value to be assigned
    def dental_designation=(dental_designation)
      if !dental_designation.nil? && dental_designation.to_s.length > 1
        fail ArgumentError, 'invalid value for "dental_designation", the character length must be smaller than or equal to 1.'
      end

      @dental_designation = dental_designation
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] max_description Value to be assigned
    def max_description=(max_description)
      if !max_description.nil? && max_description.to_s.length > 512
        fail ArgumentError, 'invalid value for "max_description", the character length must be smaller than or equal to 512.'
      end

      @max_description = max_description
    end

    # Custom attribute writer method with validation
    # @param [Object] max_ex_code Value to be assigned
    def max_ex_code=(max_ex_code)
      if !max_ex_code.nil? && max_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "max_ex_code", the character length must be smaller than or equal to 6.'
      end

      @max_ex_code = max_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] max_payable_ex_code Value to be assigned
    def max_payable_ex_code=(max_payable_ex_code)
      if !max_payable_ex_code.nil? && max_payable_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "max_payable_ex_code", the character length must be smaller than or equal to 6.'
      end

      @max_payable_ex_code = max_payable_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] max_per Value to be assigned
    def max_per=(max_per)
      if !max_per.nil? && max_per.to_s.length > 1
        fail ArgumentError, 'invalid value for "max_per", the character length must be smaller than or equal to 1.'
      end

      @max_per = max_per
    end

    # Custom attribute writer method with validation
    # @param [Object] max_type Value to be assigned
    def max_type=(max_type)
      if !max_type.nil? && max_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "max_type", the character length must be smaller than or equal to 1.'
      end

      @max_type = max_type
    end

    # Custom attribute writer method with validation
    # @param [Object] max_type_net Value to be assigned
    def max_type_net=(max_type_net)
      if !max_type_net.nil? && max_type_net.to_s.length > 1
        fail ArgumentError, 'invalid value for "max_type_net", the character length must be smaller than or equal to 1.'
      end

      @max_type_net = max_type_net
    end

    # Custom attribute writer method with validation
    # @param [Object] member_family Value to be assigned
    def member_family=(member_family)
      if member_family.nil?
        fail ArgumentError, 'member_family cannot be nil'
      end

      if member_family.to_s.length > 1
        fail ArgumentError, 'invalid value for "member_family", the character length must be smaller than or equal to 1.'
      end

      if member_family.to_s.length < 1
        fail ArgumentError, 'invalid value for "member_family", the character length must be great than or equal to 1.'
      end

      @member_family = member_family
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          plan_id == o.plan_id &&
          benefit_code == o.benefit_code &&
          max_id == o.max_id &&
          dental_designation == o.dental_designation &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          expire_date == o.expire_date &&
          frequency == o.frequency &&
          max_description == o.max_description &&
          max_ex_code == o.max_ex_code &&
          max_payable_ex_code == o.max_payable_ex_code &&
          max_per == o.max_per &&
          max_sequence == o.max_sequence &&
          max_type == o.max_type &&
          max_type_net == o.max_type_net &&
          member_family == o.member_family &&
          quantity == o.quantity &&
          subscriber_reimbursement == o.subscriber_reimbursement &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          visit_criteria == o.visit_criteria
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [plan_id, benefit_code, max_id, dental_designation, effective_date, entry_date, entry_user, expire_date, frequency, max_description, max_ex_code, max_payable_ex_code, max_per, max_sequence, max_type, max_type_net, member_family, quantity, subscriber_reimbursement, update_date, update_user, visit_criteria].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
