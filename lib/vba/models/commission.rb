=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Commission
    # Unique identifier for the Commission table Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :commission_key

    # Unique identifier for the Account
    attr_accessor :account_key

    # Adjustment Amounts to this Commission
    attr_accessor :adjustment_amount

    # Adjustment Amounts Received to this Commission
    attr_accessor :adjustment_amount_received

    # Commission Amount after previous amounts
    attr_accessor :calculated_commission_amount

    # Premium Amount after previous amounts
    attr_accessor :calculated_premium_amount

    # Premium Amount Received after previous amounts
    attr_accessor :calculated_premium_amount_received

    # Check Batch for this Commission
    attr_accessor :check_batch

    # Check for this Commission
    attr_accessor :check_id

    # Decimal value that defines the base rate
    attr_accessor :comm_rate

    # Maximum the rate will be regardless of the calculation
    attr_accessor :comm_rate_max

    # Minimum the rate will be regardless of the calculation
    attr_accessor :comm_rate_min

    # First variable used in calculating the rate based on the type
    attr_accessor :comm_rate_variable1

    # Second variable used in calculating the rate based on the type
    attr_accessor :comm_rate_variable2

    # Third variable used in calculating the rate based on the type
    attr_accessor :comm_rate_variable3

    # Beginning range of the amount used for scaling
    attr_accessor :comm_scale_from

    # Ending range of the amount used for scaling
    attr_accessor :comm_scale_thru

    # Used to detemine what date to begin the range for scaling
    attr_accessor :comm_scale_timeframe

    # Determines what amount the scale is based off of
    attr_accessor :comm_scale_type

    # Beginning range of a number of Days, Months, or Years
    attr_accessor :comm_term_range_from

    # Ending range of a number of Days, Months, or Years
    attr_accessor :comm_term_range_thru

    # Determines if Term Range is Days, Months, or Years
    attr_accessor :comm_term_range_type

    # Unique identifier for the CommissionAgencyRepRate table
    attr_accessor :commission_agency_rep_rate_key

    attr_accessor :commission_agency_rep_key

    attr_accessor :commission_rate_key

    # Unique identifier for the CommissionTransaction table
    attr_accessor :commission_transaction_key

    # Full Commission Amount without adjusting for previous amounts
    attr_accessor :commission_amount

    # Basis of the Commission
    attr_accessor :commission_basis

    # Cycle of the Commission
    attr_accessor :commission_cycle

    # Date the Commission was calculated for
    attr_accessor :commission_date

    # Number of Dependents used for this Commission
    attr_accessor :dependent_count

    # Division for this Commission
    attr_accessor :division_id

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Group for this Commission
    attr_accessor :group_id

    # Unique identifier for the InvoiceAdjustment table
    attr_accessor :invoice_adjustment_key

    # Unique identifier for the PremInvoice table
    attr_accessor :invoice_key

    # Not used
    attr_accessor :license_number

    # Not used
    attr_accessor :license_state

    # Not used
    attr_accessor :license_type

    # Number of Members used for this Commission
    attr_accessor :member_count

    # Not used
    attr_accessor :new_commission_agency_rep_key

    # Not used
    attr_accessor :original_commission_agency_rep_key

    # Unique identifier for the Payor
    attr_accessor :payor_id

    # Plan for this Commission
    attr_accessor :plan_id

    # PremRate for this Commission
    attr_accessor :prem_rate_key

    # Full Premium Amount without adjusting for previous amounts
    attr_accessor :premium_amount

    # Full Premium Amount Received without adjusting for previous amounts
    attr_accessor :premium_amount_received

    # The amount or percentage of the split
    attr_accessor :rep_split

    # Maximum amount of the split
    attr_accessor :rep_split_max

    # Minimum amount of the split
    attr_accessor :rep_split_min

    # Priority of the split
    attr_accessor :rep_split_priority

    # Determines if split is percent or flat amount
    attr_accessor :rep_split_type

    # Number of Subscribers used for this Commission
    attr_accessor :subscriber_count

    # Subscriber for this Commission
    attr_accessor :subscriber_id

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'commission_key' => :'commission_Key',
        :'account_key' => :'account_Key',
        :'adjustment_amount' => :'adjustment_Amount',
        :'adjustment_amount_received' => :'adjustment_Amount_Received',
        :'calculated_commission_amount' => :'calculated_Commission_Amount',
        :'calculated_premium_amount' => :'calculated_Premium_Amount',
        :'calculated_premium_amount_received' => :'calculated_Premium_Amount_Received',
        :'check_batch' => :'check_Batch',
        :'check_id' => :'check_ID',
        :'comm_rate' => :'comm_Rate',
        :'comm_rate_max' => :'comm_Rate_Max',
        :'comm_rate_min' => :'comm_Rate_Min',
        :'comm_rate_variable1' => :'comm_Rate_Variable1',
        :'comm_rate_variable2' => :'comm_Rate_Variable2',
        :'comm_rate_variable3' => :'comm_Rate_Variable3',
        :'comm_scale_from' => :'comm_Scale_From',
        :'comm_scale_thru' => :'comm_Scale_Thru',
        :'comm_scale_timeframe' => :'comm_Scale_Timeframe',
        :'comm_scale_type' => :'comm_Scale_Type',
        :'comm_term_range_from' => :'comm_Term_Range_From',
        :'comm_term_range_thru' => :'comm_Term_Range_Thru',
        :'comm_term_range_type' => :'comm_Term_Range_Type',
        :'commission_agency_rep_rate_key' => :'commissionAgencyRepRate_Key',
        :'commission_agency_rep_key' => :'commissionAgencyRep_Key',
        :'commission_rate_key' => :'commissionRate_Key',
        :'commission_transaction_key' => :'commissionTransaction_Key',
        :'commission_amount' => :'commission_Amount',
        :'commission_basis' => :'commission_Basis',
        :'commission_cycle' => :'commission_Cycle',
        :'commission_date' => :'commission_Date',
        :'dependent_count' => :'dependent_Count',
        :'division_id' => :'division_ID',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'invoice_adjustment_key' => :'invoiceAdjustment_Key',
        :'invoice_key' => :'invoice_Key',
        :'license_number' => :'license_Number',
        :'license_state' => :'license_State',
        :'license_type' => :'license_Type',
        :'member_count' => :'member_Count',
        :'new_commission_agency_rep_key' => :'new_CommissionAgencyRep_Key',
        :'original_commission_agency_rep_key' => :'original_CommissionAgencyRep_Key',
        :'payor_id' => :'payor_ID',
        :'plan_id' => :'plan_ID',
        :'prem_rate_key' => :'premRate_Key',
        :'premium_amount' => :'premium_Amount',
        :'premium_amount_received' => :'premium_Amount_Received',
        :'rep_split' => :'rep_Split',
        :'rep_split_max' => :'rep_Split_Max',
        :'rep_split_min' => :'rep_Split_Min',
        :'rep_split_priority' => :'rep_Split_Priority',
        :'rep_split_type' => :'rep_Split_Type',
        :'subscriber_count' => :'subscriber_Count',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'commission_key' => :'Integer',
        :'account_key' => :'Integer',
        :'adjustment_amount' => :'Float',
        :'adjustment_amount_received' => :'Float',
        :'calculated_commission_amount' => :'Float',
        :'calculated_premium_amount' => :'Float',
        :'calculated_premium_amount_received' => :'Float',
        :'check_batch' => :'Integer',
        :'check_id' => :'Integer',
        :'comm_rate' => :'Float',
        :'comm_rate_max' => :'Float',
        :'comm_rate_min' => :'Float',
        :'comm_rate_variable1' => :'Float',
        :'comm_rate_variable2' => :'Float',
        :'comm_rate_variable3' => :'Float',
        :'comm_scale_from' => :'Float',
        :'comm_scale_thru' => :'Float',
        :'comm_scale_timeframe' => :'String',
        :'comm_scale_type' => :'String',
        :'comm_term_range_from' => :'Integer',
        :'comm_term_range_thru' => :'Integer',
        :'comm_term_range_type' => :'String',
        :'commission_agency_rep_rate_key' => :'Integer',
        :'commission_agency_rep_key' => :'Integer',
        :'commission_rate_key' => :'Integer',
        :'commission_transaction_key' => :'Integer',
        :'commission_amount' => :'Float',
        :'commission_basis' => :'String',
        :'commission_cycle' => :'String',
        :'commission_date' => :'Time',
        :'dependent_count' => :'Integer',
        :'division_id' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'invoice_adjustment_key' => :'Integer',
        :'invoice_key' => :'Integer',
        :'license_number' => :'String',
        :'license_state' => :'String',
        :'license_type' => :'String',
        :'member_count' => :'Integer',
        :'new_commission_agency_rep_key' => :'Integer',
        :'original_commission_agency_rep_key' => :'Integer',
        :'payor_id' => :'String',
        :'plan_id' => :'String',
        :'prem_rate_key' => :'Integer',
        :'premium_amount' => :'Float',
        :'premium_amount_received' => :'Float',
        :'rep_split' => :'Float',
        :'rep_split_max' => :'Float',
        :'rep_split_min' => :'Float',
        :'rep_split_priority' => :'Integer',
        :'rep_split_type' => :'String',
        :'subscriber_count' => :'Integer',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'account_key',
        :'adjustment_amount',
        :'adjustment_amount_received',
        :'calculated_commission_amount',
        :'calculated_premium_amount',
        :'calculated_premium_amount_received',
        :'check_batch',
        :'check_id',
        :'comm_rate',
        :'comm_rate_max',
        :'comm_rate_min',
        :'comm_rate_variable1',
        :'comm_rate_variable2',
        :'comm_rate_variable3',
        :'comm_scale_from',
        :'comm_scale_thru',
        :'comm_scale_timeframe',
        :'comm_scale_type',
        :'comm_term_range_from',
        :'comm_term_range_thru',
        :'comm_term_range_type',
        :'commission_agency_rep_rate_key',
        :'commission_agency_rep_key',
        :'commission_rate_key',
        :'commission_transaction_key',
        :'commission_amount',
        :'commission_basis',
        :'commission_cycle',
        :'commission_date',
        :'dependent_count',
        :'division_id',
        :'entry_user',
        :'group_id',
        :'invoice_adjustment_key',
        :'invoice_key',
        :'license_number',
        :'license_state',
        :'license_type',
        :'member_count',
        :'new_commission_agency_rep_key',
        :'original_commission_agency_rep_key',
        :'payor_id',
        :'plan_id',
        :'prem_rate_key',
        :'premium_amount',
        :'premium_amount_received',
        :'rep_split',
        :'rep_split_max',
        :'rep_split_min',
        :'rep_split_priority',
        :'rep_split_type',
        :'subscriber_count',
        :'subscriber_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Commission` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Commission`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'commission_key')
        self.commission_key = attributes[:'commission_key']
      else
        self.commission_key = nil
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'adjustment_amount')
        self.adjustment_amount = attributes[:'adjustment_amount']
      end

      if attributes.key?(:'adjustment_amount_received')
        self.adjustment_amount_received = attributes[:'adjustment_amount_received']
      end

      if attributes.key?(:'calculated_commission_amount')
        self.calculated_commission_amount = attributes[:'calculated_commission_amount']
      end

      if attributes.key?(:'calculated_premium_amount')
        self.calculated_premium_amount = attributes[:'calculated_premium_amount']
      end

      if attributes.key?(:'calculated_premium_amount_received')
        self.calculated_premium_amount_received = attributes[:'calculated_premium_amount_received']
      end

      if attributes.key?(:'check_batch')
        self.check_batch = attributes[:'check_batch']
      end

      if attributes.key?(:'check_id')
        self.check_id = attributes[:'check_id']
      end

      if attributes.key?(:'comm_rate')
        self.comm_rate = attributes[:'comm_rate']
      end

      if attributes.key?(:'comm_rate_max')
        self.comm_rate_max = attributes[:'comm_rate_max']
      end

      if attributes.key?(:'comm_rate_min')
        self.comm_rate_min = attributes[:'comm_rate_min']
      end

      if attributes.key?(:'comm_rate_variable1')
        self.comm_rate_variable1 = attributes[:'comm_rate_variable1']
      end

      if attributes.key?(:'comm_rate_variable2')
        self.comm_rate_variable2 = attributes[:'comm_rate_variable2']
      end

      if attributes.key?(:'comm_rate_variable3')
        self.comm_rate_variable3 = attributes[:'comm_rate_variable3']
      end

      if attributes.key?(:'comm_scale_from')
        self.comm_scale_from = attributes[:'comm_scale_from']
      end

      if attributes.key?(:'comm_scale_thru')
        self.comm_scale_thru = attributes[:'comm_scale_thru']
      end

      if attributes.key?(:'comm_scale_timeframe')
        self.comm_scale_timeframe = attributes[:'comm_scale_timeframe']
      end

      if attributes.key?(:'comm_scale_type')
        self.comm_scale_type = attributes[:'comm_scale_type']
      end

      if attributes.key?(:'comm_term_range_from')
        self.comm_term_range_from = attributes[:'comm_term_range_from']
      end

      if attributes.key?(:'comm_term_range_thru')
        self.comm_term_range_thru = attributes[:'comm_term_range_thru']
      end

      if attributes.key?(:'comm_term_range_type')
        self.comm_term_range_type = attributes[:'comm_term_range_type']
      end

      if attributes.key?(:'commission_agency_rep_rate_key')
        self.commission_agency_rep_rate_key = attributes[:'commission_agency_rep_rate_key']
      end

      if attributes.key?(:'commission_agency_rep_key')
        self.commission_agency_rep_key = attributes[:'commission_agency_rep_key']
      end

      if attributes.key?(:'commission_rate_key')
        self.commission_rate_key = attributes[:'commission_rate_key']
      end

      if attributes.key?(:'commission_transaction_key')
        self.commission_transaction_key = attributes[:'commission_transaction_key']
      end

      if attributes.key?(:'commission_amount')
        self.commission_amount = attributes[:'commission_amount']
      end

      if attributes.key?(:'commission_basis')
        self.commission_basis = attributes[:'commission_basis']
      end

      if attributes.key?(:'commission_cycle')
        self.commission_cycle = attributes[:'commission_cycle']
      end

      if attributes.key?(:'commission_date')
        self.commission_date = attributes[:'commission_date']
      end

      if attributes.key?(:'dependent_count')
        self.dependent_count = attributes[:'dependent_count']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'invoice_adjustment_key')
        self.invoice_adjustment_key = attributes[:'invoice_adjustment_key']
      end

      if attributes.key?(:'invoice_key')
        self.invoice_key = attributes[:'invoice_key']
      end

      if attributes.key?(:'license_number')
        self.license_number = attributes[:'license_number']
      end

      if attributes.key?(:'license_state')
        self.license_state = attributes[:'license_state']
      end

      if attributes.key?(:'license_type')
        self.license_type = attributes[:'license_type']
      end

      if attributes.key?(:'member_count')
        self.member_count = attributes[:'member_count']
      end

      if attributes.key?(:'new_commission_agency_rep_key')
        self.new_commission_agency_rep_key = attributes[:'new_commission_agency_rep_key']
      end

      if attributes.key?(:'original_commission_agency_rep_key')
        self.original_commission_agency_rep_key = attributes[:'original_commission_agency_rep_key']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      end

      if attributes.key?(:'premium_amount')
        self.premium_amount = attributes[:'premium_amount']
      end

      if attributes.key?(:'premium_amount_received')
        self.premium_amount_received = attributes[:'premium_amount_received']
      end

      if attributes.key?(:'rep_split')
        self.rep_split = attributes[:'rep_split']
      end

      if attributes.key?(:'rep_split_max')
        self.rep_split_max = attributes[:'rep_split_max']
      end

      if attributes.key?(:'rep_split_min')
        self.rep_split_min = attributes[:'rep_split_min']
      end

      if attributes.key?(:'rep_split_priority')
        self.rep_split_priority = attributes[:'rep_split_priority']
      end

      if attributes.key?(:'rep_split_type')
        self.rep_split_type = attributes[:'rep_split_type']
      end

      if attributes.key?(:'subscriber_count')
        self.subscriber_count = attributes[:'subscriber_count']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @commission_key.nil?
        invalid_properties.push('invalid value for "commission_key", commission_key cannot be nil.')
      end

      if !@comm_scale_timeframe.nil? && @comm_scale_timeframe.to_s.length > 16
        invalid_properties.push('invalid value for "comm_scale_timeframe", the character length must be smaller than or equal to 16.')
      end

      if !@comm_scale_type.nil? && @comm_scale_type.to_s.length > 16
        invalid_properties.push('invalid value for "comm_scale_type", the character length must be smaller than or equal to 16.')
      end

      if !@comm_term_range_type.nil? && @comm_term_range_type.to_s.length > 1
        invalid_properties.push('invalid value for "comm_term_range_type", the character length must be smaller than or equal to 1.')
      end

      if !@commission_basis.nil? && @commission_basis.to_s.length > 8
        invalid_properties.push('invalid value for "commission_basis", the character length must be smaller than or equal to 8.')
      end

      if !@commission_cycle.nil? && @commission_cycle.to_s.length > 8
        invalid_properties.push('invalid value for "commission_cycle", the character length must be smaller than or equal to 8.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@license_number.nil? && @license_number.to_s.length > 128
        invalid_properties.push('invalid value for "license_number", the character length must be smaller than or equal to 128.')
      end

      if !@license_state.nil? && @license_state.to_s.length > 2
        invalid_properties.push('invalid value for "license_state", the character length must be smaller than or equal to 2.')
      end

      if !@license_type.nil? && @license_type.to_s.length > 32
        invalid_properties.push('invalid value for "license_type", the character length must be smaller than or equal to 32.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@rep_split_type.nil? && @rep_split_type.to_s.length > 16
        invalid_properties.push('invalid value for "rep_split_type", the character length must be smaller than or equal to 16.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 20
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @commission_key.nil?
      return false if !@comm_scale_timeframe.nil? && @comm_scale_timeframe.to_s.length > 16
      return false if !@comm_scale_type.nil? && @comm_scale_type.to_s.length > 16
      return false if !@comm_term_range_type.nil? && @comm_term_range_type.to_s.length > 1
      return false if !@commission_basis.nil? && @commission_basis.to_s.length > 8
      return false if !@commission_cycle.nil? && @commission_cycle.to_s.length > 8
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@license_number.nil? && @license_number.to_s.length > 128
      return false if !@license_state.nil? && @license_state.to_s.length > 2
      return false if !@license_type.nil? && @license_type.to_s.length > 32
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@rep_split_type.nil? && @rep_split_type.to_s.length > 16
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_key Value to be assigned
    def commission_key=(commission_key)
      if commission_key.nil?
        fail ArgumentError, 'commission_key cannot be nil'
      end

      @commission_key = commission_key
    end

    # Custom attribute writer method with validation
    # @param [Object] comm_scale_timeframe Value to be assigned
    def comm_scale_timeframe=(comm_scale_timeframe)
      if !comm_scale_timeframe.nil? && comm_scale_timeframe.to_s.length > 16
        fail ArgumentError, 'invalid value for "comm_scale_timeframe", the character length must be smaller than or equal to 16.'
      end

      @comm_scale_timeframe = comm_scale_timeframe
    end

    # Custom attribute writer method with validation
    # @param [Object] comm_scale_type Value to be assigned
    def comm_scale_type=(comm_scale_type)
      if !comm_scale_type.nil? && comm_scale_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "comm_scale_type", the character length must be smaller than or equal to 16.'
      end

      @comm_scale_type = comm_scale_type
    end

    # Custom attribute writer method with validation
    # @param [Object] comm_term_range_type Value to be assigned
    def comm_term_range_type=(comm_term_range_type)
      if !comm_term_range_type.nil? && comm_term_range_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "comm_term_range_type", the character length must be smaller than or equal to 1.'
      end

      @comm_term_range_type = comm_term_range_type
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_basis Value to be assigned
    def commission_basis=(commission_basis)
      if !commission_basis.nil? && commission_basis.to_s.length > 8
        fail ArgumentError, 'invalid value for "commission_basis", the character length must be smaller than or equal to 8.'
      end

      @commission_basis = commission_basis
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_cycle Value to be assigned
    def commission_cycle=(commission_cycle)
      if !commission_cycle.nil? && commission_cycle.to_s.length > 8
        fail ArgumentError, 'invalid value for "commission_cycle", the character length must be smaller than or equal to 8.'
      end

      @commission_cycle = commission_cycle
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] license_number Value to be assigned
    def license_number=(license_number)
      if !license_number.nil? && license_number.to_s.length > 128
        fail ArgumentError, 'invalid value for "license_number", the character length must be smaller than or equal to 128.'
      end

      @license_number = license_number
    end

    # Custom attribute writer method with validation
    # @param [Object] license_state Value to be assigned
    def license_state=(license_state)
      if !license_state.nil? && license_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "license_state", the character length must be smaller than or equal to 2.'
      end

      @license_state = license_state
    end

    # Custom attribute writer method with validation
    # @param [Object] license_type Value to be assigned
    def license_type=(license_type)
      if !license_type.nil? && license_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "license_type", the character length must be smaller than or equal to 32.'
      end

      @license_type = license_type
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] rep_split_type Value to be assigned
    def rep_split_type=(rep_split_type)
      if !rep_split_type.nil? && rep_split_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "rep_split_type", the character length must be smaller than or equal to 16.'
      end

      @rep_split_type = rep_split_type
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 20.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          commission_key == o.commission_key &&
          account_key == o.account_key &&
          adjustment_amount == o.adjustment_amount &&
          adjustment_amount_received == o.adjustment_amount_received &&
          calculated_commission_amount == o.calculated_commission_amount &&
          calculated_premium_amount == o.calculated_premium_amount &&
          calculated_premium_amount_received == o.calculated_premium_amount_received &&
          check_batch == o.check_batch &&
          check_id == o.check_id &&
          comm_rate == o.comm_rate &&
          comm_rate_max == o.comm_rate_max &&
          comm_rate_min == o.comm_rate_min &&
          comm_rate_variable1 == o.comm_rate_variable1 &&
          comm_rate_variable2 == o.comm_rate_variable2 &&
          comm_rate_variable3 == o.comm_rate_variable3 &&
          comm_scale_from == o.comm_scale_from &&
          comm_scale_thru == o.comm_scale_thru &&
          comm_scale_timeframe == o.comm_scale_timeframe &&
          comm_scale_type == o.comm_scale_type &&
          comm_term_range_from == o.comm_term_range_from &&
          comm_term_range_thru == o.comm_term_range_thru &&
          comm_term_range_type == o.comm_term_range_type &&
          commission_agency_rep_rate_key == o.commission_agency_rep_rate_key &&
          commission_agency_rep_key == o.commission_agency_rep_key &&
          commission_rate_key == o.commission_rate_key &&
          commission_transaction_key == o.commission_transaction_key &&
          commission_amount == o.commission_amount &&
          commission_basis == o.commission_basis &&
          commission_cycle == o.commission_cycle &&
          commission_date == o.commission_date &&
          dependent_count == o.dependent_count &&
          division_id == o.division_id &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          invoice_adjustment_key == o.invoice_adjustment_key &&
          invoice_key == o.invoice_key &&
          license_number == o.license_number &&
          license_state == o.license_state &&
          license_type == o.license_type &&
          member_count == o.member_count &&
          new_commission_agency_rep_key == o.new_commission_agency_rep_key &&
          original_commission_agency_rep_key == o.original_commission_agency_rep_key &&
          payor_id == o.payor_id &&
          plan_id == o.plan_id &&
          prem_rate_key == o.prem_rate_key &&
          premium_amount == o.premium_amount &&
          premium_amount_received == o.premium_amount_received &&
          rep_split == o.rep_split &&
          rep_split_max == o.rep_split_max &&
          rep_split_min == o.rep_split_min &&
          rep_split_priority == o.rep_split_priority &&
          rep_split_type == o.rep_split_type &&
          subscriber_count == o.subscriber_count &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [commission_key, account_key, adjustment_amount, adjustment_amount_received, calculated_commission_amount, calculated_premium_amount, calculated_premium_amount_received, check_batch, check_id, comm_rate, comm_rate_max, comm_rate_min, comm_rate_variable1, comm_rate_variable2, comm_rate_variable3, comm_scale_from, comm_scale_thru, comm_scale_timeframe, comm_scale_type, comm_term_range_from, comm_term_range_thru, comm_term_range_type, commission_agency_rep_rate_key, commission_agency_rep_key, commission_rate_key, commission_transaction_key, commission_amount, commission_basis, commission_cycle, commission_date, dependent_count, division_id, entry_date, entry_user, group_id, invoice_adjustment_key, invoice_key, license_number, license_state, license_type, member_count, new_commission_agency_rep_key, original_commission_agency_rep_key, payor_id, plan_id, prem_rate_key, premium_amount, premium_amount_received, rep_split, rep_split_max, rep_split_min, rep_split_priority, rep_split_type, subscriber_count, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
