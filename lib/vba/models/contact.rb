=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Contact
    attr_accessor :contact_key

    attr_accessor :address

    attr_accessor :address_2

    attr_accessor :city

    attr_accessor :contact_category

    attr_accessor :contact_image

    attr_accessor :contact_status

    attr_accessor :contact_type

    attr_accessor :contact_web_address

    attr_accessor :country_id

    attr_accessor :county_code

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :middle_name

    attr_accessor :org_name

    attr_accessor :q_r_code_file

    attr_accessor :state

    attr_accessor :title

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'contact_key' => :'contact_Key',
        :'address' => :'address',
        :'address_2' => :'address_2',
        :'city' => :'city',
        :'contact_category' => :'contact_Category',
        :'contact_image' => :'contact_Image',
        :'contact_status' => :'contact_Status',
        :'contact_type' => :'contact_Type',
        :'contact_web_address' => :'contact_Web_Address',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'first_name' => :'first_Name',
        :'last_name' => :'last_Name',
        :'middle_name' => :'middle_Name',
        :'org_name' => :'org_Name',
        :'q_r_code_file' => :'qR_Code_File',
        :'state' => :'state',
        :'title' => :'title',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'contact_key' => :'Integer',
        :'address' => :'String',
        :'address_2' => :'String',
        :'city' => :'String',
        :'contact_category' => :'String',
        :'contact_image' => :'String',
        :'contact_status' => :'String',
        :'contact_type' => :'String',
        :'contact_web_address' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'middle_name' => :'String',
        :'org_name' => :'String',
        :'q_r_code_file' => :'String',
        :'state' => :'String',
        :'title' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address',
        :'address_2',
        :'city',
        :'contact_category',
        :'contact_image',
        :'contact_status',
        :'contact_type',
        :'contact_web_address',
        :'country_id',
        :'county_code',
        :'entry_user',
        :'first_name',
        :'last_name',
        :'middle_name',
        :'org_name',
        :'q_r_code_file',
        :'state',
        :'title',
        :'update_user',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Contact` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Contact`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'contact_key')
        self.contact_key = attributes[:'contact_key']
      else
        self.contact_key = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address_2')
        self.address_2 = attributes[:'address_2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'contact_category')
        self.contact_category = attributes[:'contact_category']
      end

      if attributes.key?(:'contact_image')
        self.contact_image = attributes[:'contact_image']
      end

      if attributes.key?(:'contact_status')
        self.contact_status = attributes[:'contact_status']
      end

      if attributes.key?(:'contact_type')
        self.contact_type = attributes[:'contact_type']
      end

      if attributes.key?(:'contact_web_address')
        self.contact_web_address = attributes[:'contact_web_address']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'org_name')
        self.org_name = attributes[:'org_name']
      end

      if attributes.key?(:'q_r_code_file')
        self.q_r_code_file = attributes[:'q_r_code_file']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @contact_key.nil?
        invalid_properties.push('invalid value for "contact_key", contact_key cannot be nil.')
      end

      if !@address.nil? && @address.to_s.length > 128
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 128.')
      end

      if !@address_2.nil? && @address_2.to_s.length > 128
        invalid_properties.push('invalid value for "address_2", the character length must be smaller than or equal to 128.')
      end

      if !@city.nil? && @city.to_s.length > 64
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 64.')
      end

      if !@contact_category.nil? && @contact_category.to_s.length > 16
        invalid_properties.push('invalid value for "contact_category", the character length must be smaller than or equal to 16.')
      end

      if !@contact_image.nil? && @contact_image.to_s.length > 128
        invalid_properties.push('invalid value for "contact_image", the character length must be smaller than or equal to 128.')
      end

      if !@contact_status.nil? && @contact_status.to_s.length > 16
        invalid_properties.push('invalid value for "contact_status", the character length must be smaller than or equal to 16.')
      end

      if !@contact_type.nil? && @contact_type.to_s.length > 16
        invalid_properties.push('invalid value for "contact_type", the character length must be smaller than or equal to 16.')
      end

      if !@contact_web_address.nil? && @contact_web_address.to_s.length > 256
        invalid_properties.push('invalid value for "contact_web_address", the character length must be smaller than or equal to 256.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 32
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 32.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 32
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 32.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 32
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 32.')
      end

      if !@org_name.nil? && @org_name.to_s.length > 256
        invalid_properties.push('invalid value for "org_name", the character length must be smaller than or equal to 256.')
      end

      if !@q_r_code_file.nil? && @q_r_code_file.to_s.length > 128
        invalid_properties.push('invalid value for "q_r_code_file", the character length must be smaller than or equal to 128.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@title.nil? && @title.to_s.length > 128
        invalid_properties.push('invalid value for "title", the character length must be smaller than or equal to 128.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 16
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 16.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @contact_key.nil?
      return false if !@address.nil? && @address.to_s.length > 128
      return false if !@address_2.nil? && @address_2.to_s.length > 128
      return false if !@city.nil? && @city.to_s.length > 64
      return false if !@contact_category.nil? && @contact_category.to_s.length > 16
      return false if !@contact_image.nil? && @contact_image.to_s.length > 128
      return false if !@contact_status.nil? && @contact_status.to_s.length > 16
      return false if !@contact_type.nil? && @contact_type.to_s.length > 16
      return false if !@contact_web_address.nil? && @contact_web_address.to_s.length > 256
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@first_name.nil? && @first_name.to_s.length > 32
      return false if !@last_name.nil? && @last_name.to_s.length > 32
      return false if !@middle_name.nil? && @middle_name.to_s.length > 32
      return false if !@org_name.nil? && @org_name.to_s.length > 256
      return false if !@q_r_code_file.nil? && @q_r_code_file.to_s.length > 128
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@title.nil? && @title.to_s.length > 128
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip_code.nil? && @zip_code.to_s.length > 16
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_key Value to be assigned
    def contact_key=(contact_key)
      if contact_key.nil?
        fail ArgumentError, 'contact_key cannot be nil'
      end

      @contact_key = contact_key
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 128
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 128.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address_2 Value to be assigned
    def address_2=(address_2)
      if !address_2.nil? && address_2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address_2", the character length must be smaller than or equal to 128.'
      end

      @address_2 = address_2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 64
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 64.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_category Value to be assigned
    def contact_category=(contact_category)
      if !contact_category.nil? && contact_category.to_s.length > 16
        fail ArgumentError, 'invalid value for "contact_category", the character length must be smaller than or equal to 16.'
      end

      @contact_category = contact_category
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_image Value to be assigned
    def contact_image=(contact_image)
      if !contact_image.nil? && contact_image.to_s.length > 128
        fail ArgumentError, 'invalid value for "contact_image", the character length must be smaller than or equal to 128.'
      end

      @contact_image = contact_image
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_status Value to be assigned
    def contact_status=(contact_status)
      if !contact_status.nil? && contact_status.to_s.length > 16
        fail ArgumentError, 'invalid value for "contact_status", the character length must be smaller than or equal to 16.'
      end

      @contact_status = contact_status
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_type Value to be assigned
    def contact_type=(contact_type)
      if !contact_type.nil? && contact_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "contact_type", the character length must be smaller than or equal to 16.'
      end

      @contact_type = contact_type
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_web_address Value to be assigned
    def contact_web_address=(contact_web_address)
      if !contact_web_address.nil? && contact_web_address.to_s.length > 256
        fail ArgumentError, 'invalid value for "contact_web_address", the character length must be smaller than or equal to 256.'
      end

      @contact_web_address = contact_web_address
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 32.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 32.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 32.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method with validation
    # @param [Object] org_name Value to be assigned
    def org_name=(org_name)
      if !org_name.nil? && org_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "org_name", the character length must be smaller than or equal to 256.'
      end

      @org_name = org_name
    end

    # Custom attribute writer method with validation
    # @param [Object] q_r_code_file Value to be assigned
    def q_r_code_file=(q_r_code_file)
      if !q_r_code_file.nil? && q_r_code_file.to_s.length > 128
        fail ArgumentError, 'invalid value for "q_r_code_file", the character length must be smaller than or equal to 128.'
      end

      @q_r_code_file = q_r_code_file
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if !title.nil? && title.to_s.length > 128
        fail ArgumentError, 'invalid value for "title", the character length must be smaller than or equal to 128.'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 16
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 16.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          contact_key == o.contact_key &&
          address == o.address &&
          address_2 == o.address_2 &&
          city == o.city &&
          contact_category == o.contact_category &&
          contact_image == o.contact_image &&
          contact_status == o.contact_status &&
          contact_type == o.contact_type &&
          contact_web_address == o.contact_web_address &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          middle_name == o.middle_name &&
          org_name == o.org_name &&
          q_r_code_file == o.q_r_code_file &&
          state == o.state &&
          title == o.title &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [contact_key, address, address_2, city, contact_category, contact_image, contact_status, contact_type, contact_web_address, country_id, county_code, entry_date, entry_user, first_name, last_name, middle_name, org_name, q_r_code_file, state, title, update_date, update_user, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
