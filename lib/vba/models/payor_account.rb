=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PayorAccount
    # Unique identifier for each Payor and Account combination. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :payor_account_key

    # References the FundingAccount.Account_Key associated with this Payor/Account. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :account_key

    # When a check is printed, the check will default to the selected check stock.
    attr_accessor :check_stock

    # Identifies the currency that is used by the Payor.
    attr_accessor :currency_id

    # Identifies the desired default contact method of the Payor.
    attr_accessor :default_contact_method

    # Identifies the desired default funding format of the Payor.
    attr_accessor :default_funding_format

    # Date when the Payor account becomes/became effective.
    attr_accessor :effective_date

    # Date when the record was added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Allows the User to select an Ex Code that will be applied to any claims associated with the Payor whenever the 'Apply Ex Code' option is selected.
    attr_accessor :ex_code

    # This option is informational only.
    attr_accessor :funding_threshold

    # Displays the currently used logo file for the Payor. This logo can be applied to custom check stock.
    attr_accessor :logo_file

    # References the Payor.Payor_ID associated with this Payor/Account.
    attr_accessor :payor_id

    # This option is informational only.
    attr_accessor :signatures_required

    # Requires that this Payor's claims be paid for with a single check. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :single_check_per_claim

    # Date when the Payor account becomes/became terminated.
    attr_accessor :term_date

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payor_account_key' => :'payor_Account_Key',
        :'account_key' => :'account_Key',
        :'check_stock' => :'check_Stock',
        :'currency_id' => :'currency_ID',
        :'default_contact_method' => :'default_Contact_Method',
        :'default_funding_format' => :'default_Funding_Format',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'funding_threshold' => :'funding_Threshold',
        :'logo_file' => :'logo_File',
        :'payor_id' => :'payor_ID',
        :'signatures_required' => :'signatures_Required',
        :'single_check_per_claim' => :'single_Check_Per_Claim',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payor_account_key' => :'Integer',
        :'account_key' => :'Integer',
        :'check_stock' => :'Integer',
        :'currency_id' => :'String',
        :'default_contact_method' => :'String',
        :'default_funding_format' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'funding_threshold' => :'Integer',
        :'logo_file' => :'String',
        :'payor_id' => :'String',
        :'signatures_required' => :'Integer',
        :'single_check_per_claim' => :'Boolean',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'check_stock',
        :'currency_id',
        :'default_contact_method',
        :'default_funding_format',
        :'effective_date',
        :'entry_user',
        :'ex_code',
        :'funding_threshold',
        :'logo_file',
        :'signatures_required',
        :'term_date',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PayorAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PayorAccount`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payor_account_key')
        self.payor_account_key = attributes[:'payor_account_key']
      else
        self.payor_account_key = nil
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      else
        self.account_key = nil
      end

      if attributes.key?(:'check_stock')
        self.check_stock = attributes[:'check_stock']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'default_contact_method')
        self.default_contact_method = attributes[:'default_contact_method']
      end

      if attributes.key?(:'default_funding_format')
        self.default_funding_format = attributes[:'default_funding_format']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'funding_threshold')
        self.funding_threshold = attributes[:'funding_threshold']
      end

      if attributes.key?(:'logo_file')
        self.logo_file = attributes[:'logo_file']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      else
        self.payor_id = nil
      end

      if attributes.key?(:'signatures_required')
        self.signatures_required = attributes[:'signatures_required']
      end

      if attributes.key?(:'single_check_per_claim')
        self.single_check_per_claim = attributes[:'single_check_per_claim']
      else
        self.single_check_per_claim = nil
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @payor_account_key.nil?
        invalid_properties.push('invalid value for "payor_account_key", payor_account_key cannot be nil.')
      end

      if @account_key.nil?
        invalid_properties.push('invalid value for "account_key", account_key cannot be nil.')
      end

      if !@currency_id.nil? && @currency_id.to_s.length > 16
        invalid_properties.push('invalid value for "currency_id", the character length must be smaller than or equal to 16.')
      end

      if !@default_contact_method.nil? && @default_contact_method.to_s.length > 32
        invalid_properties.push('invalid value for "default_contact_method", the character length must be smaller than or equal to 32.')
      end

      if !@default_funding_format.nil? && @default_funding_format.to_s.length > 32
        invalid_properties.push('invalid value for "default_funding_format", the character length must be smaller than or equal to 32.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@logo_file.nil? && @logo_file.to_s.length > 256
        invalid_properties.push('invalid value for "logo_file", the character length must be smaller than or equal to 256.')
      end

      if @payor_id.nil?
        invalid_properties.push('invalid value for "payor_id", payor_id cannot be nil.')
      end

      if @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if @payor_id.to_s.length < 1
        invalid_properties.push('invalid value for "payor_id", the character length must be great than or equal to 1.')
      end

      if @single_check_per_claim.nil?
        invalid_properties.push('invalid value for "single_check_per_claim", single_check_per_claim cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @payor_account_key.nil?
      return false if @account_key.nil?
      return false if !@currency_id.nil? && @currency_id.to_s.length > 16
      return false if !@default_contact_method.nil? && @default_contact_method.to_s.length > 32
      return false if !@default_funding_format.nil? && @default_funding_format.to_s.length > 32
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@logo_file.nil? && @logo_file.to_s.length > 256
      return false if @payor_id.nil?
      return false if @payor_id.to_s.length > 20
      return false if @payor_id.to_s.length < 1
      return false if @single_check_per_claim.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_account_key Value to be assigned
    def payor_account_key=(payor_account_key)
      if payor_account_key.nil?
        fail ArgumentError, 'payor_account_key cannot be nil'
      end

      @payor_account_key = payor_account_key
    end

    # Custom attribute writer method with validation
    # @param [Object] account_key Value to be assigned
    def account_key=(account_key)
      if account_key.nil?
        fail ArgumentError, 'account_key cannot be nil'
      end

      @account_key = account_key
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_id Value to be assigned
    def currency_id=(currency_id)
      if !currency_id.nil? && currency_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "currency_id", the character length must be smaller than or equal to 16.'
      end

      @currency_id = currency_id
    end

    # Custom attribute writer method with validation
    # @param [Object] default_contact_method Value to be assigned
    def default_contact_method=(default_contact_method)
      if !default_contact_method.nil? && default_contact_method.to_s.length > 32
        fail ArgumentError, 'invalid value for "default_contact_method", the character length must be smaller than or equal to 32.'
      end

      @default_contact_method = default_contact_method
    end

    # Custom attribute writer method with validation
    # @param [Object] default_funding_format Value to be assigned
    def default_funding_format=(default_funding_format)
      if !default_funding_format.nil? && default_funding_format.to_s.length > 32
        fail ArgumentError, 'invalid value for "default_funding_format", the character length must be smaller than or equal to 32.'
      end

      @default_funding_format = default_funding_format
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] logo_file Value to be assigned
    def logo_file=(logo_file)
      if !logo_file.nil? && logo_file.to_s.length > 256
        fail ArgumentError, 'invalid value for "logo_file", the character length must be smaller than or equal to 256.'
      end

      @logo_file = logo_file
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if payor_id.nil?
        fail ArgumentError, 'payor_id cannot be nil'
      end

      if payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      if payor_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "payor_id", the character length must be great than or equal to 1.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] single_check_per_claim Value to be assigned
    def single_check_per_claim=(single_check_per_claim)
      if single_check_per_claim.nil?
        fail ArgumentError, 'single_check_per_claim cannot be nil'
      end

      @single_check_per_claim = single_check_per_claim
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payor_account_key == o.payor_account_key &&
          account_key == o.account_key &&
          check_stock == o.check_stock &&
          currency_id == o.currency_id &&
          default_contact_method == o.default_contact_method &&
          default_funding_format == o.default_funding_format &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          funding_threshold == o.funding_threshold &&
          logo_file == o.logo_file &&
          payor_id == o.payor_id &&
          signatures_required == o.signatures_required &&
          single_check_per_claim == o.single_check_per_claim &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payor_account_key, account_key, check_stock, currency_id, default_contact_method, default_funding_format, effective_date, entry_date, entry_user, ex_code, funding_threshold, logo_file, payor_id, signatures_required, single_check_per_claim, term_date, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
