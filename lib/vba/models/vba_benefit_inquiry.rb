=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBABenefitInquiry
    attr_accessor :subscriber

    attr_accessor :member

    attr_accessor :elig_details

    attr_accessor :member_insurances

    attr_accessor :member_providers

    attr_accessor :member_eligibility_statuses

    attr_accessor :code_values

    attr_accessor :plans

    attr_accessor :covered_benefits

    attr_accessor :plan_ben_auths

    attr_accessor :plan_ben_co_pays

    attr_accessor :plan_ben_co_insurances

    attr_accessor :accumulator_detail

    attr_accessor :plan_max_summary_results

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber' => :'subscriber',
        :'member' => :'member',
        :'elig_details' => :'eligDetails',
        :'member_insurances' => :'memberInsurances',
        :'member_providers' => :'memberProviders',
        :'member_eligibility_statuses' => :'memberEligibilityStatuses',
        :'code_values' => :'codeValues',
        :'plans' => :'plans',
        :'covered_benefits' => :'coveredBenefits',
        :'plan_ben_auths' => :'planBenAuths',
        :'plan_ben_co_pays' => :'planBenCoPays',
        :'plan_ben_co_insurances' => :'planBenCoInsurances',
        :'accumulator_detail' => :'accumulatorDetail',
        :'plan_max_summary_results' => :'planMaxSummaryResults'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber' => :'SubscriberDetail',
        :'member' => :'MemberDetail',
        :'elig_details' => :'Array<EligDetail>',
        :'member_insurances' => :'Array<MemberInsurance>',
        :'member_providers' => :'Array<MemberProvider>',
        :'member_eligibility_statuses' => :'Array<MemberEligibilityStatus>',
        :'code_values' => :'Array<IDCodeValueResultBySource>',
        :'plans' => :'Plans',
        :'covered_benefits' => :'Array<CoveredBenefit>',
        :'plan_ben_auths' => :'Array<PlanBenefitsPlaceAuth>',
        :'plan_ben_co_pays' => :'Array<PlanBenefitsPlaceCoPay>',
        :'plan_ben_co_insurances' => :'Array<PlanBenefitsPlaceCoIns>',
        :'accumulator_detail' => :'Array<AccumulatorDetailResult>',
        :'plan_max_summary_results' => :'Array<GetPlanMaxSummaryResult>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'elig_details',
        :'member_insurances',
        :'member_providers',
        :'member_eligibility_statuses',
        :'code_values',
        :'covered_benefits',
        :'plan_ben_auths',
        :'plan_ben_co_pays',
        :'plan_ben_co_insurances',
        :'accumulator_detail',
        :'plan_max_summary_results'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBABenefitInquiry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBABenefitInquiry`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber')
        self.subscriber = attributes[:'subscriber']
      end

      if attributes.key?(:'member')
        self.member = attributes[:'member']
      end

      if attributes.key?(:'elig_details')
        if (value = attributes[:'elig_details']).is_a?(Array)
          self.elig_details = value
        end
      end

      if attributes.key?(:'member_insurances')
        if (value = attributes[:'member_insurances']).is_a?(Array)
          self.member_insurances = value
        end
      end

      if attributes.key?(:'member_providers')
        if (value = attributes[:'member_providers']).is_a?(Array)
          self.member_providers = value
        end
      end

      if attributes.key?(:'member_eligibility_statuses')
        if (value = attributes[:'member_eligibility_statuses']).is_a?(Array)
          self.member_eligibility_statuses = value
        end
      end

      if attributes.key?(:'code_values')
        if (value = attributes[:'code_values']).is_a?(Array)
          self.code_values = value
        end
      end

      if attributes.key?(:'plans')
        self.plans = attributes[:'plans']
      end

      if attributes.key?(:'covered_benefits')
        if (value = attributes[:'covered_benefits']).is_a?(Array)
          self.covered_benefits = value
        end
      end

      if attributes.key?(:'plan_ben_auths')
        if (value = attributes[:'plan_ben_auths']).is_a?(Array)
          self.plan_ben_auths = value
        end
      end

      if attributes.key?(:'plan_ben_co_pays')
        if (value = attributes[:'plan_ben_co_pays']).is_a?(Array)
          self.plan_ben_co_pays = value
        end
      end

      if attributes.key?(:'plan_ben_co_insurances')
        if (value = attributes[:'plan_ben_co_insurances']).is_a?(Array)
          self.plan_ben_co_insurances = value
        end
      end

      if attributes.key?(:'accumulator_detail')
        if (value = attributes[:'accumulator_detail']).is_a?(Array)
          self.accumulator_detail = value
        end
      end

      if attributes.key?(:'plan_max_summary_results')
        if (value = attributes[:'plan_max_summary_results']).is_a?(Array)
          self.plan_max_summary_results = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber == o.subscriber &&
          member == o.member &&
          elig_details == o.elig_details &&
          member_insurances == o.member_insurances &&
          member_providers == o.member_providers &&
          member_eligibility_statuses == o.member_eligibility_statuses &&
          code_values == o.code_values &&
          plans == o.plans &&
          covered_benefits == o.covered_benefits &&
          plan_ben_auths == o.plan_ben_auths &&
          plan_ben_co_pays == o.plan_ben_co_pays &&
          plan_ben_co_insurances == o.plan_ben_co_insurances &&
          accumulator_detail == o.accumulator_detail &&
          plan_max_summary_results == o.plan_max_summary_results
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber, member, elig_details, member_insurances, member_providers, member_eligibility_statuses, code_values, plans, covered_benefits, plan_ben_auths, plan_ben_co_pays, plan_ben_co_insurances, accumulator_detail, plan_max_summary_results].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
