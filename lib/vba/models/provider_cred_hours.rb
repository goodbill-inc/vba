=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ProviderCredHours
    # Unique identifier for each hours record. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :provider_cred_hours_key

    # Allows the User to create a label or short description for the set of practice/office hours.
    attr_accessor :description

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # End time for Friday's credentialing hours.
    attr_accessor :friday_end

    # Start time for Friday's credentialing hours.
    attr_accessor :friday_start

    # End time for Monday's credentialing hours.
    attr_accessor :monday_end

    # Start time for Monday's credentialing hours.
    attr_accessor :monday_start

    # Identifier of the Payee associated with the credentialing.
    attr_accessor :payee_id

    # Associates these custom hours values with the credentialing process (ProviderCred.ProviderCred_Key) Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :provider_cred_key

    # End time for Saturday's credentialing hours.
    attr_accessor :saturday_end

    # Start time for Saturday's credentialing hours.
    attr_accessor :saturday_start

    # End time for Friday's credentialing hours.
    attr_accessor :sunday_end

    # Start time for Friday's credentialing hours.
    attr_accessor :sunday_start

    # End time for Thursday's credentialing hours.
    attr_accessor :thursday_end

    # Start time for Thursday's credentialing hours.
    attr_accessor :thursday_start

    # End time for Tuesday's credentialing hours.
    attr_accessor :tuesday_end

    # Start time for Tuesday's credentialing hours.
    attr_accessor :tuesday_start

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # End time for Wednesday's credentialing hours.
    attr_accessor :wednesday_end

    # Start time for Wednesday's credentialing hours.
    attr_accessor :wednesday_start

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_cred_hours_key' => :'providerCredHours_Key',
        :'description' => :'description',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'friday_end' => :'friday_End',
        :'friday_start' => :'friday_Start',
        :'monday_end' => :'monday_End',
        :'monday_start' => :'monday_Start',
        :'payee_id' => :'payee_ID',
        :'provider_cred_key' => :'providerCred_Key',
        :'saturday_end' => :'saturday_End',
        :'saturday_start' => :'saturday_Start',
        :'sunday_end' => :'sunday_End',
        :'sunday_start' => :'sunday_Start',
        :'thursday_end' => :'thursday_End',
        :'thursday_start' => :'thursday_Start',
        :'tuesday_end' => :'tuesday_End',
        :'tuesday_start' => :'tuesday_Start',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'wednesday_end' => :'wednesday_End',
        :'wednesday_start' => :'wednesday_Start'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_cred_hours_key' => :'Integer',
        :'description' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'friday_end' => :'Time',
        :'friday_start' => :'Time',
        :'monday_end' => :'Time',
        :'monday_start' => :'Time',
        :'payee_id' => :'String',
        :'provider_cred_key' => :'Integer',
        :'saturday_end' => :'Time',
        :'saturday_start' => :'Time',
        :'sunday_end' => :'Time',
        :'sunday_start' => :'Time',
        :'thursday_end' => :'Time',
        :'thursday_start' => :'Time',
        :'tuesday_end' => :'Time',
        :'tuesday_start' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'wednesday_end' => :'Time',
        :'wednesday_start' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'entry_user',
        :'friday_end',
        :'friday_start',
        :'monday_end',
        :'monday_start',
        :'payee_id',
        :'saturday_end',
        :'saturday_start',
        :'sunday_end',
        :'sunday_start',
        :'thursday_end',
        :'thursday_start',
        :'tuesday_end',
        :'tuesday_start',
        :'update_user',
        :'wednesday_end',
        :'wednesday_start'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ProviderCredHours` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ProviderCredHours`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_cred_hours_key')
        self.provider_cred_hours_key = attributes[:'provider_cred_hours_key']
      else
        self.provider_cred_hours_key = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'friday_end')
        self.friday_end = attributes[:'friday_end']
      end

      if attributes.key?(:'friday_start')
        self.friday_start = attributes[:'friday_start']
      end

      if attributes.key?(:'monday_end')
        self.monday_end = attributes[:'monday_end']
      end

      if attributes.key?(:'monday_start')
        self.monday_start = attributes[:'monday_start']
      end

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'provider_cred_key')
        self.provider_cred_key = attributes[:'provider_cred_key']
      else
        self.provider_cred_key = nil
      end

      if attributes.key?(:'saturday_end')
        self.saturday_end = attributes[:'saturday_end']
      end

      if attributes.key?(:'saturday_start')
        self.saturday_start = attributes[:'saturday_start']
      end

      if attributes.key?(:'sunday_end')
        self.sunday_end = attributes[:'sunday_end']
      end

      if attributes.key?(:'sunday_start')
        self.sunday_start = attributes[:'sunday_start']
      end

      if attributes.key?(:'thursday_end')
        self.thursday_end = attributes[:'thursday_end']
      end

      if attributes.key?(:'thursday_start')
        self.thursday_start = attributes[:'thursday_start']
      end

      if attributes.key?(:'tuesday_end')
        self.tuesday_end = attributes[:'tuesday_end']
      end

      if attributes.key?(:'tuesday_start')
        self.tuesday_start = attributes[:'tuesday_start']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'wednesday_end')
        self.wednesday_end = attributes[:'wednesday_end']
      end

      if attributes.key?(:'wednesday_start')
        self.wednesday_start = attributes[:'wednesday_start']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @provider_cred_hours_key.nil?
        invalid_properties.push('invalid value for "provider_cred_hours_key", provider_cred_hours_key cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 128
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@payee_id.nil? && @payee_id.to_s.length > 20
        invalid_properties.push('invalid value for "payee_id", the character length must be smaller than or equal to 20.')
      end

      if @provider_cred_key.nil?
        invalid_properties.push('invalid value for "provider_cred_key", provider_cred_key cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @provider_cred_hours_key.nil?
      return false if !@description.nil? && @description.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@payee_id.nil? && @payee_id.to_s.length > 20
      return false if @provider_cred_key.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_cred_hours_key Value to be assigned
    def provider_cred_hours_key=(provider_cred_hours_key)
      if provider_cred_hours_key.nil?
        fail ArgumentError, 'provider_cred_hours_key cannot be nil'
      end

      @provider_cred_hours_key = provider_cred_hours_key
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 128
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 128.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] payee_id Value to be assigned
    def payee_id=(payee_id)
      if !payee_id.nil? && payee_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payee_id", the character length must be smaller than or equal to 20.'
      end

      @payee_id = payee_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_cred_key Value to be assigned
    def provider_cred_key=(provider_cred_key)
      if provider_cred_key.nil?
        fail ArgumentError, 'provider_cred_key cannot be nil'
      end

      @provider_cred_key = provider_cred_key
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_cred_hours_key == o.provider_cred_hours_key &&
          description == o.description &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          friday_end == o.friday_end &&
          friday_start == o.friday_start &&
          monday_end == o.monday_end &&
          monday_start == o.monday_start &&
          payee_id == o.payee_id &&
          provider_cred_key == o.provider_cred_key &&
          saturday_end == o.saturday_end &&
          saturday_start == o.saturday_start &&
          sunday_end == o.sunday_end &&
          sunday_start == o.sunday_start &&
          thursday_end == o.thursday_end &&
          thursday_start == o.thursday_start &&
          tuesday_end == o.tuesday_end &&
          tuesday_start == o.tuesday_start &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          wednesday_end == o.wednesday_end &&
          wednesday_start == o.wednesday_start
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_cred_hours_key, description, entry_date, entry_user, friday_end, friday_start, monday_end, monday_start, payee_id, provider_cred_key, saturday_end, saturday_start, sunday_end, sunday_start, thursday_end, thursday_start, tuesday_end, tuesday_start, update_date, update_user, wednesday_end, wednesday_start].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
