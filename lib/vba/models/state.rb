=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class State
    # Two letter abbeviation for the state
    attr_accessor :state_abbrev

    # Flag indicating the identifier refers to all states
    attr_accessor :all_states

    # Flag indicating if state tax should be applied to calculations Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :apply_state_tax

    # Flag indicating if ACH/EDI prompt pay frequency is based on business days Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :calc_interest_ach_business_days

    # Number of units used for ACH/EDI prompt pay frequency
    attr_accessor :calc_interest_ach_prompt_pay_freq

    # Units used for ACH/EDI prompt pay frequency, either days, months or years
    attr_accessor :calc_interest_ach_prompt_pay_type

    # Flag indicating if manual prompt pay frequency is based on business days Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :calc_interest_business_days

    # Number of units used for manual prompt pay frequency
    attr_accessor :calc_interest_prompt_pay_freq

    # Units used for manual prompt pay frequency, either days, months or years
    attr_accessor :calc_interest_prompt_pay_type

    # Amount of the default percentage election that should be applied to calculations Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :default_percentage_election

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Full name of the state
    attr_accessor :state_name

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Flag indicating if the default percentage election should be applied to calculations Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_percentage_election

    # Flag to control whether to use the State Interest entries for a specific state instead of State Details. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_state_interest_settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'state_abbrev' => :'state_Abbrev',
        :'all_states' => :'all_States',
        :'apply_state_tax' => :'apply_State_Tax',
        :'calc_interest_ach_business_days' => :'calc_Interest_ACH_Business_Days',
        :'calc_interest_ach_prompt_pay_freq' => :'calc_Interest_ACH_Prompt_Pay_Freq',
        :'calc_interest_ach_prompt_pay_type' => :'calc_Interest_ACH_Prompt_Pay_Type',
        :'calc_interest_business_days' => :'calc_Interest_Business_Days',
        :'calc_interest_prompt_pay_freq' => :'calc_Interest_Prompt_Pay_Freq',
        :'calc_interest_prompt_pay_type' => :'calc_Interest_Prompt_Pay_Type',
        :'default_percentage_election' => :'default_Percentage_Election',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'state_name' => :'state_Name',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_percentage_election' => :'use_Percentage_Election',
        :'use_state_interest_settings' => :'use_StateInterest_Settings'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'state_abbrev' => :'String',
        :'all_states' => :'String',
        :'apply_state_tax' => :'Boolean',
        :'calc_interest_ach_business_days' => :'Boolean',
        :'calc_interest_ach_prompt_pay_freq' => :'Integer',
        :'calc_interest_ach_prompt_pay_type' => :'String',
        :'calc_interest_business_days' => :'Boolean',
        :'calc_interest_prompt_pay_freq' => :'Integer',
        :'calc_interest_prompt_pay_type' => :'String',
        :'default_percentage_election' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'state_name' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_percentage_election' => :'Boolean',
        :'use_state_interest_settings' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'all_states',
        :'calc_interest_ach_prompt_pay_freq',
        :'calc_interest_ach_prompt_pay_type',
        :'calc_interest_prompt_pay_freq',
        :'calc_interest_prompt_pay_type',
        :'entry_user',
        :'state_name',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::State` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::State`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'state_abbrev')
        self.state_abbrev = attributes[:'state_abbrev']
      else
        self.state_abbrev = nil
      end

      if attributes.key?(:'all_states')
        self.all_states = attributes[:'all_states']
      end

      if attributes.key?(:'apply_state_tax')
        self.apply_state_tax = attributes[:'apply_state_tax']
      else
        self.apply_state_tax = nil
      end

      if attributes.key?(:'calc_interest_ach_business_days')
        self.calc_interest_ach_business_days = attributes[:'calc_interest_ach_business_days']
      else
        self.calc_interest_ach_business_days = nil
      end

      if attributes.key?(:'calc_interest_ach_prompt_pay_freq')
        self.calc_interest_ach_prompt_pay_freq = attributes[:'calc_interest_ach_prompt_pay_freq']
      end

      if attributes.key?(:'calc_interest_ach_prompt_pay_type')
        self.calc_interest_ach_prompt_pay_type = attributes[:'calc_interest_ach_prompt_pay_type']
      end

      if attributes.key?(:'calc_interest_business_days')
        self.calc_interest_business_days = attributes[:'calc_interest_business_days']
      else
        self.calc_interest_business_days = nil
      end

      if attributes.key?(:'calc_interest_prompt_pay_freq')
        self.calc_interest_prompt_pay_freq = attributes[:'calc_interest_prompt_pay_freq']
      end

      if attributes.key?(:'calc_interest_prompt_pay_type')
        self.calc_interest_prompt_pay_type = attributes[:'calc_interest_prompt_pay_type']
      end

      if attributes.key?(:'default_percentage_election')
        self.default_percentage_election = attributes[:'default_percentage_election']
      else
        self.default_percentage_election = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'state_name')
        self.state_name = attributes[:'state_name']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_percentage_election')
        self.use_percentage_election = attributes[:'use_percentage_election']
      else
        self.use_percentage_election = nil
      end

      if attributes.key?(:'use_state_interest_settings')
        self.use_state_interest_settings = attributes[:'use_state_interest_settings']
      else
        self.use_state_interest_settings = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @state_abbrev.nil?
        invalid_properties.push('invalid value for "state_abbrev", state_abbrev cannot be nil.')
      end

      if @state_abbrev.to_s.length > 2
        invalid_properties.push('invalid value for "state_abbrev", the character length must be smaller than or equal to 2.')
      end

      if @state_abbrev.to_s.length < 1
        invalid_properties.push('invalid value for "state_abbrev", the character length must be great than or equal to 1.')
      end

      if !@all_states.nil? && @all_states.to_s.length > 1
        invalid_properties.push('invalid value for "all_states", the character length must be smaller than or equal to 1.')
      end

      if @apply_state_tax.nil?
        invalid_properties.push('invalid value for "apply_state_tax", apply_state_tax cannot be nil.')
      end

      if @calc_interest_ach_business_days.nil?
        invalid_properties.push('invalid value for "calc_interest_ach_business_days", calc_interest_ach_business_days cannot be nil.')
      end

      if !@calc_interest_ach_prompt_pay_type.nil? && @calc_interest_ach_prompt_pay_type.to_s.length > 1
        invalid_properties.push('invalid value for "calc_interest_ach_prompt_pay_type", the character length must be smaller than or equal to 1.')
      end

      if @calc_interest_business_days.nil?
        invalid_properties.push('invalid value for "calc_interest_business_days", calc_interest_business_days cannot be nil.')
      end

      if !@calc_interest_prompt_pay_type.nil? && @calc_interest_prompt_pay_type.to_s.length > 1
        invalid_properties.push('invalid value for "calc_interest_prompt_pay_type", the character length must be smaller than or equal to 1.')
      end

      if @default_percentage_election.nil?
        invalid_properties.push('invalid value for "default_percentage_election", default_percentage_election cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@state_name.nil? && @state_name.to_s.length > 25
        invalid_properties.push('invalid value for "state_name", the character length must be smaller than or equal to 25.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_percentage_election.nil?
        invalid_properties.push('invalid value for "use_percentage_election", use_percentage_election cannot be nil.')
      end

      if @use_state_interest_settings.nil?
        invalid_properties.push('invalid value for "use_state_interest_settings", use_state_interest_settings cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @state_abbrev.nil?
      return false if @state_abbrev.to_s.length > 2
      return false if @state_abbrev.to_s.length < 1
      return false if !@all_states.nil? && @all_states.to_s.length > 1
      return false if @apply_state_tax.nil?
      return false if @calc_interest_ach_business_days.nil?
      return false if !@calc_interest_ach_prompt_pay_type.nil? && @calc_interest_ach_prompt_pay_type.to_s.length > 1
      return false if @calc_interest_business_days.nil?
      return false if !@calc_interest_prompt_pay_type.nil? && @calc_interest_prompt_pay_type.to_s.length > 1
      return false if @default_percentage_election.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@state_name.nil? && @state_name.to_s.length > 25
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_percentage_election.nil?
      return false if @use_state_interest_settings.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] state_abbrev Value to be assigned
    def state_abbrev=(state_abbrev)
      if state_abbrev.nil?
        fail ArgumentError, 'state_abbrev cannot be nil'
      end

      if state_abbrev.to_s.length > 2
        fail ArgumentError, 'invalid value for "state_abbrev", the character length must be smaller than or equal to 2.'
      end

      if state_abbrev.to_s.length < 1
        fail ArgumentError, 'invalid value for "state_abbrev", the character length must be great than or equal to 1.'
      end

      @state_abbrev = state_abbrev
    end

    # Custom attribute writer method with validation
    # @param [Object] all_states Value to be assigned
    def all_states=(all_states)
      if !all_states.nil? && all_states.to_s.length > 1
        fail ArgumentError, 'invalid value for "all_states", the character length must be smaller than or equal to 1.'
      end

      @all_states = all_states
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_state_tax Value to be assigned
    def apply_state_tax=(apply_state_tax)
      if apply_state_tax.nil?
        fail ArgumentError, 'apply_state_tax cannot be nil'
      end

      @apply_state_tax = apply_state_tax
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach_business_days Value to be assigned
    def calc_interest_ach_business_days=(calc_interest_ach_business_days)
      if calc_interest_ach_business_days.nil?
        fail ArgumentError, 'calc_interest_ach_business_days cannot be nil'
      end

      @calc_interest_ach_business_days = calc_interest_ach_business_days
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach_prompt_pay_type Value to be assigned
    def calc_interest_ach_prompt_pay_type=(calc_interest_ach_prompt_pay_type)
      if !calc_interest_ach_prompt_pay_type.nil? && calc_interest_ach_prompt_pay_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "calc_interest_ach_prompt_pay_type", the character length must be smaller than or equal to 1.'
      end

      @calc_interest_ach_prompt_pay_type = calc_interest_ach_prompt_pay_type
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_business_days Value to be assigned
    def calc_interest_business_days=(calc_interest_business_days)
      if calc_interest_business_days.nil?
        fail ArgumentError, 'calc_interest_business_days cannot be nil'
      end

      @calc_interest_business_days = calc_interest_business_days
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_prompt_pay_type Value to be assigned
    def calc_interest_prompt_pay_type=(calc_interest_prompt_pay_type)
      if !calc_interest_prompt_pay_type.nil? && calc_interest_prompt_pay_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "calc_interest_prompt_pay_type", the character length must be smaller than or equal to 1.'
      end

      @calc_interest_prompt_pay_type = calc_interest_prompt_pay_type
    end

    # Custom attribute writer method with validation
    # @param [Object] default_percentage_election Value to be assigned
    def default_percentage_election=(default_percentage_election)
      if default_percentage_election.nil?
        fail ArgumentError, 'default_percentage_election cannot be nil'
      end

      @default_percentage_election = default_percentage_election
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] state_name Value to be assigned
    def state_name=(state_name)
      if !state_name.nil? && state_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "state_name", the character length must be smaller than or equal to 25.'
      end

      @state_name = state_name
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_percentage_election Value to be assigned
    def use_percentage_election=(use_percentage_election)
      if use_percentage_election.nil?
        fail ArgumentError, 'use_percentage_election cannot be nil'
      end

      @use_percentage_election = use_percentage_election
    end

    # Custom attribute writer method with validation
    # @param [Object] use_state_interest_settings Value to be assigned
    def use_state_interest_settings=(use_state_interest_settings)
      if use_state_interest_settings.nil?
        fail ArgumentError, 'use_state_interest_settings cannot be nil'
      end

      @use_state_interest_settings = use_state_interest_settings
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          state_abbrev == o.state_abbrev &&
          all_states == o.all_states &&
          apply_state_tax == o.apply_state_tax &&
          calc_interest_ach_business_days == o.calc_interest_ach_business_days &&
          calc_interest_ach_prompt_pay_freq == o.calc_interest_ach_prompt_pay_freq &&
          calc_interest_ach_prompt_pay_type == o.calc_interest_ach_prompt_pay_type &&
          calc_interest_business_days == o.calc_interest_business_days &&
          calc_interest_prompt_pay_freq == o.calc_interest_prompt_pay_freq &&
          calc_interest_prompt_pay_type == o.calc_interest_prompt_pay_type &&
          default_percentage_election == o.default_percentage_election &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          state_name == o.state_name &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_percentage_election == o.use_percentage_election &&
          use_state_interest_settings == o.use_state_interest_settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [state_abbrev, all_states, apply_state_tax, calc_interest_ach_business_days, calc_interest_ach_prompt_pay_freq, calc_interest_ach_prompt_pay_type, calc_interest_business_days, calc_interest_prompt_pay_freq, calc_interest_prompt_pay_type, default_percentage_election, entry_date, entry_user, state_name, update_date, update_user, use_percentage_election, use_state_interest_settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
