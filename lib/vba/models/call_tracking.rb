=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CallTracking
    # ID assigned to the Call.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :call_key

    # Authorization number of the claim associated with the call.
    attr_accessor :auth_number

    # Identifies the location where the call was received. 'Call Destinations' are configured within 'Call Tracking Configuration'.
    attr_accessor :call_destination

    # Identifies the length of the call.
    attr_accessor :call_length

    # Identifies the date and time when the call was started.
    attr_accessor :call_start

    # Identifies the status of the call. 'Call Statuses' are configured within 'Call Tracking Configuration'.
    attr_accessor :call_status

    # Identifies the type of call. This usually identifies the subject or purpose of the call. 'Call Types' are configured within 'Call Tracking Configuration'.
    attr_accessor :call_type

    # Identifies the type of Caller. 'Caller Types' are configured within 'Call Tracking Configuration'.
    attr_accessor :caller_type

    # Indicates that the associated Caller may be found within the 'Contacts Folder'.
    attr_accessor :contacts_list

    # Email address of the Caller.
    attr_accessor :email_address

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Extension of the Caller's phone number.
    attr_accessor :extension

    # Fax number of the Caller.
    attr_accessor :fax_number

    # First name of the Caller.
    attr_accessor :first_name

    # Text area where the User may enter any relevant notes regarding the call.
    attr_accessor :general_notes

    # Last name of the Caller.
    attr_accessor :last_name

    # Organization that the Caller belongs to.
    attr_accessor :organization

    # Country code of the Caller's phone number.
    attr_accessor :phone_country_code

    # Phone number of the Caller.
    attr_accessor :phone_number

    # ID of the Provider associated with the call.
    attr_accessor :provider_id

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'call_key' => :'call_Key',
        :'auth_number' => :'auth_Number',
        :'call_destination' => :'call_Destination',
        :'call_length' => :'call_Length',
        :'call_start' => :'call_Start',
        :'call_status' => :'call_Status',
        :'call_type' => :'call_Type',
        :'caller_type' => :'caller_Type',
        :'contacts_list' => :'contacts_List',
        :'email_address' => :'email_Address',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'extension' => :'extension',
        :'fax_number' => :'fax_Number',
        :'first_name' => :'first_Name',
        :'general_notes' => :'general_Notes',
        :'last_name' => :'last_Name',
        :'organization' => :'organization',
        :'phone_country_code' => :'phone_Country_Code',
        :'phone_number' => :'phone_Number',
        :'provider_id' => :'provider_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'call_key' => :'Integer',
        :'auth_number' => :'String',
        :'call_destination' => :'String',
        :'call_length' => :'Integer',
        :'call_start' => :'Time',
        :'call_status' => :'String',
        :'call_type' => :'String',
        :'caller_type' => :'String',
        :'contacts_list' => :'Boolean',
        :'email_address' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'extension' => :'String',
        :'fax_number' => :'String',
        :'first_name' => :'String',
        :'general_notes' => :'String',
        :'last_name' => :'String',
        :'organization' => :'String',
        :'phone_country_code' => :'String',
        :'phone_number' => :'String',
        :'provider_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'auth_number',
        :'call_destination',
        :'call_length',
        :'call_start',
        :'call_status',
        :'call_type',
        :'caller_type',
        :'contacts_list',
        :'email_address',
        :'entry_user',
        :'extension',
        :'fax_number',
        :'first_name',
        :'general_notes',
        :'last_name',
        :'organization',
        :'phone_country_code',
        :'phone_number',
        :'provider_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CallTracking` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CallTracking`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'call_key')
        self.call_key = attributes[:'call_key']
      else
        self.call_key = nil
      end

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      end

      if attributes.key?(:'call_destination')
        self.call_destination = attributes[:'call_destination']
      end

      if attributes.key?(:'call_length')
        self.call_length = attributes[:'call_length']
      end

      if attributes.key?(:'call_start')
        self.call_start = attributes[:'call_start']
      end

      if attributes.key?(:'call_status')
        self.call_status = attributes[:'call_status']
      end

      if attributes.key?(:'call_type')
        self.call_type = attributes[:'call_type']
      end

      if attributes.key?(:'caller_type')
        self.caller_type = attributes[:'caller_type']
      end

      if attributes.key?(:'contacts_list')
        self.contacts_list = attributes[:'contacts_list']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.key?(:'fax_number')
        self.fax_number = attributes[:'fax_number']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'general_notes')
        self.general_notes = attributes[:'general_notes']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @call_key.nil?
        invalid_properties.push('invalid value for "call_key", call_key cannot be nil.')
      end

      if !@auth_number.nil? && @auth_number.to_s.length > 20
        invalid_properties.push('invalid value for "auth_number", the character length must be smaller than or equal to 20.')
      end

      if !@call_destination.nil? && @call_destination.to_s.length > 32
        invalid_properties.push('invalid value for "call_destination", the character length must be smaller than or equal to 32.')
      end

      if !@call_status.nil? && @call_status.to_s.length > 32
        invalid_properties.push('invalid value for "call_status", the character length must be smaller than or equal to 32.')
      end

      if !@call_type.nil? && @call_type.to_s.length > 32
        invalid_properties.push('invalid value for "call_type", the character length must be smaller than or equal to 32.')
      end

      if !@caller_type.nil? && @caller_type.to_s.length > 32
        invalid_properties.push('invalid value for "caller_type", the character length must be smaller than or equal to 32.')
      end

      if !@email_address.nil? && @email_address.to_s.length > 128
        invalid_properties.push('invalid value for "email_address", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@extension.nil? && @extension.to_s.length > 10
        invalid_properties.push('invalid value for "extension", the character length must be smaller than or equal to 10.')
      end

      if !@fax_number.nil? && @fax_number.to_s.length > 20
        invalid_properties.push('invalid value for "fax_number", the character length must be smaller than or equal to 20.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 64
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 64.')
      end

      if !@general_notes.nil? && @general_notes.to_s.length > 1000
        invalid_properties.push('invalid value for "general_notes", the character length must be smaller than or equal to 1000.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 64
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 64.')
      end

      if !@organization.nil? && @organization.to_s.length > 128
        invalid_properties.push('invalid value for "organization", the character length must be smaller than or equal to 128.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length > 20
        invalid_properties.push('invalid value for "phone_number", the character length must be smaller than or equal to 20.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @call_key.nil?
      return false if !@auth_number.nil? && @auth_number.to_s.length > 20
      return false if !@call_destination.nil? && @call_destination.to_s.length > 32
      return false if !@call_status.nil? && @call_status.to_s.length > 32
      return false if !@call_type.nil? && @call_type.to_s.length > 32
      return false if !@caller_type.nil? && @caller_type.to_s.length > 32
      return false if !@email_address.nil? && @email_address.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@extension.nil? && @extension.to_s.length > 10
      return false if !@fax_number.nil? && @fax_number.to_s.length > 20
      return false if !@first_name.nil? && @first_name.to_s.length > 64
      return false if !@general_notes.nil? && @general_notes.to_s.length > 1000
      return false if !@last_name.nil? && @last_name.to_s.length > 64
      return false if !@organization.nil? && @organization.to_s.length > 128
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if !@phone_number.nil? && @phone_number.to_s.length > 20
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] call_key Value to be assigned
    def call_key=(call_key)
      if call_key.nil?
        fail ArgumentError, 'call_key cannot be nil'
      end

      @call_key = call_key
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if !auth_number.nil? && auth_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "auth_number", the character length must be smaller than or equal to 20.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] call_destination Value to be assigned
    def call_destination=(call_destination)
      if !call_destination.nil? && call_destination.to_s.length > 32
        fail ArgumentError, 'invalid value for "call_destination", the character length must be smaller than or equal to 32.'
      end

      @call_destination = call_destination
    end

    # Custom attribute writer method with validation
    # @param [Object] call_status Value to be assigned
    def call_status=(call_status)
      if !call_status.nil? && call_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "call_status", the character length must be smaller than or equal to 32.'
      end

      @call_status = call_status
    end

    # Custom attribute writer method with validation
    # @param [Object] call_type Value to be assigned
    def call_type=(call_type)
      if !call_type.nil? && call_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "call_type", the character length must be smaller than or equal to 32.'
      end

      @call_type = call_type
    end

    # Custom attribute writer method with validation
    # @param [Object] caller_type Value to be assigned
    def caller_type=(caller_type)
      if !caller_type.nil? && caller_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "caller_type", the character length must be smaller than or equal to 32.'
      end

      @caller_type = caller_type
    end

    # Custom attribute writer method with validation
    # @param [Object] email_address Value to be assigned
    def email_address=(email_address)
      if !email_address.nil? && email_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "email_address", the character length must be smaller than or equal to 128.'
      end

      @email_address = email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] extension Value to be assigned
    def extension=(extension)
      if !extension.nil? && extension.to_s.length > 10
        fail ArgumentError, 'invalid value for "extension", the character length must be smaller than or equal to 10.'
      end

      @extension = extension
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_number Value to be assigned
    def fax_number=(fax_number)
      if !fax_number.nil? && fax_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax_number", the character length must be smaller than or equal to 20.'
      end

      @fax_number = fax_number
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 64.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] general_notes Value to be assigned
    def general_notes=(general_notes)
      if !general_notes.nil? && general_notes.to_s.length > 1000
        fail ArgumentError, 'invalid value for "general_notes", the character length must be smaller than or equal to 1000.'
      end

      @general_notes = general_notes
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 64.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] organization Value to be assigned
    def organization=(organization)
      if !organization.nil? && organization.to_s.length > 128
        fail ArgumentError, 'invalid value for "organization", the character length must be smaller than or equal to 128.'
      end

      @organization = organization
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone_number", the character length must be smaller than or equal to 20.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          call_key == o.call_key &&
          auth_number == o.auth_number &&
          call_destination == o.call_destination &&
          call_length == o.call_length &&
          call_start == o.call_start &&
          call_status == o.call_status &&
          call_type == o.call_type &&
          caller_type == o.caller_type &&
          contacts_list == o.contacts_list &&
          email_address == o.email_address &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          extension == o.extension &&
          fax_number == o.fax_number &&
          first_name == o.first_name &&
          general_notes == o.general_notes &&
          last_name == o.last_name &&
          organization == o.organization &&
          phone_country_code == o.phone_country_code &&
          phone_number == o.phone_number &&
          provider_id == o.provider_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [call_key, auth_number, call_destination, call_length, call_start, call_status, call_type, caller_type, contacts_list, email_address, entry_date, entry_user, extension, fax_number, first_name, general_notes, last_name, organization, phone_country_code, phone_number, provider_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
