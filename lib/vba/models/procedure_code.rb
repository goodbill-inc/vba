=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ProcedureCode
    # Code assigned to the associated procedure.
    attr_accessor :procedure_code

    # Indicates how age is defined within the age range. 'End of month' means that the age will be updated when the birth ends. 'Birth Date' means that the age will be updated on the date of birth.
    attr_accessor :age_range_type

    # Indicates that the associated procedure is limited to a certain age range. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :age_restricted

    # Identifies how the age range is defined.
    attr_accessor :age_type

    # Indicates the procedure category that the associated procedure belongs to.
    attr_accessor :category_id

    # Text field where the User may enter a short description of the associated procedure.
    attr_accessor :description

    # Date when the associated procedure code becomes/became effective.
    attr_accessor :effective_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Identifies the starting age for the acceptable age range for the associated procedure code.
    attr_accessor :from_age

    # Indicates a required gender for the associated procedure code.
    attr_accessor :gender

    # Text field where the User may enter a longer and more detailed description of the associated procedure.
    attr_accessor :long_description

    # Network Price associated with the procedure code
    attr_accessor :network_price

    # Indicates the Ex Code that will be applied to claims that contain the associated procedure.
    attr_accessor :pend_ex_code

    # Allows the User to choose an Ex Code that will be applied to claims that contain the associated procedure.
    attr_accessor :pend_flag

    # Identifies the group of procedures that the associated procedure belongs to.
    attr_accessor :procedure_group

    # Identifies a procedure code as a revenue code.
    attr_accessor :qualifier

    # Indicates that an auth will be required when the associated procedure is used within a claim. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :require_auth

    # Date when the associated procedure code expires/expired.
    attr_accessor :term_date

    # Identifies the ending age for the acceptable age range for the associated procedure code.
    attr_accessor :thru_age

    # Identifier specifying the treatment type associated with the procedure code
    attr_accessor :treatment_type

    # Usual and Customary Price associated with the procedure code
    attr_accessor :uc_r_price

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'procedure_code' => :'procedure_Code',
        :'age_range_type' => :'age_Range_Type',
        :'age_restricted' => :'age_Restricted',
        :'age_type' => :'age_Type',
        :'category_id' => :'category_ID',
        :'description' => :'description',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'from_age' => :'from_Age',
        :'gender' => :'gender',
        :'long_description' => :'long_Description',
        :'network_price' => :'network_Price',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'procedure_group' => :'procedure_Group',
        :'qualifier' => :'qualifier',
        :'require_auth' => :'require_Auth',
        :'term_date' => :'term_Date',
        :'thru_age' => :'thru_Age',
        :'treatment_type' => :'treatment_Type',
        :'uc_r_price' => :'ucR_Price',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'procedure_code' => :'String',
        :'age_range_type' => :'String',
        :'age_restricted' => :'Boolean',
        :'age_type' => :'String',
        :'category_id' => :'String',
        :'description' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'from_age' => :'Integer',
        :'gender' => :'String',
        :'long_description' => :'String',
        :'network_price' => :'Float',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'procedure_group' => :'Integer',
        :'qualifier' => :'String',
        :'require_auth' => :'Boolean',
        :'term_date' => :'Time',
        :'thru_age' => :'Integer',
        :'treatment_type' => :'String',
        :'uc_r_price' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'age_range_type',
        :'age_type',
        :'category_id',
        :'description',
        :'effective_date',
        :'entry_user',
        :'from_age',
        :'gender',
        :'long_description',
        :'network_price',
        :'pend_ex_code',
        :'pend_flag',
        :'procedure_group',
        :'qualifier',
        :'term_date',
        :'thru_age',
        :'treatment_type',
        :'uc_r_price',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ProcedureCode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ProcedureCode`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      else
        self.procedure_code = nil
      end

      if attributes.key?(:'age_range_type')
        self.age_range_type = attributes[:'age_range_type']
      end

      if attributes.key?(:'age_restricted')
        self.age_restricted = attributes[:'age_restricted']
      else
        self.age_restricted = nil
      end

      if attributes.key?(:'age_type')
        self.age_type = attributes[:'age_type']
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'from_age')
        self.from_age = attributes[:'from_age']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.key?(:'network_price')
        self.network_price = attributes[:'network_price']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'procedure_group')
        self.procedure_group = attributes[:'procedure_group']
      end

      if attributes.key?(:'qualifier')
        self.qualifier = attributes[:'qualifier']
      end

      if attributes.key?(:'require_auth')
        self.require_auth = attributes[:'require_auth']
      else
        self.require_auth = nil
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'thru_age')
        self.thru_age = attributes[:'thru_age']
      end

      if attributes.key?(:'treatment_type')
        self.treatment_type = attributes[:'treatment_type']
      end

      if attributes.key?(:'uc_r_price')
        self.uc_r_price = attributes[:'uc_r_price']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @procedure_code.nil?
        invalid_properties.push('invalid value for "procedure_code", procedure_code cannot be nil.')
      end

      if @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      if @procedure_code.to_s.length < 1
        invalid_properties.push('invalid value for "procedure_code", the character length must be great than or equal to 1.')
      end

      if !@age_range_type.nil? && @age_range_type.to_s.length > 1
        invalid_properties.push('invalid value for "age_range_type", the character length must be smaller than or equal to 1.')
      end

      if @age_restricted.nil?
        invalid_properties.push('invalid value for "age_restricted", age_restricted cannot be nil.')
      end

      if !@age_type.nil? && @age_type.to_s.length > 16
        invalid_properties.push('invalid value for "age_type", the character length must be smaller than or equal to 16.')
      end

      if !@category_id.nil? && @category_id.to_s.length > 32
        invalid_properties.push('invalid value for "category_id", the character length must be smaller than or equal to 32.')
      end

      if !@description.nil? && @description.to_s.length > 128
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@gender.nil? && @gender.to_s.length > 1
        invalid_properties.push('invalid value for "gender", the character length must be smaller than or equal to 1.')
      end

      if !@long_description.nil? && @long_description.to_s.length > 512
        invalid_properties.push('invalid value for "long_description", the character length must be smaller than or equal to 512.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if !@qualifier.nil? && @qualifier.to_s.length > 2
        invalid_properties.push('invalid value for "qualifier", the character length must be smaller than or equal to 2.')
      end

      if @require_auth.nil?
        invalid_properties.push('invalid value for "require_auth", require_auth cannot be nil.')
      end

      if !@treatment_type.nil? && @treatment_type.to_s.length > 8
        invalid_properties.push('invalid value for "treatment_type", the character length must be smaller than or equal to 8.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @procedure_code.nil?
      return false if @procedure_code.to_s.length > 8
      return false if @procedure_code.to_s.length < 1
      return false if !@age_range_type.nil? && @age_range_type.to_s.length > 1
      return false if @age_restricted.nil?
      return false if !@age_type.nil? && @age_type.to_s.length > 16
      return false if !@category_id.nil? && @category_id.to_s.length > 32
      return false if !@description.nil? && @description.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@gender.nil? && @gender.to_s.length > 1
      return false if !@long_description.nil? && @long_description.to_s.length > 512
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if !@qualifier.nil? && @qualifier.to_s.length > 2
      return false if @require_auth.nil?
      return false if !@treatment_type.nil? && @treatment_type.to_s.length > 8
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if procedure_code.nil?
        fail ArgumentError, 'procedure_code cannot be nil'
      end

      if procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      if procedure_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be great than or equal to 1.'
      end

      @procedure_code = procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] age_range_type Value to be assigned
    def age_range_type=(age_range_type)
      if !age_range_type.nil? && age_range_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "age_range_type", the character length must be smaller than or equal to 1.'
      end

      @age_range_type = age_range_type
    end

    # Custom attribute writer method with validation
    # @param [Object] age_restricted Value to be assigned
    def age_restricted=(age_restricted)
      if age_restricted.nil?
        fail ArgumentError, 'age_restricted cannot be nil'
      end

      @age_restricted = age_restricted
    end

    # Custom attribute writer method with validation
    # @param [Object] age_type Value to be assigned
    def age_type=(age_type)
      if !age_type.nil? && age_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "age_type", the character length must be smaller than or equal to 16.'
      end

      @age_type = age_type
    end

    # Custom attribute writer method with validation
    # @param [Object] category_id Value to be assigned
    def category_id=(category_id)
      if !category_id.nil? && category_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "category_id", the character length must be smaller than or equal to 32.'
      end

      @category_id = category_id
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 128
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 128.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] gender Value to be assigned
    def gender=(gender)
      if !gender.nil? && gender.to_s.length > 1
        fail ArgumentError, 'invalid value for "gender", the character length must be smaller than or equal to 1.'
      end

      @gender = gender
    end

    # Custom attribute writer method with validation
    # @param [Object] long_description Value to be assigned
    def long_description=(long_description)
      if !long_description.nil? && long_description.to_s.length > 512
        fail ArgumentError, 'invalid value for "long_description", the character length must be smaller than or equal to 512.'
      end

      @long_description = long_description
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] qualifier Value to be assigned
    def qualifier=(qualifier)
      if !qualifier.nil? && qualifier.to_s.length > 2
        fail ArgumentError, 'invalid value for "qualifier", the character length must be smaller than or equal to 2.'
      end

      @qualifier = qualifier
    end

    # Custom attribute writer method with validation
    # @param [Object] require_auth Value to be assigned
    def require_auth=(require_auth)
      if require_auth.nil?
        fail ArgumentError, 'require_auth cannot be nil'
      end

      @require_auth = require_auth
    end

    # Custom attribute writer method with validation
    # @param [Object] treatment_type Value to be assigned
    def treatment_type=(treatment_type)
      if !treatment_type.nil? && treatment_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "treatment_type", the character length must be smaller than or equal to 8.'
      end

      @treatment_type = treatment_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          procedure_code == o.procedure_code &&
          age_range_type == o.age_range_type &&
          age_restricted == o.age_restricted &&
          age_type == o.age_type &&
          category_id == o.category_id &&
          description == o.description &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          from_age == o.from_age &&
          gender == o.gender &&
          long_description == o.long_description &&
          network_price == o.network_price &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          procedure_group == o.procedure_group &&
          qualifier == o.qualifier &&
          require_auth == o.require_auth &&
          term_date == o.term_date &&
          thru_age == o.thru_age &&
          treatment_type == o.treatment_type &&
          uc_r_price == o.uc_r_price &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [procedure_code, age_range_type, age_restricted, age_type, category_id, description, effective_date, entry_date, entry_user, from_age, gender, long_description, network_price, pend_ex_code, pend_flag, procedure_group, qualifier, require_auth, term_date, thru_age, treatment_type, uc_r_price, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
