=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class MemberMedicareResp
    # Unique identifier for each Medicare Reponsibility record on this Member. Note: The database will apply a default value of '0' for this field if a value is not provided. This field is also marked as NOT NULL in the database and therefore required by the API. If you do not have a value for this field, supply the database default value of '0' to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :member_medicare_resp_key

    # Indicates the coordination of benefits contractor's document control number.
    attr_accessor :cob_c_assigned_dcn

    # Compliance Code 1.
    attr_accessor :compliance_flag1

    # Compliance Code 10.
    attr_accessor :compliance_flag10

    # Compliance Code 2.
    attr_accessor :compliance_flag2

    # Compliance Code 3.
    attr_accessor :compliance_flag3

    # Compliance Code 4.
    attr_accessor :compliance_flag4

    # Compliance Code 5.
    attr_accessor :compliance_flag5

    # Compliance Code 6.
    attr_accessor :compliance_flag6

    # Compliance Code 7.
    attr_accessor :compliance_flag7

    # Compliance Code 8.
    attr_accessor :compliance_flag8

    # Compliance Code 9.
    attr_accessor :compliance_flag9

    # Disposition code that indicates the results of processing.
    attr_accessor :disposition_code

    # Date associated with the disposition code.
    attr_accessor :disposition_code_date

    # End date of the coordination period for the Member's End State Renal Disease.
    attr_accessor :ers_d_coord_period_end_date

    # Start date of the coordination period for the Member's End Stage Renal Disease.
    attr_accessor :ers_d_coord_period_start_date

    # Date when the Member started self-training.
    attr_accessor :esr_d_self_training_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Error Code 1.
    attr_accessor :error_code1

    # Error Code 2.
    attr_accessor :error_code2

    # Error Code 3.
    attr_accessor :error_code3

    # Error Code 4.
    attr_accessor :error_code4

    # Date when the Member first underwent dialysis.
    attr_accessor :first_dialysis_date

    # Indicates the Medicare health insurance claim number.
    attr_accessor :hicn

    # Indicates that the Medicare Sec. 111 submission was late.
    attr_accessor :late_submission_ind

    # Date of birth of the Medicare Secondary Payor.
    attr_accessor :ms_p_birth_date

    # Date when the Medicare Secondary Payor becomes/became effective.
    attr_accessor :ms_p_eff_date

    # Gender of the Medicare Secondary Payor.
    attr_accessor :ms_p_gender

    # Medicare Secondary Payor's last name.
    attr_accessor :ms_p_last_name

    # Date when the Medicare Secondary Payor expires/expired.
    attr_accessor :ms_p_term_date

    # Date when this Medicare part becomes/became effective.
    attr_accessor :medicare_part_a_eff_date

    # Date when this Medicare part expires/expired.
    attr_accessor :medicare_part_a_term_date

    # Date when this Medicare part was last updated.
    attr_accessor :medicare_part_a_update_date

    # Date when this Medicare part becomes/became effective.
    attr_accessor :medicare_part_b_eff_date

    # Date when this Medicare part expires/expired.
    attr_accessor :medicare_part_b_term_date

    # Date when this Medicare part was last updated.
    attr_accessor :medicare_part_b_update_date

    # Indicates the control number for the associated Medicare part.
    attr_accessor :medicare_part_c_control_num

    # Date when this Medicare part becomes/became effective.
    attr_accessor :medicare_part_c_eff_date

    # Date when this Medicare part expires/expired.
    attr_accessor :medicare_part_c_term_date

    # Date when this Medicare part was last updated.
    attr_accessor :medicare_part_c_update_date

    # Indicates the control number for the associated Medicare part.
    attr_accessor :medicare_part_d_control_num

    # Date when this Medicare part becomes/became effective.
    attr_accessor :medicare_part_d_eff_date

    # Date when this Medicare part expires/expired.
    attr_accessor :medicare_part_d_term_date

    # Date when this Medicare part was last updated.
    attr_accessor :medicare_part_d_update_date

    # References Members.Member_Seq value on the parent record.
    attr_accessor :member_seq

    # Indicates the responsiible reporting entity's assigned document control number.
    attr_accessor :rr_e_assigned_dcn

    # Status of the Medicare Sec. 111 reporting.
    attr_accessor :submission_status

    # References Members.Subscriber_ID value on the parent record.
    attr_accessor :subscriber_id

    # Date of the Member's most recent transplant.
    attr_accessor :transplant_date_most_recent

    # Date of the Member's most recent transplant failure.
    attr_accessor :transplant_failure_date_most_recent

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'member_medicare_resp_key' => :'memberMedicareResp_Key',
        :'cob_c_assigned_dcn' => :'cobC_Assigned_DCN',
        :'compliance_flag1' => :'compliance_Flag1',
        :'compliance_flag10' => :'compliance_Flag10',
        :'compliance_flag2' => :'compliance_Flag2',
        :'compliance_flag3' => :'compliance_Flag3',
        :'compliance_flag4' => :'compliance_Flag4',
        :'compliance_flag5' => :'compliance_Flag5',
        :'compliance_flag6' => :'compliance_Flag6',
        :'compliance_flag7' => :'compliance_Flag7',
        :'compliance_flag8' => :'compliance_Flag8',
        :'compliance_flag9' => :'compliance_Flag9',
        :'disposition_code' => :'disposition_Code',
        :'disposition_code_date' => :'disposition_Code_Date',
        :'ers_d_coord_period_end_date' => :'ersD_Coord_Period_End_Date',
        :'ers_d_coord_period_start_date' => :'ersD_Coord_Period_Start_Date',
        :'esr_d_self_training_date' => :'esrD_Self_Training_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'error_code1' => :'error_Code1',
        :'error_code2' => :'error_Code2',
        :'error_code3' => :'error_Code3',
        :'error_code4' => :'error_Code4',
        :'first_dialysis_date' => :'first_Dialysis_Date',
        :'hicn' => :'hicn',
        :'late_submission_ind' => :'late_Submission_Ind',
        :'ms_p_birth_date' => :'msP_Birth_Date',
        :'ms_p_eff_date' => :'msP_Eff_Date',
        :'ms_p_gender' => :'msP_Gender',
        :'ms_p_last_name' => :'msP_Last_Name',
        :'ms_p_term_date' => :'msP_Term_Date',
        :'medicare_part_a_eff_date' => :'medicare_Part_A_Eff_Date',
        :'medicare_part_a_term_date' => :'medicare_Part_A_Term_Date',
        :'medicare_part_a_update_date' => :'medicare_Part_A_Update_Date',
        :'medicare_part_b_eff_date' => :'medicare_Part_B_Eff_Date',
        :'medicare_part_b_term_date' => :'medicare_Part_B_Term_Date',
        :'medicare_part_b_update_date' => :'medicare_Part_B_Update_Date',
        :'medicare_part_c_control_num' => :'medicare_Part_C_Control_Num',
        :'medicare_part_c_eff_date' => :'medicare_Part_C_Eff_Date',
        :'medicare_part_c_term_date' => :'medicare_Part_C_Term_Date',
        :'medicare_part_c_update_date' => :'medicare_Part_C_Update_Date',
        :'medicare_part_d_control_num' => :'medicare_Part_D_Control_Num',
        :'medicare_part_d_eff_date' => :'medicare_Part_D_Eff_Date',
        :'medicare_part_d_term_date' => :'medicare_Part_D_Term_Date',
        :'medicare_part_d_update_date' => :'medicare_Part_D_Update_Date',
        :'member_seq' => :'member_Seq',
        :'rr_e_assigned_dcn' => :'rrE_Assigned_DCN',
        :'submission_status' => :'submission_Status',
        :'subscriber_id' => :'subscriber_ID',
        :'transplant_date_most_recent' => :'transplant_Date_Most_Recent',
        :'transplant_failure_date_most_recent' => :'transplant_Failure_Date_Most_Recent',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'member_medicare_resp_key' => :'Integer',
        :'cob_c_assigned_dcn' => :'String',
        :'compliance_flag1' => :'String',
        :'compliance_flag10' => :'String',
        :'compliance_flag2' => :'String',
        :'compliance_flag3' => :'String',
        :'compliance_flag4' => :'String',
        :'compliance_flag5' => :'String',
        :'compliance_flag6' => :'String',
        :'compliance_flag7' => :'String',
        :'compliance_flag8' => :'String',
        :'compliance_flag9' => :'String',
        :'disposition_code' => :'String',
        :'disposition_code_date' => :'Time',
        :'ers_d_coord_period_end_date' => :'Time',
        :'ers_d_coord_period_start_date' => :'Time',
        :'esr_d_self_training_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'error_code1' => :'String',
        :'error_code2' => :'String',
        :'error_code3' => :'String',
        :'error_code4' => :'String',
        :'first_dialysis_date' => :'Time',
        :'hicn' => :'String',
        :'late_submission_ind' => :'String',
        :'ms_p_birth_date' => :'Time',
        :'ms_p_eff_date' => :'Time',
        :'ms_p_gender' => :'String',
        :'ms_p_last_name' => :'String',
        :'ms_p_term_date' => :'Time',
        :'medicare_part_a_eff_date' => :'Time',
        :'medicare_part_a_term_date' => :'Time',
        :'medicare_part_a_update_date' => :'Time',
        :'medicare_part_b_eff_date' => :'Time',
        :'medicare_part_b_term_date' => :'Time',
        :'medicare_part_b_update_date' => :'Time',
        :'medicare_part_c_control_num' => :'String',
        :'medicare_part_c_eff_date' => :'Time',
        :'medicare_part_c_term_date' => :'Time',
        :'medicare_part_c_update_date' => :'Time',
        :'medicare_part_d_control_num' => :'String',
        :'medicare_part_d_eff_date' => :'Time',
        :'medicare_part_d_term_date' => :'Time',
        :'medicare_part_d_update_date' => :'Time',
        :'member_seq' => :'String',
        :'rr_e_assigned_dcn' => :'String',
        :'submission_status' => :'String',
        :'subscriber_id' => :'String',
        :'transplant_date_most_recent' => :'Time',
        :'transplant_failure_date_most_recent' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'cob_c_assigned_dcn',
        :'compliance_flag1',
        :'compliance_flag10',
        :'compliance_flag2',
        :'compliance_flag3',
        :'compliance_flag4',
        :'compliance_flag5',
        :'compliance_flag6',
        :'compliance_flag7',
        :'compliance_flag8',
        :'compliance_flag9',
        :'disposition_code',
        :'entry_user',
        :'error_code1',
        :'error_code2',
        :'error_code3',
        :'error_code4',
        :'hicn',
        :'late_submission_ind',
        :'ms_p_gender',
        :'ms_p_last_name',
        :'medicare_part_c_control_num',
        :'medicare_part_d_control_num',
        :'member_seq',
        :'rr_e_assigned_dcn',
        :'submission_status',
        :'subscriber_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::MemberMedicareResp` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::MemberMedicareResp`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'member_medicare_resp_key')
        self.member_medicare_resp_key = attributes[:'member_medicare_resp_key']
      end

      if attributes.key?(:'cob_c_assigned_dcn')
        self.cob_c_assigned_dcn = attributes[:'cob_c_assigned_dcn']
      end

      if attributes.key?(:'compliance_flag1')
        self.compliance_flag1 = attributes[:'compliance_flag1']
      end

      if attributes.key?(:'compliance_flag10')
        self.compliance_flag10 = attributes[:'compliance_flag10']
      end

      if attributes.key?(:'compliance_flag2')
        self.compliance_flag2 = attributes[:'compliance_flag2']
      end

      if attributes.key?(:'compliance_flag3')
        self.compliance_flag3 = attributes[:'compliance_flag3']
      end

      if attributes.key?(:'compliance_flag4')
        self.compliance_flag4 = attributes[:'compliance_flag4']
      end

      if attributes.key?(:'compliance_flag5')
        self.compliance_flag5 = attributes[:'compliance_flag5']
      end

      if attributes.key?(:'compliance_flag6')
        self.compliance_flag6 = attributes[:'compliance_flag6']
      end

      if attributes.key?(:'compliance_flag7')
        self.compliance_flag7 = attributes[:'compliance_flag7']
      end

      if attributes.key?(:'compliance_flag8')
        self.compliance_flag8 = attributes[:'compliance_flag8']
      end

      if attributes.key?(:'compliance_flag9')
        self.compliance_flag9 = attributes[:'compliance_flag9']
      end

      if attributes.key?(:'disposition_code')
        self.disposition_code = attributes[:'disposition_code']
      end

      if attributes.key?(:'disposition_code_date')
        self.disposition_code_date = attributes[:'disposition_code_date']
      else
        self.disposition_code_date = nil
      end

      if attributes.key?(:'ers_d_coord_period_end_date')
        self.ers_d_coord_period_end_date = attributes[:'ers_d_coord_period_end_date']
      else
        self.ers_d_coord_period_end_date = nil
      end

      if attributes.key?(:'ers_d_coord_period_start_date')
        self.ers_d_coord_period_start_date = attributes[:'ers_d_coord_period_start_date']
      else
        self.ers_d_coord_period_start_date = nil
      end

      if attributes.key?(:'esr_d_self_training_date')
        self.esr_d_self_training_date = attributes[:'esr_d_self_training_date']
      else
        self.esr_d_self_training_date = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'error_code1')
        self.error_code1 = attributes[:'error_code1']
      end

      if attributes.key?(:'error_code2')
        self.error_code2 = attributes[:'error_code2']
      end

      if attributes.key?(:'error_code3')
        self.error_code3 = attributes[:'error_code3']
      end

      if attributes.key?(:'error_code4')
        self.error_code4 = attributes[:'error_code4']
      end

      if attributes.key?(:'first_dialysis_date')
        self.first_dialysis_date = attributes[:'first_dialysis_date']
      else
        self.first_dialysis_date = nil
      end

      if attributes.key?(:'hicn')
        self.hicn = attributes[:'hicn']
      end

      if attributes.key?(:'late_submission_ind')
        self.late_submission_ind = attributes[:'late_submission_ind']
      end

      if attributes.key?(:'ms_p_birth_date')
        self.ms_p_birth_date = attributes[:'ms_p_birth_date']
      else
        self.ms_p_birth_date = nil
      end

      if attributes.key?(:'ms_p_eff_date')
        self.ms_p_eff_date = attributes[:'ms_p_eff_date']
      else
        self.ms_p_eff_date = nil
      end

      if attributes.key?(:'ms_p_gender')
        self.ms_p_gender = attributes[:'ms_p_gender']
      end

      if attributes.key?(:'ms_p_last_name')
        self.ms_p_last_name = attributes[:'ms_p_last_name']
      end

      if attributes.key?(:'ms_p_term_date')
        self.ms_p_term_date = attributes[:'ms_p_term_date']
      else
        self.ms_p_term_date = nil
      end

      if attributes.key?(:'medicare_part_a_eff_date')
        self.medicare_part_a_eff_date = attributes[:'medicare_part_a_eff_date']
      else
        self.medicare_part_a_eff_date = nil
      end

      if attributes.key?(:'medicare_part_a_term_date')
        self.medicare_part_a_term_date = attributes[:'medicare_part_a_term_date']
      else
        self.medicare_part_a_term_date = nil
      end

      if attributes.key?(:'medicare_part_a_update_date')
        self.medicare_part_a_update_date = attributes[:'medicare_part_a_update_date']
      else
        self.medicare_part_a_update_date = nil
      end

      if attributes.key?(:'medicare_part_b_eff_date')
        self.medicare_part_b_eff_date = attributes[:'medicare_part_b_eff_date']
      else
        self.medicare_part_b_eff_date = nil
      end

      if attributes.key?(:'medicare_part_b_term_date')
        self.medicare_part_b_term_date = attributes[:'medicare_part_b_term_date']
      else
        self.medicare_part_b_term_date = nil
      end

      if attributes.key?(:'medicare_part_b_update_date')
        self.medicare_part_b_update_date = attributes[:'medicare_part_b_update_date']
      else
        self.medicare_part_b_update_date = nil
      end

      if attributes.key?(:'medicare_part_c_control_num')
        self.medicare_part_c_control_num = attributes[:'medicare_part_c_control_num']
      end

      if attributes.key?(:'medicare_part_c_eff_date')
        self.medicare_part_c_eff_date = attributes[:'medicare_part_c_eff_date']
      else
        self.medicare_part_c_eff_date = nil
      end

      if attributes.key?(:'medicare_part_c_term_date')
        self.medicare_part_c_term_date = attributes[:'medicare_part_c_term_date']
      else
        self.medicare_part_c_term_date = nil
      end

      if attributes.key?(:'medicare_part_c_update_date')
        self.medicare_part_c_update_date = attributes[:'medicare_part_c_update_date']
      else
        self.medicare_part_c_update_date = nil
      end

      if attributes.key?(:'medicare_part_d_control_num')
        self.medicare_part_d_control_num = attributes[:'medicare_part_d_control_num']
      end

      if attributes.key?(:'medicare_part_d_eff_date')
        self.medicare_part_d_eff_date = attributes[:'medicare_part_d_eff_date']
      else
        self.medicare_part_d_eff_date = nil
      end

      if attributes.key?(:'medicare_part_d_term_date')
        self.medicare_part_d_term_date = attributes[:'medicare_part_d_term_date']
      else
        self.medicare_part_d_term_date = nil
      end

      if attributes.key?(:'medicare_part_d_update_date')
        self.medicare_part_d_update_date = attributes[:'medicare_part_d_update_date']
      else
        self.medicare_part_d_update_date = nil
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'rr_e_assigned_dcn')
        self.rr_e_assigned_dcn = attributes[:'rr_e_assigned_dcn']
      end

      if attributes.key?(:'submission_status')
        self.submission_status = attributes[:'submission_status']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'transplant_date_most_recent')
        self.transplant_date_most_recent = attributes[:'transplant_date_most_recent']
      else
        self.transplant_date_most_recent = nil
      end

      if attributes.key?(:'transplant_failure_date_most_recent')
        self.transplant_failure_date_most_recent = attributes[:'transplant_failure_date_most_recent']
      else
        self.transplant_failure_date_most_recent = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@cob_c_assigned_dcn.nil? && @cob_c_assigned_dcn.to_s.length > 16
        invalid_properties.push('invalid value for "cob_c_assigned_dcn", the character length must be smaller than or equal to 16.')
      end

      if !@compliance_flag1.nil? && @compliance_flag1.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag1", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag10.nil? && @compliance_flag10.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag10", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag2.nil? && @compliance_flag2.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag2", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag3.nil? && @compliance_flag3.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag3", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag4.nil? && @compliance_flag4.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag4", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag5.nil? && @compliance_flag5.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag5", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag6.nil? && @compliance_flag6.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag6", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag7.nil? && @compliance_flag7.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag7", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag8.nil? && @compliance_flag8.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag8", the character length must be smaller than or equal to 2.')
      end

      if !@compliance_flag9.nil? && @compliance_flag9.to_s.length > 2
        invalid_properties.push('invalid value for "compliance_flag9", the character length must be smaller than or equal to 2.')
      end

      if !@disposition_code.nil? && @disposition_code.to_s.length > 8
        invalid_properties.push('invalid value for "disposition_code", the character length must be smaller than or equal to 8.')
      end

      if @disposition_code_date.nil?
        invalid_properties.push('invalid value for "disposition_code_date", disposition_code_date cannot be nil.')
      end

      if @ers_d_coord_period_end_date.nil?
        invalid_properties.push('invalid value for "ers_d_coord_period_end_date", ers_d_coord_period_end_date cannot be nil.')
      end

      if @ers_d_coord_period_start_date.nil?
        invalid_properties.push('invalid value for "ers_d_coord_period_start_date", ers_d_coord_period_start_date cannot be nil.')
      end

      if @esr_d_self_training_date.nil?
        invalid_properties.push('invalid value for "esr_d_self_training_date", esr_d_self_training_date cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@error_code1.nil? && @error_code1.to_s.length > 8
        invalid_properties.push('invalid value for "error_code1", the character length must be smaller than or equal to 8.')
      end

      if !@error_code2.nil? && @error_code2.to_s.length > 8
        invalid_properties.push('invalid value for "error_code2", the character length must be smaller than or equal to 8.')
      end

      if !@error_code3.nil? && @error_code3.to_s.length > 8
        invalid_properties.push('invalid value for "error_code3", the character length must be smaller than or equal to 8.')
      end

      if !@error_code4.nil? && @error_code4.to_s.length > 8
        invalid_properties.push('invalid value for "error_code4", the character length must be smaller than or equal to 8.')
      end

      if @first_dialysis_date.nil?
        invalid_properties.push('invalid value for "first_dialysis_date", first_dialysis_date cannot be nil.')
      end

      if !@hicn.nil? && @hicn.to_s.length > 16
        invalid_properties.push('invalid value for "hicn", the character length must be smaller than or equal to 16.')
      end

      if !@late_submission_ind.nil? && @late_submission_ind.to_s.length > 1
        invalid_properties.push('invalid value for "late_submission_ind", the character length must be smaller than or equal to 1.')
      end

      if @ms_p_birth_date.nil?
        invalid_properties.push('invalid value for "ms_p_birth_date", ms_p_birth_date cannot be nil.')
      end

      if @ms_p_eff_date.nil?
        invalid_properties.push('invalid value for "ms_p_eff_date", ms_p_eff_date cannot be nil.')
      end

      if !@ms_p_gender.nil? && @ms_p_gender.to_s.length > 1
        invalid_properties.push('invalid value for "ms_p_gender", the character length must be smaller than or equal to 1.')
      end

      if !@ms_p_last_name.nil? && @ms_p_last_name.to_s.length > 25
        invalid_properties.push('invalid value for "ms_p_last_name", the character length must be smaller than or equal to 25.')
      end

      if @ms_p_term_date.nil?
        invalid_properties.push('invalid value for "ms_p_term_date", ms_p_term_date cannot be nil.')
      end

      if @medicare_part_a_eff_date.nil?
        invalid_properties.push('invalid value for "medicare_part_a_eff_date", medicare_part_a_eff_date cannot be nil.')
      end

      if @medicare_part_a_term_date.nil?
        invalid_properties.push('invalid value for "medicare_part_a_term_date", medicare_part_a_term_date cannot be nil.')
      end

      if @medicare_part_a_update_date.nil?
        invalid_properties.push('invalid value for "medicare_part_a_update_date", medicare_part_a_update_date cannot be nil.')
      end

      if @medicare_part_b_eff_date.nil?
        invalid_properties.push('invalid value for "medicare_part_b_eff_date", medicare_part_b_eff_date cannot be nil.')
      end

      if @medicare_part_b_term_date.nil?
        invalid_properties.push('invalid value for "medicare_part_b_term_date", medicare_part_b_term_date cannot be nil.')
      end

      if @medicare_part_b_update_date.nil?
        invalid_properties.push('invalid value for "medicare_part_b_update_date", medicare_part_b_update_date cannot be nil.')
      end

      if !@medicare_part_c_control_num.nil? && @medicare_part_c_control_num.to_s.length > 5
        invalid_properties.push('invalid value for "medicare_part_c_control_num", the character length must be smaller than or equal to 5.')
      end

      if @medicare_part_c_eff_date.nil?
        invalid_properties.push('invalid value for "medicare_part_c_eff_date", medicare_part_c_eff_date cannot be nil.')
      end

      if @medicare_part_c_term_date.nil?
        invalid_properties.push('invalid value for "medicare_part_c_term_date", medicare_part_c_term_date cannot be nil.')
      end

      if @medicare_part_c_update_date.nil?
        invalid_properties.push('invalid value for "medicare_part_c_update_date", medicare_part_c_update_date cannot be nil.')
      end

      if !@medicare_part_d_control_num.nil? && @medicare_part_d_control_num.to_s.length > 5
        invalid_properties.push('invalid value for "medicare_part_d_control_num", the character length must be smaller than or equal to 5.')
      end

      if @medicare_part_d_eff_date.nil?
        invalid_properties.push('invalid value for "medicare_part_d_eff_date", medicare_part_d_eff_date cannot be nil.')
      end

      if @medicare_part_d_term_date.nil?
        invalid_properties.push('invalid value for "medicare_part_d_term_date", medicare_part_d_term_date cannot be nil.')
      end

      if @medicare_part_d_update_date.nil?
        invalid_properties.push('invalid value for "medicare_part_d_update_date", medicare_part_d_update_date cannot be nil.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@rr_e_assigned_dcn.nil? && @rr_e_assigned_dcn.to_s.length > 16
        invalid_properties.push('invalid value for "rr_e_assigned_dcn", the character length must be smaller than or equal to 16.')
      end

      if !@submission_status.nil? && @submission_status.to_s.length > 8
        invalid_properties.push('invalid value for "submission_status", the character length must be smaller than or equal to 8.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @transplant_date_most_recent.nil?
        invalid_properties.push('invalid value for "transplant_date_most_recent", transplant_date_most_recent cannot be nil.')
      end

      if @transplant_failure_date_most_recent.nil?
        invalid_properties.push('invalid value for "transplant_failure_date_most_recent", transplant_failure_date_most_recent cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@cob_c_assigned_dcn.nil? && @cob_c_assigned_dcn.to_s.length > 16
      return false if !@compliance_flag1.nil? && @compliance_flag1.to_s.length > 2
      return false if !@compliance_flag10.nil? && @compliance_flag10.to_s.length > 2
      return false if !@compliance_flag2.nil? && @compliance_flag2.to_s.length > 2
      return false if !@compliance_flag3.nil? && @compliance_flag3.to_s.length > 2
      return false if !@compliance_flag4.nil? && @compliance_flag4.to_s.length > 2
      return false if !@compliance_flag5.nil? && @compliance_flag5.to_s.length > 2
      return false if !@compliance_flag6.nil? && @compliance_flag6.to_s.length > 2
      return false if !@compliance_flag7.nil? && @compliance_flag7.to_s.length > 2
      return false if !@compliance_flag8.nil? && @compliance_flag8.to_s.length > 2
      return false if !@compliance_flag9.nil? && @compliance_flag9.to_s.length > 2
      return false if !@disposition_code.nil? && @disposition_code.to_s.length > 8
      return false if @disposition_code_date.nil?
      return false if @ers_d_coord_period_end_date.nil?
      return false if @ers_d_coord_period_start_date.nil?
      return false if @esr_d_self_training_date.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@error_code1.nil? && @error_code1.to_s.length > 8
      return false if !@error_code2.nil? && @error_code2.to_s.length > 8
      return false if !@error_code3.nil? && @error_code3.to_s.length > 8
      return false if !@error_code4.nil? && @error_code4.to_s.length > 8
      return false if @first_dialysis_date.nil?
      return false if !@hicn.nil? && @hicn.to_s.length > 16
      return false if !@late_submission_ind.nil? && @late_submission_ind.to_s.length > 1
      return false if @ms_p_birth_date.nil?
      return false if @ms_p_eff_date.nil?
      return false if !@ms_p_gender.nil? && @ms_p_gender.to_s.length > 1
      return false if !@ms_p_last_name.nil? && @ms_p_last_name.to_s.length > 25
      return false if @ms_p_term_date.nil?
      return false if @medicare_part_a_eff_date.nil?
      return false if @medicare_part_a_term_date.nil?
      return false if @medicare_part_a_update_date.nil?
      return false if @medicare_part_b_eff_date.nil?
      return false if @medicare_part_b_term_date.nil?
      return false if @medicare_part_b_update_date.nil?
      return false if !@medicare_part_c_control_num.nil? && @medicare_part_c_control_num.to_s.length > 5
      return false if @medicare_part_c_eff_date.nil?
      return false if @medicare_part_c_term_date.nil?
      return false if @medicare_part_c_update_date.nil?
      return false if !@medicare_part_d_control_num.nil? && @medicare_part_d_control_num.to_s.length > 5
      return false if @medicare_part_d_eff_date.nil?
      return false if @medicare_part_d_term_date.nil?
      return false if @medicare_part_d_update_date.nil?
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@rr_e_assigned_dcn.nil? && @rr_e_assigned_dcn.to_s.length > 16
      return false if !@submission_status.nil? && @submission_status.to_s.length > 8
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if @transplant_date_most_recent.nil?
      return false if @transplant_failure_date_most_recent.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cob_c_assigned_dcn Value to be assigned
    def cob_c_assigned_dcn=(cob_c_assigned_dcn)
      if !cob_c_assigned_dcn.nil? && cob_c_assigned_dcn.to_s.length > 16
        fail ArgumentError, 'invalid value for "cob_c_assigned_dcn", the character length must be smaller than or equal to 16.'
      end

      @cob_c_assigned_dcn = cob_c_assigned_dcn
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag1 Value to be assigned
    def compliance_flag1=(compliance_flag1)
      if !compliance_flag1.nil? && compliance_flag1.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag1", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag1 = compliance_flag1
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag10 Value to be assigned
    def compliance_flag10=(compliance_flag10)
      if !compliance_flag10.nil? && compliance_flag10.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag10", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag10 = compliance_flag10
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag2 Value to be assigned
    def compliance_flag2=(compliance_flag2)
      if !compliance_flag2.nil? && compliance_flag2.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag2", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag2 = compliance_flag2
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag3 Value to be assigned
    def compliance_flag3=(compliance_flag3)
      if !compliance_flag3.nil? && compliance_flag3.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag3", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag3 = compliance_flag3
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag4 Value to be assigned
    def compliance_flag4=(compliance_flag4)
      if !compliance_flag4.nil? && compliance_flag4.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag4", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag4 = compliance_flag4
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag5 Value to be assigned
    def compliance_flag5=(compliance_flag5)
      if !compliance_flag5.nil? && compliance_flag5.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag5", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag5 = compliance_flag5
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag6 Value to be assigned
    def compliance_flag6=(compliance_flag6)
      if !compliance_flag6.nil? && compliance_flag6.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag6", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag6 = compliance_flag6
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag7 Value to be assigned
    def compliance_flag7=(compliance_flag7)
      if !compliance_flag7.nil? && compliance_flag7.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag7", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag7 = compliance_flag7
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag8 Value to be assigned
    def compliance_flag8=(compliance_flag8)
      if !compliance_flag8.nil? && compliance_flag8.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag8", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag8 = compliance_flag8
    end

    # Custom attribute writer method with validation
    # @param [Object] compliance_flag9 Value to be assigned
    def compliance_flag9=(compliance_flag9)
      if !compliance_flag9.nil? && compliance_flag9.to_s.length > 2
        fail ArgumentError, 'invalid value for "compliance_flag9", the character length must be smaller than or equal to 2.'
      end

      @compliance_flag9 = compliance_flag9
    end

    # Custom attribute writer method with validation
    # @param [Object] disposition_code Value to be assigned
    def disposition_code=(disposition_code)
      if !disposition_code.nil? && disposition_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "disposition_code", the character length must be smaller than or equal to 8.'
      end

      @disposition_code = disposition_code
    end

    # Custom attribute writer method with validation
    # @param [Object] disposition_code_date Value to be assigned
    def disposition_code_date=(disposition_code_date)
      if disposition_code_date.nil?
        fail ArgumentError, 'disposition_code_date cannot be nil'
      end

      @disposition_code_date = disposition_code_date
    end

    # Custom attribute writer method with validation
    # @param [Object] ers_d_coord_period_end_date Value to be assigned
    def ers_d_coord_period_end_date=(ers_d_coord_period_end_date)
      if ers_d_coord_period_end_date.nil?
        fail ArgumentError, 'ers_d_coord_period_end_date cannot be nil'
      end

      @ers_d_coord_period_end_date = ers_d_coord_period_end_date
    end

    # Custom attribute writer method with validation
    # @param [Object] ers_d_coord_period_start_date Value to be assigned
    def ers_d_coord_period_start_date=(ers_d_coord_period_start_date)
      if ers_d_coord_period_start_date.nil?
        fail ArgumentError, 'ers_d_coord_period_start_date cannot be nil'
      end

      @ers_d_coord_period_start_date = ers_d_coord_period_start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] esr_d_self_training_date Value to be assigned
    def esr_d_self_training_date=(esr_d_self_training_date)
      if esr_d_self_training_date.nil?
        fail ArgumentError, 'esr_d_self_training_date cannot be nil'
      end

      @esr_d_self_training_date = esr_d_self_training_date
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] error_code1 Value to be assigned
    def error_code1=(error_code1)
      if !error_code1.nil? && error_code1.to_s.length > 8
        fail ArgumentError, 'invalid value for "error_code1", the character length must be smaller than or equal to 8.'
      end

      @error_code1 = error_code1
    end

    # Custom attribute writer method with validation
    # @param [Object] error_code2 Value to be assigned
    def error_code2=(error_code2)
      if !error_code2.nil? && error_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "error_code2", the character length must be smaller than or equal to 8.'
      end

      @error_code2 = error_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] error_code3 Value to be assigned
    def error_code3=(error_code3)
      if !error_code3.nil? && error_code3.to_s.length > 8
        fail ArgumentError, 'invalid value for "error_code3", the character length must be smaller than or equal to 8.'
      end

      @error_code3 = error_code3
    end

    # Custom attribute writer method with validation
    # @param [Object] error_code4 Value to be assigned
    def error_code4=(error_code4)
      if !error_code4.nil? && error_code4.to_s.length > 8
        fail ArgumentError, 'invalid value for "error_code4", the character length must be smaller than or equal to 8.'
      end

      @error_code4 = error_code4
    end

    # Custom attribute writer method with validation
    # @param [Object] first_dialysis_date Value to be assigned
    def first_dialysis_date=(first_dialysis_date)
      if first_dialysis_date.nil?
        fail ArgumentError, 'first_dialysis_date cannot be nil'
      end

      @first_dialysis_date = first_dialysis_date
    end

    # Custom attribute writer method with validation
    # @param [Object] hicn Value to be assigned
    def hicn=(hicn)
      if !hicn.nil? && hicn.to_s.length > 16
        fail ArgumentError, 'invalid value for "hicn", the character length must be smaller than or equal to 16.'
      end

      @hicn = hicn
    end

    # Custom attribute writer method with validation
    # @param [Object] late_submission_ind Value to be assigned
    def late_submission_ind=(late_submission_ind)
      if !late_submission_ind.nil? && late_submission_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "late_submission_ind", the character length must be smaller than or equal to 1.'
      end

      @late_submission_ind = late_submission_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] ms_p_birth_date Value to be assigned
    def ms_p_birth_date=(ms_p_birth_date)
      if ms_p_birth_date.nil?
        fail ArgumentError, 'ms_p_birth_date cannot be nil'
      end

      @ms_p_birth_date = ms_p_birth_date
    end

    # Custom attribute writer method with validation
    # @param [Object] ms_p_eff_date Value to be assigned
    def ms_p_eff_date=(ms_p_eff_date)
      if ms_p_eff_date.nil?
        fail ArgumentError, 'ms_p_eff_date cannot be nil'
      end

      @ms_p_eff_date = ms_p_eff_date
    end

    # Custom attribute writer method with validation
    # @param [Object] ms_p_gender Value to be assigned
    def ms_p_gender=(ms_p_gender)
      if !ms_p_gender.nil? && ms_p_gender.to_s.length > 1
        fail ArgumentError, 'invalid value for "ms_p_gender", the character length must be smaller than or equal to 1.'
      end

      @ms_p_gender = ms_p_gender
    end

    # Custom attribute writer method with validation
    # @param [Object] ms_p_last_name Value to be assigned
    def ms_p_last_name=(ms_p_last_name)
      if !ms_p_last_name.nil? && ms_p_last_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "ms_p_last_name", the character length must be smaller than or equal to 25.'
      end

      @ms_p_last_name = ms_p_last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] ms_p_term_date Value to be assigned
    def ms_p_term_date=(ms_p_term_date)
      if ms_p_term_date.nil?
        fail ArgumentError, 'ms_p_term_date cannot be nil'
      end

      @ms_p_term_date = ms_p_term_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_a_eff_date Value to be assigned
    def medicare_part_a_eff_date=(medicare_part_a_eff_date)
      if medicare_part_a_eff_date.nil?
        fail ArgumentError, 'medicare_part_a_eff_date cannot be nil'
      end

      @medicare_part_a_eff_date = medicare_part_a_eff_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_a_term_date Value to be assigned
    def medicare_part_a_term_date=(medicare_part_a_term_date)
      if medicare_part_a_term_date.nil?
        fail ArgumentError, 'medicare_part_a_term_date cannot be nil'
      end

      @medicare_part_a_term_date = medicare_part_a_term_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_a_update_date Value to be assigned
    def medicare_part_a_update_date=(medicare_part_a_update_date)
      if medicare_part_a_update_date.nil?
        fail ArgumentError, 'medicare_part_a_update_date cannot be nil'
      end

      @medicare_part_a_update_date = medicare_part_a_update_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_b_eff_date Value to be assigned
    def medicare_part_b_eff_date=(medicare_part_b_eff_date)
      if medicare_part_b_eff_date.nil?
        fail ArgumentError, 'medicare_part_b_eff_date cannot be nil'
      end

      @medicare_part_b_eff_date = medicare_part_b_eff_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_b_term_date Value to be assigned
    def medicare_part_b_term_date=(medicare_part_b_term_date)
      if medicare_part_b_term_date.nil?
        fail ArgumentError, 'medicare_part_b_term_date cannot be nil'
      end

      @medicare_part_b_term_date = medicare_part_b_term_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_b_update_date Value to be assigned
    def medicare_part_b_update_date=(medicare_part_b_update_date)
      if medicare_part_b_update_date.nil?
        fail ArgumentError, 'medicare_part_b_update_date cannot be nil'
      end

      @medicare_part_b_update_date = medicare_part_b_update_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_c_control_num Value to be assigned
    def medicare_part_c_control_num=(medicare_part_c_control_num)
      if !medicare_part_c_control_num.nil? && medicare_part_c_control_num.to_s.length > 5
        fail ArgumentError, 'invalid value for "medicare_part_c_control_num", the character length must be smaller than or equal to 5.'
      end

      @medicare_part_c_control_num = medicare_part_c_control_num
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_c_eff_date Value to be assigned
    def medicare_part_c_eff_date=(medicare_part_c_eff_date)
      if medicare_part_c_eff_date.nil?
        fail ArgumentError, 'medicare_part_c_eff_date cannot be nil'
      end

      @medicare_part_c_eff_date = medicare_part_c_eff_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_c_term_date Value to be assigned
    def medicare_part_c_term_date=(medicare_part_c_term_date)
      if medicare_part_c_term_date.nil?
        fail ArgumentError, 'medicare_part_c_term_date cannot be nil'
      end

      @medicare_part_c_term_date = medicare_part_c_term_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_c_update_date Value to be assigned
    def medicare_part_c_update_date=(medicare_part_c_update_date)
      if medicare_part_c_update_date.nil?
        fail ArgumentError, 'medicare_part_c_update_date cannot be nil'
      end

      @medicare_part_c_update_date = medicare_part_c_update_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_d_control_num Value to be assigned
    def medicare_part_d_control_num=(medicare_part_d_control_num)
      if !medicare_part_d_control_num.nil? && medicare_part_d_control_num.to_s.length > 5
        fail ArgumentError, 'invalid value for "medicare_part_d_control_num", the character length must be smaller than or equal to 5.'
      end

      @medicare_part_d_control_num = medicare_part_d_control_num
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_d_eff_date Value to be assigned
    def medicare_part_d_eff_date=(medicare_part_d_eff_date)
      if medicare_part_d_eff_date.nil?
        fail ArgumentError, 'medicare_part_d_eff_date cannot be nil'
      end

      @medicare_part_d_eff_date = medicare_part_d_eff_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_d_term_date Value to be assigned
    def medicare_part_d_term_date=(medicare_part_d_term_date)
      if medicare_part_d_term_date.nil?
        fail ArgumentError, 'medicare_part_d_term_date cannot be nil'
      end

      @medicare_part_d_term_date = medicare_part_d_term_date
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_part_d_update_date Value to be assigned
    def medicare_part_d_update_date=(medicare_part_d_update_date)
      if medicare_part_d_update_date.nil?
        fail ArgumentError, 'medicare_part_d_update_date cannot be nil'
      end

      @medicare_part_d_update_date = medicare_part_d_update_date
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] rr_e_assigned_dcn Value to be assigned
    def rr_e_assigned_dcn=(rr_e_assigned_dcn)
      if !rr_e_assigned_dcn.nil? && rr_e_assigned_dcn.to_s.length > 16
        fail ArgumentError, 'invalid value for "rr_e_assigned_dcn", the character length must be smaller than or equal to 16.'
      end

      @rr_e_assigned_dcn = rr_e_assigned_dcn
    end

    # Custom attribute writer method with validation
    # @param [Object] submission_status Value to be assigned
    def submission_status=(submission_status)
      if !submission_status.nil? && submission_status.to_s.length > 8
        fail ArgumentError, 'invalid value for "submission_status", the character length must be smaller than or equal to 8.'
      end

      @submission_status = submission_status
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] transplant_date_most_recent Value to be assigned
    def transplant_date_most_recent=(transplant_date_most_recent)
      if transplant_date_most_recent.nil?
        fail ArgumentError, 'transplant_date_most_recent cannot be nil'
      end

      @transplant_date_most_recent = transplant_date_most_recent
    end

    # Custom attribute writer method with validation
    # @param [Object] transplant_failure_date_most_recent Value to be assigned
    def transplant_failure_date_most_recent=(transplant_failure_date_most_recent)
      if transplant_failure_date_most_recent.nil?
        fail ArgumentError, 'transplant_failure_date_most_recent cannot be nil'
      end

      @transplant_failure_date_most_recent = transplant_failure_date_most_recent
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          member_medicare_resp_key == o.member_medicare_resp_key &&
          cob_c_assigned_dcn == o.cob_c_assigned_dcn &&
          compliance_flag1 == o.compliance_flag1 &&
          compliance_flag10 == o.compliance_flag10 &&
          compliance_flag2 == o.compliance_flag2 &&
          compliance_flag3 == o.compliance_flag3 &&
          compliance_flag4 == o.compliance_flag4 &&
          compliance_flag5 == o.compliance_flag5 &&
          compliance_flag6 == o.compliance_flag6 &&
          compliance_flag7 == o.compliance_flag7 &&
          compliance_flag8 == o.compliance_flag8 &&
          compliance_flag9 == o.compliance_flag9 &&
          disposition_code == o.disposition_code &&
          disposition_code_date == o.disposition_code_date &&
          ers_d_coord_period_end_date == o.ers_d_coord_period_end_date &&
          ers_d_coord_period_start_date == o.ers_d_coord_period_start_date &&
          esr_d_self_training_date == o.esr_d_self_training_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          error_code1 == o.error_code1 &&
          error_code2 == o.error_code2 &&
          error_code3 == o.error_code3 &&
          error_code4 == o.error_code4 &&
          first_dialysis_date == o.first_dialysis_date &&
          hicn == o.hicn &&
          late_submission_ind == o.late_submission_ind &&
          ms_p_birth_date == o.ms_p_birth_date &&
          ms_p_eff_date == o.ms_p_eff_date &&
          ms_p_gender == o.ms_p_gender &&
          ms_p_last_name == o.ms_p_last_name &&
          ms_p_term_date == o.ms_p_term_date &&
          medicare_part_a_eff_date == o.medicare_part_a_eff_date &&
          medicare_part_a_term_date == o.medicare_part_a_term_date &&
          medicare_part_a_update_date == o.medicare_part_a_update_date &&
          medicare_part_b_eff_date == o.medicare_part_b_eff_date &&
          medicare_part_b_term_date == o.medicare_part_b_term_date &&
          medicare_part_b_update_date == o.medicare_part_b_update_date &&
          medicare_part_c_control_num == o.medicare_part_c_control_num &&
          medicare_part_c_eff_date == o.medicare_part_c_eff_date &&
          medicare_part_c_term_date == o.medicare_part_c_term_date &&
          medicare_part_c_update_date == o.medicare_part_c_update_date &&
          medicare_part_d_control_num == o.medicare_part_d_control_num &&
          medicare_part_d_eff_date == o.medicare_part_d_eff_date &&
          medicare_part_d_term_date == o.medicare_part_d_term_date &&
          medicare_part_d_update_date == o.medicare_part_d_update_date &&
          member_seq == o.member_seq &&
          rr_e_assigned_dcn == o.rr_e_assigned_dcn &&
          submission_status == o.submission_status &&
          subscriber_id == o.subscriber_id &&
          transplant_date_most_recent == o.transplant_date_most_recent &&
          transplant_failure_date_most_recent == o.transplant_failure_date_most_recent &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [member_medicare_resp_key, cob_c_assigned_dcn, compliance_flag1, compliance_flag10, compliance_flag2, compliance_flag3, compliance_flag4, compliance_flag5, compliance_flag6, compliance_flag7, compliance_flag8, compliance_flag9, disposition_code, disposition_code_date, ers_d_coord_period_end_date, ers_d_coord_period_start_date, esr_d_self_training_date, entry_date, entry_user, error_code1, error_code2, error_code3, error_code4, first_dialysis_date, hicn, late_submission_ind, ms_p_birth_date, ms_p_eff_date, ms_p_gender, ms_p_last_name, ms_p_term_date, medicare_part_a_eff_date, medicare_part_a_term_date, medicare_part_a_update_date, medicare_part_b_eff_date, medicare_part_b_term_date, medicare_part_b_update_date, medicare_part_c_control_num, medicare_part_c_eff_date, medicare_part_c_term_date, medicare_part_c_update_date, medicare_part_d_control_num, medicare_part_d_eff_date, medicare_part_d_term_date, medicare_part_d_update_date, member_seq, rr_e_assigned_dcn, submission_status, subscriber_id, transplant_date_most_recent, transplant_failure_date_most_recent, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
