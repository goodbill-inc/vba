=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimCustomExCodeRule
    # Unique identifier for each custom Ex Code rule. This takes the combination of fields on this table and, if a claim fits in the configuration, assigns an ex code. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :claim_custom_ex_code_rule_key

    # Benefit code associated with the selected custom ExCode rule.
    attr_accessor :benefit_code

    # The Claim Type for this Custom Ex Code rule.
    attr_accessor :claim_type

    # The Date Type (service date, received date, etc.) to use in combination with effective dates to deterine if this rule applies.
    attr_accessor :date_type

    # The amount you want this edit to compare against.  For example, if you wanted to apply a custom ex code for any claim with a Co Insurance greater than $50, you would set Detail_Amount_Field = \"co_ins_amt\", set the Detail_Amount_Field_Operator to \">\", then set the Detail_Amount field to 50.00.
    attr_accessor :detail_amount

    # The detail amount field drives the logic for what the Field Operator and Amount are compared against on the Service line:            payable_amount: The amount payable based on rules applied (Allowed - (copay, coins, deductible, not covered, etc.).            billed_price: The amount billed, represented by the Billed_Price field.            plan_price: The price associated with the plan, represented by the Plan_Price field.            deductible_amt: The deductible amount, represented by the Deductible_Amt field.            co_pay_amt: The co-payment amount, represented by the Co_Pay_Amt field.            co_ins_amt: The co-insurance amount, represented by the Co_Ins_Amt field.            cob_amt: The coordination of benefits amount, represented by the COB_Amt field.            cob_hold: The coordination of benefits hold amount, represented by the COB_Hold field.            cob_mem_resp: The coordination of benefits member responsibility, represented by the COB_Mem_Resp field.            mem_resp: The total member responsibility, calculated as the sum of Co_Ins_Amt, Co_Pay_Amt, and Deductible_Amt.
    attr_accessor :detail_amount_field

    # Simple operator (Greater than, less than, or equal).  This compares the value identified in Detail_Amount_Field against the value in the Detail_Amount field based on this opeator.
    attr_accessor :detail_amount_field_operator

    # The Division ID for this Custom Ex Code rule.
    attr_accessor :division_id

    # Effective Date for this Custom Ex Code rule.
    attr_accessor :effective_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # The Ex Code that is applied if the identified criteria matched a claim during adjudication.
    attr_accessor :ex_code

    # The Tax ID for this Custom Ex Code rule.
    attr_accessor :federal_id

    # The Diagnosis Range for this Custom Ex Code rule.
    attr_accessor :from_diag_code

    # The Procedure Range for this Custom Ex Code rule.
    attr_accessor :from_procedure

    # The Group ID for this Custom Ex Code rule.
    attr_accessor :group_id

    # The Member Sequence for this Custom Ex Code rule.
    attr_accessor :member_seq

    # Option that allows custom claim rules to be applied in network, out of network or in all cases
    attr_accessor :network_option

    # The Plan ID for this Custom Ex Code rule.
    attr_accessor :plan_id

    # The Provider ID for this Custom Ex Code rule.
    attr_accessor :provider_id

    # The Subscriber ID for this Custom Ex Code rule.
    attr_accessor :subscriber_id

    # Term Date for this Custom Ex Code rule.
    attr_accessor :term_date

    # The Diagnosis Range for this Custom Ex Code rule.
    attr_accessor :thru_diag_code

    # The Procedure Range for this Custom Ex Code rule.
    attr_accessor :thru_procedure

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Indicates that this Custom Ex Code rule is going to apply the resulting Ex Code to the Service Line rather than the header.  This assumes the use of Benefit_Code and the Detail_Amount fields. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_detail_ex_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_custom_ex_code_rule_key' => :'claimCustomExCodeRule_Key',
        :'benefit_code' => :'benefit_Code',
        :'claim_type' => :'claim_Type',
        :'date_type' => :'date_Type',
        :'detail_amount' => :'detail_Amount',
        :'detail_amount_field' => :'detail_Amount_Field',
        :'detail_amount_field_operator' => :'detail_Amount_Field_Operator',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'federal_id' => :'federal_ID',
        :'from_diag_code' => :'from_Diag_Code',
        :'from_procedure' => :'from_Procedure',
        :'group_id' => :'group_ID',
        :'member_seq' => :'member_Seq',
        :'network_option' => :'network_Option',
        :'plan_id' => :'plan_ID',
        :'provider_id' => :'provider_ID',
        :'subscriber_id' => :'subscriber_ID',
        :'term_date' => :'term_Date',
        :'thru_diag_code' => :'thru_Diag_Code',
        :'thru_procedure' => :'thru_Procedure',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_detail_ex_code' => :'use_Detail_Ex_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_custom_ex_code_rule_key' => :'Integer',
        :'benefit_code' => :'String',
        :'claim_type' => :'String',
        :'date_type' => :'String',
        :'detail_amount' => :'Float',
        :'detail_amount_field' => :'String',
        :'detail_amount_field_operator' => :'String',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'federal_id' => :'String',
        :'from_diag_code' => :'String',
        :'from_procedure' => :'String',
        :'group_id' => :'String',
        :'member_seq' => :'String',
        :'network_option' => :'String',
        :'plan_id' => :'String',
        :'provider_id' => :'String',
        :'subscriber_id' => :'String',
        :'term_date' => :'Time',
        :'thru_diag_code' => :'String',
        :'thru_procedure' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_detail_ex_code' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'benefit_code',
        :'claim_type',
        :'date_type',
        :'detail_amount',
        :'detail_amount_field',
        :'detail_amount_field_operator',
        :'division_id',
        :'effective_date',
        :'entry_user',
        :'ex_code',
        :'federal_id',
        :'from_diag_code',
        :'from_procedure',
        :'group_id',
        :'member_seq',
        :'network_option',
        :'plan_id',
        :'provider_id',
        :'subscriber_id',
        :'term_date',
        :'thru_diag_code',
        :'thru_procedure',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimCustomExCodeRule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimCustomExCodeRule`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_custom_ex_code_rule_key')
        self.claim_custom_ex_code_rule_key = attributes[:'claim_custom_ex_code_rule_key']
      else
        self.claim_custom_ex_code_rule_key = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'claim_type')
        self.claim_type = attributes[:'claim_type']
      end

      if attributes.key?(:'date_type')
        self.date_type = attributes[:'date_type']
      end

      if attributes.key?(:'detail_amount')
        self.detail_amount = attributes[:'detail_amount']
      end

      if attributes.key?(:'detail_amount_field')
        self.detail_amount_field = attributes[:'detail_amount_field']
      end

      if attributes.key?(:'detail_amount_field_operator')
        self.detail_amount_field_operator = attributes[:'detail_amount_field_operator']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'from_diag_code')
        self.from_diag_code = attributes[:'from_diag_code']
      end

      if attributes.key?(:'from_procedure')
        self.from_procedure = attributes[:'from_procedure']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'network_option')
        self.network_option = attributes[:'network_option']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'thru_diag_code')
        self.thru_diag_code = attributes[:'thru_diag_code']
      end

      if attributes.key?(:'thru_procedure')
        self.thru_procedure = attributes[:'thru_procedure']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_detail_ex_code')
        self.use_detail_ex_code = attributes[:'use_detail_ex_code']
      else
        self.use_detail_ex_code = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_custom_ex_code_rule_key.nil?
        invalid_properties.push('invalid value for "claim_custom_ex_code_rule_key", claim_custom_ex_code_rule_key cannot be nil.')
      end

      if !@benefit_code.nil? && @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if !@claim_type.nil? && @claim_type.to_s.length > 20
        invalid_properties.push('invalid value for "claim_type", the character length must be smaller than or equal to 20.')
      end

      if !@date_type.nil? && @date_type.to_s.length > 16
        invalid_properties.push('invalid value for "date_type", the character length must be smaller than or equal to 16.')
      end

      if !@detail_amount_field.nil? && @detail_amount_field.to_s.length > 64
        invalid_properties.push('invalid value for "detail_amount_field", the character length must be smaller than or equal to 64.')
      end

      if !@detail_amount_field_operator.nil? && @detail_amount_field_operator.to_s.length > 32
        invalid_properties.push('invalid value for "detail_amount_field_operator", the character length must be smaller than or equal to 32.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@from_diag_code.nil? && @from_diag_code.to_s.length > 8
        invalid_properties.push('invalid value for "from_diag_code", the character length must be smaller than or equal to 8.')
      end

      if !@from_procedure.nil? && @from_procedure.to_s.length > 8
        invalid_properties.push('invalid value for "from_procedure", the character length must be smaller than or equal to 8.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@network_option.nil? && @network_option.to_s.length > 6
        invalid_properties.push('invalid value for "network_option", the character length must be smaller than or equal to 6.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@thru_diag_code.nil? && @thru_diag_code.to_s.length > 8
        invalid_properties.push('invalid value for "thru_diag_code", the character length must be smaller than or equal to 8.')
      end

      if !@thru_procedure.nil? && @thru_procedure.to_s.length > 8
        invalid_properties.push('invalid value for "thru_procedure", the character length must be smaller than or equal to 8.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_detail_ex_code.nil?
        invalid_properties.push('invalid value for "use_detail_ex_code", use_detail_ex_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_custom_ex_code_rule_key.nil?
      return false if !@benefit_code.nil? && @benefit_code.to_s.length > 10
      return false if !@claim_type.nil? && @claim_type.to_s.length > 20
      return false if !@date_type.nil? && @date_type.to_s.length > 16
      return false if !@detail_amount_field.nil? && @detail_amount_field.to_s.length > 64
      return false if !@detail_amount_field_operator.nil? && @detail_amount_field_operator.to_s.length > 32
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if !@from_diag_code.nil? && @from_diag_code.to_s.length > 8
      return false if !@from_procedure.nil? && @from_procedure.to_s.length > 8
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@network_option.nil? && @network_option.to_s.length > 6
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@thru_diag_code.nil? && @thru_diag_code.to_s.length > 8
      return false if !@thru_procedure.nil? && @thru_procedure.to_s.length > 8
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_detail_ex_code.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_custom_ex_code_rule_key Value to be assigned
    def claim_custom_ex_code_rule_key=(claim_custom_ex_code_rule_key)
      if claim_custom_ex_code_rule_key.nil?
        fail ArgumentError, 'claim_custom_ex_code_rule_key cannot be nil'
      end

      @claim_custom_ex_code_rule_key = claim_custom_ex_code_rule_key
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if !benefit_code.nil? && benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_type Value to be assigned
    def claim_type=(claim_type)
      if !claim_type.nil? && claim_type.to_s.length > 20
        fail ArgumentError, 'invalid value for "claim_type", the character length must be smaller than or equal to 20.'
      end

      @claim_type = claim_type
    end

    # Custom attribute writer method with validation
    # @param [Object] date_type Value to be assigned
    def date_type=(date_type)
      if !date_type.nil? && date_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "date_type", the character length must be smaller than or equal to 16.'
      end

      @date_type = date_type
    end

    # Custom attribute writer method with validation
    # @param [Object] detail_amount_field Value to be assigned
    def detail_amount_field=(detail_amount_field)
      if !detail_amount_field.nil? && detail_amount_field.to_s.length > 64
        fail ArgumentError, 'invalid value for "detail_amount_field", the character length must be smaller than or equal to 64.'
      end

      @detail_amount_field = detail_amount_field
    end

    # Custom attribute writer method with validation
    # @param [Object] detail_amount_field_operator Value to be assigned
    def detail_amount_field_operator=(detail_amount_field_operator)
      if !detail_amount_field_operator.nil? && detail_amount_field_operator.to_s.length > 32
        fail ArgumentError, 'invalid value for "detail_amount_field_operator", the character length must be smaller than or equal to 32.'
      end

      @detail_amount_field_operator = detail_amount_field_operator
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] from_diag_code Value to be assigned
    def from_diag_code=(from_diag_code)
      if !from_diag_code.nil? && from_diag_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "from_diag_code", the character length must be smaller than or equal to 8.'
      end

      @from_diag_code = from_diag_code
    end

    # Custom attribute writer method with validation
    # @param [Object] from_procedure Value to be assigned
    def from_procedure=(from_procedure)
      if !from_procedure.nil? && from_procedure.to_s.length > 8
        fail ArgumentError, 'invalid value for "from_procedure", the character length must be smaller than or equal to 8.'
      end

      @from_procedure = from_procedure
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] network_option Value to be assigned
    def network_option=(network_option)
      if !network_option.nil? && network_option.to_s.length > 6
        fail ArgumentError, 'invalid value for "network_option", the character length must be smaller than or equal to 6.'
      end

      @network_option = network_option
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] thru_diag_code Value to be assigned
    def thru_diag_code=(thru_diag_code)
      if !thru_diag_code.nil? && thru_diag_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "thru_diag_code", the character length must be smaller than or equal to 8.'
      end

      @thru_diag_code = thru_diag_code
    end

    # Custom attribute writer method with validation
    # @param [Object] thru_procedure Value to be assigned
    def thru_procedure=(thru_procedure)
      if !thru_procedure.nil? && thru_procedure.to_s.length > 8
        fail ArgumentError, 'invalid value for "thru_procedure", the character length must be smaller than or equal to 8.'
      end

      @thru_procedure = thru_procedure
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_detail_ex_code Value to be assigned
    def use_detail_ex_code=(use_detail_ex_code)
      if use_detail_ex_code.nil?
        fail ArgumentError, 'use_detail_ex_code cannot be nil'
      end

      @use_detail_ex_code = use_detail_ex_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_custom_ex_code_rule_key == o.claim_custom_ex_code_rule_key &&
          benefit_code == o.benefit_code &&
          claim_type == o.claim_type &&
          date_type == o.date_type &&
          detail_amount == o.detail_amount &&
          detail_amount_field == o.detail_amount_field &&
          detail_amount_field_operator == o.detail_amount_field_operator &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          federal_id == o.federal_id &&
          from_diag_code == o.from_diag_code &&
          from_procedure == o.from_procedure &&
          group_id == o.group_id &&
          member_seq == o.member_seq &&
          network_option == o.network_option &&
          plan_id == o.plan_id &&
          provider_id == o.provider_id &&
          subscriber_id == o.subscriber_id &&
          term_date == o.term_date &&
          thru_diag_code == o.thru_diag_code &&
          thru_procedure == o.thru_procedure &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_detail_ex_code == o.use_detail_ex_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_custom_ex_code_rule_key, benefit_code, claim_type, date_type, detail_amount, detail_amount_field, detail_amount_field_operator, division_id, effective_date, entry_date, entry_user, ex_code, federal_id, from_diag_code, from_procedure, group_id, member_seq, network_option, plan_id, provider_id, subscriber_id, term_date, thru_diag_code, thru_procedure, update_date, update_user, use_detail_ex_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
