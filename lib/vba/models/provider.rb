=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Provider
    # Unique idenfitier assigned to the Proivider record.
    attr_accessor :provider_id

    # Beginning of the range of accepted patient ages.
    attr_accessor :accepting_age_from

    # End of the range of accepted patient ages.
    attr_accessor :accepting_age_thru

    # Indicates whether the selected Provider is accepting new patients.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :accepting_patients

    # No longer in use. This fields has been replaced by the Credentialing tables.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :accepts_capitation

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :accepts_plan_fees

    # No longer in use. This fields has been replaced by the Credentialing tables.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :accepts_withhold

    # Indicates whether the Provider is active.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :active

    # Street address of the rendering location.
    attr_accessor :address

    # Address line 2 for the Provider entity.
    attr_accessor :address2

    # When this option is selected, adjudication to mark every claim as 'Advice to Pay' (ATP). Advice to Pay claims do not produce check records when processed.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :advice_to_pay

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :after_hours_procedures

    # Alternate identifier for the selected Provider.
    attr_accessor :alternate_id

    # BaseLoad Key for this Service Provider location.
    attr_accessor :blid

    # Provider's date of birth. (Not required if Entity is non-Person)
    attr_accessor :birth_date

    # Provider's place of birth. (If the entity is a Person)
    attr_accessor :birth_place

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :board_certification

    # City of the rendering location.
    attr_accessor :city

    # Indicates the Provider's preferred method of communication.
    attr_accessor :communication_method

    # Country code associated with the Provider entity.
    attr_accessor :country_id

    # County code associated with the Provider entity.
    attr_accessor :county_code

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :de_a_number

    # This option adjusts the 'Allowed Amount' above (positive values) or below (negative values) the 'Billed Amount' by the entered percentage.
    attr_accessor :discount_percent

    # Educational background of the Provider. (If the entity is a Person)
    attr_accessor :education

    # Indicates the effectiveness of this provider at this service location. Independent of Network effectiveness.
    attr_accessor :effective_date

    # Email address of the Provider entity.
    attr_accessor :email_address

    # Country code of the emergency phone number associated with the Provider entity.
    attr_accessor :emergency_country_code

    # Emergency phone number of the Provider.
    attr_accessor :emergency_phone

    # Unique identifier assigned to the Provider entity.
    attr_accessor :entity_id

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Identifies the type of individual Provider or Provider entity.
    attr_accessor :ethnicity_code

    # Indicates the effectiveness of this provider at this service location. Independent of Network effectiveness.
    attr_accessor :expiration_date

    # Country code of the fax number associated with the Provider entity.
    attr_accessor :fax_country_code

    # Fax number associated with the Provider's rendering location.
    attr_accessor :fax_number

    # Indicates that the Provider is opted out of fax communication.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :fax_opt_out

    # Provider's federal tax identification number.
    attr_accessor :federal_id

    # First name of the Provider. (Not required if Entity is non-Person)
    attr_accessor :first_name

    # Indicates whether the Provider facilities have handicap accessibility.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :handicap_access

    # Home address of the Provider. (If the entity is a Person)
    attr_accessor :home_address

    # City of the home address of the Provider. (If the entity is a Person)
    attr_accessor :home_city

    # Country code of the home phone number associated with the Provider entity.
    attr_accessor :home_country_code

    # Country indicator for Provider home address.
    attr_accessor :home_country_id

    # Home phone number of the Provider.
    attr_accessor :home_phone

    # State of the home address of the Provider. (If the entity is a Person)
    attr_accessor :home_state

    # Zip Code of the Provider's home address.
    attr_accessor :home_zip_code

    # Hours of operation for the Provider.
    attr_accessor :hours

    # This field is sometimes used to track an IVR Code for the providers IVR system.
    attr_accessor :iv_r_code

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :initial_cred_date

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :ins_agent

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :ins_carrier

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :ins_coverage_amt

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :ins_expiration_date

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :ins_policy_number

    # Lists the languages that able to be spoken/translated at the facility.
    attr_accessor :languages

    # Last name of the Provider. (Not required if Entity is non-Person)
    attr_accessor :last_name

    # Latitudinal coordinate of the Provider entity's location.
    attr_accessor :latitude

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :license_number

    # Longitudinal coordinate of the Provider entity's location.
    attr_accessor :longitude

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :malp_aggregate_limit

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :malp_carrier_id

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :malp_exp_date

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :malp_policys

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :malp_specific_limit

    # Unique Medicaid identifier associated with the Provider.
    attr_accessor :medicaid_id

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :medicare_cert_id

    # Middle initial of the Provider.
    attr_accessor :middle_name

    # Indicates whether the Provider facilities have nitrous oxide available for patients.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :nitrous_oxide

    # When this option is selected, the Provider remit will not include pends. This only works if a custom report is designed to use this option.
    attr_accessor :no_pends_on_remit

    # No longer in use. Replaced by the NoteData, NoteSource and NoteReference tables.
    attr_accessor :notes

    # No longer in use. This fields has been replaced by the Credentialing tables.
    attr_accessor :osh_a_procedures

    # Name of the Provider's Office Manager.
    attr_accessor :office_manager

    # Organization that the Provider belongs to.
    attr_accessor :org_name

    # Any other names that the Provider uses.
    attr_accessor :other_name

    # Specifies the Ex Code that should be applied when the 'Apply Ex Code' option is selected.
    attr_accessor :pend_ex_code

    # Indicates whether an Ex Code should be applied to claims that involve payments to the selected Provider.
    attr_accessor :pend_flag

    # Country code of the phone number associated with the Provider entity.
    attr_accessor :phone_country_code

    # Phone number associated with the Provider's rendering location.
    attr_accessor :phone_number

    # This is an information field used for custom reporting.
    attr_accessor :plan_provider

    # Defines the type of the selected Provider.
    attr_accessor :practice_type

    # This is an information field used for custom reporting.
    attr_accessor :print_auth

    # Identifies the type of individual Provider or Provider entity.
    attr_accessor :provider_type

    # This is an information field used for custom reporting.
    attr_accessor :require_fee_sched

    # Biological sex of the Provider.
    attr_accessor :sex

    # Social Security Number of the Provider.
    attr_accessor :soc_sec_number

    # No longer in use. This fields has been replaced by the Credentialing tables.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :sole_proprietor

    # Specialty/Specialties of the individual Provider/entity.
    attr_accessor :specialties

    # State of the rendering location.
    attr_accessor :state

    # Suffix associated with the Provider.
    attr_accessor :suffix

    # This is an information field used for custom reporting.
    attr_accessor :upi_n_number

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # When this option is selected, adjudication will error any of this Provider's claims that contain revenue codes.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :use_procedure_code

    # Website of the Provider entity.
    attr_accessor :website

    # Number of years that the Provider has been practicing.
    attr_accessor :years_practiced

    # Zip Code of the Provider's rendering location.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_id' => :'provider_ID',
        :'accepting_age_from' => :'accepting_Age_From',
        :'accepting_age_thru' => :'accepting_Age_Thru',
        :'accepting_patients' => :'accepting_Patients',
        :'accepts_capitation' => :'accepts_Capitation',
        :'accepts_plan_fees' => :'accepts_Plan_Fees',
        :'accepts_withhold' => :'accepts_Withhold',
        :'active' => :'active',
        :'address' => :'address',
        :'address2' => :'address2',
        :'advice_to_pay' => :'advice_To_Pay',
        :'after_hours_procedures' => :'after_Hours_Procedures',
        :'alternate_id' => :'alternate_ID',
        :'blid' => :'blid',
        :'birth_date' => :'birth_Date',
        :'birth_place' => :'birth_Place',
        :'board_certification' => :'board_Certification',
        :'city' => :'city',
        :'communication_method' => :'communication_Method',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'de_a_number' => :'deA_Number',
        :'discount_percent' => :'discount_Percent',
        :'education' => :'education',
        :'effective_date' => :'effective_Date',
        :'email_address' => :'email_Address',
        :'emergency_country_code' => :'emergency_Country_Code',
        :'emergency_phone' => :'emergency_Phone',
        :'entity_id' => :'entity_ID',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ethnicity_code' => :'ethnicity_Code',
        :'expiration_date' => :'expiration_Date',
        :'fax_country_code' => :'fax_Country_Code',
        :'fax_number' => :'fax_Number',
        :'fax_opt_out' => :'fax_Opt_Out',
        :'federal_id' => :'federal_ID',
        :'first_name' => :'first_Name',
        :'handicap_access' => :'handicap_Access',
        :'home_address' => :'home_Address',
        :'home_city' => :'home_City',
        :'home_country_code' => :'home_Country_Code',
        :'home_country_id' => :'home_Country_ID',
        :'home_phone' => :'home_Phone',
        :'home_state' => :'home_State',
        :'home_zip_code' => :'home_Zip_Code',
        :'hours' => :'hours',
        :'iv_r_code' => :'ivR_Code',
        :'initial_cred_date' => :'initial_Cred_Date',
        :'ins_agent' => :'ins_Agent',
        :'ins_carrier' => :'ins_Carrier',
        :'ins_coverage_amt' => :'ins_Coverage_Amt',
        :'ins_expiration_date' => :'ins_Expiration_Date',
        :'ins_policy_number' => :'ins_Policy_Number',
        :'languages' => :'languages',
        :'last_name' => :'last_Name',
        :'latitude' => :'latitude',
        :'license_number' => :'license_Number',
        :'longitude' => :'longitude',
        :'malp_aggregate_limit' => :'malp_Aggregate_Limit',
        :'malp_carrier_id' => :'malp_Carrier_ID',
        :'malp_exp_date' => :'malp_Exp_Date',
        :'malp_policys' => :'malp_Policys',
        :'malp_specific_limit' => :'malp_Specific_Limit',
        :'medicaid_id' => :'medicaid_ID',
        :'medicare_cert_id' => :'medicare_Cert_ID',
        :'middle_name' => :'middle_Name',
        :'nitrous_oxide' => :'nitrous_Oxide',
        :'no_pends_on_remit' => :'no_Pends_On_Remit',
        :'notes' => :'notes',
        :'osh_a_procedures' => :'oshA_Procedures',
        :'office_manager' => :'office_Manager',
        :'org_name' => :'org_Name',
        :'other_name' => :'other_Name',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'phone_country_code' => :'phone_Country_Code',
        :'phone_number' => :'phone_Number',
        :'plan_provider' => :'plan_Provider',
        :'practice_type' => :'practice_Type',
        :'print_auth' => :'print_Auth',
        :'provider_type' => :'provider_Type',
        :'require_fee_sched' => :'require_Fee_Sched',
        :'sex' => :'sex',
        :'soc_sec_number' => :'soc_Sec_Number',
        :'sole_proprietor' => :'sole_Proprietor',
        :'specialties' => :'specialties',
        :'state' => :'state',
        :'suffix' => :'suffix',
        :'upi_n_number' => :'upiN_Number',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_procedure_code' => :'use_Procedure_Code',
        :'website' => :'website',
        :'years_practiced' => :'years_Practiced',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_id' => :'String',
        :'accepting_age_from' => :'Integer',
        :'accepting_age_thru' => :'Integer',
        :'accepting_patients' => :'Boolean',
        :'accepts_capitation' => :'Boolean',
        :'accepts_plan_fees' => :'Boolean',
        :'accepts_withhold' => :'Boolean',
        :'active' => :'Boolean',
        :'address' => :'String',
        :'address2' => :'String',
        :'advice_to_pay' => :'Boolean',
        :'after_hours_procedures' => :'String',
        :'alternate_id' => :'String',
        :'blid' => :'String',
        :'birth_date' => :'Time',
        :'birth_place' => :'String',
        :'board_certification' => :'String',
        :'city' => :'String',
        :'communication_method' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'de_a_number' => :'String',
        :'discount_percent' => :'Float',
        :'education' => :'String',
        :'effective_date' => :'Time',
        :'email_address' => :'String',
        :'emergency_country_code' => :'String',
        :'emergency_phone' => :'String',
        :'entity_id' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ethnicity_code' => :'String',
        :'expiration_date' => :'Time',
        :'fax_country_code' => :'String',
        :'fax_number' => :'String',
        :'fax_opt_out' => :'Boolean',
        :'federal_id' => :'String',
        :'first_name' => :'String',
        :'handicap_access' => :'Boolean',
        :'home_address' => :'String',
        :'home_city' => :'String',
        :'home_country_code' => :'String',
        :'home_country_id' => :'String',
        :'home_phone' => :'String',
        :'home_state' => :'String',
        :'home_zip_code' => :'String',
        :'hours' => :'String',
        :'iv_r_code' => :'String',
        :'initial_cred_date' => :'Time',
        :'ins_agent' => :'String',
        :'ins_carrier' => :'String',
        :'ins_coverage_amt' => :'String',
        :'ins_expiration_date' => :'Time',
        :'ins_policy_number' => :'String',
        :'languages' => :'String',
        :'last_name' => :'String',
        :'latitude' => :'Float',
        :'license_number' => :'String',
        :'longitude' => :'Float',
        :'malp_aggregate_limit' => :'Integer',
        :'malp_carrier_id' => :'String',
        :'malp_exp_date' => :'Time',
        :'malp_policys' => :'String',
        :'malp_specific_limit' => :'Integer',
        :'medicaid_id' => :'String',
        :'medicare_cert_id' => :'String',
        :'middle_name' => :'String',
        :'nitrous_oxide' => :'Boolean',
        :'no_pends_on_remit' => :'String',
        :'notes' => :'String',
        :'osh_a_procedures' => :'String',
        :'office_manager' => :'String',
        :'org_name' => :'String',
        :'other_name' => :'String',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'phone_country_code' => :'String',
        :'phone_number' => :'String',
        :'plan_provider' => :'Boolean',
        :'practice_type' => :'String',
        :'print_auth' => :'Boolean',
        :'provider_type' => :'String',
        :'require_fee_sched' => :'String',
        :'sex' => :'String',
        :'soc_sec_number' => :'String',
        :'sole_proprietor' => :'Boolean',
        :'specialties' => :'String',
        :'state' => :'String',
        :'suffix' => :'String',
        :'upi_n_number' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_procedure_code' => :'Boolean',
        :'website' => :'String',
        :'years_practiced' => :'Integer',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'provider_id',
        :'accepting_age_from',
        :'accepting_age_thru',
        :'address',
        :'address2',
        :'after_hours_procedures',
        :'alternate_id',
        :'blid',
        :'birth_date',
        :'birth_place',
        :'board_certification',
        :'city',
        :'communication_method',
        :'country_id',
        :'county_code',
        :'de_a_number',
        :'discount_percent',
        :'education',
        :'effective_date',
        :'email_address',
        :'emergency_country_code',
        :'emergency_phone',
        :'entity_id',
        :'entry_user',
        :'ethnicity_code',
        :'expiration_date',
        :'fax_country_code',
        :'fax_number',
        :'federal_id',
        :'first_name',
        :'home_address',
        :'home_city',
        :'home_country_code',
        :'home_country_id',
        :'home_phone',
        :'home_state',
        :'home_zip_code',
        :'hours',
        :'iv_r_code',
        :'initial_cred_date',
        :'ins_agent',
        :'ins_carrier',
        :'ins_coverage_amt',
        :'ins_expiration_date',
        :'ins_policy_number',
        :'languages',
        :'last_name',
        :'latitude',
        :'license_number',
        :'longitude',
        :'malp_aggregate_limit',
        :'malp_carrier_id',
        :'malp_exp_date',
        :'malp_policys',
        :'malp_specific_limit',
        :'medicaid_id',
        :'medicare_cert_id',
        :'middle_name',
        :'no_pends_on_remit',
        :'notes',
        :'osh_a_procedures',
        :'office_manager',
        :'org_name',
        :'other_name',
        :'pend_ex_code',
        :'pend_flag',
        :'phone_country_code',
        :'phone_number',
        :'practice_type',
        :'provider_type',
        :'require_fee_sched',
        :'sex',
        :'soc_sec_number',
        :'specialties',
        :'state',
        :'suffix',
        :'upi_n_number',
        :'update_user',
        :'website',
        :'years_practiced',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Provider` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Provider`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'accepting_age_from')
        self.accepting_age_from = attributes[:'accepting_age_from']
      end

      if attributes.key?(:'accepting_age_thru')
        self.accepting_age_thru = attributes[:'accepting_age_thru']
      end

      if attributes.key?(:'accepting_patients')
        self.accepting_patients = attributes[:'accepting_patients']
      else
        self.accepting_patients = nil
      end

      if attributes.key?(:'accepts_capitation')
        self.accepts_capitation = attributes[:'accepts_capitation']
      else
        self.accepts_capitation = nil
      end

      if attributes.key?(:'accepts_plan_fees')
        self.accepts_plan_fees = attributes[:'accepts_plan_fees']
      else
        self.accepts_plan_fees = nil
      end

      if attributes.key?(:'accepts_withhold')
        self.accepts_withhold = attributes[:'accepts_withhold']
      else
        self.accepts_withhold = nil
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'advice_to_pay')
        self.advice_to_pay = attributes[:'advice_to_pay']
      else
        self.advice_to_pay = nil
      end

      if attributes.key?(:'after_hours_procedures')
        self.after_hours_procedures = attributes[:'after_hours_procedures']
      end

      if attributes.key?(:'alternate_id')
        self.alternate_id = attributes[:'alternate_id']
      end

      if attributes.key?(:'blid')
        self.blid = attributes[:'blid']
      end

      if attributes.key?(:'birth_date')
        self.birth_date = attributes[:'birth_date']
      end

      if attributes.key?(:'birth_place')
        self.birth_place = attributes[:'birth_place']
      end

      if attributes.key?(:'board_certification')
        self.board_certification = attributes[:'board_certification']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'communication_method')
        self.communication_method = attributes[:'communication_method']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'de_a_number')
        self.de_a_number = attributes[:'de_a_number']
      end

      if attributes.key?(:'discount_percent')
        self.discount_percent = attributes[:'discount_percent']
      end

      if attributes.key?(:'education')
        self.education = attributes[:'education']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'emergency_country_code')
        self.emergency_country_code = attributes[:'emergency_country_code']
      end

      if attributes.key?(:'emergency_phone')
        self.emergency_phone = attributes[:'emergency_phone']
      end

      if attributes.key?(:'entity_id')
        self.entity_id = attributes[:'entity_id']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ethnicity_code')
        self.ethnicity_code = attributes[:'ethnicity_code']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'fax_country_code')
        self.fax_country_code = attributes[:'fax_country_code']
      end

      if attributes.key?(:'fax_number')
        self.fax_number = attributes[:'fax_number']
      end

      if attributes.key?(:'fax_opt_out')
        self.fax_opt_out = attributes[:'fax_opt_out']
      else
        self.fax_opt_out = nil
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'handicap_access')
        self.handicap_access = attributes[:'handicap_access']
      else
        self.handicap_access = nil
      end

      if attributes.key?(:'home_address')
        self.home_address = attributes[:'home_address']
      end

      if attributes.key?(:'home_city')
        self.home_city = attributes[:'home_city']
      end

      if attributes.key?(:'home_country_code')
        self.home_country_code = attributes[:'home_country_code']
      end

      if attributes.key?(:'home_country_id')
        self.home_country_id = attributes[:'home_country_id']
      end

      if attributes.key?(:'home_phone')
        self.home_phone = attributes[:'home_phone']
      end

      if attributes.key?(:'home_state')
        self.home_state = attributes[:'home_state']
      end

      if attributes.key?(:'home_zip_code')
        self.home_zip_code = attributes[:'home_zip_code']
      end

      if attributes.key?(:'hours')
        self.hours = attributes[:'hours']
      end

      if attributes.key?(:'iv_r_code')
        self.iv_r_code = attributes[:'iv_r_code']
      end

      if attributes.key?(:'initial_cred_date')
        self.initial_cred_date = attributes[:'initial_cred_date']
      end

      if attributes.key?(:'ins_agent')
        self.ins_agent = attributes[:'ins_agent']
      end

      if attributes.key?(:'ins_carrier')
        self.ins_carrier = attributes[:'ins_carrier']
      end

      if attributes.key?(:'ins_coverage_amt')
        self.ins_coverage_amt = attributes[:'ins_coverage_amt']
      end

      if attributes.key?(:'ins_expiration_date')
        self.ins_expiration_date = attributes[:'ins_expiration_date']
      end

      if attributes.key?(:'ins_policy_number')
        self.ins_policy_number = attributes[:'ins_policy_number']
      end

      if attributes.key?(:'languages')
        self.languages = attributes[:'languages']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'license_number')
        self.license_number = attributes[:'license_number']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'malp_aggregate_limit')
        self.malp_aggregate_limit = attributes[:'malp_aggregate_limit']
      end

      if attributes.key?(:'malp_carrier_id')
        self.malp_carrier_id = attributes[:'malp_carrier_id']
      end

      if attributes.key?(:'malp_exp_date')
        self.malp_exp_date = attributes[:'malp_exp_date']
      end

      if attributes.key?(:'malp_policys')
        self.malp_policys = attributes[:'malp_policys']
      end

      if attributes.key?(:'malp_specific_limit')
        self.malp_specific_limit = attributes[:'malp_specific_limit']
      end

      if attributes.key?(:'medicaid_id')
        self.medicaid_id = attributes[:'medicaid_id']
      end

      if attributes.key?(:'medicare_cert_id')
        self.medicare_cert_id = attributes[:'medicare_cert_id']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'nitrous_oxide')
        self.nitrous_oxide = attributes[:'nitrous_oxide']
      else
        self.nitrous_oxide = nil
      end

      if attributes.key?(:'no_pends_on_remit')
        self.no_pends_on_remit = attributes[:'no_pends_on_remit']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'osh_a_procedures')
        self.osh_a_procedures = attributes[:'osh_a_procedures']
      end

      if attributes.key?(:'office_manager')
        self.office_manager = attributes[:'office_manager']
      end

      if attributes.key?(:'org_name')
        self.org_name = attributes[:'org_name']
      end

      if attributes.key?(:'other_name')
        self.other_name = attributes[:'other_name']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'plan_provider')
        self.plan_provider = attributes[:'plan_provider']
      else
        self.plan_provider = nil
      end

      if attributes.key?(:'practice_type')
        self.practice_type = attributes[:'practice_type']
      end

      if attributes.key?(:'print_auth')
        self.print_auth = attributes[:'print_auth']
      else
        self.print_auth = nil
      end

      if attributes.key?(:'provider_type')
        self.provider_type = attributes[:'provider_type']
      end

      if attributes.key?(:'require_fee_sched')
        self.require_fee_sched = attributes[:'require_fee_sched']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'soc_sec_number')
        self.soc_sec_number = attributes[:'soc_sec_number']
      end

      if attributes.key?(:'sole_proprietor')
        self.sole_proprietor = attributes[:'sole_proprietor']
      else
        self.sole_proprietor = nil
      end

      if attributes.key?(:'specialties')
        self.specialties = attributes[:'specialties']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'suffix')
        self.suffix = attributes[:'suffix']
      end

      if attributes.key?(:'upi_n_number')
        self.upi_n_number = attributes[:'upi_n_number']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_procedure_code')
        self.use_procedure_code = attributes[:'use_procedure_code']
      else
        self.use_procedure_code = nil
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'years_practiced')
        self.years_practiced = attributes[:'years_practiced']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if @accepting_patients.nil?
        invalid_properties.push('invalid value for "accepting_patients", accepting_patients cannot be nil.')
      end

      if @accepts_capitation.nil?
        invalid_properties.push('invalid value for "accepts_capitation", accepts_capitation cannot be nil.')
      end

      if @accepts_plan_fees.nil?
        invalid_properties.push('invalid value for "accepts_plan_fees", accepts_plan_fees cannot be nil.')
      end

      if @accepts_withhold.nil?
        invalid_properties.push('invalid value for "accepts_withhold", accepts_withhold cannot be nil.')
      end

      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      if !@address.nil? && @address.to_s.length > 90
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 90.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if @advice_to_pay.nil?
        invalid_properties.push('invalid value for "advice_to_pay", advice_to_pay cannot be nil.')
      end

      if !@alternate_id.nil? && @alternate_id.to_s.length > 20
        invalid_properties.push('invalid value for "alternate_id", the character length must be smaller than or equal to 20.')
      end

      if !@blid.nil? && @blid.to_s.length > 64
        invalid_properties.push('invalid value for "blid", the character length must be smaller than or equal to 64.')
      end

      if !@birth_place.nil? && @birth_place.to_s.length > 50
        invalid_properties.push('invalid value for "birth_place", the character length must be smaller than or equal to 50.')
      end

      if !@city.nil? && @city.to_s.length > 30
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 30.')
      end

      if !@communication_method.nil? && @communication_method.to_s.length > 16
        invalid_properties.push('invalid value for "communication_method", the character length must be smaller than or equal to 16.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if !@de_a_number.nil? && @de_a_number.to_s.length > 20
        invalid_properties.push('invalid value for "de_a_number", the character length must be smaller than or equal to 20.')
      end

      if !@email_address.nil? && @email_address.to_s.length > 128
        invalid_properties.push('invalid value for "email_address", the character length must be smaller than or equal to 128.')
      end

      if !@emergency_country_code.nil? && @emergency_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "emergency_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@emergency_phone.nil? && @emergency_phone.to_s.length > 20
        invalid_properties.push('invalid value for "emergency_phone", the character length must be smaller than or equal to 20.')
      end

      if !@entity_id.nil? && @entity_id.to_s.length > 1
        invalid_properties.push('invalid value for "entity_id", the character length must be smaller than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ethnicity_code.nil? && @ethnicity_code.to_s.length > 1
        invalid_properties.push('invalid value for "ethnicity_code", the character length must be smaller than or equal to 1.')
      end

      if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@fax_number.nil? && @fax_number.to_s.length > 20
        invalid_properties.push('invalid value for "fax_number", the character length must be smaller than or equal to 20.')
      end

      if @fax_opt_out.nil?
        invalid_properties.push('invalid value for "fax_opt_out", fax_opt_out cannot be nil.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 30
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 30.')
      end

      if @handicap_access.nil?
        invalid_properties.push('invalid value for "handicap_access", handicap_access cannot be nil.')
      end

      if !@home_address.nil? && @home_address.to_s.length > 90
        invalid_properties.push('invalid value for "home_address", the character length must be smaller than or equal to 90.')
      end

      if !@home_city.nil? && @home_city.to_s.length > 30
        invalid_properties.push('invalid value for "home_city", the character length must be smaller than or equal to 30.')
      end

      if !@home_country_code.nil? && @home_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "home_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@home_country_id.nil? && @home_country_id.to_s.length > 8
        invalid_properties.push('invalid value for "home_country_id", the character length must be smaller than or equal to 8.')
      end

      if !@home_phone.nil? && @home_phone.to_s.length > 20
        invalid_properties.push('invalid value for "home_phone", the character length must be smaller than or equal to 20.')
      end

      if !@home_state.nil? && @home_state.to_s.length > 10
        invalid_properties.push('invalid value for "home_state", the character length must be smaller than or equal to 10.')
      end

      if !@home_zip_code.nil? && @home_zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "home_zip_code", the character length must be smaller than or equal to 32.')
      end

      if !@iv_r_code.nil? && @iv_r_code.to_s.length > 10
        invalid_properties.push('invalid value for "iv_r_code", the character length must be smaller than or equal to 10.')
      end

      if !@ins_agent.nil? && @ins_agent.to_s.length > 50
        invalid_properties.push('invalid value for "ins_agent", the character length must be smaller than or equal to 50.')
      end

      if !@ins_carrier.nil? && @ins_carrier.to_s.length > 50
        invalid_properties.push('invalid value for "ins_carrier", the character length must be smaller than or equal to 50.')
      end

      if !@ins_coverage_amt.nil? && @ins_coverage_amt.to_s.length > 50
        invalid_properties.push('invalid value for "ins_coverage_amt", the character length must be smaller than or equal to 50.')
      end

      if !@ins_policy_number.nil? && @ins_policy_number.to_s.length > 25
        invalid_properties.push('invalid value for "ins_policy_number", the character length must be smaller than or equal to 25.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 30
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 30.')
      end

      if !@license_number.nil? && @license_number.to_s.length > 20
        invalid_properties.push('invalid value for "license_number", the character length must be smaller than or equal to 20.')
      end

      if !@malp_carrier_id.nil? && @malp_carrier_id.to_s.length > 20
        invalid_properties.push('invalid value for "malp_carrier_id", the character length must be smaller than or equal to 20.')
      end

      if !@malp_policys.nil? && @malp_policys.to_s.length > 200
        invalid_properties.push('invalid value for "malp_policys", the character length must be smaller than or equal to 200.')
      end

      if !@medicaid_id.nil? && @medicaid_id.to_s.length > 20
        invalid_properties.push('invalid value for "medicaid_id", the character length must be smaller than or equal to 20.')
      end

      if !@medicare_cert_id.nil? && @medicare_cert_id.to_s.length > 20
        invalid_properties.push('invalid value for "medicare_cert_id", the character length must be smaller than or equal to 20.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 20
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 20.')
      end

      if @nitrous_oxide.nil?
        invalid_properties.push('invalid value for "nitrous_oxide", nitrous_oxide cannot be nil.')
      end

      if !@no_pends_on_remit.nil? && @no_pends_on_remit.to_s.length > 1
        invalid_properties.push('invalid value for "no_pends_on_remit", the character length must be smaller than or equal to 1.')
      end

      if !@office_manager.nil? && @office_manager.to_s.length > 50
        invalid_properties.push('invalid value for "office_manager", the character length must be smaller than or equal to 50.')
      end

      if !@org_name.nil? && @org_name.to_s.length > 512
        invalid_properties.push('invalid value for "org_name", the character length must be smaller than or equal to 512.')
      end

      if !@other_name.nil? && @other_name.to_s.length > 96
        invalid_properties.push('invalid value for "other_name", the character length must be smaller than or equal to 96.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length > 20
        invalid_properties.push('invalid value for "phone_number", the character length must be smaller than or equal to 20.')
      end

      if @plan_provider.nil?
        invalid_properties.push('invalid value for "plan_provider", plan_provider cannot be nil.')
      end

      if !@practice_type.nil? && @practice_type.to_s.length > 16
        invalid_properties.push('invalid value for "practice_type", the character length must be smaller than or equal to 16.')
      end

      if @print_auth.nil?
        invalid_properties.push('invalid value for "print_auth", print_auth cannot be nil.')
      end

      if !@provider_type.nil? && @provider_type.to_s.length > 10
        invalid_properties.push('invalid value for "provider_type", the character length must be smaller than or equal to 10.')
      end

      if !@require_fee_sched.nil? && @require_fee_sched.to_s.length > 1
        invalid_properties.push('invalid value for "require_fee_sched", the character length must be smaller than or equal to 1.')
      end

      if !@sex.nil? && @sex.to_s.length > 1
        invalid_properties.push('invalid value for "sex", the character length must be smaller than or equal to 1.')
      end

      if !@soc_sec_number.nil? && @soc_sec_number.to_s.length > 10
        invalid_properties.push('invalid value for "soc_sec_number", the character length must be smaller than or equal to 10.')
      end

      if @sole_proprietor.nil?
        invalid_properties.push('invalid value for "sole_proprietor", sole_proprietor cannot be nil.')
      end

      if !@specialties.nil? && @specialties.to_s.length > 50
        invalid_properties.push('invalid value for "specialties", the character length must be smaller than or equal to 50.')
      end

      if !@state.nil? && @state.to_s.length > 10
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 10.')
      end

      if !@suffix.nil? && @suffix.to_s.length > 20
        invalid_properties.push('invalid value for "suffix", the character length must be smaller than or equal to 20.')
      end

      if !@upi_n_number.nil? && @upi_n_number.to_s.length > 20
        invalid_properties.push('invalid value for "upi_n_number", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_procedure_code.nil?
        invalid_properties.push('invalid value for "use_procedure_code", use_procedure_code cannot be nil.')
      end

      if !@website.nil? && @website.to_s.length > 128
        invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 128.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if @accepting_patients.nil?
      return false if @accepts_capitation.nil?
      return false if @accepts_plan_fees.nil?
      return false if @accepts_withhold.nil?
      return false if @active.nil?
      return false if !@address.nil? && @address.to_s.length > 90
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if @advice_to_pay.nil?
      return false if !@alternate_id.nil? && @alternate_id.to_s.length > 20
      return false if !@blid.nil? && @blid.to_s.length > 64
      return false if !@birth_place.nil? && @birth_place.to_s.length > 50
      return false if !@city.nil? && @city.to_s.length > 30
      return false if !@communication_method.nil? && @communication_method.to_s.length > 16
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if !@de_a_number.nil? && @de_a_number.to_s.length > 20
      return false if !@email_address.nil? && @email_address.to_s.length > 128
      return false if !@emergency_country_code.nil? && @emergency_country_code.to_s.length > 8
      return false if !@emergency_phone.nil? && @emergency_phone.to_s.length > 20
      return false if !@entity_id.nil? && @entity_id.to_s.length > 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ethnicity_code.nil? && @ethnicity_code.to_s.length > 1
      return false if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
      return false if !@fax_number.nil? && @fax_number.to_s.length > 20
      return false if @fax_opt_out.nil?
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if !@first_name.nil? && @first_name.to_s.length > 30
      return false if @handicap_access.nil?
      return false if !@home_address.nil? && @home_address.to_s.length > 90
      return false if !@home_city.nil? && @home_city.to_s.length > 30
      return false if !@home_country_code.nil? && @home_country_code.to_s.length > 8
      return false if !@home_country_id.nil? && @home_country_id.to_s.length > 8
      return false if !@home_phone.nil? && @home_phone.to_s.length > 20
      return false if !@home_state.nil? && @home_state.to_s.length > 10
      return false if !@home_zip_code.nil? && @home_zip_code.to_s.length > 32
      return false if !@iv_r_code.nil? && @iv_r_code.to_s.length > 10
      return false if !@ins_agent.nil? && @ins_agent.to_s.length > 50
      return false if !@ins_carrier.nil? && @ins_carrier.to_s.length > 50
      return false if !@ins_coverage_amt.nil? && @ins_coverage_amt.to_s.length > 50
      return false if !@ins_policy_number.nil? && @ins_policy_number.to_s.length > 25
      return false if !@last_name.nil? && @last_name.to_s.length > 30
      return false if !@license_number.nil? && @license_number.to_s.length > 20
      return false if !@malp_carrier_id.nil? && @malp_carrier_id.to_s.length > 20
      return false if !@malp_policys.nil? && @malp_policys.to_s.length > 200
      return false if !@medicaid_id.nil? && @medicaid_id.to_s.length > 20
      return false if !@medicare_cert_id.nil? && @medicare_cert_id.to_s.length > 20
      return false if !@middle_name.nil? && @middle_name.to_s.length > 20
      return false if @nitrous_oxide.nil?
      return false if !@no_pends_on_remit.nil? && @no_pends_on_remit.to_s.length > 1
      return false if !@office_manager.nil? && @office_manager.to_s.length > 50
      return false if !@org_name.nil? && @org_name.to_s.length > 512
      return false if !@other_name.nil? && @other_name.to_s.length > 96
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if !@phone_number.nil? && @phone_number.to_s.length > 20
      return false if @plan_provider.nil?
      return false if !@practice_type.nil? && @practice_type.to_s.length > 16
      return false if @print_auth.nil?
      return false if !@provider_type.nil? && @provider_type.to_s.length > 10
      return false if !@require_fee_sched.nil? && @require_fee_sched.to_s.length > 1
      return false if !@sex.nil? && @sex.to_s.length > 1
      return false if !@soc_sec_number.nil? && @soc_sec_number.to_s.length > 10
      return false if @sole_proprietor.nil?
      return false if !@specialties.nil? && @specialties.to_s.length > 50
      return false if !@state.nil? && @state.to_s.length > 10
      return false if !@suffix.nil? && @suffix.to_s.length > 20
      return false if !@upi_n_number.nil? && @upi_n_number.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_procedure_code.nil?
      return false if !@website.nil? && @website.to_s.length > 128
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] accepting_patients Value to be assigned
    def accepting_patients=(accepting_patients)
      if accepting_patients.nil?
        fail ArgumentError, 'accepting_patients cannot be nil'
      end

      @accepting_patients = accepting_patients
    end

    # Custom attribute writer method with validation
    # @param [Object] accepts_capitation Value to be assigned
    def accepts_capitation=(accepts_capitation)
      if accepts_capitation.nil?
        fail ArgumentError, 'accepts_capitation cannot be nil'
      end

      @accepts_capitation = accepts_capitation
    end

    # Custom attribute writer method with validation
    # @param [Object] accepts_plan_fees Value to be assigned
    def accepts_plan_fees=(accepts_plan_fees)
      if accepts_plan_fees.nil?
        fail ArgumentError, 'accepts_plan_fees cannot be nil'
      end

      @accepts_plan_fees = accepts_plan_fees
    end

    # Custom attribute writer method with validation
    # @param [Object] accepts_withhold Value to be assigned
    def accepts_withhold=(accepts_withhold)
      if accepts_withhold.nil?
        fail ArgumentError, 'accepts_withhold cannot be nil'
      end

      @accepts_withhold = accepts_withhold
    end

    # Custom attribute writer method with validation
    # @param [Object] active Value to be assigned
    def active=(active)
      if active.nil?
        fail ArgumentError, 'active cannot be nil'
      end

      @active = active
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 90
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 90.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] advice_to_pay Value to be assigned
    def advice_to_pay=(advice_to_pay)
      if advice_to_pay.nil?
        fail ArgumentError, 'advice_to_pay cannot be nil'
      end

      @advice_to_pay = advice_to_pay
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_id Value to be assigned
    def alternate_id=(alternate_id)
      if !alternate_id.nil? && alternate_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "alternate_id", the character length must be smaller than or equal to 20.'
      end

      @alternate_id = alternate_id
    end

    # Custom attribute writer method with validation
    # @param [Object] blid Value to be assigned
    def blid=(blid)
      if !blid.nil? && blid.to_s.length > 64
        fail ArgumentError, 'invalid value for "blid", the character length must be smaller than or equal to 64.'
      end

      @blid = blid
    end

    # Custom attribute writer method with validation
    # @param [Object] birth_place Value to be assigned
    def birth_place=(birth_place)
      if !birth_place.nil? && birth_place.to_s.length > 50
        fail ArgumentError, 'invalid value for "birth_place", the character length must be smaller than or equal to 50.'
      end

      @birth_place = birth_place
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 30
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 30.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] communication_method Value to be assigned
    def communication_method=(communication_method)
      if !communication_method.nil? && communication_method.to_s.length > 16
        fail ArgumentError, 'invalid value for "communication_method", the character length must be smaller than or equal to 16.'
      end

      @communication_method = communication_method
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] de_a_number Value to be assigned
    def de_a_number=(de_a_number)
      if !de_a_number.nil? && de_a_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "de_a_number", the character length must be smaller than or equal to 20.'
      end

      @de_a_number = de_a_number
    end

    # Custom attribute writer method with validation
    # @param [Object] email_address Value to be assigned
    def email_address=(email_address)
      if !email_address.nil? && email_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "email_address", the character length must be smaller than or equal to 128.'
      end

      @email_address = email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] emergency_country_code Value to be assigned
    def emergency_country_code=(emergency_country_code)
      if !emergency_country_code.nil? && emergency_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "emergency_country_code", the character length must be smaller than or equal to 8.'
      end

      @emergency_country_code = emergency_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] emergency_phone Value to be assigned
    def emergency_phone=(emergency_phone)
      if !emergency_phone.nil? && emergency_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "emergency_phone", the character length must be smaller than or equal to 20.'
      end

      @emergency_phone = emergency_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] entity_id Value to be assigned
    def entity_id=(entity_id)
      if !entity_id.nil? && entity_id.to_s.length > 1
        fail ArgumentError, 'invalid value for "entity_id", the character length must be smaller than or equal to 1.'
      end

      @entity_id = entity_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ethnicity_code Value to be assigned
    def ethnicity_code=(ethnicity_code)
      if !ethnicity_code.nil? && ethnicity_code.to_s.length > 1
        fail ArgumentError, 'invalid value for "ethnicity_code", the character length must be smaller than or equal to 1.'
      end

      @ethnicity_code = ethnicity_code
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_country_code Value to be assigned
    def fax_country_code=(fax_country_code)
      if !fax_country_code.nil? && fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @fax_country_code = fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_number Value to be assigned
    def fax_number=(fax_number)
      if !fax_number.nil? && fax_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax_number", the character length must be smaller than or equal to 20.'
      end

      @fax_number = fax_number
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_opt_out Value to be assigned
    def fax_opt_out=(fax_opt_out)
      if fax_opt_out.nil?
        fail ArgumentError, 'fax_opt_out cannot be nil'
      end

      @fax_opt_out = fax_opt_out
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 30
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 30.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] handicap_access Value to be assigned
    def handicap_access=(handicap_access)
      if handicap_access.nil?
        fail ArgumentError, 'handicap_access cannot be nil'
      end

      @handicap_access = handicap_access
    end

    # Custom attribute writer method with validation
    # @param [Object] home_address Value to be assigned
    def home_address=(home_address)
      if !home_address.nil? && home_address.to_s.length > 90
        fail ArgumentError, 'invalid value for "home_address", the character length must be smaller than or equal to 90.'
      end

      @home_address = home_address
    end

    # Custom attribute writer method with validation
    # @param [Object] home_city Value to be assigned
    def home_city=(home_city)
      if !home_city.nil? && home_city.to_s.length > 30
        fail ArgumentError, 'invalid value for "home_city", the character length must be smaller than or equal to 30.'
      end

      @home_city = home_city
    end

    # Custom attribute writer method with validation
    # @param [Object] home_country_code Value to be assigned
    def home_country_code=(home_country_code)
      if !home_country_code.nil? && home_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "home_country_code", the character length must be smaller than or equal to 8.'
      end

      @home_country_code = home_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] home_country_id Value to be assigned
    def home_country_id=(home_country_id)
      if !home_country_id.nil? && home_country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "home_country_id", the character length must be smaller than or equal to 8.'
      end

      @home_country_id = home_country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone Value to be assigned
    def home_phone=(home_phone)
      if !home_phone.nil? && home_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "home_phone", the character length must be smaller than or equal to 20.'
      end

      @home_phone = home_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] home_state Value to be assigned
    def home_state=(home_state)
      if !home_state.nil? && home_state.to_s.length > 10
        fail ArgumentError, 'invalid value for "home_state", the character length must be smaller than or equal to 10.'
      end

      @home_state = home_state
    end

    # Custom attribute writer method with validation
    # @param [Object] home_zip_code Value to be assigned
    def home_zip_code=(home_zip_code)
      if !home_zip_code.nil? && home_zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "home_zip_code", the character length must be smaller than or equal to 32.'
      end

      @home_zip_code = home_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] iv_r_code Value to be assigned
    def iv_r_code=(iv_r_code)
      if !iv_r_code.nil? && iv_r_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "iv_r_code", the character length must be smaller than or equal to 10.'
      end

      @iv_r_code = iv_r_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ins_agent Value to be assigned
    def ins_agent=(ins_agent)
      if !ins_agent.nil? && ins_agent.to_s.length > 50
        fail ArgumentError, 'invalid value for "ins_agent", the character length must be smaller than or equal to 50.'
      end

      @ins_agent = ins_agent
    end

    # Custom attribute writer method with validation
    # @param [Object] ins_carrier Value to be assigned
    def ins_carrier=(ins_carrier)
      if !ins_carrier.nil? && ins_carrier.to_s.length > 50
        fail ArgumentError, 'invalid value for "ins_carrier", the character length must be smaller than or equal to 50.'
      end

      @ins_carrier = ins_carrier
    end

    # Custom attribute writer method with validation
    # @param [Object] ins_coverage_amt Value to be assigned
    def ins_coverage_amt=(ins_coverage_amt)
      if !ins_coverage_amt.nil? && ins_coverage_amt.to_s.length > 50
        fail ArgumentError, 'invalid value for "ins_coverage_amt", the character length must be smaller than or equal to 50.'
      end

      @ins_coverage_amt = ins_coverage_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] ins_policy_number Value to be assigned
    def ins_policy_number=(ins_policy_number)
      if !ins_policy_number.nil? && ins_policy_number.to_s.length > 25
        fail ArgumentError, 'invalid value for "ins_policy_number", the character length must be smaller than or equal to 25.'
      end

      @ins_policy_number = ins_policy_number
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 30
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 30.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] license_number Value to be assigned
    def license_number=(license_number)
      if !license_number.nil? && license_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "license_number", the character length must be smaller than or equal to 20.'
      end

      @license_number = license_number
    end

    # Custom attribute writer method with validation
    # @param [Object] malp_carrier_id Value to be assigned
    def malp_carrier_id=(malp_carrier_id)
      if !malp_carrier_id.nil? && malp_carrier_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "malp_carrier_id", the character length must be smaller than or equal to 20.'
      end

      @malp_carrier_id = malp_carrier_id
    end

    # Custom attribute writer method with validation
    # @param [Object] malp_policys Value to be assigned
    def malp_policys=(malp_policys)
      if !malp_policys.nil? && malp_policys.to_s.length > 200
        fail ArgumentError, 'invalid value for "malp_policys", the character length must be smaller than or equal to 200.'
      end

      @malp_policys = malp_policys
    end

    # Custom attribute writer method with validation
    # @param [Object] medicaid_id Value to be assigned
    def medicaid_id=(medicaid_id)
      if !medicaid_id.nil? && medicaid_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "medicaid_id", the character length must be smaller than or equal to 20.'
      end

      @medicaid_id = medicaid_id
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_cert_id Value to be assigned
    def medicare_cert_id=(medicare_cert_id)
      if !medicare_cert_id.nil? && medicare_cert_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "medicare_cert_id", the character length must be smaller than or equal to 20.'
      end

      @medicare_cert_id = medicare_cert_id
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 20
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 20.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method with validation
    # @param [Object] nitrous_oxide Value to be assigned
    def nitrous_oxide=(nitrous_oxide)
      if nitrous_oxide.nil?
        fail ArgumentError, 'nitrous_oxide cannot be nil'
      end

      @nitrous_oxide = nitrous_oxide
    end

    # Custom attribute writer method with validation
    # @param [Object] no_pends_on_remit Value to be assigned
    def no_pends_on_remit=(no_pends_on_remit)
      if !no_pends_on_remit.nil? && no_pends_on_remit.to_s.length > 1
        fail ArgumentError, 'invalid value for "no_pends_on_remit", the character length must be smaller than or equal to 1.'
      end

      @no_pends_on_remit = no_pends_on_remit
    end

    # Custom attribute writer method with validation
    # @param [Object] office_manager Value to be assigned
    def office_manager=(office_manager)
      if !office_manager.nil? && office_manager.to_s.length > 50
        fail ArgumentError, 'invalid value for "office_manager", the character length must be smaller than or equal to 50.'
      end

      @office_manager = office_manager
    end

    # Custom attribute writer method with validation
    # @param [Object] org_name Value to be assigned
    def org_name=(org_name)
      if !org_name.nil? && org_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "org_name", the character length must be smaller than or equal to 512.'
      end

      @org_name = org_name
    end

    # Custom attribute writer method with validation
    # @param [Object] other_name Value to be assigned
    def other_name=(other_name)
      if !other_name.nil? && other_name.to_s.length > 96
        fail ArgumentError, 'invalid value for "other_name", the character length must be smaller than or equal to 96.'
      end

      @other_name = other_name
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone_number", the character length must be smaller than or equal to 20.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_provider Value to be assigned
    def plan_provider=(plan_provider)
      if plan_provider.nil?
        fail ArgumentError, 'plan_provider cannot be nil'
      end

      @plan_provider = plan_provider
    end

    # Custom attribute writer method with validation
    # @param [Object] practice_type Value to be assigned
    def practice_type=(practice_type)
      if !practice_type.nil? && practice_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "practice_type", the character length must be smaller than or equal to 16.'
      end

      @practice_type = practice_type
    end

    # Custom attribute writer method with validation
    # @param [Object] print_auth Value to be assigned
    def print_auth=(print_auth)
      if print_auth.nil?
        fail ArgumentError, 'print_auth cannot be nil'
      end

      @print_auth = print_auth
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_type Value to be assigned
    def provider_type=(provider_type)
      if !provider_type.nil? && provider_type.to_s.length > 10
        fail ArgumentError, 'invalid value for "provider_type", the character length must be smaller than or equal to 10.'
      end

      @provider_type = provider_type
    end

    # Custom attribute writer method with validation
    # @param [Object] require_fee_sched Value to be assigned
    def require_fee_sched=(require_fee_sched)
      if !require_fee_sched.nil? && require_fee_sched.to_s.length > 1
        fail ArgumentError, 'invalid value for "require_fee_sched", the character length must be smaller than or equal to 1.'
      end

      @require_fee_sched = require_fee_sched
    end

    # Custom attribute writer method with validation
    # @param [Object] sex Value to be assigned
    def sex=(sex)
      if !sex.nil? && sex.to_s.length > 1
        fail ArgumentError, 'invalid value for "sex", the character length must be smaller than or equal to 1.'
      end

      @sex = sex
    end

    # Custom attribute writer method with validation
    # @param [Object] soc_sec_number Value to be assigned
    def soc_sec_number=(soc_sec_number)
      if !soc_sec_number.nil? && soc_sec_number.to_s.length > 10
        fail ArgumentError, 'invalid value for "soc_sec_number", the character length must be smaller than or equal to 10.'
      end

      @soc_sec_number = soc_sec_number
    end

    # Custom attribute writer method with validation
    # @param [Object] sole_proprietor Value to be assigned
    def sole_proprietor=(sole_proprietor)
      if sole_proprietor.nil?
        fail ArgumentError, 'sole_proprietor cannot be nil'
      end

      @sole_proprietor = sole_proprietor
    end

    # Custom attribute writer method with validation
    # @param [Object] specialties Value to be assigned
    def specialties=(specialties)
      if !specialties.nil? && specialties.to_s.length > 50
        fail ArgumentError, 'invalid value for "specialties", the character length must be smaller than or equal to 50.'
      end

      @specialties = specialties
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 10
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 10.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] suffix Value to be assigned
    def suffix=(suffix)
      if !suffix.nil? && suffix.to_s.length > 20
        fail ArgumentError, 'invalid value for "suffix", the character length must be smaller than or equal to 20.'
      end

      @suffix = suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] upi_n_number Value to be assigned
    def upi_n_number=(upi_n_number)
      if !upi_n_number.nil? && upi_n_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "upi_n_number", the character length must be smaller than or equal to 20.'
      end

      @upi_n_number = upi_n_number
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_procedure_code Value to be assigned
    def use_procedure_code=(use_procedure_code)
      if use_procedure_code.nil?
        fail ArgumentError, 'use_procedure_code cannot be nil'
      end

      @use_procedure_code = use_procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] website Value to be assigned
    def website=(website)
      if !website.nil? && website.to_s.length > 128
        fail ArgumentError, 'invalid value for "website", the character length must be smaller than or equal to 128.'
      end

      @website = website
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_id == o.provider_id &&
          accepting_age_from == o.accepting_age_from &&
          accepting_age_thru == o.accepting_age_thru &&
          accepting_patients == o.accepting_patients &&
          accepts_capitation == o.accepts_capitation &&
          accepts_plan_fees == o.accepts_plan_fees &&
          accepts_withhold == o.accepts_withhold &&
          active == o.active &&
          address == o.address &&
          address2 == o.address2 &&
          advice_to_pay == o.advice_to_pay &&
          after_hours_procedures == o.after_hours_procedures &&
          alternate_id == o.alternate_id &&
          blid == o.blid &&
          birth_date == o.birth_date &&
          birth_place == o.birth_place &&
          board_certification == o.board_certification &&
          city == o.city &&
          communication_method == o.communication_method &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          de_a_number == o.de_a_number &&
          discount_percent == o.discount_percent &&
          education == o.education &&
          effective_date == o.effective_date &&
          email_address == o.email_address &&
          emergency_country_code == o.emergency_country_code &&
          emergency_phone == o.emergency_phone &&
          entity_id == o.entity_id &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ethnicity_code == o.ethnicity_code &&
          expiration_date == o.expiration_date &&
          fax_country_code == o.fax_country_code &&
          fax_number == o.fax_number &&
          fax_opt_out == o.fax_opt_out &&
          federal_id == o.federal_id &&
          first_name == o.first_name &&
          handicap_access == o.handicap_access &&
          home_address == o.home_address &&
          home_city == o.home_city &&
          home_country_code == o.home_country_code &&
          home_country_id == o.home_country_id &&
          home_phone == o.home_phone &&
          home_state == o.home_state &&
          home_zip_code == o.home_zip_code &&
          hours == o.hours &&
          iv_r_code == o.iv_r_code &&
          initial_cred_date == o.initial_cred_date &&
          ins_agent == o.ins_agent &&
          ins_carrier == o.ins_carrier &&
          ins_coverage_amt == o.ins_coverage_amt &&
          ins_expiration_date == o.ins_expiration_date &&
          ins_policy_number == o.ins_policy_number &&
          languages == o.languages &&
          last_name == o.last_name &&
          latitude == o.latitude &&
          license_number == o.license_number &&
          longitude == o.longitude &&
          malp_aggregate_limit == o.malp_aggregate_limit &&
          malp_carrier_id == o.malp_carrier_id &&
          malp_exp_date == o.malp_exp_date &&
          malp_policys == o.malp_policys &&
          malp_specific_limit == o.malp_specific_limit &&
          medicaid_id == o.medicaid_id &&
          medicare_cert_id == o.medicare_cert_id &&
          middle_name == o.middle_name &&
          nitrous_oxide == o.nitrous_oxide &&
          no_pends_on_remit == o.no_pends_on_remit &&
          notes == o.notes &&
          osh_a_procedures == o.osh_a_procedures &&
          office_manager == o.office_manager &&
          org_name == o.org_name &&
          other_name == o.other_name &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          phone_country_code == o.phone_country_code &&
          phone_number == o.phone_number &&
          plan_provider == o.plan_provider &&
          practice_type == o.practice_type &&
          print_auth == o.print_auth &&
          provider_type == o.provider_type &&
          require_fee_sched == o.require_fee_sched &&
          sex == o.sex &&
          soc_sec_number == o.soc_sec_number &&
          sole_proprietor == o.sole_proprietor &&
          specialties == o.specialties &&
          state == o.state &&
          suffix == o.suffix &&
          upi_n_number == o.upi_n_number &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_procedure_code == o.use_procedure_code &&
          website == o.website &&
          years_practiced == o.years_practiced &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_id, accepting_age_from, accepting_age_thru, accepting_patients, accepts_capitation, accepts_plan_fees, accepts_withhold, active, address, address2, advice_to_pay, after_hours_procedures, alternate_id, blid, birth_date, birth_place, board_certification, city, communication_method, country_id, county_code, de_a_number, discount_percent, education, effective_date, email_address, emergency_country_code, emergency_phone, entity_id, entry_date, entry_user, ethnicity_code, expiration_date, fax_country_code, fax_number, fax_opt_out, federal_id, first_name, handicap_access, home_address, home_city, home_country_code, home_country_id, home_phone, home_state, home_zip_code, hours, iv_r_code, initial_cred_date, ins_agent, ins_carrier, ins_coverage_amt, ins_expiration_date, ins_policy_number, languages, last_name, latitude, license_number, longitude, malp_aggregate_limit, malp_carrier_id, malp_exp_date, malp_policys, malp_specific_limit, medicaid_id, medicare_cert_id, middle_name, nitrous_oxide, no_pends_on_remit, notes, osh_a_procedures, office_manager, org_name, other_name, pend_ex_code, pend_flag, phone_country_code, phone_number, plan_provider, practice_type, print_auth, provider_type, require_fee_sched, sex, soc_sec_number, sole_proprietor, specialties, state, suffix, upi_n_number, update_date, update_user, use_procedure_code, website, years_practiced, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
