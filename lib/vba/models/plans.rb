=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Plans
    # Unique identifier assigned to the Plan.
    attr_accessor :plan_id

    # Total In-Network and Out of Network annual maximum the plan will pay out for the Familiy.
    attr_accessor :annual_max

    # In-Network annual maximum that the plan will pay out for the Familiy.
    attr_accessor :annual_max_net

    # Out of Network annual maximum that the plan will pay out for the Familiy.
    attr_accessor :annual_max_oon

    # Indicates if this plan allows auto-creation of Flex claims based on Group level configuration for flex auto-creation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :auto_create_flex

    # Used for custom reporting and information.
    attr_accessor :cobr_a_plan_type_desc

    # Indicates the maximum amount that can be held in COB savings.
    attr_accessor :co_b_savings_max

    # Indicates the type of COB to be used with the selected plan.
    attr_accessor :co_b_type

    # No longer in use. All captiation logic and processing now resides in the capitation tables. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :capitated

    # Default cash value when Policy & Forfeiture is used in enrollment.
    attr_accessor :cash_value_default

    # Indicates whether In-Network Coinsurance amounts apply toward the satisfaction of Out of Network amounts. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_ins_in_to_out

    # In Network Co-Insurance amount for the Family.
    attr_accessor :co_ins_max_mem

    # Total Co-Insurance amount for the Member.
    attr_accessor :co_ins_max_net_mem

    # Out of Network Co-Insurance amount for the Family.
    attr_accessor :co_ins_max_net_sub

    # Out of Network Co-Insurance amount for the Member.
    attr_accessor :co_ins_max_oon_mem

    # In Network Co-Insurance amount for the Member.
    attr_accessor :co_ins_max_oon_sub

    # Total Co-Insurance amount for the Family.
    attr_accessor :co_ins_max_sub

    # Indicates whether Out of Network CoInsurance amounts apply toward the satisfaction of the In-Network amounts. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_ins_out_to_in

    # When active, this will let the system know to limit the amount of co-insurance that applies to IN from OON by the Max. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_ins_out_to_in_limit

    # The max with which the co-insurance is limited by when CoIns_Out To In Limit is selected.
    attr_accessor :co_ins_out_to_in_limit_max

    # Claim UCR percentage provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_clm_ucr_pct

    # Out of network claim UCR percentage provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_clm_ucr_pct_oon

    # Fee Selector provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_fee_selector

    # Out of network fee selector provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_fee_selector_oon

    # Medicare percentage provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_medicare_pct

    # Out of network Medicare percentage provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_medicare_pct_oon

    # Password provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_password

    # Payor type provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_payor_type

    # Out of network Payor type provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_payor_type_oon

    # Percentage of change provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_pct_of_chg

    # Out of network percentage of change provided by context. Required for Context claim edits and repricing.
    attr_accessor :context4_pct_of_chg_oon

    # When using Context4, the Plan Price is never allowed to exceed the Billed Price, it'll set it to the Billed Price. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :context4_plan_price_not_greater_billed_fg

    # User ID provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_user_id

    # URL provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_web_uri

    # URL delete provided by Context. Required for Context claim edits and repricing.
    attr_accessor :context4_web_uri_delete

    # Indicates the currency being used.
    attr_accessor :currency_id

    # Indicates whether In-Network Deductible amounts apply toward the satisfaction of Out of Network amounts. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_in_to_out

    # Indicates whether Out of Network Deductible amounts apply toward the satisfaction of In-Network amounts. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_out_to_in

    # When active, this will let the system know to limit the amount of deductible that applies to IN from OON by the Max. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_out_to_in_limit

    # The max with which the deducible is limited by when Ded_Out To In Limit is selected.
    attr_accessor :ded_out_to_in_limit_max

    # A short description of the associated plan.
    attr_accessor :description

    # Date when the record was added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Deault extended term value assigned in Policy & Forfeiture when used in enrollment.
    attr_accessor :extended_term_default

    # Specifies that the number of Member level Coinsurance amounts should be used to satisfy the Family level Coinsurance amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :family_level_co_ins

    # Number of Members that must satisfy the Member level deductible before the Family level amount is considered met.
    attr_accessor :family_level_co_ins_member

    # Specifies that the number of Member level deductible amounts should be used to satisfy the Family level deductible. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :family_level_ded

    # Number of Members that must satisfy the Member level deductible before the Family level amount is considered met.
    attr_accessor :family_level_ded_member

    # Specifies that the number of Member level Out of Pocket amounts should be used to satisfy the Family level Out of Pocket amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :family_level_oop

    # Number of Members that must satisfy the Member level Out of Pocket before the Family level Out of Pocket is considered met.
    attr_accessor :family_level_oop_member

    # Information field used in reporting to identify this plan as Flex Advance Fund. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :flex_advance_fund

    # Indicates what type of Flex account to be associated with the plan.
    attr_accessor :flex_type

    # Default forfeiture status assigned when Policy & Forteiture is used in enrollment.
    attr_accessor :forfeiture_status_default

    # Ex Code associated with the illness waiting period.
    attr_accessor :illness_ex_code

    # Waiting Period after an illness for Disability plans to start coverage.
    attr_accessor :illness_waiting_period

    # Indicates whether the Disability plan includes a waiting period.
    attr_accessor :include_waiting_period

    # Ex Code associated with the injury waiting period.
    attr_accessor :injury_ex_code

    # Waiting Period after an injury for Disability plans to start coverage.
    attr_accessor :injury_waiting_period

    # Indicates if this Plan has Elimination Period rules. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :lt_c_apply_elimination_period

    # Indicates if Waiver of Premium rules should apply for this plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :lt_c_apply_waiver_of_premium

    # This is the daily benefit amount
    attr_accessor :lt_c_daily_benefit

    # The start of the selection range for members taking this plan and choosing their daily benefit.
    attr_accessor :lt_c_daily_benefit_range_from

    # The increment of each option in the range between the from and thru.  If empty, the member can manually select a value between the from / thru range.
    attr_accessor :lt_c_daily_benefit_range_increment

    # The end of the selection range for members taking this plan and choosing their daily benefit.
    attr_accessor :lt_c_daily_benefit_range_thru

    # This is the type of daily benefit defined for this plan.  The values are:  A - a flat daily benefit enforced by the plan.  B - member selected value utilizing the daily benefit range/increment settings.
    attr_accessor :lt_c_daily_benefit_type

    # This is the elimination period value based on Elimination_Period_Type.
    attr_accessor :lt_c_elimination_period

    # Indicates if the elimination period is per claim.  By default the elimination period is per plan/policy. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :lt_c_elimination_period_per_claim

    # This is the type of Elimination Period rule to apply for this Plan.  Values are:  A - Calendar Days  B - Service Days  C - Special Service Days (one day equals a week of elimination period)
    attr_accessor :lt_c_elimination_period_type

    # The selectable range of days the member can pick for calculations based on days.
    attr_accessor :lt_c_lifetime_max_days_from

    # The selectable range of days the member can pick for calculations based on days.
    attr_accessor :lt_c_lifetime_max_days_thru

    # The low end range for member lifetime max selection.
    attr_accessor :lt_c_lifetime_max_from

    # The increment of options the user can select within the max range.  Empty value here means it is a free from entry of max between the range.
    attr_accessor :lt_c_lifetime_max_increment

    # Indicates if plans of the same plan type, and both flagged as joint policy, can share a \"Total\" lifetime max between both plans as long as both plans have selected a shared benefit. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :lt_c_lifetime_max_joint_policy

    # The high end range for member lifetime max selection.
    attr_accessor :lt_c_lifetime_max_thru

    # Lifetime Max calculation type and will dicatate the max rules applied.  Valid values are:  STANDARD - DBM x 365 days x Lifetime Max Years selected  LMDAYS - DBM x Lifetime Max Days selected  FLAT - Lifetime Max Amount selected and not based on calculation  LMMONTHS - MBA x 12 Months x Lifetime Max Years selected
    attr_accessor :lt_c_lifetime_max_type

    # the selectable range of years the member can pick for calculations based on years.
    attr_accessor :lt_c_lifetime_max_years_from

    # The selectable range of years the member can pick for calculations based on years.
    attr_accessor :lt_c_lifetime_max_years_thru

    # This is the monthly benefit amount
    attr_accessor :lt_c_monthly_benefit

    # The start of the selection range for members taking this plan and choosing their monthly benefit.
    attr_accessor :lt_c_monthly_benefit_range_from

    # The increment of each option in the range between the from and thru.  If empty, the member can manually select a value between the from / thru range.
    attr_accessor :lt_c_monthly_benefit_range_increment

    # The end of the selection range for members taking this plan and choosing their monthly benefit.
    attr_accessor :lt_c_monthly_benefit_range_thru

    # This is the type of monthly benefit defined for this plan.  The values are:  A - a flat monthly benefit enforced by the plan.  B - member selected value utilizing the monthly benefit range/increment settings.
    attr_accessor :lt_c_monthly_benefit_type

    # This is the type/rules for LTC waiver of premium. Current Values are:  A - 1st day of following month  B - day of eligibility approval  C - joint waiver  D - survivorship waiver
    attr_accessor :lt_c_waiver_of_premium_type

    # Total lifetime amount that the Plan will pay both In Network and Out of Network for the Familiy.
    attr_accessor :lifetime_max

    # Lifetime amount that the Plan will pay In Network for the Familiy.
    attr_accessor :lifetime_max_net

    # Lifetime amount that the Plan will pay Out of Network for the Familiy.
    attr_accessor :lifetime_max_oon

    # Specifies the required age for maturity of policy inside enrollment.
    attr_accessor :maturity_age

    # Defines the age type for maturity based upon birth date or anniversary of enrollment.
    attr_accessor :maturity_age_type

    # Maximum number of weeks the specified Plan will pay Disability.
    attr_accessor :max_disability_weeks

    # Indicates whether the waiting period is included in the Max Disability Weeks.
    attr_accessor :max_includes_waiting_period

    # Total deductible amount to be credited back to each Member during adjudication.
    attr_accessor :mem_ded_credit

    # Out of Network deductible amount to be credited back to each Member during adjudication.
    attr_accessor :mem_ded_credit_oon

    # In-Network deductible amount to be credited back to each Member during adjudication.
    attr_accessor :mem_ded_credit_ppo

    # Total In-Network and Out of Network annual maximum the plan will pay out per Member.
    attr_accessor :member_annual_max

    # In-Network annual maximum that the plan will pay out per Member.
    attr_accessor :member_annual_max_net

    # Out of Network annual maximum that the plan will pay out per Member.
    attr_accessor :member_annual_max_oon

    # Deductible amount for the Member Out of Network.
    attr_accessor :member_ded_oon

    # Deductible amount for the Member In Network.
    attr_accessor :member_ded_ppo

    # Total deductible amount for the Member both In Network and Out of Network.
    attr_accessor :member_deductible

    # Total In-Network and Out of Network lifetime maximum that the plan will pay out per Member.
    attr_accessor :member_lifetime_max

    # In-Network lifetime maximum that the plan will pay out per Member.
    attr_accessor :member_lifetime_max_net

    # Out of Network lifetime that the plan will pay out per Member.
    attr_accessor :member_lifetime_max_oon

    # Formula used to calculate Out of Pocket amounts.
    attr_accessor :oo_p_calc_option

    # Indicates whether In-Network Out of Pocket amounts apply toward the satisfaction of Out of Network amounts. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :oo_p_in_to_out

    # Total In-Network and Out of Network Out of Pocket maximum for the Member.
    attr_accessor :oo_p_max_mem

    # In-Network Out of Pocket maximum for the Member.
    attr_accessor :oo_p_max_net_mem

    # In-Network Out of Pocket maximum for the Family.
    attr_accessor :oo_p_max_net_sub

    # Out of Network Out of Pocket for the Member.
    attr_accessor :oo_p_max_oon_mem

    # Out of Network Out of Pocket for the Family.
    attr_accessor :oo_p_max_oon_sub

    # Total In-Network and Out of Network Out of Pocket maximum for the Family.
    attr_accessor :oo_p_max_sub

    # Indicates whether Out of Network Out of Pocket amounts apply toward the satisfaction of In-Network amounts. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :oo_p_out_to_in

    # When active, this will let the system know to limit the amount of out of pocket that applies to IN from OON by the Max. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :oo_p_out_to_in_limit

    # The max with which the out of pocket is limited by when OOP_Out To In Limit is selected.
    attr_accessor :oo_p_out_to_in_limit_max

    # Payment Interval or frequency for Disability plans.
    attr_accessor :payment_interval

    # No longer in use.
    attr_accessor :payor_id

    # Identifies the Ex Code that will be applied based upon the Pend_Flag field.
    attr_accessor :pend_ex_code

    # Specifies if an Ex Code will be assigned, which will apply to all claims adjudicated for this plan. The Ex Code can be an informational, denial, or pend code. All ExCodes impact adjudication.
    attr_accessor :pend_flag

    # Used for custom reporting and information.
    attr_accessor :plan_document_url

    # Identifies the Type of Plan (medical, dental, etc.). Keep in mind that Accumulators are tied to 'Plan Type' not the plan itself.
    attr_accessor :plan_type

    # Length of the grace period.
    attr_accessor :policy_forfeiture_grace_period

    # Defines the type of grace period. Restricted to units of days.
    attr_accessor :policy_forfeiture_grace_period_type

    # Default policy status assigned when Policy & Forteiture is used in enrollment.
    attr_accessor :policy_status_default

    # Identifies the Ex Code that will be applied to disability claims falling within the provided range.
    attr_accessor :pre_ex_ex_code

    # No longer in use. Pre-Ex processing has been moved to a more detailed structure in PlanPrex tables.
    attr_accessor :pre_ex_from

    # Defines a range of days that is determined by comparing the start date of the plan and the disability date. If a disability claim falls within this defined range, the specified Ex Code will be applied to that claim.
    attr_accessor :pre_ex_range

    # No longer in use. Pre-Ex processing has been moved to a more detailed structure in PlanPrex tables.
    attr_accessor :pre_ex_thru

    # Determines the QPA Method to be used for claims under this Plan
    attr_accessor :qp_a_method

    # Deault paid up value when Policy & Forfeiture is used in enrollment.
    attr_accessor :reduced_paid_up_default

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :remove_member_amount_edit

    # State where the Plan originates or applies
    attr_accessor :situs_state

    # Total deductible amount to be credited back to the Subscriber during adjudication.
    attr_accessor :sub_ded_credit

    # Out of Network deductible amount to be credited back to the Subscriber during adjudication.
    attr_accessor :sub_ded_credit_oon

    # In-Network deductible amount to be credited back to the Subscriber during adjudication.
    attr_accessor :sub_ded_credit_ppo

    # Deductible amount for the Family Out of Network.
    attr_accessor :subscriber_ded_oon

    # Deductible amount for the Family In Network.
    attr_accessor :subscriber_ded_ppo

    # Total deductible amount for the Family both In Network and Out of Network.
    attr_accessor :subscriber_deductible

    # Survivor Benefit associated with Disability plans.
    attr_accessor :survivor_benefit

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Indicates whether the COB should be used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_cob_savings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'plan_id' => :'plan_ID',
        :'annual_max' => :'annual_Max',
        :'annual_max_net' => :'annual_Max_Net',
        :'annual_max_oon' => :'annual_Max_OON',
        :'auto_create_flex' => :'auto_Create_Flex',
        :'cobr_a_plan_type_desc' => :'cobrA_Plan_Type_Desc',
        :'co_b_savings_max' => :'coB_Savings_Max',
        :'co_b_type' => :'coB_Type',
        :'capitated' => :'capitated',
        :'cash_value_default' => :'cash_Value_Default',
        :'co_ins_in_to_out' => :'coIns_In_To_Out',
        :'co_ins_max_mem' => :'coIns_Max_Mem',
        :'co_ins_max_net_mem' => :'coIns_Max_Net_Mem',
        :'co_ins_max_net_sub' => :'coIns_Max_Net_Sub',
        :'co_ins_max_oon_mem' => :'coIns_Max_OON_Mem',
        :'co_ins_max_oon_sub' => :'coIns_Max_OON_Sub',
        :'co_ins_max_sub' => :'coIns_Max_Sub',
        :'co_ins_out_to_in' => :'coIns_Out_To_In',
        :'co_ins_out_to_in_limit' => :'coIns_Out_To_In_Limit',
        :'co_ins_out_to_in_limit_max' => :'coIns_Out_To_In_Limit_Max',
        :'context4_clm_ucr_pct' => :'context4_ClmUcrPct',
        :'context4_clm_ucr_pct_oon' => :'context4_ClmUcrPct_OON',
        :'context4_fee_selector' => :'context4_FeeSelector',
        :'context4_fee_selector_oon' => :'context4_FeeSelector_OON',
        :'context4_medicare_pct' => :'context4_MedicarePct',
        :'context4_medicare_pct_oon' => :'context4_MedicarePct_OON',
        :'context4_password' => :'context4_Password',
        :'context4_payor_type' => :'context4_PayorType',
        :'context4_payor_type_oon' => :'context4_PayorType_OON',
        :'context4_pct_of_chg' => :'context4_PctOfChg',
        :'context4_pct_of_chg_oon' => :'context4_PctOfChg_OON',
        :'context4_plan_price_not_greater_billed_fg' => :'context4_PlanPriceNotGreaterBilledFg',
        :'context4_user_id' => :'context4_UserID',
        :'context4_web_uri' => :'context4_WebURI',
        :'context4_web_uri_delete' => :'context4_WebURI_Delete',
        :'currency_id' => :'currency_ID',
        :'ded_in_to_out' => :'ded_In_To_Out',
        :'ded_out_to_in' => :'ded_Out_To_In',
        :'ded_out_to_in_limit' => :'ded_Out_To_In_Limit',
        :'ded_out_to_in_limit_max' => :'ded_Out_To_In_Limit_Max',
        :'description' => :'description',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'extended_term_default' => :'extended_Term_Default',
        :'family_level_co_ins' => :'family_Level_Co_Ins',
        :'family_level_co_ins_member' => :'family_Level_Co_Ins_Member',
        :'family_level_ded' => :'family_Level_Ded',
        :'family_level_ded_member' => :'family_Level_Ded_Member',
        :'family_level_oop' => :'family_Level_OOP',
        :'family_level_oop_member' => :'family_Level_OOP_Member',
        :'flex_advance_fund' => :'flex_Advance_Fund',
        :'flex_type' => :'flex_Type',
        :'forfeiture_status_default' => :'forfeiture_Status_Default',
        :'illness_ex_code' => :'illness_Ex_Code',
        :'illness_waiting_period' => :'illness_Waiting_Period',
        :'include_waiting_period' => :'include_Waiting_Period',
        :'injury_ex_code' => :'injury_Ex_Code',
        :'injury_waiting_period' => :'injury_Waiting_Period',
        :'lt_c_apply_elimination_period' => :'ltC_Apply_Elimination_Period',
        :'lt_c_apply_waiver_of_premium' => :'ltC_Apply_Waiver_Of_Premium',
        :'lt_c_daily_benefit' => :'ltC_Daily_Benefit',
        :'lt_c_daily_benefit_range_from' => :'ltC_Daily_Benefit_Range_From',
        :'lt_c_daily_benefit_range_increment' => :'ltC_Daily_Benefit_Range_Increment',
        :'lt_c_daily_benefit_range_thru' => :'ltC_Daily_Benefit_Range_Thru',
        :'lt_c_daily_benefit_type' => :'ltC_Daily_Benefit_Type',
        :'lt_c_elimination_period' => :'ltC_Elimination_Period',
        :'lt_c_elimination_period_per_claim' => :'ltC_Elimination_Period_Per_Claim',
        :'lt_c_elimination_period_type' => :'ltC_Elimination_Period_Type',
        :'lt_c_lifetime_max_days_from' => :'ltC_Lifetime_Max_Days_From',
        :'lt_c_lifetime_max_days_thru' => :'ltC_Lifetime_Max_Days_Thru',
        :'lt_c_lifetime_max_from' => :'ltC_Lifetime_Max_From',
        :'lt_c_lifetime_max_increment' => :'ltC_Lifetime_Max_Increment',
        :'lt_c_lifetime_max_joint_policy' => :'ltC_Lifetime_Max_Joint_Policy',
        :'lt_c_lifetime_max_thru' => :'ltC_Lifetime_Max_Thru',
        :'lt_c_lifetime_max_type' => :'ltC_Lifetime_Max_Type',
        :'lt_c_lifetime_max_years_from' => :'ltC_Lifetime_Max_Years_From',
        :'lt_c_lifetime_max_years_thru' => :'ltC_Lifetime_Max_Years_Thru',
        :'lt_c_monthly_benefit' => :'ltC_Monthly_Benefit',
        :'lt_c_monthly_benefit_range_from' => :'ltC_Monthly_Benefit_Range_From',
        :'lt_c_monthly_benefit_range_increment' => :'ltC_Monthly_Benefit_Range_Increment',
        :'lt_c_monthly_benefit_range_thru' => :'ltC_Monthly_Benefit_Range_Thru',
        :'lt_c_monthly_benefit_type' => :'ltC_Monthly_Benefit_Type',
        :'lt_c_waiver_of_premium_type' => :'ltC_Waiver_Of_Premium_Type',
        :'lifetime_max' => :'lifetime_Max',
        :'lifetime_max_net' => :'lifetime_Max_Net',
        :'lifetime_max_oon' => :'lifetime_Max_OON',
        :'maturity_age' => :'maturity_Age',
        :'maturity_age_type' => :'maturity_Age_Type',
        :'max_disability_weeks' => :'max_Disability_Weeks',
        :'max_includes_waiting_period' => :'max_Includes_Waiting_Period',
        :'mem_ded_credit' => :'mem_Ded_Credit',
        :'mem_ded_credit_oon' => :'mem_Ded_Credit_OON',
        :'mem_ded_credit_ppo' => :'mem_Ded_Credit_PPO',
        :'member_annual_max' => :'member_Annual_Max',
        :'member_annual_max_net' => :'member_Annual_Max_Net',
        :'member_annual_max_oon' => :'member_Annual_Max_OON',
        :'member_ded_oon' => :'member_Ded_OON',
        :'member_ded_ppo' => :'member_Ded_PPO',
        :'member_deductible' => :'member_Deductible',
        :'member_lifetime_max' => :'member_Lifetime_Max',
        :'member_lifetime_max_net' => :'member_Lifetime_Max_Net',
        :'member_lifetime_max_oon' => :'member_Lifetime_Max_OON',
        :'oo_p_calc_option' => :'ooP_Calc_Option',
        :'oo_p_in_to_out' => :'ooP_In_To_Out',
        :'oo_p_max_mem' => :'ooP_Max_Mem',
        :'oo_p_max_net_mem' => :'ooP_Max_Net_Mem',
        :'oo_p_max_net_sub' => :'ooP_Max_Net_Sub',
        :'oo_p_max_oon_mem' => :'ooP_Max_OON_Mem',
        :'oo_p_max_oon_sub' => :'ooP_Max_OON_Sub',
        :'oo_p_max_sub' => :'ooP_Max_Sub',
        :'oo_p_out_to_in' => :'ooP_Out_To_In',
        :'oo_p_out_to_in_limit' => :'ooP_Out_To_In_Limit',
        :'oo_p_out_to_in_limit_max' => :'ooP_Out_To_In_Limit_Max',
        :'payment_interval' => :'payment_Interval',
        :'payor_id' => :'payor_ID',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'plan_document_url' => :'plan_Document_URL',
        :'plan_type' => :'plan_Type',
        :'policy_forfeiture_grace_period' => :'policy_Forfeiture_Grace_Period',
        :'policy_forfeiture_grace_period_type' => :'policy_Forfeiture_Grace_Period_Type',
        :'policy_status_default' => :'policy_Status_Default',
        :'pre_ex_ex_code' => :'preEx_Ex_Code',
        :'pre_ex_from' => :'preEx_From',
        :'pre_ex_range' => :'preEx_Range',
        :'pre_ex_thru' => :'preEx_Thru',
        :'qp_a_method' => :'qpA_Method',
        :'reduced_paid_up_default' => :'reduced_Paid_Up_Default',
        :'remove_member_amount_edit' => :'remove_Member_Amount_Edit',
        :'situs_state' => :'situs_State',
        :'sub_ded_credit' => :'sub_Ded_Credit',
        :'sub_ded_credit_oon' => :'sub_Ded_Credit_OON',
        :'sub_ded_credit_ppo' => :'sub_Ded_Credit_PPO',
        :'subscriber_ded_oon' => :'subscriber_Ded_OON',
        :'subscriber_ded_ppo' => :'subscriber_Ded_PPO',
        :'subscriber_deductible' => :'subscriber_Deductible',
        :'survivor_benefit' => :'survivor_Benefit',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_cob_savings' => :'use_COB_Savings'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'plan_id' => :'String',
        :'annual_max' => :'Float',
        :'annual_max_net' => :'Float',
        :'annual_max_oon' => :'Float',
        :'auto_create_flex' => :'Boolean',
        :'cobr_a_plan_type_desc' => :'String',
        :'co_b_savings_max' => :'Float',
        :'co_b_type' => :'String',
        :'capitated' => :'Boolean',
        :'cash_value_default' => :'Integer',
        :'co_ins_in_to_out' => :'Boolean',
        :'co_ins_max_mem' => :'Float',
        :'co_ins_max_net_mem' => :'Float',
        :'co_ins_max_net_sub' => :'Float',
        :'co_ins_max_oon_mem' => :'Float',
        :'co_ins_max_oon_sub' => :'Float',
        :'co_ins_max_sub' => :'Float',
        :'co_ins_out_to_in' => :'Boolean',
        :'co_ins_out_to_in_limit' => :'Boolean',
        :'co_ins_out_to_in_limit_max' => :'Float',
        :'context4_clm_ucr_pct' => :'Integer',
        :'context4_clm_ucr_pct_oon' => :'Integer',
        :'context4_fee_selector' => :'String',
        :'context4_fee_selector_oon' => :'String',
        :'context4_medicare_pct' => :'Integer',
        :'context4_medicare_pct_oon' => :'Integer',
        :'context4_password' => :'String',
        :'context4_payor_type' => :'String',
        :'context4_payor_type_oon' => :'String',
        :'context4_pct_of_chg' => :'Integer',
        :'context4_pct_of_chg_oon' => :'Integer',
        :'context4_plan_price_not_greater_billed_fg' => :'Boolean',
        :'context4_user_id' => :'String',
        :'context4_web_uri' => :'String',
        :'context4_web_uri_delete' => :'String',
        :'currency_id' => :'String',
        :'ded_in_to_out' => :'Boolean',
        :'ded_out_to_in' => :'Boolean',
        :'ded_out_to_in_limit' => :'Boolean',
        :'ded_out_to_in_limit_max' => :'Float',
        :'description' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'extended_term_default' => :'Integer',
        :'family_level_co_ins' => :'Boolean',
        :'family_level_co_ins_member' => :'Integer',
        :'family_level_ded' => :'Boolean',
        :'family_level_ded_member' => :'Integer',
        :'family_level_oop' => :'Boolean',
        :'family_level_oop_member' => :'Integer',
        :'flex_advance_fund' => :'Boolean',
        :'flex_type' => :'String',
        :'forfeiture_status_default' => :'String',
        :'illness_ex_code' => :'String',
        :'illness_waiting_period' => :'Integer',
        :'include_waiting_period' => :'Boolean',
        :'injury_ex_code' => :'String',
        :'injury_waiting_period' => :'Integer',
        :'lt_c_apply_elimination_period' => :'Boolean',
        :'lt_c_apply_waiver_of_premium' => :'Boolean',
        :'lt_c_daily_benefit' => :'Float',
        :'lt_c_daily_benefit_range_from' => :'Float',
        :'lt_c_daily_benefit_range_increment' => :'Float',
        :'lt_c_daily_benefit_range_thru' => :'Float',
        :'lt_c_daily_benefit_type' => :'String',
        :'lt_c_elimination_period' => :'Integer',
        :'lt_c_elimination_period_per_claim' => :'Boolean',
        :'lt_c_elimination_period_type' => :'String',
        :'lt_c_lifetime_max_days_from' => :'Integer',
        :'lt_c_lifetime_max_days_thru' => :'Integer',
        :'lt_c_lifetime_max_from' => :'Float',
        :'lt_c_lifetime_max_increment' => :'Float',
        :'lt_c_lifetime_max_joint_policy' => :'Boolean',
        :'lt_c_lifetime_max_thru' => :'Float',
        :'lt_c_lifetime_max_type' => :'String',
        :'lt_c_lifetime_max_years_from' => :'Integer',
        :'lt_c_lifetime_max_years_thru' => :'Integer',
        :'lt_c_monthly_benefit' => :'Float',
        :'lt_c_monthly_benefit_range_from' => :'Float',
        :'lt_c_monthly_benefit_range_increment' => :'Float',
        :'lt_c_monthly_benefit_range_thru' => :'Float',
        :'lt_c_monthly_benefit_type' => :'String',
        :'lt_c_waiver_of_premium_type' => :'String',
        :'lifetime_max' => :'Float',
        :'lifetime_max_net' => :'Float',
        :'lifetime_max_oon' => :'Float',
        :'maturity_age' => :'Integer',
        :'maturity_age_type' => :'String',
        :'max_disability_weeks' => :'Integer',
        :'max_includes_waiting_period' => :'Boolean',
        :'mem_ded_credit' => :'Float',
        :'mem_ded_credit_oon' => :'Float',
        :'mem_ded_credit_ppo' => :'Float',
        :'member_annual_max' => :'Float',
        :'member_annual_max_net' => :'Float',
        :'member_annual_max_oon' => :'Float',
        :'member_ded_oon' => :'Float',
        :'member_ded_ppo' => :'Float',
        :'member_deductible' => :'Float',
        :'member_lifetime_max' => :'Float',
        :'member_lifetime_max_net' => :'Float',
        :'member_lifetime_max_oon' => :'Float',
        :'oo_p_calc_option' => :'String',
        :'oo_p_in_to_out' => :'Boolean',
        :'oo_p_max_mem' => :'Float',
        :'oo_p_max_net_mem' => :'Float',
        :'oo_p_max_net_sub' => :'Float',
        :'oo_p_max_oon_mem' => :'Float',
        :'oo_p_max_oon_sub' => :'Float',
        :'oo_p_max_sub' => :'Float',
        :'oo_p_out_to_in' => :'Boolean',
        :'oo_p_out_to_in_limit' => :'Boolean',
        :'oo_p_out_to_in_limit_max' => :'Float',
        :'payment_interval' => :'Integer',
        :'payor_id' => :'String',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'plan_document_url' => :'String',
        :'plan_type' => :'String',
        :'policy_forfeiture_grace_period' => :'Integer',
        :'policy_forfeiture_grace_period_type' => :'String',
        :'policy_status_default' => :'String',
        :'pre_ex_ex_code' => :'String',
        :'pre_ex_from' => :'Integer',
        :'pre_ex_range' => :'Integer',
        :'pre_ex_thru' => :'Integer',
        :'qp_a_method' => :'String',
        :'reduced_paid_up_default' => :'Integer',
        :'remove_member_amount_edit' => :'Boolean',
        :'situs_state' => :'String',
        :'sub_ded_credit' => :'Float',
        :'sub_ded_credit_oon' => :'Float',
        :'sub_ded_credit_ppo' => :'Float',
        :'subscriber_ded_oon' => :'Float',
        :'subscriber_ded_ppo' => :'Float',
        :'subscriber_deductible' => :'Float',
        :'survivor_benefit' => :'Integer',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_cob_savings' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'annual_max',
        :'annual_max_net',
        :'annual_max_oon',
        :'cobr_a_plan_type_desc',
        :'co_b_savings_max',
        :'co_b_type',
        :'cash_value_default',
        :'co_ins_max_mem',
        :'co_ins_max_net_mem',
        :'co_ins_max_net_sub',
        :'co_ins_max_oon_mem',
        :'co_ins_max_oon_sub',
        :'co_ins_max_sub',
        :'co_ins_out_to_in_limit_max',
        :'context4_clm_ucr_pct',
        :'context4_clm_ucr_pct_oon',
        :'context4_fee_selector',
        :'context4_fee_selector_oon',
        :'context4_medicare_pct',
        :'context4_medicare_pct_oon',
        :'context4_password',
        :'context4_payor_type',
        :'context4_payor_type_oon',
        :'context4_pct_of_chg',
        :'context4_pct_of_chg_oon',
        :'context4_user_id',
        :'context4_web_uri',
        :'context4_web_uri_delete',
        :'currency_id',
        :'ded_out_to_in_limit_max',
        :'description',
        :'entry_user',
        :'extended_term_default',
        :'family_level_co_ins_member',
        :'family_level_ded_member',
        :'family_level_oop_member',
        :'flex_type',
        :'forfeiture_status_default',
        :'illness_ex_code',
        :'illness_waiting_period',
        :'include_waiting_period',
        :'injury_ex_code',
        :'injury_waiting_period',
        :'lt_c_daily_benefit',
        :'lt_c_daily_benefit_range_from',
        :'lt_c_daily_benefit_range_increment',
        :'lt_c_daily_benefit_range_thru',
        :'lt_c_daily_benefit_type',
        :'lt_c_elimination_period',
        :'lt_c_elimination_period_type',
        :'lt_c_lifetime_max_days_from',
        :'lt_c_lifetime_max_days_thru',
        :'lt_c_lifetime_max_from',
        :'lt_c_lifetime_max_increment',
        :'lt_c_lifetime_max_thru',
        :'lt_c_lifetime_max_type',
        :'lt_c_lifetime_max_years_from',
        :'lt_c_lifetime_max_years_thru',
        :'lt_c_monthly_benefit',
        :'lt_c_monthly_benefit_range_from',
        :'lt_c_monthly_benefit_range_increment',
        :'lt_c_monthly_benefit_range_thru',
        :'lt_c_monthly_benefit_type',
        :'lt_c_waiver_of_premium_type',
        :'lifetime_max',
        :'lifetime_max_net',
        :'lifetime_max_oon',
        :'maturity_age',
        :'maturity_age_type',
        :'max_disability_weeks',
        :'max_includes_waiting_period',
        :'mem_ded_credit',
        :'mem_ded_credit_oon',
        :'mem_ded_credit_ppo',
        :'member_annual_max',
        :'member_annual_max_net',
        :'member_annual_max_oon',
        :'member_ded_oon',
        :'member_ded_ppo',
        :'member_deductible',
        :'member_lifetime_max',
        :'member_lifetime_max_net',
        :'member_lifetime_max_oon',
        :'oo_p_calc_option',
        :'oo_p_max_mem',
        :'oo_p_max_net_mem',
        :'oo_p_max_net_sub',
        :'oo_p_max_oon_mem',
        :'oo_p_max_oon_sub',
        :'oo_p_max_sub',
        :'oo_p_out_to_in_limit_max',
        :'payment_interval',
        :'payor_id',
        :'pend_ex_code',
        :'pend_flag',
        :'plan_document_url',
        :'plan_type',
        :'policy_forfeiture_grace_period',
        :'policy_forfeiture_grace_period_type',
        :'policy_status_default',
        :'pre_ex_ex_code',
        :'pre_ex_from',
        :'pre_ex_range',
        :'pre_ex_thru',
        :'qp_a_method',
        :'reduced_paid_up_default',
        :'situs_state',
        :'sub_ded_credit',
        :'sub_ded_credit_oon',
        :'sub_ded_credit_ppo',
        :'subscriber_ded_oon',
        :'subscriber_ded_ppo',
        :'subscriber_deductible',
        :'survivor_benefit',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Plans` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Plans`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'annual_max')
        self.annual_max = attributes[:'annual_max']
      end

      if attributes.key?(:'annual_max_net')
        self.annual_max_net = attributes[:'annual_max_net']
      end

      if attributes.key?(:'annual_max_oon')
        self.annual_max_oon = attributes[:'annual_max_oon']
      end

      if attributes.key?(:'auto_create_flex')
        self.auto_create_flex = attributes[:'auto_create_flex']
      else
        self.auto_create_flex = nil
      end

      if attributes.key?(:'cobr_a_plan_type_desc')
        self.cobr_a_plan_type_desc = attributes[:'cobr_a_plan_type_desc']
      end

      if attributes.key?(:'co_b_savings_max')
        self.co_b_savings_max = attributes[:'co_b_savings_max']
      end

      if attributes.key?(:'co_b_type')
        self.co_b_type = attributes[:'co_b_type']
      end

      if attributes.key?(:'capitated')
        self.capitated = attributes[:'capitated']
      else
        self.capitated = nil
      end

      if attributes.key?(:'cash_value_default')
        self.cash_value_default = attributes[:'cash_value_default']
      end

      if attributes.key?(:'co_ins_in_to_out')
        self.co_ins_in_to_out = attributes[:'co_ins_in_to_out']
      else
        self.co_ins_in_to_out = nil
      end

      if attributes.key?(:'co_ins_max_mem')
        self.co_ins_max_mem = attributes[:'co_ins_max_mem']
      end

      if attributes.key?(:'co_ins_max_net_mem')
        self.co_ins_max_net_mem = attributes[:'co_ins_max_net_mem']
      end

      if attributes.key?(:'co_ins_max_net_sub')
        self.co_ins_max_net_sub = attributes[:'co_ins_max_net_sub']
      end

      if attributes.key?(:'co_ins_max_oon_mem')
        self.co_ins_max_oon_mem = attributes[:'co_ins_max_oon_mem']
      end

      if attributes.key?(:'co_ins_max_oon_sub')
        self.co_ins_max_oon_sub = attributes[:'co_ins_max_oon_sub']
      end

      if attributes.key?(:'co_ins_max_sub')
        self.co_ins_max_sub = attributes[:'co_ins_max_sub']
      end

      if attributes.key?(:'co_ins_out_to_in')
        self.co_ins_out_to_in = attributes[:'co_ins_out_to_in']
      else
        self.co_ins_out_to_in = nil
      end

      if attributes.key?(:'co_ins_out_to_in_limit')
        self.co_ins_out_to_in_limit = attributes[:'co_ins_out_to_in_limit']
      else
        self.co_ins_out_to_in_limit = nil
      end

      if attributes.key?(:'co_ins_out_to_in_limit_max')
        self.co_ins_out_to_in_limit_max = attributes[:'co_ins_out_to_in_limit_max']
      end

      if attributes.key?(:'context4_clm_ucr_pct')
        self.context4_clm_ucr_pct = attributes[:'context4_clm_ucr_pct']
      end

      if attributes.key?(:'context4_clm_ucr_pct_oon')
        self.context4_clm_ucr_pct_oon = attributes[:'context4_clm_ucr_pct_oon']
      end

      if attributes.key?(:'context4_fee_selector')
        self.context4_fee_selector = attributes[:'context4_fee_selector']
      end

      if attributes.key?(:'context4_fee_selector_oon')
        self.context4_fee_selector_oon = attributes[:'context4_fee_selector_oon']
      end

      if attributes.key?(:'context4_medicare_pct')
        self.context4_medicare_pct = attributes[:'context4_medicare_pct']
      end

      if attributes.key?(:'context4_medicare_pct_oon')
        self.context4_medicare_pct_oon = attributes[:'context4_medicare_pct_oon']
      end

      if attributes.key?(:'context4_password')
        self.context4_password = attributes[:'context4_password']
      end

      if attributes.key?(:'context4_payor_type')
        self.context4_payor_type = attributes[:'context4_payor_type']
      end

      if attributes.key?(:'context4_payor_type_oon')
        self.context4_payor_type_oon = attributes[:'context4_payor_type_oon']
      end

      if attributes.key?(:'context4_pct_of_chg')
        self.context4_pct_of_chg = attributes[:'context4_pct_of_chg']
      end

      if attributes.key?(:'context4_pct_of_chg_oon')
        self.context4_pct_of_chg_oon = attributes[:'context4_pct_of_chg_oon']
      end

      if attributes.key?(:'context4_plan_price_not_greater_billed_fg')
        self.context4_plan_price_not_greater_billed_fg = attributes[:'context4_plan_price_not_greater_billed_fg']
      else
        self.context4_plan_price_not_greater_billed_fg = nil
      end

      if attributes.key?(:'context4_user_id')
        self.context4_user_id = attributes[:'context4_user_id']
      end

      if attributes.key?(:'context4_web_uri')
        self.context4_web_uri = attributes[:'context4_web_uri']
      end

      if attributes.key?(:'context4_web_uri_delete')
        self.context4_web_uri_delete = attributes[:'context4_web_uri_delete']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'ded_in_to_out')
        self.ded_in_to_out = attributes[:'ded_in_to_out']
      else
        self.ded_in_to_out = nil
      end

      if attributes.key?(:'ded_out_to_in')
        self.ded_out_to_in = attributes[:'ded_out_to_in']
      else
        self.ded_out_to_in = nil
      end

      if attributes.key?(:'ded_out_to_in_limit')
        self.ded_out_to_in_limit = attributes[:'ded_out_to_in_limit']
      else
        self.ded_out_to_in_limit = nil
      end

      if attributes.key?(:'ded_out_to_in_limit_max')
        self.ded_out_to_in_limit_max = attributes[:'ded_out_to_in_limit_max']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'extended_term_default')
        self.extended_term_default = attributes[:'extended_term_default']
      end

      if attributes.key?(:'family_level_co_ins')
        self.family_level_co_ins = attributes[:'family_level_co_ins']
      else
        self.family_level_co_ins = nil
      end

      if attributes.key?(:'family_level_co_ins_member')
        self.family_level_co_ins_member = attributes[:'family_level_co_ins_member']
      end

      if attributes.key?(:'family_level_ded')
        self.family_level_ded = attributes[:'family_level_ded']
      else
        self.family_level_ded = nil
      end

      if attributes.key?(:'family_level_ded_member')
        self.family_level_ded_member = attributes[:'family_level_ded_member']
      end

      if attributes.key?(:'family_level_oop')
        self.family_level_oop = attributes[:'family_level_oop']
      else
        self.family_level_oop = nil
      end

      if attributes.key?(:'family_level_oop_member')
        self.family_level_oop_member = attributes[:'family_level_oop_member']
      end

      if attributes.key?(:'flex_advance_fund')
        self.flex_advance_fund = attributes[:'flex_advance_fund']
      else
        self.flex_advance_fund = nil
      end

      if attributes.key?(:'flex_type')
        self.flex_type = attributes[:'flex_type']
      end

      if attributes.key?(:'forfeiture_status_default')
        self.forfeiture_status_default = attributes[:'forfeiture_status_default']
      end

      if attributes.key?(:'illness_ex_code')
        self.illness_ex_code = attributes[:'illness_ex_code']
      end

      if attributes.key?(:'illness_waiting_period')
        self.illness_waiting_period = attributes[:'illness_waiting_period']
      end

      if attributes.key?(:'include_waiting_period')
        self.include_waiting_period = attributes[:'include_waiting_period']
      end

      if attributes.key?(:'injury_ex_code')
        self.injury_ex_code = attributes[:'injury_ex_code']
      end

      if attributes.key?(:'injury_waiting_period')
        self.injury_waiting_period = attributes[:'injury_waiting_period']
      end

      if attributes.key?(:'lt_c_apply_elimination_period')
        self.lt_c_apply_elimination_period = attributes[:'lt_c_apply_elimination_period']
      else
        self.lt_c_apply_elimination_period = nil
      end

      if attributes.key?(:'lt_c_apply_waiver_of_premium')
        self.lt_c_apply_waiver_of_premium = attributes[:'lt_c_apply_waiver_of_premium']
      else
        self.lt_c_apply_waiver_of_premium = nil
      end

      if attributes.key?(:'lt_c_daily_benefit')
        self.lt_c_daily_benefit = attributes[:'lt_c_daily_benefit']
      end

      if attributes.key?(:'lt_c_daily_benefit_range_from')
        self.lt_c_daily_benefit_range_from = attributes[:'lt_c_daily_benefit_range_from']
      end

      if attributes.key?(:'lt_c_daily_benefit_range_increment')
        self.lt_c_daily_benefit_range_increment = attributes[:'lt_c_daily_benefit_range_increment']
      end

      if attributes.key?(:'lt_c_daily_benefit_range_thru')
        self.lt_c_daily_benefit_range_thru = attributes[:'lt_c_daily_benefit_range_thru']
      end

      if attributes.key?(:'lt_c_daily_benefit_type')
        self.lt_c_daily_benefit_type = attributes[:'lt_c_daily_benefit_type']
      end

      if attributes.key?(:'lt_c_elimination_period')
        self.lt_c_elimination_period = attributes[:'lt_c_elimination_period']
      end

      if attributes.key?(:'lt_c_elimination_period_per_claim')
        self.lt_c_elimination_period_per_claim = attributes[:'lt_c_elimination_period_per_claim']
      else
        self.lt_c_elimination_period_per_claim = nil
      end

      if attributes.key?(:'lt_c_elimination_period_type')
        self.lt_c_elimination_period_type = attributes[:'lt_c_elimination_period_type']
      end

      if attributes.key?(:'lt_c_lifetime_max_days_from')
        self.lt_c_lifetime_max_days_from = attributes[:'lt_c_lifetime_max_days_from']
      end

      if attributes.key?(:'lt_c_lifetime_max_days_thru')
        self.lt_c_lifetime_max_days_thru = attributes[:'lt_c_lifetime_max_days_thru']
      end

      if attributes.key?(:'lt_c_lifetime_max_from')
        self.lt_c_lifetime_max_from = attributes[:'lt_c_lifetime_max_from']
      end

      if attributes.key?(:'lt_c_lifetime_max_increment')
        self.lt_c_lifetime_max_increment = attributes[:'lt_c_lifetime_max_increment']
      end

      if attributes.key?(:'lt_c_lifetime_max_joint_policy')
        self.lt_c_lifetime_max_joint_policy = attributes[:'lt_c_lifetime_max_joint_policy']
      else
        self.lt_c_lifetime_max_joint_policy = nil
      end

      if attributes.key?(:'lt_c_lifetime_max_thru')
        self.lt_c_lifetime_max_thru = attributes[:'lt_c_lifetime_max_thru']
      end

      if attributes.key?(:'lt_c_lifetime_max_type')
        self.lt_c_lifetime_max_type = attributes[:'lt_c_lifetime_max_type']
      end

      if attributes.key?(:'lt_c_lifetime_max_years_from')
        self.lt_c_lifetime_max_years_from = attributes[:'lt_c_lifetime_max_years_from']
      end

      if attributes.key?(:'lt_c_lifetime_max_years_thru')
        self.lt_c_lifetime_max_years_thru = attributes[:'lt_c_lifetime_max_years_thru']
      end

      if attributes.key?(:'lt_c_monthly_benefit')
        self.lt_c_monthly_benefit = attributes[:'lt_c_monthly_benefit']
      end

      if attributes.key?(:'lt_c_monthly_benefit_range_from')
        self.lt_c_monthly_benefit_range_from = attributes[:'lt_c_monthly_benefit_range_from']
      end

      if attributes.key?(:'lt_c_monthly_benefit_range_increment')
        self.lt_c_monthly_benefit_range_increment = attributes[:'lt_c_monthly_benefit_range_increment']
      end

      if attributes.key?(:'lt_c_monthly_benefit_range_thru')
        self.lt_c_monthly_benefit_range_thru = attributes[:'lt_c_monthly_benefit_range_thru']
      end

      if attributes.key?(:'lt_c_monthly_benefit_type')
        self.lt_c_monthly_benefit_type = attributes[:'lt_c_monthly_benefit_type']
      end

      if attributes.key?(:'lt_c_waiver_of_premium_type')
        self.lt_c_waiver_of_premium_type = attributes[:'lt_c_waiver_of_premium_type']
      end

      if attributes.key?(:'lifetime_max')
        self.lifetime_max = attributes[:'lifetime_max']
      end

      if attributes.key?(:'lifetime_max_net')
        self.lifetime_max_net = attributes[:'lifetime_max_net']
      end

      if attributes.key?(:'lifetime_max_oon')
        self.lifetime_max_oon = attributes[:'lifetime_max_oon']
      end

      if attributes.key?(:'maturity_age')
        self.maturity_age = attributes[:'maturity_age']
      end

      if attributes.key?(:'maturity_age_type')
        self.maturity_age_type = attributes[:'maturity_age_type']
      end

      if attributes.key?(:'max_disability_weeks')
        self.max_disability_weeks = attributes[:'max_disability_weeks']
      end

      if attributes.key?(:'max_includes_waiting_period')
        self.max_includes_waiting_period = attributes[:'max_includes_waiting_period']
      end

      if attributes.key?(:'mem_ded_credit')
        self.mem_ded_credit = attributes[:'mem_ded_credit']
      end

      if attributes.key?(:'mem_ded_credit_oon')
        self.mem_ded_credit_oon = attributes[:'mem_ded_credit_oon']
      end

      if attributes.key?(:'mem_ded_credit_ppo')
        self.mem_ded_credit_ppo = attributes[:'mem_ded_credit_ppo']
      end

      if attributes.key?(:'member_annual_max')
        self.member_annual_max = attributes[:'member_annual_max']
      end

      if attributes.key?(:'member_annual_max_net')
        self.member_annual_max_net = attributes[:'member_annual_max_net']
      end

      if attributes.key?(:'member_annual_max_oon')
        self.member_annual_max_oon = attributes[:'member_annual_max_oon']
      end

      if attributes.key?(:'member_ded_oon')
        self.member_ded_oon = attributes[:'member_ded_oon']
      end

      if attributes.key?(:'member_ded_ppo')
        self.member_ded_ppo = attributes[:'member_ded_ppo']
      end

      if attributes.key?(:'member_deductible')
        self.member_deductible = attributes[:'member_deductible']
      end

      if attributes.key?(:'member_lifetime_max')
        self.member_lifetime_max = attributes[:'member_lifetime_max']
      end

      if attributes.key?(:'member_lifetime_max_net')
        self.member_lifetime_max_net = attributes[:'member_lifetime_max_net']
      end

      if attributes.key?(:'member_lifetime_max_oon')
        self.member_lifetime_max_oon = attributes[:'member_lifetime_max_oon']
      end

      if attributes.key?(:'oo_p_calc_option')
        self.oo_p_calc_option = attributes[:'oo_p_calc_option']
      end

      if attributes.key?(:'oo_p_in_to_out')
        self.oo_p_in_to_out = attributes[:'oo_p_in_to_out']
      else
        self.oo_p_in_to_out = nil
      end

      if attributes.key?(:'oo_p_max_mem')
        self.oo_p_max_mem = attributes[:'oo_p_max_mem']
      end

      if attributes.key?(:'oo_p_max_net_mem')
        self.oo_p_max_net_mem = attributes[:'oo_p_max_net_mem']
      end

      if attributes.key?(:'oo_p_max_net_sub')
        self.oo_p_max_net_sub = attributes[:'oo_p_max_net_sub']
      end

      if attributes.key?(:'oo_p_max_oon_mem')
        self.oo_p_max_oon_mem = attributes[:'oo_p_max_oon_mem']
      end

      if attributes.key?(:'oo_p_max_oon_sub')
        self.oo_p_max_oon_sub = attributes[:'oo_p_max_oon_sub']
      end

      if attributes.key?(:'oo_p_max_sub')
        self.oo_p_max_sub = attributes[:'oo_p_max_sub']
      end

      if attributes.key?(:'oo_p_out_to_in')
        self.oo_p_out_to_in = attributes[:'oo_p_out_to_in']
      else
        self.oo_p_out_to_in = nil
      end

      if attributes.key?(:'oo_p_out_to_in_limit')
        self.oo_p_out_to_in_limit = attributes[:'oo_p_out_to_in_limit']
      else
        self.oo_p_out_to_in_limit = nil
      end

      if attributes.key?(:'oo_p_out_to_in_limit_max')
        self.oo_p_out_to_in_limit_max = attributes[:'oo_p_out_to_in_limit_max']
      end

      if attributes.key?(:'payment_interval')
        self.payment_interval = attributes[:'payment_interval']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'plan_document_url')
        self.plan_document_url = attributes[:'plan_document_url']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'policy_forfeiture_grace_period')
        self.policy_forfeiture_grace_period = attributes[:'policy_forfeiture_grace_period']
      end

      if attributes.key?(:'policy_forfeiture_grace_period_type')
        self.policy_forfeiture_grace_period_type = attributes[:'policy_forfeiture_grace_period_type']
      end

      if attributes.key?(:'policy_status_default')
        self.policy_status_default = attributes[:'policy_status_default']
      end

      if attributes.key?(:'pre_ex_ex_code')
        self.pre_ex_ex_code = attributes[:'pre_ex_ex_code']
      end

      if attributes.key?(:'pre_ex_from')
        self.pre_ex_from = attributes[:'pre_ex_from']
      end

      if attributes.key?(:'pre_ex_range')
        self.pre_ex_range = attributes[:'pre_ex_range']
      end

      if attributes.key?(:'pre_ex_thru')
        self.pre_ex_thru = attributes[:'pre_ex_thru']
      end

      if attributes.key?(:'qp_a_method')
        self.qp_a_method = attributes[:'qp_a_method']
      end

      if attributes.key?(:'reduced_paid_up_default')
        self.reduced_paid_up_default = attributes[:'reduced_paid_up_default']
      end

      if attributes.key?(:'remove_member_amount_edit')
        self.remove_member_amount_edit = attributes[:'remove_member_amount_edit']
      else
        self.remove_member_amount_edit = nil
      end

      if attributes.key?(:'situs_state')
        self.situs_state = attributes[:'situs_state']
      end

      if attributes.key?(:'sub_ded_credit')
        self.sub_ded_credit = attributes[:'sub_ded_credit']
      end

      if attributes.key?(:'sub_ded_credit_oon')
        self.sub_ded_credit_oon = attributes[:'sub_ded_credit_oon']
      end

      if attributes.key?(:'sub_ded_credit_ppo')
        self.sub_ded_credit_ppo = attributes[:'sub_ded_credit_ppo']
      end

      if attributes.key?(:'subscriber_ded_oon')
        self.subscriber_ded_oon = attributes[:'subscriber_ded_oon']
      end

      if attributes.key?(:'subscriber_ded_ppo')
        self.subscriber_ded_ppo = attributes[:'subscriber_ded_ppo']
      end

      if attributes.key?(:'subscriber_deductible')
        self.subscriber_deductible = attributes[:'subscriber_deductible']
      end

      if attributes.key?(:'survivor_benefit')
        self.survivor_benefit = attributes[:'survivor_benefit']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_cob_savings')
        self.use_cob_savings = attributes[:'use_cob_savings']
      else
        self.use_cob_savings = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if @auto_create_flex.nil?
        invalid_properties.push('invalid value for "auto_create_flex", auto_create_flex cannot be nil.')
      end

      if !@cobr_a_plan_type_desc.nil? && @cobr_a_plan_type_desc.to_s.length > 20
        invalid_properties.push('invalid value for "cobr_a_plan_type_desc", the character length must be smaller than or equal to 20.')
      end

      if !@co_b_type.nil? && @co_b_type.to_s.length > 16
        invalid_properties.push('invalid value for "co_b_type", the character length must be smaller than or equal to 16.')
      end

      if @capitated.nil?
        invalid_properties.push('invalid value for "capitated", capitated cannot be nil.')
      end

      if @co_ins_in_to_out.nil?
        invalid_properties.push('invalid value for "co_ins_in_to_out", co_ins_in_to_out cannot be nil.')
      end

      if @co_ins_out_to_in.nil?
        invalid_properties.push('invalid value for "co_ins_out_to_in", co_ins_out_to_in cannot be nil.')
      end

      if @co_ins_out_to_in_limit.nil?
        invalid_properties.push('invalid value for "co_ins_out_to_in_limit", co_ins_out_to_in_limit cannot be nil.')
      end

      if !@context4_fee_selector.nil? && @context4_fee_selector.to_s.length > 8
        invalid_properties.push('invalid value for "context4_fee_selector", the character length must be smaller than or equal to 8.')
      end

      if !@context4_fee_selector_oon.nil? && @context4_fee_selector_oon.to_s.length > 8
        invalid_properties.push('invalid value for "context4_fee_selector_oon", the character length must be smaller than or equal to 8.')
      end

      if !@context4_password.nil? && @context4_password.to_s.length > 128
        invalid_properties.push('invalid value for "context4_password", the character length must be smaller than or equal to 128.')
      end

      if !@context4_payor_type.nil? && @context4_payor_type.to_s.length > 8
        invalid_properties.push('invalid value for "context4_payor_type", the character length must be smaller than or equal to 8.')
      end

      if !@context4_payor_type_oon.nil? && @context4_payor_type_oon.to_s.length > 8
        invalid_properties.push('invalid value for "context4_payor_type_oon", the character length must be smaller than or equal to 8.')
      end

      if @context4_plan_price_not_greater_billed_fg.nil?
        invalid_properties.push('invalid value for "context4_plan_price_not_greater_billed_fg", context4_plan_price_not_greater_billed_fg cannot be nil.')
      end

      if !@context4_user_id.nil? && @context4_user_id.to_s.length > 128
        invalid_properties.push('invalid value for "context4_user_id", the character length must be smaller than or equal to 128.')
      end

      if !@context4_web_uri.nil? && @context4_web_uri.to_s.length > 256
        invalid_properties.push('invalid value for "context4_web_uri", the character length must be smaller than or equal to 256.')
      end

      if !@context4_web_uri_delete.nil? && @context4_web_uri_delete.to_s.length > 256
        invalid_properties.push('invalid value for "context4_web_uri_delete", the character length must be smaller than or equal to 256.')
      end

      if !@currency_id.nil? && @currency_id.to_s.length > 16
        invalid_properties.push('invalid value for "currency_id", the character length must be smaller than or equal to 16.')
      end

      if @ded_in_to_out.nil?
        invalid_properties.push('invalid value for "ded_in_to_out", ded_in_to_out cannot be nil.')
      end

      if @ded_out_to_in.nil?
        invalid_properties.push('invalid value for "ded_out_to_in", ded_out_to_in cannot be nil.')
      end

      if @ded_out_to_in_limit.nil?
        invalid_properties.push('invalid value for "ded_out_to_in_limit", ded_out_to_in_limit cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 50
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 50.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @family_level_co_ins.nil?
        invalid_properties.push('invalid value for "family_level_co_ins", family_level_co_ins cannot be nil.')
      end

      if @family_level_ded.nil?
        invalid_properties.push('invalid value for "family_level_ded", family_level_ded cannot be nil.')
      end

      if @family_level_oop.nil?
        invalid_properties.push('invalid value for "family_level_oop", family_level_oop cannot be nil.')
      end

      if @flex_advance_fund.nil?
        invalid_properties.push('invalid value for "flex_advance_fund", flex_advance_fund cannot be nil.')
      end

      if !@flex_type.nil? && @flex_type.to_s.length > 16
        invalid_properties.push('invalid value for "flex_type", the character length must be smaller than or equal to 16.')
      end

      if !@forfeiture_status_default.nil? && @forfeiture_status_default.to_s.length > 32
        invalid_properties.push('invalid value for "forfeiture_status_default", the character length must be smaller than or equal to 32.')
      end

      if !@illness_ex_code.nil? && @illness_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "illness_ex_code", the character length must be smaller than or equal to 8.')
      end

      if !@injury_ex_code.nil? && @injury_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "injury_ex_code", the character length must be smaller than or equal to 8.')
      end

      if @lt_c_apply_elimination_period.nil?
        invalid_properties.push('invalid value for "lt_c_apply_elimination_period", lt_c_apply_elimination_period cannot be nil.')
      end

      if @lt_c_apply_waiver_of_premium.nil?
        invalid_properties.push('invalid value for "lt_c_apply_waiver_of_premium", lt_c_apply_waiver_of_premium cannot be nil.')
      end

      if !@lt_c_daily_benefit_type.nil? && @lt_c_daily_benefit_type.to_s.length > 32
        invalid_properties.push('invalid value for "lt_c_daily_benefit_type", the character length must be smaller than or equal to 32.')
      end

      if @lt_c_elimination_period_per_claim.nil?
        invalid_properties.push('invalid value for "lt_c_elimination_period_per_claim", lt_c_elimination_period_per_claim cannot be nil.')
      end

      if !@lt_c_elimination_period_type.nil? && @lt_c_elimination_period_type.to_s.length > 32
        invalid_properties.push('invalid value for "lt_c_elimination_period_type", the character length must be smaller than or equal to 32.')
      end

      if @lt_c_lifetime_max_joint_policy.nil?
        invalid_properties.push('invalid value for "lt_c_lifetime_max_joint_policy", lt_c_lifetime_max_joint_policy cannot be nil.')
      end

      if !@lt_c_lifetime_max_type.nil? && @lt_c_lifetime_max_type.to_s.length > 32
        invalid_properties.push('invalid value for "lt_c_lifetime_max_type", the character length must be smaller than or equal to 32.')
      end

      if !@lt_c_monthly_benefit_type.nil? && @lt_c_monthly_benefit_type.to_s.length > 32
        invalid_properties.push('invalid value for "lt_c_monthly_benefit_type", the character length must be smaller than or equal to 32.')
      end

      if !@lt_c_waiver_of_premium_type.nil? && @lt_c_waiver_of_premium_type.to_s.length > 32
        invalid_properties.push('invalid value for "lt_c_waiver_of_premium_type", the character length must be smaller than or equal to 32.')
      end

      if !@maturity_age_type.nil? && @maturity_age_type.to_s.length > 8
        invalid_properties.push('invalid value for "maturity_age_type", the character length must be smaller than or equal to 8.')
      end

      if !@oo_p_calc_option.nil? && @oo_p_calc_option.to_s.length > 8
        invalid_properties.push('invalid value for "oo_p_calc_option", the character length must be smaller than or equal to 8.')
      end

      if @oo_p_in_to_out.nil?
        invalid_properties.push('invalid value for "oo_p_in_to_out", oo_p_in_to_out cannot be nil.')
      end

      if @oo_p_out_to_in.nil?
        invalid_properties.push('invalid value for "oo_p_out_to_in", oo_p_out_to_in cannot be nil.')
      end

      if @oo_p_out_to_in_limit.nil?
        invalid_properties.push('invalid value for "oo_p_out_to_in_limit", oo_p_out_to_in_limit cannot be nil.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if !@plan_document_url.nil? && @plan_document_url.to_s.length > 512
        invalid_properties.push('invalid value for "plan_document_url", the character length must be smaller than or equal to 512.')
      end

      if !@plan_type.nil? && @plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "plan_type", the character length must be smaller than or equal to 6.')
      end

      if !@policy_forfeiture_grace_period_type.nil? && @policy_forfeiture_grace_period_type.to_s.length > 1
        invalid_properties.push('invalid value for "policy_forfeiture_grace_period_type", the character length must be smaller than or equal to 1.')
      end

      if !@policy_status_default.nil? && @policy_status_default.to_s.length > 32
        invalid_properties.push('invalid value for "policy_status_default", the character length must be smaller than or equal to 32.')
      end

      if !@pre_ex_ex_code.nil? && @pre_ex_ex_code.to_s.length > 8
        invalid_properties.push('invalid value for "pre_ex_ex_code", the character length must be smaller than or equal to 8.')
      end

      if !@qp_a_method.nil? && @qp_a_method.to_s.length > 1
        invalid_properties.push('invalid value for "qp_a_method", the character length must be smaller than or equal to 1.')
      end

      if @remove_member_amount_edit.nil?
        invalid_properties.push('invalid value for "remove_member_amount_edit", remove_member_amount_edit cannot be nil.')
      end

      if !@situs_state.nil? && @situs_state.to_s.length > 2
        invalid_properties.push('invalid value for "situs_state", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_cob_savings.nil?
        invalid_properties.push('invalid value for "use_cob_savings", use_cob_savings cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if @auto_create_flex.nil?
      return false if !@cobr_a_plan_type_desc.nil? && @cobr_a_plan_type_desc.to_s.length > 20
      return false if !@co_b_type.nil? && @co_b_type.to_s.length > 16
      return false if @capitated.nil?
      return false if @co_ins_in_to_out.nil?
      return false if @co_ins_out_to_in.nil?
      return false if @co_ins_out_to_in_limit.nil?
      return false if !@context4_fee_selector.nil? && @context4_fee_selector.to_s.length > 8
      return false if !@context4_fee_selector_oon.nil? && @context4_fee_selector_oon.to_s.length > 8
      return false if !@context4_password.nil? && @context4_password.to_s.length > 128
      return false if !@context4_payor_type.nil? && @context4_payor_type.to_s.length > 8
      return false if !@context4_payor_type_oon.nil? && @context4_payor_type_oon.to_s.length > 8
      return false if @context4_plan_price_not_greater_billed_fg.nil?
      return false if !@context4_user_id.nil? && @context4_user_id.to_s.length > 128
      return false if !@context4_web_uri.nil? && @context4_web_uri.to_s.length > 256
      return false if !@context4_web_uri_delete.nil? && @context4_web_uri_delete.to_s.length > 256
      return false if !@currency_id.nil? && @currency_id.to_s.length > 16
      return false if @ded_in_to_out.nil?
      return false if @ded_out_to_in.nil?
      return false if @ded_out_to_in_limit.nil?
      return false if !@description.nil? && @description.to_s.length > 50
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @family_level_co_ins.nil?
      return false if @family_level_ded.nil?
      return false if @family_level_oop.nil?
      return false if @flex_advance_fund.nil?
      return false if !@flex_type.nil? && @flex_type.to_s.length > 16
      return false if !@forfeiture_status_default.nil? && @forfeiture_status_default.to_s.length > 32
      return false if !@illness_ex_code.nil? && @illness_ex_code.to_s.length > 8
      return false if !@injury_ex_code.nil? && @injury_ex_code.to_s.length > 8
      return false if @lt_c_apply_elimination_period.nil?
      return false if @lt_c_apply_waiver_of_premium.nil?
      return false if !@lt_c_daily_benefit_type.nil? && @lt_c_daily_benefit_type.to_s.length > 32
      return false if @lt_c_elimination_period_per_claim.nil?
      return false if !@lt_c_elimination_period_type.nil? && @lt_c_elimination_period_type.to_s.length > 32
      return false if @lt_c_lifetime_max_joint_policy.nil?
      return false if !@lt_c_lifetime_max_type.nil? && @lt_c_lifetime_max_type.to_s.length > 32
      return false if !@lt_c_monthly_benefit_type.nil? && @lt_c_monthly_benefit_type.to_s.length > 32
      return false if !@lt_c_waiver_of_premium_type.nil? && @lt_c_waiver_of_premium_type.to_s.length > 32
      return false if !@maturity_age_type.nil? && @maturity_age_type.to_s.length > 8
      return false if !@oo_p_calc_option.nil? && @oo_p_calc_option.to_s.length > 8
      return false if @oo_p_in_to_out.nil?
      return false if @oo_p_out_to_in.nil?
      return false if @oo_p_out_to_in_limit.nil?
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if !@plan_document_url.nil? && @plan_document_url.to_s.length > 512
      return false if !@plan_type.nil? && @plan_type.to_s.length > 6
      return false if !@policy_forfeiture_grace_period_type.nil? && @policy_forfeiture_grace_period_type.to_s.length > 1
      return false if !@policy_status_default.nil? && @policy_status_default.to_s.length > 32
      return false if !@pre_ex_ex_code.nil? && @pre_ex_ex_code.to_s.length > 8
      return false if !@qp_a_method.nil? && @qp_a_method.to_s.length > 1
      return false if @remove_member_amount_edit.nil?
      return false if !@situs_state.nil? && @situs_state.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_cob_savings.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_create_flex Value to be assigned
    def auto_create_flex=(auto_create_flex)
      if auto_create_flex.nil?
        fail ArgumentError, 'auto_create_flex cannot be nil'
      end

      @auto_create_flex = auto_create_flex
    end

    # Custom attribute writer method with validation
    # @param [Object] cobr_a_plan_type_desc Value to be assigned
    def cobr_a_plan_type_desc=(cobr_a_plan_type_desc)
      if !cobr_a_plan_type_desc.nil? && cobr_a_plan_type_desc.to_s.length > 20
        fail ArgumentError, 'invalid value for "cobr_a_plan_type_desc", the character length must be smaller than or equal to 20.'
      end

      @cobr_a_plan_type_desc = cobr_a_plan_type_desc
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_type Value to be assigned
    def co_b_type=(co_b_type)
      if !co_b_type.nil? && co_b_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "co_b_type", the character length must be smaller than or equal to 16.'
      end

      @co_b_type = co_b_type
    end

    # Custom attribute writer method with validation
    # @param [Object] capitated Value to be assigned
    def capitated=(capitated)
      if capitated.nil?
        fail ArgumentError, 'capitated cannot be nil'
      end

      @capitated = capitated
    end

    # Custom attribute writer method with validation
    # @param [Object] co_ins_in_to_out Value to be assigned
    def co_ins_in_to_out=(co_ins_in_to_out)
      if co_ins_in_to_out.nil?
        fail ArgumentError, 'co_ins_in_to_out cannot be nil'
      end

      @co_ins_in_to_out = co_ins_in_to_out
    end

    # Custom attribute writer method with validation
    # @param [Object] co_ins_out_to_in Value to be assigned
    def co_ins_out_to_in=(co_ins_out_to_in)
      if co_ins_out_to_in.nil?
        fail ArgumentError, 'co_ins_out_to_in cannot be nil'
      end

      @co_ins_out_to_in = co_ins_out_to_in
    end

    # Custom attribute writer method with validation
    # @param [Object] co_ins_out_to_in_limit Value to be assigned
    def co_ins_out_to_in_limit=(co_ins_out_to_in_limit)
      if co_ins_out_to_in_limit.nil?
        fail ArgumentError, 'co_ins_out_to_in_limit cannot be nil'
      end

      @co_ins_out_to_in_limit = co_ins_out_to_in_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_fee_selector Value to be assigned
    def context4_fee_selector=(context4_fee_selector)
      if !context4_fee_selector.nil? && context4_fee_selector.to_s.length > 8
        fail ArgumentError, 'invalid value for "context4_fee_selector", the character length must be smaller than or equal to 8.'
      end

      @context4_fee_selector = context4_fee_selector
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_fee_selector_oon Value to be assigned
    def context4_fee_selector_oon=(context4_fee_selector_oon)
      if !context4_fee_selector_oon.nil? && context4_fee_selector_oon.to_s.length > 8
        fail ArgumentError, 'invalid value for "context4_fee_selector_oon", the character length must be smaller than or equal to 8.'
      end

      @context4_fee_selector_oon = context4_fee_selector_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_password Value to be assigned
    def context4_password=(context4_password)
      if !context4_password.nil? && context4_password.to_s.length > 128
        fail ArgumentError, 'invalid value for "context4_password", the character length must be smaller than or equal to 128.'
      end

      @context4_password = context4_password
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_payor_type Value to be assigned
    def context4_payor_type=(context4_payor_type)
      if !context4_payor_type.nil? && context4_payor_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "context4_payor_type", the character length must be smaller than or equal to 8.'
      end

      @context4_payor_type = context4_payor_type
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_payor_type_oon Value to be assigned
    def context4_payor_type_oon=(context4_payor_type_oon)
      if !context4_payor_type_oon.nil? && context4_payor_type_oon.to_s.length > 8
        fail ArgumentError, 'invalid value for "context4_payor_type_oon", the character length must be smaller than or equal to 8.'
      end

      @context4_payor_type_oon = context4_payor_type_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_plan_price_not_greater_billed_fg Value to be assigned
    def context4_plan_price_not_greater_billed_fg=(context4_plan_price_not_greater_billed_fg)
      if context4_plan_price_not_greater_billed_fg.nil?
        fail ArgumentError, 'context4_plan_price_not_greater_billed_fg cannot be nil'
      end

      @context4_plan_price_not_greater_billed_fg = context4_plan_price_not_greater_billed_fg
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_user_id Value to be assigned
    def context4_user_id=(context4_user_id)
      if !context4_user_id.nil? && context4_user_id.to_s.length > 128
        fail ArgumentError, 'invalid value for "context4_user_id", the character length must be smaller than or equal to 128.'
      end

      @context4_user_id = context4_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_web_uri Value to be assigned
    def context4_web_uri=(context4_web_uri)
      if !context4_web_uri.nil? && context4_web_uri.to_s.length > 256
        fail ArgumentError, 'invalid value for "context4_web_uri", the character length must be smaller than or equal to 256.'
      end

      @context4_web_uri = context4_web_uri
    end

    # Custom attribute writer method with validation
    # @param [Object] context4_web_uri_delete Value to be assigned
    def context4_web_uri_delete=(context4_web_uri_delete)
      if !context4_web_uri_delete.nil? && context4_web_uri_delete.to_s.length > 256
        fail ArgumentError, 'invalid value for "context4_web_uri_delete", the character length must be smaller than or equal to 256.'
      end

      @context4_web_uri_delete = context4_web_uri_delete
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_id Value to be assigned
    def currency_id=(currency_id)
      if !currency_id.nil? && currency_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "currency_id", the character length must be smaller than or equal to 16.'
      end

      @currency_id = currency_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_in_to_out Value to be assigned
    def ded_in_to_out=(ded_in_to_out)
      if ded_in_to_out.nil?
        fail ArgumentError, 'ded_in_to_out cannot be nil'
      end

      @ded_in_to_out = ded_in_to_out
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_out_to_in Value to be assigned
    def ded_out_to_in=(ded_out_to_in)
      if ded_out_to_in.nil?
        fail ArgumentError, 'ded_out_to_in cannot be nil'
      end

      @ded_out_to_in = ded_out_to_in
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_out_to_in_limit Value to be assigned
    def ded_out_to_in_limit=(ded_out_to_in_limit)
      if ded_out_to_in_limit.nil?
        fail ArgumentError, 'ded_out_to_in_limit cannot be nil'
      end

      @ded_out_to_in_limit = ded_out_to_in_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 50
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 50.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] family_level_co_ins Value to be assigned
    def family_level_co_ins=(family_level_co_ins)
      if family_level_co_ins.nil?
        fail ArgumentError, 'family_level_co_ins cannot be nil'
      end

      @family_level_co_ins = family_level_co_ins
    end

    # Custom attribute writer method with validation
    # @param [Object] family_level_ded Value to be assigned
    def family_level_ded=(family_level_ded)
      if family_level_ded.nil?
        fail ArgumentError, 'family_level_ded cannot be nil'
      end

      @family_level_ded = family_level_ded
    end

    # Custom attribute writer method with validation
    # @param [Object] family_level_oop Value to be assigned
    def family_level_oop=(family_level_oop)
      if family_level_oop.nil?
        fail ArgumentError, 'family_level_oop cannot be nil'
      end

      @family_level_oop = family_level_oop
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_advance_fund Value to be assigned
    def flex_advance_fund=(flex_advance_fund)
      if flex_advance_fund.nil?
        fail ArgumentError, 'flex_advance_fund cannot be nil'
      end

      @flex_advance_fund = flex_advance_fund
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_type Value to be assigned
    def flex_type=(flex_type)
      if !flex_type.nil? && flex_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "flex_type", the character length must be smaller than or equal to 16.'
      end

      @flex_type = flex_type
    end

    # Custom attribute writer method with validation
    # @param [Object] forfeiture_status_default Value to be assigned
    def forfeiture_status_default=(forfeiture_status_default)
      if !forfeiture_status_default.nil? && forfeiture_status_default.to_s.length > 32
        fail ArgumentError, 'invalid value for "forfeiture_status_default", the character length must be smaller than or equal to 32.'
      end

      @forfeiture_status_default = forfeiture_status_default
    end

    # Custom attribute writer method with validation
    # @param [Object] illness_ex_code Value to be assigned
    def illness_ex_code=(illness_ex_code)
      if !illness_ex_code.nil? && illness_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "illness_ex_code", the character length must be smaller than or equal to 8.'
      end

      @illness_ex_code = illness_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] injury_ex_code Value to be assigned
    def injury_ex_code=(injury_ex_code)
      if !injury_ex_code.nil? && injury_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "injury_ex_code", the character length must be smaller than or equal to 8.'
      end

      @injury_ex_code = injury_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_apply_elimination_period Value to be assigned
    def lt_c_apply_elimination_period=(lt_c_apply_elimination_period)
      if lt_c_apply_elimination_period.nil?
        fail ArgumentError, 'lt_c_apply_elimination_period cannot be nil'
      end

      @lt_c_apply_elimination_period = lt_c_apply_elimination_period
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_apply_waiver_of_premium Value to be assigned
    def lt_c_apply_waiver_of_premium=(lt_c_apply_waiver_of_premium)
      if lt_c_apply_waiver_of_premium.nil?
        fail ArgumentError, 'lt_c_apply_waiver_of_premium cannot be nil'
      end

      @lt_c_apply_waiver_of_premium = lt_c_apply_waiver_of_premium
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_daily_benefit_type Value to be assigned
    def lt_c_daily_benefit_type=(lt_c_daily_benefit_type)
      if !lt_c_daily_benefit_type.nil? && lt_c_daily_benefit_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "lt_c_daily_benefit_type", the character length must be smaller than or equal to 32.'
      end

      @lt_c_daily_benefit_type = lt_c_daily_benefit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_elimination_period_per_claim Value to be assigned
    def lt_c_elimination_period_per_claim=(lt_c_elimination_period_per_claim)
      if lt_c_elimination_period_per_claim.nil?
        fail ArgumentError, 'lt_c_elimination_period_per_claim cannot be nil'
      end

      @lt_c_elimination_period_per_claim = lt_c_elimination_period_per_claim
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_elimination_period_type Value to be assigned
    def lt_c_elimination_period_type=(lt_c_elimination_period_type)
      if !lt_c_elimination_period_type.nil? && lt_c_elimination_period_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "lt_c_elimination_period_type", the character length must be smaller than or equal to 32.'
      end

      @lt_c_elimination_period_type = lt_c_elimination_period_type
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_lifetime_max_joint_policy Value to be assigned
    def lt_c_lifetime_max_joint_policy=(lt_c_lifetime_max_joint_policy)
      if lt_c_lifetime_max_joint_policy.nil?
        fail ArgumentError, 'lt_c_lifetime_max_joint_policy cannot be nil'
      end

      @lt_c_lifetime_max_joint_policy = lt_c_lifetime_max_joint_policy
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_lifetime_max_type Value to be assigned
    def lt_c_lifetime_max_type=(lt_c_lifetime_max_type)
      if !lt_c_lifetime_max_type.nil? && lt_c_lifetime_max_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "lt_c_lifetime_max_type", the character length must be smaller than or equal to 32.'
      end

      @lt_c_lifetime_max_type = lt_c_lifetime_max_type
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_monthly_benefit_type Value to be assigned
    def lt_c_monthly_benefit_type=(lt_c_monthly_benefit_type)
      if !lt_c_monthly_benefit_type.nil? && lt_c_monthly_benefit_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "lt_c_monthly_benefit_type", the character length must be smaller than or equal to 32.'
      end

      @lt_c_monthly_benefit_type = lt_c_monthly_benefit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] lt_c_waiver_of_premium_type Value to be assigned
    def lt_c_waiver_of_premium_type=(lt_c_waiver_of_premium_type)
      if !lt_c_waiver_of_premium_type.nil? && lt_c_waiver_of_premium_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "lt_c_waiver_of_premium_type", the character length must be smaller than or equal to 32.'
      end

      @lt_c_waiver_of_premium_type = lt_c_waiver_of_premium_type
    end

    # Custom attribute writer method with validation
    # @param [Object] maturity_age_type Value to be assigned
    def maturity_age_type=(maturity_age_type)
      if !maturity_age_type.nil? && maturity_age_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "maturity_age_type", the character length must be smaller than or equal to 8.'
      end

      @maturity_age_type = maturity_age_type
    end

    # Custom attribute writer method with validation
    # @param [Object] oo_p_calc_option Value to be assigned
    def oo_p_calc_option=(oo_p_calc_option)
      if !oo_p_calc_option.nil? && oo_p_calc_option.to_s.length > 8
        fail ArgumentError, 'invalid value for "oo_p_calc_option", the character length must be smaller than or equal to 8.'
      end

      @oo_p_calc_option = oo_p_calc_option
    end

    # Custom attribute writer method with validation
    # @param [Object] oo_p_in_to_out Value to be assigned
    def oo_p_in_to_out=(oo_p_in_to_out)
      if oo_p_in_to_out.nil?
        fail ArgumentError, 'oo_p_in_to_out cannot be nil'
      end

      @oo_p_in_to_out = oo_p_in_to_out
    end

    # Custom attribute writer method with validation
    # @param [Object] oo_p_out_to_in Value to be assigned
    def oo_p_out_to_in=(oo_p_out_to_in)
      if oo_p_out_to_in.nil?
        fail ArgumentError, 'oo_p_out_to_in cannot be nil'
      end

      @oo_p_out_to_in = oo_p_out_to_in
    end

    # Custom attribute writer method with validation
    # @param [Object] oo_p_out_to_in_limit Value to be assigned
    def oo_p_out_to_in_limit=(oo_p_out_to_in_limit)
      if oo_p_out_to_in_limit.nil?
        fail ArgumentError, 'oo_p_out_to_in_limit cannot be nil'
      end

      @oo_p_out_to_in_limit = oo_p_out_to_in_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_document_url Value to be assigned
    def plan_document_url=(plan_document_url)
      if !plan_document_url.nil? && plan_document_url.to_s.length > 512
        fail ArgumentError, 'invalid value for "plan_document_url", the character length must be smaller than or equal to 512.'
      end

      @plan_document_url = plan_document_url
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type Value to be assigned
    def plan_type=(plan_type)
      if !plan_type.nil? && plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "plan_type", the character length must be smaller than or equal to 6.'
      end

      @plan_type = plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] policy_forfeiture_grace_period_type Value to be assigned
    def policy_forfeiture_grace_period_type=(policy_forfeiture_grace_period_type)
      if !policy_forfeiture_grace_period_type.nil? && policy_forfeiture_grace_period_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "policy_forfeiture_grace_period_type", the character length must be smaller than or equal to 1.'
      end

      @policy_forfeiture_grace_period_type = policy_forfeiture_grace_period_type
    end

    # Custom attribute writer method with validation
    # @param [Object] policy_status_default Value to be assigned
    def policy_status_default=(policy_status_default)
      if !policy_status_default.nil? && policy_status_default.to_s.length > 32
        fail ArgumentError, 'invalid value for "policy_status_default", the character length must be smaller than or equal to 32.'
      end

      @policy_status_default = policy_status_default
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_ex_ex_code Value to be assigned
    def pre_ex_ex_code=(pre_ex_ex_code)
      if !pre_ex_ex_code.nil? && pre_ex_ex_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "pre_ex_ex_code", the character length must be smaller than or equal to 8.'
      end

      @pre_ex_ex_code = pre_ex_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] qp_a_method Value to be assigned
    def qp_a_method=(qp_a_method)
      if !qp_a_method.nil? && qp_a_method.to_s.length > 1
        fail ArgumentError, 'invalid value for "qp_a_method", the character length must be smaller than or equal to 1.'
      end

      @qp_a_method = qp_a_method
    end

    # Custom attribute writer method with validation
    # @param [Object] remove_member_amount_edit Value to be assigned
    def remove_member_amount_edit=(remove_member_amount_edit)
      if remove_member_amount_edit.nil?
        fail ArgumentError, 'remove_member_amount_edit cannot be nil'
      end

      @remove_member_amount_edit = remove_member_amount_edit
    end

    # Custom attribute writer method with validation
    # @param [Object] situs_state Value to be assigned
    def situs_state=(situs_state)
      if !situs_state.nil? && situs_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "situs_state", the character length must be smaller than or equal to 2.'
      end

      @situs_state = situs_state
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_cob_savings Value to be assigned
    def use_cob_savings=(use_cob_savings)
      if use_cob_savings.nil?
        fail ArgumentError, 'use_cob_savings cannot be nil'
      end

      @use_cob_savings = use_cob_savings
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          plan_id == o.plan_id &&
          annual_max == o.annual_max &&
          annual_max_net == o.annual_max_net &&
          annual_max_oon == o.annual_max_oon &&
          auto_create_flex == o.auto_create_flex &&
          cobr_a_plan_type_desc == o.cobr_a_plan_type_desc &&
          co_b_savings_max == o.co_b_savings_max &&
          co_b_type == o.co_b_type &&
          capitated == o.capitated &&
          cash_value_default == o.cash_value_default &&
          co_ins_in_to_out == o.co_ins_in_to_out &&
          co_ins_max_mem == o.co_ins_max_mem &&
          co_ins_max_net_mem == o.co_ins_max_net_mem &&
          co_ins_max_net_sub == o.co_ins_max_net_sub &&
          co_ins_max_oon_mem == o.co_ins_max_oon_mem &&
          co_ins_max_oon_sub == o.co_ins_max_oon_sub &&
          co_ins_max_sub == o.co_ins_max_sub &&
          co_ins_out_to_in == o.co_ins_out_to_in &&
          co_ins_out_to_in_limit == o.co_ins_out_to_in_limit &&
          co_ins_out_to_in_limit_max == o.co_ins_out_to_in_limit_max &&
          context4_clm_ucr_pct == o.context4_clm_ucr_pct &&
          context4_clm_ucr_pct_oon == o.context4_clm_ucr_pct_oon &&
          context4_fee_selector == o.context4_fee_selector &&
          context4_fee_selector_oon == o.context4_fee_selector_oon &&
          context4_medicare_pct == o.context4_medicare_pct &&
          context4_medicare_pct_oon == o.context4_medicare_pct_oon &&
          context4_password == o.context4_password &&
          context4_payor_type == o.context4_payor_type &&
          context4_payor_type_oon == o.context4_payor_type_oon &&
          context4_pct_of_chg == o.context4_pct_of_chg &&
          context4_pct_of_chg_oon == o.context4_pct_of_chg_oon &&
          context4_plan_price_not_greater_billed_fg == o.context4_plan_price_not_greater_billed_fg &&
          context4_user_id == o.context4_user_id &&
          context4_web_uri == o.context4_web_uri &&
          context4_web_uri_delete == o.context4_web_uri_delete &&
          currency_id == o.currency_id &&
          ded_in_to_out == o.ded_in_to_out &&
          ded_out_to_in == o.ded_out_to_in &&
          ded_out_to_in_limit == o.ded_out_to_in_limit &&
          ded_out_to_in_limit_max == o.ded_out_to_in_limit_max &&
          description == o.description &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          extended_term_default == o.extended_term_default &&
          family_level_co_ins == o.family_level_co_ins &&
          family_level_co_ins_member == o.family_level_co_ins_member &&
          family_level_ded == o.family_level_ded &&
          family_level_ded_member == o.family_level_ded_member &&
          family_level_oop == o.family_level_oop &&
          family_level_oop_member == o.family_level_oop_member &&
          flex_advance_fund == o.flex_advance_fund &&
          flex_type == o.flex_type &&
          forfeiture_status_default == o.forfeiture_status_default &&
          illness_ex_code == o.illness_ex_code &&
          illness_waiting_period == o.illness_waiting_period &&
          include_waiting_period == o.include_waiting_period &&
          injury_ex_code == o.injury_ex_code &&
          injury_waiting_period == o.injury_waiting_period &&
          lt_c_apply_elimination_period == o.lt_c_apply_elimination_period &&
          lt_c_apply_waiver_of_premium == o.lt_c_apply_waiver_of_premium &&
          lt_c_daily_benefit == o.lt_c_daily_benefit &&
          lt_c_daily_benefit_range_from == o.lt_c_daily_benefit_range_from &&
          lt_c_daily_benefit_range_increment == o.lt_c_daily_benefit_range_increment &&
          lt_c_daily_benefit_range_thru == o.lt_c_daily_benefit_range_thru &&
          lt_c_daily_benefit_type == o.lt_c_daily_benefit_type &&
          lt_c_elimination_period == o.lt_c_elimination_period &&
          lt_c_elimination_period_per_claim == o.lt_c_elimination_period_per_claim &&
          lt_c_elimination_period_type == o.lt_c_elimination_period_type &&
          lt_c_lifetime_max_days_from == o.lt_c_lifetime_max_days_from &&
          lt_c_lifetime_max_days_thru == o.lt_c_lifetime_max_days_thru &&
          lt_c_lifetime_max_from == o.lt_c_lifetime_max_from &&
          lt_c_lifetime_max_increment == o.lt_c_lifetime_max_increment &&
          lt_c_lifetime_max_joint_policy == o.lt_c_lifetime_max_joint_policy &&
          lt_c_lifetime_max_thru == o.lt_c_lifetime_max_thru &&
          lt_c_lifetime_max_type == o.lt_c_lifetime_max_type &&
          lt_c_lifetime_max_years_from == o.lt_c_lifetime_max_years_from &&
          lt_c_lifetime_max_years_thru == o.lt_c_lifetime_max_years_thru &&
          lt_c_monthly_benefit == o.lt_c_monthly_benefit &&
          lt_c_monthly_benefit_range_from == o.lt_c_monthly_benefit_range_from &&
          lt_c_monthly_benefit_range_increment == o.lt_c_monthly_benefit_range_increment &&
          lt_c_monthly_benefit_range_thru == o.lt_c_monthly_benefit_range_thru &&
          lt_c_monthly_benefit_type == o.lt_c_monthly_benefit_type &&
          lt_c_waiver_of_premium_type == o.lt_c_waiver_of_premium_type &&
          lifetime_max == o.lifetime_max &&
          lifetime_max_net == o.lifetime_max_net &&
          lifetime_max_oon == o.lifetime_max_oon &&
          maturity_age == o.maturity_age &&
          maturity_age_type == o.maturity_age_type &&
          max_disability_weeks == o.max_disability_weeks &&
          max_includes_waiting_period == o.max_includes_waiting_period &&
          mem_ded_credit == o.mem_ded_credit &&
          mem_ded_credit_oon == o.mem_ded_credit_oon &&
          mem_ded_credit_ppo == o.mem_ded_credit_ppo &&
          member_annual_max == o.member_annual_max &&
          member_annual_max_net == o.member_annual_max_net &&
          member_annual_max_oon == o.member_annual_max_oon &&
          member_ded_oon == o.member_ded_oon &&
          member_ded_ppo == o.member_ded_ppo &&
          member_deductible == o.member_deductible &&
          member_lifetime_max == o.member_lifetime_max &&
          member_lifetime_max_net == o.member_lifetime_max_net &&
          member_lifetime_max_oon == o.member_lifetime_max_oon &&
          oo_p_calc_option == o.oo_p_calc_option &&
          oo_p_in_to_out == o.oo_p_in_to_out &&
          oo_p_max_mem == o.oo_p_max_mem &&
          oo_p_max_net_mem == o.oo_p_max_net_mem &&
          oo_p_max_net_sub == o.oo_p_max_net_sub &&
          oo_p_max_oon_mem == o.oo_p_max_oon_mem &&
          oo_p_max_oon_sub == o.oo_p_max_oon_sub &&
          oo_p_max_sub == o.oo_p_max_sub &&
          oo_p_out_to_in == o.oo_p_out_to_in &&
          oo_p_out_to_in_limit == o.oo_p_out_to_in_limit &&
          oo_p_out_to_in_limit_max == o.oo_p_out_to_in_limit_max &&
          payment_interval == o.payment_interval &&
          payor_id == o.payor_id &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          plan_document_url == o.plan_document_url &&
          plan_type == o.plan_type &&
          policy_forfeiture_grace_period == o.policy_forfeiture_grace_period &&
          policy_forfeiture_grace_period_type == o.policy_forfeiture_grace_period_type &&
          policy_status_default == o.policy_status_default &&
          pre_ex_ex_code == o.pre_ex_ex_code &&
          pre_ex_from == o.pre_ex_from &&
          pre_ex_range == o.pre_ex_range &&
          pre_ex_thru == o.pre_ex_thru &&
          qp_a_method == o.qp_a_method &&
          reduced_paid_up_default == o.reduced_paid_up_default &&
          remove_member_amount_edit == o.remove_member_amount_edit &&
          situs_state == o.situs_state &&
          sub_ded_credit == o.sub_ded_credit &&
          sub_ded_credit_oon == o.sub_ded_credit_oon &&
          sub_ded_credit_ppo == o.sub_ded_credit_ppo &&
          subscriber_ded_oon == o.subscriber_ded_oon &&
          subscriber_ded_ppo == o.subscriber_ded_ppo &&
          subscriber_deductible == o.subscriber_deductible &&
          survivor_benefit == o.survivor_benefit &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_cob_savings == o.use_cob_savings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [plan_id, annual_max, annual_max_net, annual_max_oon, auto_create_flex, cobr_a_plan_type_desc, co_b_savings_max, co_b_type, capitated, cash_value_default, co_ins_in_to_out, co_ins_max_mem, co_ins_max_net_mem, co_ins_max_net_sub, co_ins_max_oon_mem, co_ins_max_oon_sub, co_ins_max_sub, co_ins_out_to_in, co_ins_out_to_in_limit, co_ins_out_to_in_limit_max, context4_clm_ucr_pct, context4_clm_ucr_pct_oon, context4_fee_selector, context4_fee_selector_oon, context4_medicare_pct, context4_medicare_pct_oon, context4_password, context4_payor_type, context4_payor_type_oon, context4_pct_of_chg, context4_pct_of_chg_oon, context4_plan_price_not_greater_billed_fg, context4_user_id, context4_web_uri, context4_web_uri_delete, currency_id, ded_in_to_out, ded_out_to_in, ded_out_to_in_limit, ded_out_to_in_limit_max, description, entry_date, entry_user, extended_term_default, family_level_co_ins, family_level_co_ins_member, family_level_ded, family_level_ded_member, family_level_oop, family_level_oop_member, flex_advance_fund, flex_type, forfeiture_status_default, illness_ex_code, illness_waiting_period, include_waiting_period, injury_ex_code, injury_waiting_period, lt_c_apply_elimination_period, lt_c_apply_waiver_of_premium, lt_c_daily_benefit, lt_c_daily_benefit_range_from, lt_c_daily_benefit_range_increment, lt_c_daily_benefit_range_thru, lt_c_daily_benefit_type, lt_c_elimination_period, lt_c_elimination_period_per_claim, lt_c_elimination_period_type, lt_c_lifetime_max_days_from, lt_c_lifetime_max_days_thru, lt_c_lifetime_max_from, lt_c_lifetime_max_increment, lt_c_lifetime_max_joint_policy, lt_c_lifetime_max_thru, lt_c_lifetime_max_type, lt_c_lifetime_max_years_from, lt_c_lifetime_max_years_thru, lt_c_monthly_benefit, lt_c_monthly_benefit_range_from, lt_c_monthly_benefit_range_increment, lt_c_monthly_benefit_range_thru, lt_c_monthly_benefit_type, lt_c_waiver_of_premium_type, lifetime_max, lifetime_max_net, lifetime_max_oon, maturity_age, maturity_age_type, max_disability_weeks, max_includes_waiting_period, mem_ded_credit, mem_ded_credit_oon, mem_ded_credit_ppo, member_annual_max, member_annual_max_net, member_annual_max_oon, member_ded_oon, member_ded_ppo, member_deductible, member_lifetime_max, member_lifetime_max_net, member_lifetime_max_oon, oo_p_calc_option, oo_p_in_to_out, oo_p_max_mem, oo_p_max_net_mem, oo_p_max_net_sub, oo_p_max_oon_mem, oo_p_max_oon_sub, oo_p_max_sub, oo_p_out_to_in, oo_p_out_to_in_limit, oo_p_out_to_in_limit_max, payment_interval, payor_id, pend_ex_code, pend_flag, plan_document_url, plan_type, policy_forfeiture_grace_period, policy_forfeiture_grace_period_type, policy_status_default, pre_ex_ex_code, pre_ex_from, pre_ex_range, pre_ex_thru, qp_a_method, reduced_paid_up_default, remove_member_amount_edit, situs_state, sub_ded_credit, sub_ded_credit_oon, sub_ded_credit_ppo, subscriber_ded_oon, subscriber_ded_ppo, subscriber_deductible, survivor_benefit, update_date, update_user, use_cob_savings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
