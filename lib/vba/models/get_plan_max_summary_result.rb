=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GetPlanMaxSummaryResult
    attr_accessor :as_of_date

    attr_accessor :amount_met

    attr_accessor :visits_met

    attr_accessor :plan_id

    attr_accessor :benefit_code

    attr_accessor :max_id

    attr_accessor :max_type

    attr_accessor :max_type_net

    attr_accessor :quantity

    attr_accessor :max_per

    attr_accessor :frequency

    attr_accessor :from_procedure

    attr_accessor :thru_procedure

    attr_accessor :max_from

    attr_accessor :max_thru

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'as_of_date' => :'as_Of_Date',
        :'amount_met' => :'amount_Met',
        :'visits_met' => :'visits_Met',
        :'plan_id' => :'plan_ID',
        :'benefit_code' => :'benefit_Code',
        :'max_id' => :'max_ID',
        :'max_type' => :'max_Type',
        :'max_type_net' => :'max_Type_Net',
        :'quantity' => :'quantity',
        :'max_per' => :'max_Per',
        :'frequency' => :'frequency',
        :'from_procedure' => :'from_Procedure',
        :'thru_procedure' => :'thru_Procedure',
        :'max_from' => :'max_From',
        :'max_thru' => :'max_Thru'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'as_of_date' => :'Time',
        :'amount_met' => :'Float',
        :'visits_met' => :'Integer',
        :'plan_id' => :'String',
        :'benefit_code' => :'String',
        :'max_id' => :'String',
        :'max_type' => :'String',
        :'max_type_net' => :'String',
        :'quantity' => :'Float',
        :'max_per' => :'String',
        :'frequency' => :'Integer',
        :'from_procedure' => :'String',
        :'thru_procedure' => :'String',
        :'max_from' => :'Time',
        :'max_thru' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'as_of_date',
        :'amount_met',
        :'visits_met',
        :'plan_id',
        :'benefit_code',
        :'max_id',
        :'max_type',
        :'max_type_net',
        :'quantity',
        :'max_per',
        :'frequency',
        :'from_procedure',
        :'thru_procedure',
        :'max_from',
        :'max_thru'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GetPlanMaxSummaryResult` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GetPlanMaxSummaryResult`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'as_of_date')
        self.as_of_date = attributes[:'as_of_date']
      end

      if attributes.key?(:'amount_met')
        self.amount_met = attributes[:'amount_met']
      end

      if attributes.key?(:'visits_met')
        self.visits_met = attributes[:'visits_met']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'max_id')
        self.max_id = attributes[:'max_id']
      end

      if attributes.key?(:'max_type')
        self.max_type = attributes[:'max_type']
      end

      if attributes.key?(:'max_type_net')
        self.max_type_net = attributes[:'max_type_net']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'max_per')
        self.max_per = attributes[:'max_per']
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.key?(:'from_procedure')
        self.from_procedure = attributes[:'from_procedure']
      end

      if attributes.key?(:'thru_procedure')
        self.thru_procedure = attributes[:'thru_procedure']
      end

      if attributes.key?(:'max_from')
        self.max_from = attributes[:'max_from']
      end

      if attributes.key?(:'max_thru')
        self.max_thru = attributes[:'max_thru']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          as_of_date == o.as_of_date &&
          amount_met == o.amount_met &&
          visits_met == o.visits_met &&
          plan_id == o.plan_id &&
          benefit_code == o.benefit_code &&
          max_id == o.max_id &&
          max_type == o.max_type &&
          max_type_net == o.max_type_net &&
          quantity == o.quantity &&
          max_per == o.max_per &&
          frequency == o.frequency &&
          from_procedure == o.from_procedure &&
          thru_procedure == o.thru_procedure &&
          max_from == o.max_from &&
          max_thru == o.max_thru
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [as_of_date, amount_met, visits_met, plan_id, benefit_code, max_id, max_type, max_type_net, quantity, max_per, frequency, from_procedure, thru_procedure, max_from, max_thru].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
