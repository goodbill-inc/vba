=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class USERFIELDSECURITY
    attr_accessor :column_name

    attr_accessor :field_access

    attr_accessor :field_mask

    attr_accessor :field_privilege_level

    attr_accessor :security_field_id

    attr_accessor :table_name

    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'column_name' => :'column_Name',
        :'field_access' => :'field_Access',
        :'field_mask' => :'field_Mask',
        :'field_privilege_level' => :'field_Privilege_Level',
        :'security_field_id' => :'securityField_ID',
        :'table_name' => :'table_Name',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'column_name' => :'String',
        :'field_access' => :'String',
        :'field_mask' => :'String',
        :'field_privilege_level' => :'Integer',
        :'security_field_id' => :'String',
        :'table_name' => :'String',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'column_name',
        :'field_access',
        :'field_mask',
        :'field_privilege_level',
        :'table_name',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::USERFIELDSECURITY` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::USERFIELDSECURITY`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'column_name')
        self.column_name = attributes[:'column_name']
      end

      if attributes.key?(:'field_access')
        self.field_access = attributes[:'field_access']
      end

      if attributes.key?(:'field_mask')
        self.field_mask = attributes[:'field_mask']
      end

      if attributes.key?(:'field_privilege_level')
        self.field_privilege_level = attributes[:'field_privilege_level']
      end

      if attributes.key?(:'security_field_id')
        self.security_field_id = attributes[:'security_field_id']
      else
        self.security_field_id = nil
      end

      if attributes.key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      else
        self.user_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@column_name.nil? && @column_name.to_s.length > 256
        invalid_properties.push('invalid value for "column_name", the character length must be smaller than or equal to 256.')
      end

      if !@field_access.nil? && @field_access.to_s.length > 16
        invalid_properties.push('invalid value for "field_access", the character length must be smaller than or equal to 16.')
      end

      if !@field_mask.nil? && @field_mask.to_s.length > 512
        invalid_properties.push('invalid value for "field_mask", the character length must be smaller than or equal to 512.')
      end

      if @security_field_id.nil?
        invalid_properties.push('invalid value for "security_field_id", security_field_id cannot be nil.')
      end

      if @security_field_id.to_s.length > 32
        invalid_properties.push('invalid value for "security_field_id", the character length must be smaller than or equal to 32.')
      end

      if @security_field_id.to_s.length < 1
        invalid_properties.push('invalid value for "security_field_id", the character length must be great than or equal to 1.')
      end

      if !@table_name.nil? && @table_name.to_s.length > 256
        invalid_properties.push('invalid value for "table_name", the character length must be smaller than or equal to 256.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @user_id.to_s.length > 16
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 16.')
      end

      if @user_id.to_s.length < 1
        invalid_properties.push('invalid value for "user_id", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@column_name.nil? && @column_name.to_s.length > 256
      return false if !@field_access.nil? && @field_access.to_s.length > 16
      return false if !@field_mask.nil? && @field_mask.to_s.length > 512
      return false if @security_field_id.nil?
      return false if @security_field_id.to_s.length > 32
      return false if @security_field_id.to_s.length < 1
      return false if !@table_name.nil? && @table_name.to_s.length > 256
      return false if @user_id.nil?
      return false if @user_id.to_s.length > 16
      return false if @user_id.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] column_name Value to be assigned
    def column_name=(column_name)
      if !column_name.nil? && column_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "column_name", the character length must be smaller than or equal to 256.'
      end

      @column_name = column_name
    end

    # Custom attribute writer method with validation
    # @param [Object] field_access Value to be assigned
    def field_access=(field_access)
      if !field_access.nil? && field_access.to_s.length > 16
        fail ArgumentError, 'invalid value for "field_access", the character length must be smaller than or equal to 16.'
      end

      @field_access = field_access
    end

    # Custom attribute writer method with validation
    # @param [Object] field_mask Value to be assigned
    def field_mask=(field_mask)
      if !field_mask.nil? && field_mask.to_s.length > 512
        fail ArgumentError, 'invalid value for "field_mask", the character length must be smaller than or equal to 512.'
      end

      @field_mask = field_mask
    end

    # Custom attribute writer method with validation
    # @param [Object] security_field_id Value to be assigned
    def security_field_id=(security_field_id)
      if security_field_id.nil?
        fail ArgumentError, 'security_field_id cannot be nil'
      end

      if security_field_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "security_field_id", the character length must be smaller than or equal to 32.'
      end

      if security_field_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "security_field_id", the character length must be great than or equal to 1.'
      end

      @security_field_id = security_field_id
    end

    # Custom attribute writer method with validation
    # @param [Object] table_name Value to be assigned
    def table_name=(table_name)
      if !table_name.nil? && table_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "table_name", the character length must be smaller than or equal to 256.'
      end

      @table_name = table_name
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if user_id.nil?
        fail ArgumentError, 'user_id cannot be nil'
      end

      if user_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 16.'
      end

      if user_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_id", the character length must be great than or equal to 1.'
      end

      @user_id = user_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          column_name == o.column_name &&
          field_access == o.field_access &&
          field_mask == o.field_mask &&
          field_privilege_level == o.field_privilege_level &&
          security_field_id == o.security_field_id &&
          table_name == o.table_name &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [column_name, field_access, field_mask, field_privilege_level, security_field_id, table_name, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
