=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class DisabilityPlanLimit
    # Unique Identifier for the DisabilityPlanLimit table.
    attr_accessor :disability_plan_limit_key

    # Starting Age the plan limit applies to.
    attr_accessor :age_from

    # Ending Age the plan limit applies to.
    attr_accessor :age_thru

    # Age Type the plan limit applies to.
    attr_accessor :age_type

    # Identifies the type of disability (injury or illness).
    attr_accessor :disability_type

    # Plan limit to apply.
    attr_accessor :limit

    # Type of plan limit.
    attr_accessor :limit_type

    # Starting value the plan limit applies to.
    attr_accessor :limit_type_from

    # Plan ID of the plan to limit.
    attr_accessor :plan_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'disability_plan_limit_key' => :'disabilityPlanLimit_Key',
        :'age_from' => :'age_From',
        :'age_thru' => :'age_Thru',
        :'age_type' => :'age_Type',
        :'disability_type' => :'disability_Type',
        :'limit' => :'limit',
        :'limit_type' => :'limit_Type',
        :'limit_type_from' => :'limit_Type_From',
        :'plan_id' => :'plan_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'disability_plan_limit_key' => :'Integer',
        :'age_from' => :'Integer',
        :'age_thru' => :'Integer',
        :'age_type' => :'String',
        :'disability_type' => :'String',
        :'limit' => :'Integer',
        :'limit_type' => :'String',
        :'limit_type_from' => :'String',
        :'plan_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'age_from',
        :'age_thru',
        :'age_type',
        :'disability_type',
        :'limit',
        :'limit_type',
        :'limit_type_from',
        :'plan_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::DisabilityPlanLimit` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::DisabilityPlanLimit`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'disability_plan_limit_key')
        self.disability_plan_limit_key = attributes[:'disability_plan_limit_key']
      else
        self.disability_plan_limit_key = nil
      end

      if attributes.key?(:'age_from')
        self.age_from = attributes[:'age_from']
      end

      if attributes.key?(:'age_thru')
        self.age_thru = attributes[:'age_thru']
      end

      if attributes.key?(:'age_type')
        self.age_type = attributes[:'age_type']
      end

      if attributes.key?(:'disability_type')
        self.disability_type = attributes[:'disability_type']
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'limit_type')
        self.limit_type = attributes[:'limit_type']
      end

      if attributes.key?(:'limit_type_from')
        self.limit_type_from = attributes[:'limit_type_from']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @disability_plan_limit_key.nil?
        invalid_properties.push('invalid value for "disability_plan_limit_key", disability_plan_limit_key cannot be nil.')
      end

      if !@age_type.nil? && @age_type.to_s.length > 8
        invalid_properties.push('invalid value for "age_type", the character length must be smaller than or equal to 8.')
      end

      if !@disability_type.nil? && @disability_type.to_s.length > 8
        invalid_properties.push('invalid value for "disability_type", the character length must be smaller than or equal to 8.')
      end

      if !@limit_type.nil? && @limit_type.to_s.length > 1
        invalid_properties.push('invalid value for "limit_type", the character length must be smaller than or equal to 1.')
      end

      if !@limit_type_from.nil? && @limit_type_from.to_s.length > 8
        invalid_properties.push('invalid value for "limit_type_from", the character length must be smaller than or equal to 8.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @disability_plan_limit_key.nil?
      return false if !@age_type.nil? && @age_type.to_s.length > 8
      return false if !@disability_type.nil? && @disability_type.to_s.length > 8
      return false if !@limit_type.nil? && @limit_type.to_s.length > 1
      return false if !@limit_type_from.nil? && @limit_type_from.to_s.length > 8
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] disability_plan_limit_key Value to be assigned
    def disability_plan_limit_key=(disability_plan_limit_key)
      if disability_plan_limit_key.nil?
        fail ArgumentError, 'disability_plan_limit_key cannot be nil'
      end

      @disability_plan_limit_key = disability_plan_limit_key
    end

    # Custom attribute writer method with validation
    # @param [Object] age_type Value to be assigned
    def age_type=(age_type)
      if !age_type.nil? && age_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "age_type", the character length must be smaller than or equal to 8.'
      end

      @age_type = age_type
    end

    # Custom attribute writer method with validation
    # @param [Object] disability_type Value to be assigned
    def disability_type=(disability_type)
      if !disability_type.nil? && disability_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "disability_type", the character length must be smaller than or equal to 8.'
      end

      @disability_type = disability_type
    end

    # Custom attribute writer method with validation
    # @param [Object] limit_type Value to be assigned
    def limit_type=(limit_type)
      if !limit_type.nil? && limit_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "limit_type", the character length must be smaller than or equal to 1.'
      end

      @limit_type = limit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] limit_type_from Value to be assigned
    def limit_type_from=(limit_type_from)
      if !limit_type_from.nil? && limit_type_from.to_s.length > 8
        fail ArgumentError, 'invalid value for "limit_type_from", the character length must be smaller than or equal to 8.'
      end

      @limit_type_from = limit_type_from
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          disability_plan_limit_key == o.disability_plan_limit_key &&
          age_from == o.age_from &&
          age_thru == o.age_thru &&
          age_type == o.age_type &&
          disability_type == o.disability_type &&
          limit == o.limit &&
          limit_type == o.limit_type &&
          limit_type_from == o.limit_type_from &&
          plan_id == o.plan_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [disability_plan_limit_key, age_from, age_thru, age_type, disability_type, limit, limit_type, limit_type_from, plan_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
