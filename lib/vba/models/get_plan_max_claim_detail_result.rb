=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GetPlanMaxClaimDetailResult
    attr_accessor :claim_number

    attr_accessor :claim_seq

    attr_accessor :plan_id

    attr_accessor :benefit_code

    attr_accessor :provider_id

    attr_accessor :visit

    attr_accessor :invalid_visit

    attr_accessor :service_date

    attr_accessor :month_service_date

    attr_accessor :year_service_date

    attr_accessor :procedure_code

    attr_accessor :units

    attr_accessor :service_days

    attr_accessor :tooth_number

    attr_accessor :co_b_savings

    attr_accessor :co_b_savings_used

    attr_accessor :billed_price

    attr_accessor :plan_price

    attr_accessor :co_pay_amt

    attr_accessor :co_ins_amt

    attr_accessor :deductible_amt

    attr_accessor :not_covered_amt

    attr_accessor :paid_amt

    attr_accessor :oo_p_amt

    attr_accessor :valid_visits

    attr_accessor :network_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_number' => :'claim_Number',
        :'claim_seq' => :'claim_Seq',
        :'plan_id' => :'plan_ID',
        :'benefit_code' => :'benefit_Code',
        :'provider_id' => :'provider_ID',
        :'visit' => :'visit',
        :'invalid_visit' => :'invalid_Visit',
        :'service_date' => :'service_Date',
        :'month_service_date' => :'month_Service_Date',
        :'year_service_date' => :'year_Service_Date',
        :'procedure_code' => :'procedure_Code',
        :'units' => :'units',
        :'service_days' => :'service_Days',
        :'tooth_number' => :'tooth_Number',
        :'co_b_savings' => :'coB_Savings',
        :'co_b_savings_used' => :'coB_Savings_Used',
        :'billed_price' => :'billed_Price',
        :'plan_price' => :'plan_Price',
        :'co_pay_amt' => :'co_Pay_Amt',
        :'co_ins_amt' => :'co_Ins_Amt',
        :'deductible_amt' => :'deductible_Amt',
        :'not_covered_amt' => :'not_Covered_Amt',
        :'paid_amt' => :'paid_Amt',
        :'oo_p_amt' => :'ooP_Amt',
        :'valid_visits' => :'valid_Visits',
        :'network_id' => :'network_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_number' => :'Integer',
        :'claim_seq' => :'String',
        :'plan_id' => :'String',
        :'benefit_code' => :'String',
        :'provider_id' => :'String',
        :'visit' => :'Integer',
        :'invalid_visit' => :'Integer',
        :'service_date' => :'Time',
        :'month_service_date' => :'Integer',
        :'year_service_date' => :'Integer',
        :'procedure_code' => :'String',
        :'units' => :'Float',
        :'service_days' => :'Integer',
        :'tooth_number' => :'Integer',
        :'co_b_savings' => :'Float',
        :'co_b_savings_used' => :'Float',
        :'billed_price' => :'Float',
        :'plan_price' => :'Float',
        :'co_pay_amt' => :'Float',
        :'co_ins_amt' => :'Float',
        :'deductible_amt' => :'Float',
        :'not_covered_amt' => :'Float',
        :'paid_amt' => :'Float',
        :'oo_p_amt' => :'Float',
        :'valid_visits' => :'Integer',
        :'network_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'claim_number',
        :'claim_seq',
        :'plan_id',
        :'benefit_code',
        :'provider_id',
        :'visit',
        :'invalid_visit',
        :'service_date',
        :'month_service_date',
        :'year_service_date',
        :'procedure_code',
        :'units',
        :'service_days',
        :'tooth_number',
        :'co_b_savings',
        :'co_b_savings_used',
        :'billed_price',
        :'plan_price',
        :'co_pay_amt',
        :'co_ins_amt',
        :'deductible_amt',
        :'not_covered_amt',
        :'paid_amt',
        :'oo_p_amt',
        :'valid_visits',
        :'network_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GetPlanMaxClaimDetailResult` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GetPlanMaxClaimDetailResult`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_number')
        self.claim_number = attributes[:'claim_number']
      end

      if attributes.key?(:'claim_seq')
        self.claim_seq = attributes[:'claim_seq']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'visit')
        self.visit = attributes[:'visit']
      end

      if attributes.key?(:'invalid_visit')
        self.invalid_visit = attributes[:'invalid_visit']
      end

      if attributes.key?(:'service_date')
        self.service_date = attributes[:'service_date']
      end

      if attributes.key?(:'month_service_date')
        self.month_service_date = attributes[:'month_service_date']
      end

      if attributes.key?(:'year_service_date')
        self.year_service_date = attributes[:'year_service_date']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      end

      if attributes.key?(:'units')
        self.units = attributes[:'units']
      end

      if attributes.key?(:'service_days')
        self.service_days = attributes[:'service_days']
      end

      if attributes.key?(:'tooth_number')
        self.tooth_number = attributes[:'tooth_number']
      end

      if attributes.key?(:'co_b_savings')
        self.co_b_savings = attributes[:'co_b_savings']
      end

      if attributes.key?(:'co_b_savings_used')
        self.co_b_savings_used = attributes[:'co_b_savings_used']
      end

      if attributes.key?(:'billed_price')
        self.billed_price = attributes[:'billed_price']
      end

      if attributes.key?(:'plan_price')
        self.plan_price = attributes[:'plan_price']
      end

      if attributes.key?(:'co_pay_amt')
        self.co_pay_amt = attributes[:'co_pay_amt']
      end

      if attributes.key?(:'co_ins_amt')
        self.co_ins_amt = attributes[:'co_ins_amt']
      end

      if attributes.key?(:'deductible_amt')
        self.deductible_amt = attributes[:'deductible_amt']
      end

      if attributes.key?(:'not_covered_amt')
        self.not_covered_amt = attributes[:'not_covered_amt']
      end

      if attributes.key?(:'paid_amt')
        self.paid_amt = attributes[:'paid_amt']
      end

      if attributes.key?(:'oo_p_amt')
        self.oo_p_amt = attributes[:'oo_p_amt']
      end

      if attributes.key?(:'valid_visits')
        self.valid_visits = attributes[:'valid_visits']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_number == o.claim_number &&
          claim_seq == o.claim_seq &&
          plan_id == o.plan_id &&
          benefit_code == o.benefit_code &&
          provider_id == o.provider_id &&
          visit == o.visit &&
          invalid_visit == o.invalid_visit &&
          service_date == o.service_date &&
          month_service_date == o.month_service_date &&
          year_service_date == o.year_service_date &&
          procedure_code == o.procedure_code &&
          units == o.units &&
          service_days == o.service_days &&
          tooth_number == o.tooth_number &&
          co_b_savings == o.co_b_savings &&
          co_b_savings_used == o.co_b_savings_used &&
          billed_price == o.billed_price &&
          plan_price == o.plan_price &&
          co_pay_amt == o.co_pay_amt &&
          co_ins_amt == o.co_ins_amt &&
          deductible_amt == o.deductible_amt &&
          not_covered_amt == o.not_covered_amt &&
          paid_amt == o.paid_amt &&
          oo_p_amt == o.oo_p_amt &&
          valid_visits == o.valid_visits &&
          network_id == o.network_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_number, claim_seq, plan_id, benefit_code, provider_id, visit, invalid_visit, service_date, month_service_date, year_service_date, procedure_code, units, service_days, tooth_number, co_b_savings, co_b_savings_used, billed_price, plan_price, co_pay_amt, co_ins_amt, deductible_amt, not_covered_amt, paid_amt, oo_p_amt, valid_visits, network_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
