=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Event
    # ID of the event. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :event_id

    # Flag to indicate if the event triggers a Claim Audit. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :claim_audit_event

    # Date the Event was Completed.
    attr_accessor :completion_date

    # Current Percentage that the Event has Completed
    attr_accessor :completion_percent

    # Due Date of the Event
    attr_accessor :due_date

    # End Date of the Event
    attr_accessor :end_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Object used when processing the event
    attr_accessor :event_processor

    # Identifier for the type of event
    attr_accessor :event_type

    # Meta data pertaining to the overall event
    attr_accessor :meta_data

    # Date when the 'Assigned User' will receive the next event reminder.
    attr_accessor :next_scheduled_date

    # Date when the event is due.
    attr_accessor :next_scheduled_time

    # Indicates the level of priority being assigned to the event.
    attr_accessor :priority

    # Flag to indicate if the event triggers a Report Series. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :process_automation_event

    # Indicates that the 'Assigned User' should receive a reminder regarding the event. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :reminder

    # Event ID of the Reminder
    attr_accessor :reminder_event_id

    # The key of the Report Series this Event trigger.
    attr_accessor :report_series_key

    # Start Date of the Event
    attr_accessor :start_date

    # Identifies the current status of the event.
    attr_accessor :status

    # Description of the event subject.
    attr_accessor :subject

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Key value identifying the User Group to whom the event is assigned
    attr_accessor :user_group_key

    # ID of the User to whom the event is assigned.
    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'event_id' => :'event_ID',
        :'claim_audit_event' => :'claim_Audit_Event',
        :'completion_date' => :'completion_Date',
        :'completion_percent' => :'completion_Percent',
        :'due_date' => :'due_Date',
        :'end_date' => :'end_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'event_processor' => :'event_Processor',
        :'event_type' => :'event_Type',
        :'meta_data' => :'meta_Data',
        :'next_scheduled_date' => :'next_Scheduled_Date',
        :'next_scheduled_time' => :'next_Scheduled_Time',
        :'priority' => :'priority',
        :'process_automation_event' => :'process_Automation_Event',
        :'reminder' => :'reminder',
        :'reminder_event_id' => :'reminder_Event_ID',
        :'report_series_key' => :'reportSeries_Key',
        :'start_date' => :'start_Date',
        :'status' => :'status',
        :'subject' => :'subject',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'user_group_key' => :'userGroup_Key',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'event_id' => :'Integer',
        :'claim_audit_event' => :'Boolean',
        :'completion_date' => :'Time',
        :'completion_percent' => :'Float',
        :'due_date' => :'Time',
        :'end_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'event_processor' => :'String',
        :'event_type' => :'String',
        :'meta_data' => :'String',
        :'next_scheduled_date' => :'Time',
        :'next_scheduled_time' => :'Time',
        :'priority' => :'String',
        :'process_automation_event' => :'Boolean',
        :'reminder' => :'Boolean',
        :'reminder_event_id' => :'Integer',
        :'report_series_key' => :'Integer',
        :'start_date' => :'Time',
        :'status' => :'String',
        :'subject' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'user_group_key' => :'Integer',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'completion_date',
        :'completion_percent',
        :'due_date',
        :'end_date',
        :'entry_user',
        :'event_processor',
        :'event_type',
        :'meta_data',
        :'next_scheduled_date',
        :'next_scheduled_time',
        :'priority',
        :'reminder_event_id',
        :'report_series_key',
        :'start_date',
        :'status',
        :'subject',
        :'update_user',
        :'user_group_key',
        :'user_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Event` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Event`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      else
        self.event_id = nil
      end

      if attributes.key?(:'claim_audit_event')
        self.claim_audit_event = attributes[:'claim_audit_event']
      else
        self.claim_audit_event = nil
      end

      if attributes.key?(:'completion_date')
        self.completion_date = attributes[:'completion_date']
      end

      if attributes.key?(:'completion_percent')
        self.completion_percent = attributes[:'completion_percent']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'event_processor')
        self.event_processor = attributes[:'event_processor']
      end

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      end

      if attributes.key?(:'meta_data')
        self.meta_data = attributes[:'meta_data']
      end

      if attributes.key?(:'next_scheduled_date')
        self.next_scheduled_date = attributes[:'next_scheduled_date']
      end

      if attributes.key?(:'next_scheduled_time')
        self.next_scheduled_time = attributes[:'next_scheduled_time']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'process_automation_event')
        self.process_automation_event = attributes[:'process_automation_event']
      else
        self.process_automation_event = nil
      end

      if attributes.key?(:'reminder')
        self.reminder = attributes[:'reminder']
      else
        self.reminder = nil
      end

      if attributes.key?(:'reminder_event_id')
        self.reminder_event_id = attributes[:'reminder_event_id']
      end

      if attributes.key?(:'report_series_key')
        self.report_series_key = attributes[:'report_series_key']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'user_group_key')
        self.user_group_key = attributes[:'user_group_key']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @event_id.nil?
        invalid_properties.push('invalid value for "event_id", event_id cannot be nil.')
      end

      if @claim_audit_event.nil?
        invalid_properties.push('invalid value for "claim_audit_event", claim_audit_event cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@event_processor.nil? && @event_processor.to_s.length > 64
        invalid_properties.push('invalid value for "event_processor", the character length must be smaller than or equal to 64.')
      end

      if !@event_type.nil? && @event_type.to_s.length > 32
        invalid_properties.push('invalid value for "event_type", the character length must be smaller than or equal to 32.')
      end

      if !@meta_data.nil? && @meta_data.to_s.length > 512
        invalid_properties.push('invalid value for "meta_data", the character length must be smaller than or equal to 512.')
      end

      if !@priority.nil? && @priority.to_s.length > 32
        invalid_properties.push('invalid value for "priority", the character length must be smaller than or equal to 32.')
      end

      if @process_automation_event.nil?
        invalid_properties.push('invalid value for "process_automation_event", process_automation_event cannot be nil.')
      end

      if @reminder.nil?
        invalid_properties.push('invalid value for "reminder", reminder cannot be nil.')
      end

      if !@status.nil? && @status.to_s.length > 32
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 32.')
      end

      if !@subject.nil? && @subject.to_s.length > 256
        invalid_properties.push('invalid value for "subject", the character length must be smaller than or equal to 256.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@user_id.nil? && @user_id.to_s.length > 16
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 16.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @event_id.nil?
      return false if @claim_audit_event.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@event_processor.nil? && @event_processor.to_s.length > 64
      return false if !@event_type.nil? && @event_type.to_s.length > 32
      return false if !@meta_data.nil? && @meta_data.to_s.length > 512
      return false if !@priority.nil? && @priority.to_s.length > 32
      return false if @process_automation_event.nil?
      return false if @reminder.nil?
      return false if !@status.nil? && @status.to_s.length > 32
      return false if !@subject.nil? && @subject.to_s.length > 256
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@user_id.nil? && @user_id.to_s.length > 16
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] event_id Value to be assigned
    def event_id=(event_id)
      if event_id.nil?
        fail ArgumentError, 'event_id cannot be nil'
      end

      @event_id = event_id
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_audit_event Value to be assigned
    def claim_audit_event=(claim_audit_event)
      if claim_audit_event.nil?
        fail ArgumentError, 'claim_audit_event cannot be nil'
      end

      @claim_audit_event = claim_audit_event
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] event_processor Value to be assigned
    def event_processor=(event_processor)
      if !event_processor.nil? && event_processor.to_s.length > 64
        fail ArgumentError, 'invalid value for "event_processor", the character length must be smaller than or equal to 64.'
      end

      @event_processor = event_processor
    end

    # Custom attribute writer method with validation
    # @param [Object] event_type Value to be assigned
    def event_type=(event_type)
      if !event_type.nil? && event_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "event_type", the character length must be smaller than or equal to 32.'
      end

      @event_type = event_type
    end

    # Custom attribute writer method with validation
    # @param [Object] meta_data Value to be assigned
    def meta_data=(meta_data)
      if !meta_data.nil? && meta_data.to_s.length > 512
        fail ArgumentError, 'invalid value for "meta_data", the character length must be smaller than or equal to 512.'
      end

      @meta_data = meta_data
    end

    # Custom attribute writer method with validation
    # @param [Object] priority Value to be assigned
    def priority=(priority)
      if !priority.nil? && priority.to_s.length > 32
        fail ArgumentError, 'invalid value for "priority", the character length must be smaller than or equal to 32.'
      end

      @priority = priority
    end

    # Custom attribute writer method with validation
    # @param [Object] process_automation_event Value to be assigned
    def process_automation_event=(process_automation_event)
      if process_automation_event.nil?
        fail ArgumentError, 'process_automation_event cannot be nil'
      end

      @process_automation_event = process_automation_event
    end

    # Custom attribute writer method with validation
    # @param [Object] reminder Value to be assigned
    def reminder=(reminder)
      if reminder.nil?
        fail ArgumentError, 'reminder cannot be nil'
      end

      @reminder = reminder
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.length > 32
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 32.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] subject Value to be assigned
    def subject=(subject)
      if !subject.nil? && subject.to_s.length > 256
        fail ArgumentError, 'invalid value for "subject", the character length must be smaller than or equal to 256.'
      end

      @subject = subject
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 16.'
      end

      @user_id = user_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          event_id == o.event_id &&
          claim_audit_event == o.claim_audit_event &&
          completion_date == o.completion_date &&
          completion_percent == o.completion_percent &&
          due_date == o.due_date &&
          end_date == o.end_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          event_processor == o.event_processor &&
          event_type == o.event_type &&
          meta_data == o.meta_data &&
          next_scheduled_date == o.next_scheduled_date &&
          next_scheduled_time == o.next_scheduled_time &&
          priority == o.priority &&
          process_automation_event == o.process_automation_event &&
          reminder == o.reminder &&
          reminder_event_id == o.reminder_event_id &&
          report_series_key == o.report_series_key &&
          start_date == o.start_date &&
          status == o.status &&
          subject == o.subject &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          user_group_key == o.user_group_key &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [event_id, claim_audit_event, completion_date, completion_percent, due_date, end_date, entry_date, entry_user, event_processor, event_type, meta_data, next_scheduled_date, next_scheduled_time, priority, process_automation_event, reminder, reminder_event_id, report_series_key, start_date, status, subject, update_date, update_user, user_group_key, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
