=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupContract
    # References GroupDivision.Group_ID value on the parent record.
    attr_accessor :group_id

    # References GroupDivision.Division_ID value on the parent record.
    attr_accessor :division_id

    # Date when the contract becomes/became effective. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :coverage_start

    # Identifies the age at which dependents are considered to be adults. Student status information is required on the enrollment to allow claims to pay for a dependent whose age exceeds the age defined here.
    attr_accessor :adult_age

    # When this option is selected, adjudication to mark every claim as 'Advice to Pay' (ATP). Advice to Pay claims do not produce check records when processed. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :advice_to_pay

    # No longer in use.
    attr_accessor :allow_multi_plan

    # Indicates that the Group offers Member-level benfits. This means that the insured and dependents can enroll in separate coverage.
    attr_accessor :benefit_at_member

    # No longer in use.
    attr_accessor :billing_basis

    # No longer in use.
    attr_accessor :billing_cycle_id

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :comm_pct_flag

    # No longer in use.
    attr_accessor :comm_per

    # No longer in use.
    attr_accessor :commission

    # Date when the contract expires/expired.
    attr_accessor :coverage_end

    # Identifies the age at which dependents are no longer eligible for coverage. Adult Dependent information is required on the enrollment to allow claims to pay for a dependent whose age exceeds the age defined here.
    attr_accessor :cutoff_age

    # User that first added the record to the system.
    attr_accessor :entry_date

    # Date when the record was first added to the system.
    attr_accessor :entry_user

    # No longer in use.
    attr_accessor :last_billed

    # Disability setting for Subscriber-level maximums.
    attr_accessor :max_at_subscriber

    # No longer in use.
    attr_accessor :orig_coverage_end

    # Premium Billing setting that holds the premiums paid through for a selection of contracted subscribers.
    attr_accessor :paid_through

    # No longer in use.
    attr_accessor :payor_id

    # No longer in use.
    attr_accessor :policy_number

    # No longer in use.
    attr_accessor :reinsurer_id

    # Indicates that the Group offers Member-level Riders.
    attr_accessor :rider_at_member

    # For Life & Disability clients, this designates that the subscribers on this contract as having salaried benefit. This impacts how STD and LTD claims are generated during claim creation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :salaried_benefit

    # No longer in use.
    attr_accessor :stop_loss_amt

    # Disability setting for totals calculating at the Member level.
    attr_accessor :total_at_member

    # User that last updated the record in the system.
    attr_accessor :update_date

    # Date when the record was last updated in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'coverage_start' => :'coverage_Start',
        :'adult_age' => :'adult_Age',
        :'advice_to_pay' => :'advice_To_Pay',
        :'allow_multi_plan' => :'allow_Multi_Plan',
        :'benefit_at_member' => :'benefit_At_Member',
        :'billing_basis' => :'billing_Basis',
        :'billing_cycle_id' => :'billing_Cycle_ID',
        :'comm_pct_flag' => :'comm_Pct_Flag',
        :'comm_per' => :'comm_Per',
        :'commission' => :'commission',
        :'coverage_end' => :'coverage_End',
        :'cutoff_age' => :'cutoff_Age',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'last_billed' => :'last_Billed',
        :'max_at_subscriber' => :'max_At_Subscriber',
        :'orig_coverage_end' => :'orig_Coverage_End',
        :'paid_through' => :'paid_Through',
        :'payor_id' => :'payor_ID',
        :'policy_number' => :'policy_Number',
        :'reinsurer_id' => :'reinsurer_Id',
        :'rider_at_member' => :'rider_At_Member',
        :'salaried_benefit' => :'salaried_Benefit',
        :'stop_loss_amt' => :'stop_Loss_Amt',
        :'total_at_member' => :'total_At_Member',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'coverage_start' => :'Time',
        :'adult_age' => :'Integer',
        :'advice_to_pay' => :'Boolean',
        :'allow_multi_plan' => :'String',
        :'benefit_at_member' => :'String',
        :'billing_basis' => :'String',
        :'billing_cycle_id' => :'String',
        :'comm_pct_flag' => :'Boolean',
        :'comm_per' => :'String',
        :'commission' => :'Float',
        :'coverage_end' => :'Time',
        :'cutoff_age' => :'Integer',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'last_billed' => :'Time',
        :'max_at_subscriber' => :'String',
        :'orig_coverage_end' => :'Time',
        :'paid_through' => :'Time',
        :'payor_id' => :'String',
        :'policy_number' => :'String',
        :'reinsurer_id' => :'String',
        :'rider_at_member' => :'String',
        :'salaried_benefit' => :'Boolean',
        :'stop_loss_amt' => :'Float',
        :'total_at_member' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adult_age',
        :'allow_multi_plan',
        :'billing_basis',
        :'billing_cycle_id',
        :'comm_per',
        :'commission',
        :'coverage_end',
        :'cutoff_age',
        :'entry_user',
        :'last_billed',
        :'orig_coverage_end',
        :'paid_through',
        :'payor_id',
        :'policy_number',
        :'reinsurer_id',
        :'stop_loss_amt',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupContract` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupContract`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      else
        self.division_id = nil
      end

      if attributes.key?(:'coverage_start')
        self.coverage_start = attributes[:'coverage_start']
      else
        self.coverage_start = nil
      end

      if attributes.key?(:'adult_age')
        self.adult_age = attributes[:'adult_age']
      end

      if attributes.key?(:'advice_to_pay')
        self.advice_to_pay = attributes[:'advice_to_pay']
      else
        self.advice_to_pay = nil
      end

      if attributes.key?(:'allow_multi_plan')
        self.allow_multi_plan = attributes[:'allow_multi_plan']
      end

      if attributes.key?(:'benefit_at_member')
        self.benefit_at_member = attributes[:'benefit_at_member']
      else
        self.benefit_at_member = nil
      end

      if attributes.key?(:'billing_basis')
        self.billing_basis = attributes[:'billing_basis']
      end

      if attributes.key?(:'billing_cycle_id')
        self.billing_cycle_id = attributes[:'billing_cycle_id']
      end

      if attributes.key?(:'comm_pct_flag')
        self.comm_pct_flag = attributes[:'comm_pct_flag']
      else
        self.comm_pct_flag = nil
      end

      if attributes.key?(:'comm_per')
        self.comm_per = attributes[:'comm_per']
      end

      if attributes.key?(:'commission')
        self.commission = attributes[:'commission']
      end

      if attributes.key?(:'coverage_end')
        self.coverage_end = attributes[:'coverage_end']
      end

      if attributes.key?(:'cutoff_age')
        self.cutoff_age = attributes[:'cutoff_age']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'last_billed')
        self.last_billed = attributes[:'last_billed']
      end

      if attributes.key?(:'max_at_subscriber')
        self.max_at_subscriber = attributes[:'max_at_subscriber']
      else
        self.max_at_subscriber = nil
      end

      if attributes.key?(:'orig_coverage_end')
        self.orig_coverage_end = attributes[:'orig_coverage_end']
      end

      if attributes.key?(:'paid_through')
        self.paid_through = attributes[:'paid_through']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'policy_number')
        self.policy_number = attributes[:'policy_number']
      end

      if attributes.key?(:'reinsurer_id')
        self.reinsurer_id = attributes[:'reinsurer_id']
      end

      if attributes.key?(:'rider_at_member')
        self.rider_at_member = attributes[:'rider_at_member']
      else
        self.rider_at_member = nil
      end

      if attributes.key?(:'salaried_benefit')
        self.salaried_benefit = attributes[:'salaried_benefit']
      else
        self.salaried_benefit = nil
      end

      if attributes.key?(:'stop_loss_amt')
        self.stop_loss_amt = attributes[:'stop_loss_amt']
      end

      if attributes.key?(:'total_at_member')
        self.total_at_member = attributes[:'total_at_member']
      else
        self.total_at_member = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @division_id.nil?
        invalid_properties.push('invalid value for "division_id", division_id cannot be nil.')
      end

      if @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @division_id.to_s.length < 1
        invalid_properties.push('invalid value for "division_id", the character length must be great than or equal to 1.')
      end

      if @coverage_start.nil?
        invalid_properties.push('invalid value for "coverage_start", coverage_start cannot be nil.')
      end

      if @advice_to_pay.nil?
        invalid_properties.push('invalid value for "advice_to_pay", advice_to_pay cannot be nil.')
      end

      if !@allow_multi_plan.nil? && @allow_multi_plan.to_s.length > 1
        invalid_properties.push('invalid value for "allow_multi_plan", the character length must be smaller than or equal to 1.')
      end

      if @benefit_at_member.nil?
        invalid_properties.push('invalid value for "benefit_at_member", benefit_at_member cannot be nil.')
      end

      if @benefit_at_member.to_s.length > 1
        invalid_properties.push('invalid value for "benefit_at_member", the character length must be smaller than or equal to 1.')
      end

      if @benefit_at_member.to_s.length < 1
        invalid_properties.push('invalid value for "benefit_at_member", the character length must be great than or equal to 1.')
      end

      if !@billing_basis.nil? && @billing_basis.to_s.length > 1
        invalid_properties.push('invalid value for "billing_basis", the character length must be smaller than or equal to 1.')
      end

      if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
        invalid_properties.push('invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.')
      end

      if @comm_pct_flag.nil?
        invalid_properties.push('invalid value for "comm_pct_flag", comm_pct_flag cannot be nil.')
      end

      if !@comm_per.nil? && @comm_per.to_s.length > 1
        invalid_properties.push('invalid value for "comm_per", the character length must be smaller than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @max_at_subscriber.nil?
        invalid_properties.push('invalid value for "max_at_subscriber", max_at_subscriber cannot be nil.')
      end

      if @max_at_subscriber.to_s.length > 1
        invalid_properties.push('invalid value for "max_at_subscriber", the character length must be smaller than or equal to 1.')
      end

      if @max_at_subscriber.to_s.length < 1
        invalid_properties.push('invalid value for "max_at_subscriber", the character length must be great than or equal to 1.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@policy_number.nil? && @policy_number.to_s.length > 32
        invalid_properties.push('invalid value for "policy_number", the character length must be smaller than or equal to 32.')
      end

      if !@reinsurer_id.nil? && @reinsurer_id.to_s.length > 8
        invalid_properties.push('invalid value for "reinsurer_id", the character length must be smaller than or equal to 8.')
      end

      if @rider_at_member.nil?
        invalid_properties.push('invalid value for "rider_at_member", rider_at_member cannot be nil.')
      end

      if @rider_at_member.to_s.length > 1
        invalid_properties.push('invalid value for "rider_at_member", the character length must be smaller than or equal to 1.')
      end

      if @rider_at_member.to_s.length < 1
        invalid_properties.push('invalid value for "rider_at_member", the character length must be great than or equal to 1.')
      end

      if @salaried_benefit.nil?
        invalid_properties.push('invalid value for "salaried_benefit", salaried_benefit cannot be nil.')
      end

      if @total_at_member.nil?
        invalid_properties.push('invalid value for "total_at_member", total_at_member cannot be nil.')
      end

      if @total_at_member.to_s.length > 1
        invalid_properties.push('invalid value for "total_at_member", the character length must be smaller than or equal to 1.')
      end

      if @total_at_member.to_s.length < 1
        invalid_properties.push('invalid value for "total_at_member", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @division_id.nil?
      return false if @division_id.to_s.length > 20
      return false if @division_id.to_s.length < 1
      return false if @coverage_start.nil?
      return false if @advice_to_pay.nil?
      return false if !@allow_multi_plan.nil? && @allow_multi_plan.to_s.length > 1
      return false if @benefit_at_member.nil?
      return false if @benefit_at_member.to_s.length > 1
      return false if @benefit_at_member.to_s.length < 1
      return false if !@billing_basis.nil? && @billing_basis.to_s.length > 1
      return false if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
      return false if @comm_pct_flag.nil?
      return false if !@comm_per.nil? && @comm_per.to_s.length > 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @max_at_subscriber.nil?
      return false if @max_at_subscriber.to_s.length > 1
      return false if @max_at_subscriber.to_s.length < 1
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@policy_number.nil? && @policy_number.to_s.length > 32
      return false if !@reinsurer_id.nil? && @reinsurer_id.to_s.length > 8
      return false if @rider_at_member.nil?
      return false if @rider_at_member.to_s.length > 1
      return false if @rider_at_member.to_s.length < 1
      return false if @salaried_benefit.nil?
      return false if @total_at_member.nil?
      return false if @total_at_member.to_s.length > 1
      return false if @total_at_member.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if division_id.nil?
        fail ArgumentError, 'division_id cannot be nil'
      end

      if division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      if division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "division_id", the character length must be great than or equal to 1.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] coverage_start Value to be assigned
    def coverage_start=(coverage_start)
      if coverage_start.nil?
        fail ArgumentError, 'coverage_start cannot be nil'
      end

      @coverage_start = coverage_start
    end

    # Custom attribute writer method with validation
    # @param [Object] advice_to_pay Value to be assigned
    def advice_to_pay=(advice_to_pay)
      if advice_to_pay.nil?
        fail ArgumentError, 'advice_to_pay cannot be nil'
      end

      @advice_to_pay = advice_to_pay
    end

    # Custom attribute writer method with validation
    # @param [Object] allow_multi_plan Value to be assigned
    def allow_multi_plan=(allow_multi_plan)
      if !allow_multi_plan.nil? && allow_multi_plan.to_s.length > 1
        fail ArgumentError, 'invalid value for "allow_multi_plan", the character length must be smaller than or equal to 1.'
      end

      @allow_multi_plan = allow_multi_plan
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_at_member Value to be assigned
    def benefit_at_member=(benefit_at_member)
      if benefit_at_member.nil?
        fail ArgumentError, 'benefit_at_member cannot be nil'
      end

      if benefit_at_member.to_s.length > 1
        fail ArgumentError, 'invalid value for "benefit_at_member", the character length must be smaller than or equal to 1.'
      end

      if benefit_at_member.to_s.length < 1
        fail ArgumentError, 'invalid value for "benefit_at_member", the character length must be great than or equal to 1.'
      end

      @benefit_at_member = benefit_at_member
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_basis Value to be assigned
    def billing_basis=(billing_basis)
      if !billing_basis.nil? && billing_basis.to_s.length > 1
        fail ArgumentError, 'invalid value for "billing_basis", the character length must be smaller than or equal to 1.'
      end

      @billing_basis = billing_basis
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_cycle_id Value to be assigned
    def billing_cycle_id=(billing_cycle_id)
      if !billing_cycle_id.nil? && billing_cycle_id.to_s.length > 2
        fail ArgumentError, 'invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.'
      end

      @billing_cycle_id = billing_cycle_id
    end

    # Custom attribute writer method with validation
    # @param [Object] comm_pct_flag Value to be assigned
    def comm_pct_flag=(comm_pct_flag)
      if comm_pct_flag.nil?
        fail ArgumentError, 'comm_pct_flag cannot be nil'
      end

      @comm_pct_flag = comm_pct_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] comm_per Value to be assigned
    def comm_per=(comm_per)
      if !comm_per.nil? && comm_per.to_s.length > 1
        fail ArgumentError, 'invalid value for "comm_per", the character length must be smaller than or equal to 1.'
      end

      @comm_per = comm_per
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] max_at_subscriber Value to be assigned
    def max_at_subscriber=(max_at_subscriber)
      if max_at_subscriber.nil?
        fail ArgumentError, 'max_at_subscriber cannot be nil'
      end

      if max_at_subscriber.to_s.length > 1
        fail ArgumentError, 'invalid value for "max_at_subscriber", the character length must be smaller than or equal to 1.'
      end

      if max_at_subscriber.to_s.length < 1
        fail ArgumentError, 'invalid value for "max_at_subscriber", the character length must be great than or equal to 1.'
      end

      @max_at_subscriber = max_at_subscriber
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] policy_number Value to be assigned
    def policy_number=(policy_number)
      if !policy_number.nil? && policy_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "policy_number", the character length must be smaller than or equal to 32.'
      end

      @policy_number = policy_number
    end

    # Custom attribute writer method with validation
    # @param [Object] reinsurer_id Value to be assigned
    def reinsurer_id=(reinsurer_id)
      if !reinsurer_id.nil? && reinsurer_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "reinsurer_id", the character length must be smaller than or equal to 8.'
      end

      @reinsurer_id = reinsurer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] rider_at_member Value to be assigned
    def rider_at_member=(rider_at_member)
      if rider_at_member.nil?
        fail ArgumentError, 'rider_at_member cannot be nil'
      end

      if rider_at_member.to_s.length > 1
        fail ArgumentError, 'invalid value for "rider_at_member", the character length must be smaller than or equal to 1.'
      end

      if rider_at_member.to_s.length < 1
        fail ArgumentError, 'invalid value for "rider_at_member", the character length must be great than or equal to 1.'
      end

      @rider_at_member = rider_at_member
    end

    # Custom attribute writer method with validation
    # @param [Object] salaried_benefit Value to be assigned
    def salaried_benefit=(salaried_benefit)
      if salaried_benefit.nil?
        fail ArgumentError, 'salaried_benefit cannot be nil'
      end

      @salaried_benefit = salaried_benefit
    end

    # Custom attribute writer method with validation
    # @param [Object] total_at_member Value to be assigned
    def total_at_member=(total_at_member)
      if total_at_member.nil?
        fail ArgumentError, 'total_at_member cannot be nil'
      end

      if total_at_member.to_s.length > 1
        fail ArgumentError, 'invalid value for "total_at_member", the character length must be smaller than or equal to 1.'
      end

      if total_at_member.to_s.length < 1
        fail ArgumentError, 'invalid value for "total_at_member", the character length must be great than or equal to 1.'
      end

      @total_at_member = total_at_member
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          coverage_start == o.coverage_start &&
          adult_age == o.adult_age &&
          advice_to_pay == o.advice_to_pay &&
          allow_multi_plan == o.allow_multi_plan &&
          benefit_at_member == o.benefit_at_member &&
          billing_basis == o.billing_basis &&
          billing_cycle_id == o.billing_cycle_id &&
          comm_pct_flag == o.comm_pct_flag &&
          comm_per == o.comm_per &&
          commission == o.commission &&
          coverage_end == o.coverage_end &&
          cutoff_age == o.cutoff_age &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          last_billed == o.last_billed &&
          max_at_subscriber == o.max_at_subscriber &&
          orig_coverage_end == o.orig_coverage_end &&
          paid_through == o.paid_through &&
          payor_id == o.payor_id &&
          policy_number == o.policy_number &&
          reinsurer_id == o.reinsurer_id &&
          rider_at_member == o.rider_at_member &&
          salaried_benefit == o.salaried_benefit &&
          stop_loss_amt == o.stop_loss_amt &&
          total_at_member == o.total_at_member &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, division_id, coverage_start, adult_age, advice_to_pay, allow_multi_plan, benefit_at_member, billing_basis, billing_cycle_id, comm_pct_flag, comm_per, commission, coverage_end, cutoff_age, entry_date, entry_user, last_billed, max_at_subscriber, orig_coverage_end, paid_through, payor_id, policy_number, reinsurer_id, rider_at_member, salaried_benefit, stop_loss_amt, total_at_member, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
