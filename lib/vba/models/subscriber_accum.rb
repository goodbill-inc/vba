=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class SubscriberAccum
    # References Subscribers.Subscriber_ID value on the parent record.
    attr_accessor :subscriber_id

    # Identifier assigned to the Group associated with this Prior Accumulator.
    attr_accessor :group_id

    # Plan Year associated with this Subscriber Accumulator.
    attr_accessor :plan_year

    # Plan Type associated with this Subscriber Accumulator.
    attr_accessor :plan_type

    # Benefit Code associated with this Subscriber Accumulator.
    attr_accessor :benefit_code

    # Identifies that this Accumulator is an Added Accumulator.
    attr_accessor :added_accum

    # Total Allowed amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :allowed_amt

    # Allowed amount that has been used In Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :allowed_amt_net

    # Allowed amount that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :allowed_amt_oon

    # Total amount of benefit that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :benefit_used

    # Net amount of benefit that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :benefit_used_net

    # Amount of benefit that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :benefit_used_oon

    # Amount that has been billed. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :billed_amt

    # Amount that has been billed In Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :billed_amt_net

    # Amount that has been billed Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :billed_amt_oon

    # Total Coordination of Benefits amount that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_b_amt

    # Net Coordination of Benefits amount that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_b_amt_net

    # Coordination of Benefits amount that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_b_amt_oon

    # Total amount of Coinsurance that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :coins_amt

    # Net amount of Coinsurance that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :coins_amt_net

    # Amount of Coinsurance that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :coins_amt_oon

    # Total amount of Copay that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :copay_amt

    # Net amount of Copay that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :copay_amt_net

    # Amount of Copay that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :copay_amt_oon

    # Amount of deductible credit that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_credit_oon_used

    # Net amount of deductible credit that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_credit_ppo_used

    # Total amount of deductible credit that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_credit_used

    # Net amount of deductible that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :ded_ppo_used

    # Total amount of deductible that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :deductible_used

    # Amount of deductible that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :deductible_used_oon

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Total amount that is not covered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :not_covered_amt

    # Net amount that is not covered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :not_covered_amt_net

    # Out of Network amount that is not covered. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :not_covered_oon

    # Total Out of Pocket amount that has been used. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :out_of_pocket

    # Amount of Out of Pocket that has been used In Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :out_of_pocket_net

    # Amount of Out of Pocket that has been used Out of Network. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :out_of_pocket_oon

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'group_id' => :'group_ID',
        :'plan_year' => :'plan_Year',
        :'plan_type' => :'plan_Type',
        :'benefit_code' => :'benefit_Code',
        :'added_accum' => :'added_Accum',
        :'allowed_amt' => :'allowed_Amt',
        :'allowed_amt_net' => :'allowed_Amt_Net',
        :'allowed_amt_oon' => :'allowed_Amt_OON',
        :'benefit_used' => :'benefit_Used',
        :'benefit_used_net' => :'benefit_Used_Net',
        :'benefit_used_oon' => :'benefit_Used_OON',
        :'billed_amt' => :'billed_Amt',
        :'billed_amt_net' => :'billed_Amt_Net',
        :'billed_amt_oon' => :'billed_Amt_OON',
        :'co_b_amt' => :'coB_Amt',
        :'co_b_amt_net' => :'coB_Amt_Net',
        :'co_b_amt_oon' => :'coB_Amt_OON',
        :'coins_amt' => :'coins_Amt',
        :'coins_amt_net' => :'coins_Amt_Net',
        :'coins_amt_oon' => :'coins_Amt_OON',
        :'copay_amt' => :'copay_Amt',
        :'copay_amt_net' => :'copay_Amt_Net',
        :'copay_amt_oon' => :'copay_Amt_OON',
        :'ded_credit_oon_used' => :'ded_Credit_OON_Used',
        :'ded_credit_ppo_used' => :'ded_Credit_PPO_Used',
        :'ded_credit_used' => :'ded_Credit_Used',
        :'ded_ppo_used' => :'ded_PPO_Used',
        :'deductible_used' => :'deductible_Used',
        :'deductible_used_oon' => :'deductible_Used_OON',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'not_covered_amt' => :'not_Covered_Amt',
        :'not_covered_amt_net' => :'not_Covered_Amt_Net',
        :'not_covered_oon' => :'not_Covered_OON',
        :'out_of_pocket' => :'out_Of_Pocket',
        :'out_of_pocket_net' => :'out_Of_Pocket_Net',
        :'out_of_pocket_oon' => :'out_Of_Pocket_OON',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'group_id' => :'String',
        :'plan_year' => :'String',
        :'plan_type' => :'String',
        :'benefit_code' => :'String',
        :'added_accum' => :'String',
        :'allowed_amt' => :'Float',
        :'allowed_amt_net' => :'Float',
        :'allowed_amt_oon' => :'Float',
        :'benefit_used' => :'Float',
        :'benefit_used_net' => :'Float',
        :'benefit_used_oon' => :'Float',
        :'billed_amt' => :'Float',
        :'billed_amt_net' => :'Float',
        :'billed_amt_oon' => :'Float',
        :'co_b_amt' => :'Float',
        :'co_b_amt_net' => :'Float',
        :'co_b_amt_oon' => :'Float',
        :'coins_amt' => :'Float',
        :'coins_amt_net' => :'Float',
        :'coins_amt_oon' => :'Float',
        :'copay_amt' => :'Float',
        :'copay_amt_net' => :'Float',
        :'copay_amt_oon' => :'Float',
        :'ded_credit_oon_used' => :'Float',
        :'ded_credit_ppo_used' => :'Float',
        :'ded_credit_used' => :'Float',
        :'ded_ppo_used' => :'Float',
        :'deductible_used' => :'Float',
        :'deductible_used_oon' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'not_covered_amt' => :'Float',
        :'not_covered_amt_net' => :'Float',
        :'not_covered_oon' => :'Float',
        :'out_of_pocket' => :'Float',
        :'out_of_pocket_net' => :'Float',
        :'out_of_pocket_oon' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'added_accum',
        :'entry_user',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::SubscriberAccum` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::SubscriberAccum`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'plan_year')
        self.plan_year = attributes[:'plan_year']
      else
        self.plan_year = nil
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      else
        self.plan_type = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      else
        self.benefit_code = nil
      end

      if attributes.key?(:'added_accum')
        self.added_accum = attributes[:'added_accum']
      end

      if attributes.key?(:'allowed_amt')
        self.allowed_amt = attributes[:'allowed_amt']
      else
        self.allowed_amt = nil
      end

      if attributes.key?(:'allowed_amt_net')
        self.allowed_amt_net = attributes[:'allowed_amt_net']
      else
        self.allowed_amt_net = nil
      end

      if attributes.key?(:'allowed_amt_oon')
        self.allowed_amt_oon = attributes[:'allowed_amt_oon']
      else
        self.allowed_amt_oon = nil
      end

      if attributes.key?(:'benefit_used')
        self.benefit_used = attributes[:'benefit_used']
      else
        self.benefit_used = nil
      end

      if attributes.key?(:'benefit_used_net')
        self.benefit_used_net = attributes[:'benefit_used_net']
      else
        self.benefit_used_net = nil
      end

      if attributes.key?(:'benefit_used_oon')
        self.benefit_used_oon = attributes[:'benefit_used_oon']
      else
        self.benefit_used_oon = nil
      end

      if attributes.key?(:'billed_amt')
        self.billed_amt = attributes[:'billed_amt']
      else
        self.billed_amt = nil
      end

      if attributes.key?(:'billed_amt_net')
        self.billed_amt_net = attributes[:'billed_amt_net']
      else
        self.billed_amt_net = nil
      end

      if attributes.key?(:'billed_amt_oon')
        self.billed_amt_oon = attributes[:'billed_amt_oon']
      else
        self.billed_amt_oon = nil
      end

      if attributes.key?(:'co_b_amt')
        self.co_b_amt = attributes[:'co_b_amt']
      else
        self.co_b_amt = nil
      end

      if attributes.key?(:'co_b_amt_net')
        self.co_b_amt_net = attributes[:'co_b_amt_net']
      else
        self.co_b_amt_net = nil
      end

      if attributes.key?(:'co_b_amt_oon')
        self.co_b_amt_oon = attributes[:'co_b_amt_oon']
      else
        self.co_b_amt_oon = nil
      end

      if attributes.key?(:'coins_amt')
        self.coins_amt = attributes[:'coins_amt']
      else
        self.coins_amt = nil
      end

      if attributes.key?(:'coins_amt_net')
        self.coins_amt_net = attributes[:'coins_amt_net']
      else
        self.coins_amt_net = nil
      end

      if attributes.key?(:'coins_amt_oon')
        self.coins_amt_oon = attributes[:'coins_amt_oon']
      else
        self.coins_amt_oon = nil
      end

      if attributes.key?(:'copay_amt')
        self.copay_amt = attributes[:'copay_amt']
      else
        self.copay_amt = nil
      end

      if attributes.key?(:'copay_amt_net')
        self.copay_amt_net = attributes[:'copay_amt_net']
      else
        self.copay_amt_net = nil
      end

      if attributes.key?(:'copay_amt_oon')
        self.copay_amt_oon = attributes[:'copay_amt_oon']
      else
        self.copay_amt_oon = nil
      end

      if attributes.key?(:'ded_credit_oon_used')
        self.ded_credit_oon_used = attributes[:'ded_credit_oon_used']
      else
        self.ded_credit_oon_used = nil
      end

      if attributes.key?(:'ded_credit_ppo_used')
        self.ded_credit_ppo_used = attributes[:'ded_credit_ppo_used']
      else
        self.ded_credit_ppo_used = nil
      end

      if attributes.key?(:'ded_credit_used')
        self.ded_credit_used = attributes[:'ded_credit_used']
      else
        self.ded_credit_used = nil
      end

      if attributes.key?(:'ded_ppo_used')
        self.ded_ppo_used = attributes[:'ded_ppo_used']
      else
        self.ded_ppo_used = nil
      end

      if attributes.key?(:'deductible_used')
        self.deductible_used = attributes[:'deductible_used']
      else
        self.deductible_used = nil
      end

      if attributes.key?(:'deductible_used_oon')
        self.deductible_used_oon = attributes[:'deductible_used_oon']
      else
        self.deductible_used_oon = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'not_covered_amt')
        self.not_covered_amt = attributes[:'not_covered_amt']
      else
        self.not_covered_amt = nil
      end

      if attributes.key?(:'not_covered_amt_net')
        self.not_covered_amt_net = attributes[:'not_covered_amt_net']
      else
        self.not_covered_amt_net = nil
      end

      if attributes.key?(:'not_covered_oon')
        self.not_covered_oon = attributes[:'not_covered_oon']
      else
        self.not_covered_oon = nil
      end

      if attributes.key?(:'out_of_pocket')
        self.out_of_pocket = attributes[:'out_of_pocket']
      else
        self.out_of_pocket = nil
      end

      if attributes.key?(:'out_of_pocket_net')
        self.out_of_pocket_net = attributes[:'out_of_pocket_net']
      else
        self.out_of_pocket_net = nil
      end

      if attributes.key?(:'out_of_pocket_oon')
        self.out_of_pocket_oon = attributes[:'out_of_pocket_oon']
      else
        self.out_of_pocket_oon = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @plan_year.nil?
        invalid_properties.push('invalid value for "plan_year", plan_year cannot be nil.')
      end

      if @plan_year.to_s.length > 8
        invalid_properties.push('invalid value for "plan_year", the character length must be smaller than or equal to 8.')
      end

      if @plan_year.to_s.length < 1
        invalid_properties.push('invalid value for "plan_year", the character length must be great than or equal to 1.')
      end

      if @plan_type.nil?
        invalid_properties.push('invalid value for "plan_type", plan_type cannot be nil.')
      end

      if @plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "plan_type", the character length must be smaller than or equal to 6.')
      end

      if @plan_type.to_s.length < 1
        invalid_properties.push('invalid value for "plan_type", the character length must be great than or equal to 1.')
      end

      if @benefit_code.nil?
        invalid_properties.push('invalid value for "benefit_code", benefit_code cannot be nil.')
      end

      if @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if @benefit_code.to_s.length < 1
        invalid_properties.push('invalid value for "benefit_code", the character length must be great than or equal to 1.')
      end

      if !@added_accum.nil? && @added_accum.to_s.length > 1
        invalid_properties.push('invalid value for "added_accum", the character length must be smaller than or equal to 1.')
      end

      if @allowed_amt.nil?
        invalid_properties.push('invalid value for "allowed_amt", allowed_amt cannot be nil.')
      end

      if @allowed_amt_net.nil?
        invalid_properties.push('invalid value for "allowed_amt_net", allowed_amt_net cannot be nil.')
      end

      if @allowed_amt_oon.nil?
        invalid_properties.push('invalid value for "allowed_amt_oon", allowed_amt_oon cannot be nil.')
      end

      if @benefit_used.nil?
        invalid_properties.push('invalid value for "benefit_used", benefit_used cannot be nil.')
      end

      if @benefit_used_net.nil?
        invalid_properties.push('invalid value for "benefit_used_net", benefit_used_net cannot be nil.')
      end

      if @benefit_used_oon.nil?
        invalid_properties.push('invalid value for "benefit_used_oon", benefit_used_oon cannot be nil.')
      end

      if @billed_amt.nil?
        invalid_properties.push('invalid value for "billed_amt", billed_amt cannot be nil.')
      end

      if @billed_amt_net.nil?
        invalid_properties.push('invalid value for "billed_amt_net", billed_amt_net cannot be nil.')
      end

      if @billed_amt_oon.nil?
        invalid_properties.push('invalid value for "billed_amt_oon", billed_amt_oon cannot be nil.')
      end

      if @co_b_amt.nil?
        invalid_properties.push('invalid value for "co_b_amt", co_b_amt cannot be nil.')
      end

      if @co_b_amt_net.nil?
        invalid_properties.push('invalid value for "co_b_amt_net", co_b_amt_net cannot be nil.')
      end

      if @co_b_amt_oon.nil?
        invalid_properties.push('invalid value for "co_b_amt_oon", co_b_amt_oon cannot be nil.')
      end

      if @coins_amt.nil?
        invalid_properties.push('invalid value for "coins_amt", coins_amt cannot be nil.')
      end

      if @coins_amt_net.nil?
        invalid_properties.push('invalid value for "coins_amt_net", coins_amt_net cannot be nil.')
      end

      if @coins_amt_oon.nil?
        invalid_properties.push('invalid value for "coins_amt_oon", coins_amt_oon cannot be nil.')
      end

      if @copay_amt.nil?
        invalid_properties.push('invalid value for "copay_amt", copay_amt cannot be nil.')
      end

      if @copay_amt_net.nil?
        invalid_properties.push('invalid value for "copay_amt_net", copay_amt_net cannot be nil.')
      end

      if @copay_amt_oon.nil?
        invalid_properties.push('invalid value for "copay_amt_oon", copay_amt_oon cannot be nil.')
      end

      if @ded_credit_oon_used.nil?
        invalid_properties.push('invalid value for "ded_credit_oon_used", ded_credit_oon_used cannot be nil.')
      end

      if @ded_credit_ppo_used.nil?
        invalid_properties.push('invalid value for "ded_credit_ppo_used", ded_credit_ppo_used cannot be nil.')
      end

      if @ded_credit_used.nil?
        invalid_properties.push('invalid value for "ded_credit_used", ded_credit_used cannot be nil.')
      end

      if @ded_ppo_used.nil?
        invalid_properties.push('invalid value for "ded_ppo_used", ded_ppo_used cannot be nil.')
      end

      if @deductible_used.nil?
        invalid_properties.push('invalid value for "deductible_used", deductible_used cannot be nil.')
      end

      if @deductible_used_oon.nil?
        invalid_properties.push('invalid value for "deductible_used_oon", deductible_used_oon cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @not_covered_amt.nil?
        invalid_properties.push('invalid value for "not_covered_amt", not_covered_amt cannot be nil.')
      end

      if @not_covered_amt_net.nil?
        invalid_properties.push('invalid value for "not_covered_amt_net", not_covered_amt_net cannot be nil.')
      end

      if @not_covered_oon.nil?
        invalid_properties.push('invalid value for "not_covered_oon", not_covered_oon cannot be nil.')
      end

      if @out_of_pocket.nil?
        invalid_properties.push('invalid value for "out_of_pocket", out_of_pocket cannot be nil.')
      end

      if @out_of_pocket_net.nil?
        invalid_properties.push('invalid value for "out_of_pocket_net", out_of_pocket_net cannot be nil.')
      end

      if @out_of_pocket_oon.nil?
        invalid_properties.push('invalid value for "out_of_pocket_oon", out_of_pocket_oon cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @plan_year.nil?
      return false if @plan_year.to_s.length > 8
      return false if @plan_year.to_s.length < 1
      return false if @plan_type.nil?
      return false if @plan_type.to_s.length > 6
      return false if @plan_type.to_s.length < 1
      return false if @benefit_code.nil?
      return false if @benefit_code.to_s.length > 10
      return false if @benefit_code.to_s.length < 1
      return false if !@added_accum.nil? && @added_accum.to_s.length > 1
      return false if @allowed_amt.nil?
      return false if @allowed_amt_net.nil?
      return false if @allowed_amt_oon.nil?
      return false if @benefit_used.nil?
      return false if @benefit_used_net.nil?
      return false if @benefit_used_oon.nil?
      return false if @billed_amt.nil?
      return false if @billed_amt_net.nil?
      return false if @billed_amt_oon.nil?
      return false if @co_b_amt.nil?
      return false if @co_b_amt_net.nil?
      return false if @co_b_amt_oon.nil?
      return false if @coins_amt.nil?
      return false if @coins_amt_net.nil?
      return false if @coins_amt_oon.nil?
      return false if @copay_amt.nil?
      return false if @copay_amt_net.nil?
      return false if @copay_amt_oon.nil?
      return false if @ded_credit_oon_used.nil?
      return false if @ded_credit_ppo_used.nil?
      return false if @ded_credit_used.nil?
      return false if @ded_ppo_used.nil?
      return false if @deductible_used.nil?
      return false if @deductible_used_oon.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @not_covered_amt.nil?
      return false if @not_covered_amt_net.nil?
      return false if @not_covered_oon.nil?
      return false if @out_of_pocket.nil?
      return false if @out_of_pocket_net.nil?
      return false if @out_of_pocket_oon.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_year Value to be assigned
    def plan_year=(plan_year)
      if plan_year.nil?
        fail ArgumentError, 'plan_year cannot be nil'
      end

      if plan_year.to_s.length > 8
        fail ArgumentError, 'invalid value for "plan_year", the character length must be smaller than or equal to 8.'
      end

      if plan_year.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_year", the character length must be great than or equal to 1.'
      end

      @plan_year = plan_year
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type Value to be assigned
    def plan_type=(plan_type)
      if plan_type.nil?
        fail ArgumentError, 'plan_type cannot be nil'
      end

      if plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "plan_type", the character length must be smaller than or equal to 6.'
      end

      if plan_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_type", the character length must be great than or equal to 1.'
      end

      @plan_type = plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if benefit_code.nil?
        fail ArgumentError, 'benefit_code cannot be nil'
      end

      if benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      if benefit_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be great than or equal to 1.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] added_accum Value to be assigned
    def added_accum=(added_accum)
      if !added_accum.nil? && added_accum.to_s.length > 1
        fail ArgumentError, 'invalid value for "added_accum", the character length must be smaller than or equal to 1.'
      end

      @added_accum = added_accum
    end

    # Custom attribute writer method with validation
    # @param [Object] allowed_amt Value to be assigned
    def allowed_amt=(allowed_amt)
      if allowed_amt.nil?
        fail ArgumentError, 'allowed_amt cannot be nil'
      end

      @allowed_amt = allowed_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] allowed_amt_net Value to be assigned
    def allowed_amt_net=(allowed_amt_net)
      if allowed_amt_net.nil?
        fail ArgumentError, 'allowed_amt_net cannot be nil'
      end

      @allowed_amt_net = allowed_amt_net
    end

    # Custom attribute writer method with validation
    # @param [Object] allowed_amt_oon Value to be assigned
    def allowed_amt_oon=(allowed_amt_oon)
      if allowed_amt_oon.nil?
        fail ArgumentError, 'allowed_amt_oon cannot be nil'
      end

      @allowed_amt_oon = allowed_amt_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_used Value to be assigned
    def benefit_used=(benefit_used)
      if benefit_used.nil?
        fail ArgumentError, 'benefit_used cannot be nil'
      end

      @benefit_used = benefit_used
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_used_net Value to be assigned
    def benefit_used_net=(benefit_used_net)
      if benefit_used_net.nil?
        fail ArgumentError, 'benefit_used_net cannot be nil'
      end

      @benefit_used_net = benefit_used_net
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_used_oon Value to be assigned
    def benefit_used_oon=(benefit_used_oon)
      if benefit_used_oon.nil?
        fail ArgumentError, 'benefit_used_oon cannot be nil'
      end

      @benefit_used_oon = benefit_used_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] billed_amt Value to be assigned
    def billed_amt=(billed_amt)
      if billed_amt.nil?
        fail ArgumentError, 'billed_amt cannot be nil'
      end

      @billed_amt = billed_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] billed_amt_net Value to be assigned
    def billed_amt_net=(billed_amt_net)
      if billed_amt_net.nil?
        fail ArgumentError, 'billed_amt_net cannot be nil'
      end

      @billed_amt_net = billed_amt_net
    end

    # Custom attribute writer method with validation
    # @param [Object] billed_amt_oon Value to be assigned
    def billed_amt_oon=(billed_amt_oon)
      if billed_amt_oon.nil?
        fail ArgumentError, 'billed_amt_oon cannot be nil'
      end

      @billed_amt_oon = billed_amt_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_amt Value to be assigned
    def co_b_amt=(co_b_amt)
      if co_b_amt.nil?
        fail ArgumentError, 'co_b_amt cannot be nil'
      end

      @co_b_amt = co_b_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_amt_net Value to be assigned
    def co_b_amt_net=(co_b_amt_net)
      if co_b_amt_net.nil?
        fail ArgumentError, 'co_b_amt_net cannot be nil'
      end

      @co_b_amt_net = co_b_amt_net
    end

    # Custom attribute writer method with validation
    # @param [Object] co_b_amt_oon Value to be assigned
    def co_b_amt_oon=(co_b_amt_oon)
      if co_b_amt_oon.nil?
        fail ArgumentError, 'co_b_amt_oon cannot be nil'
      end

      @co_b_amt_oon = co_b_amt_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] coins_amt Value to be assigned
    def coins_amt=(coins_amt)
      if coins_amt.nil?
        fail ArgumentError, 'coins_amt cannot be nil'
      end

      @coins_amt = coins_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] coins_amt_net Value to be assigned
    def coins_amt_net=(coins_amt_net)
      if coins_amt_net.nil?
        fail ArgumentError, 'coins_amt_net cannot be nil'
      end

      @coins_amt_net = coins_amt_net
    end

    # Custom attribute writer method with validation
    # @param [Object] coins_amt_oon Value to be assigned
    def coins_amt_oon=(coins_amt_oon)
      if coins_amt_oon.nil?
        fail ArgumentError, 'coins_amt_oon cannot be nil'
      end

      @coins_amt_oon = coins_amt_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] copay_amt Value to be assigned
    def copay_amt=(copay_amt)
      if copay_amt.nil?
        fail ArgumentError, 'copay_amt cannot be nil'
      end

      @copay_amt = copay_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] copay_amt_net Value to be assigned
    def copay_amt_net=(copay_amt_net)
      if copay_amt_net.nil?
        fail ArgumentError, 'copay_amt_net cannot be nil'
      end

      @copay_amt_net = copay_amt_net
    end

    # Custom attribute writer method with validation
    # @param [Object] copay_amt_oon Value to be assigned
    def copay_amt_oon=(copay_amt_oon)
      if copay_amt_oon.nil?
        fail ArgumentError, 'copay_amt_oon cannot be nil'
      end

      @copay_amt_oon = copay_amt_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_credit_oon_used Value to be assigned
    def ded_credit_oon_used=(ded_credit_oon_used)
      if ded_credit_oon_used.nil?
        fail ArgumentError, 'ded_credit_oon_used cannot be nil'
      end

      @ded_credit_oon_used = ded_credit_oon_used
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_credit_ppo_used Value to be assigned
    def ded_credit_ppo_used=(ded_credit_ppo_used)
      if ded_credit_ppo_used.nil?
        fail ArgumentError, 'ded_credit_ppo_used cannot be nil'
      end

      @ded_credit_ppo_used = ded_credit_ppo_used
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_credit_used Value to be assigned
    def ded_credit_used=(ded_credit_used)
      if ded_credit_used.nil?
        fail ArgumentError, 'ded_credit_used cannot be nil'
      end

      @ded_credit_used = ded_credit_used
    end

    # Custom attribute writer method with validation
    # @param [Object] ded_ppo_used Value to be assigned
    def ded_ppo_used=(ded_ppo_used)
      if ded_ppo_used.nil?
        fail ArgumentError, 'ded_ppo_used cannot be nil'
      end

      @ded_ppo_used = ded_ppo_used
    end

    # Custom attribute writer method with validation
    # @param [Object] deductible_used Value to be assigned
    def deductible_used=(deductible_used)
      if deductible_used.nil?
        fail ArgumentError, 'deductible_used cannot be nil'
      end

      @deductible_used = deductible_used
    end

    # Custom attribute writer method with validation
    # @param [Object] deductible_used_oon Value to be assigned
    def deductible_used_oon=(deductible_used_oon)
      if deductible_used_oon.nil?
        fail ArgumentError, 'deductible_used_oon cannot be nil'
      end

      @deductible_used_oon = deductible_used_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] not_covered_amt Value to be assigned
    def not_covered_amt=(not_covered_amt)
      if not_covered_amt.nil?
        fail ArgumentError, 'not_covered_amt cannot be nil'
      end

      @not_covered_amt = not_covered_amt
    end

    # Custom attribute writer method with validation
    # @param [Object] not_covered_amt_net Value to be assigned
    def not_covered_amt_net=(not_covered_amt_net)
      if not_covered_amt_net.nil?
        fail ArgumentError, 'not_covered_amt_net cannot be nil'
      end

      @not_covered_amt_net = not_covered_amt_net
    end

    # Custom attribute writer method with validation
    # @param [Object] not_covered_oon Value to be assigned
    def not_covered_oon=(not_covered_oon)
      if not_covered_oon.nil?
        fail ArgumentError, 'not_covered_oon cannot be nil'
      end

      @not_covered_oon = not_covered_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] out_of_pocket Value to be assigned
    def out_of_pocket=(out_of_pocket)
      if out_of_pocket.nil?
        fail ArgumentError, 'out_of_pocket cannot be nil'
      end

      @out_of_pocket = out_of_pocket
    end

    # Custom attribute writer method with validation
    # @param [Object] out_of_pocket_net Value to be assigned
    def out_of_pocket_net=(out_of_pocket_net)
      if out_of_pocket_net.nil?
        fail ArgumentError, 'out_of_pocket_net cannot be nil'
      end

      @out_of_pocket_net = out_of_pocket_net
    end

    # Custom attribute writer method with validation
    # @param [Object] out_of_pocket_oon Value to be assigned
    def out_of_pocket_oon=(out_of_pocket_oon)
      if out_of_pocket_oon.nil?
        fail ArgumentError, 'out_of_pocket_oon cannot be nil'
      end

      @out_of_pocket_oon = out_of_pocket_oon
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          group_id == o.group_id &&
          plan_year == o.plan_year &&
          plan_type == o.plan_type &&
          benefit_code == o.benefit_code &&
          added_accum == o.added_accum &&
          allowed_amt == o.allowed_amt &&
          allowed_amt_net == o.allowed_amt_net &&
          allowed_amt_oon == o.allowed_amt_oon &&
          benefit_used == o.benefit_used &&
          benefit_used_net == o.benefit_used_net &&
          benefit_used_oon == o.benefit_used_oon &&
          billed_amt == o.billed_amt &&
          billed_amt_net == o.billed_amt_net &&
          billed_amt_oon == o.billed_amt_oon &&
          co_b_amt == o.co_b_amt &&
          co_b_amt_net == o.co_b_amt_net &&
          co_b_amt_oon == o.co_b_amt_oon &&
          coins_amt == o.coins_amt &&
          coins_amt_net == o.coins_amt_net &&
          coins_amt_oon == o.coins_amt_oon &&
          copay_amt == o.copay_amt &&
          copay_amt_net == o.copay_amt_net &&
          copay_amt_oon == o.copay_amt_oon &&
          ded_credit_oon_used == o.ded_credit_oon_used &&
          ded_credit_ppo_used == o.ded_credit_ppo_used &&
          ded_credit_used == o.ded_credit_used &&
          ded_ppo_used == o.ded_ppo_used &&
          deductible_used == o.deductible_used &&
          deductible_used_oon == o.deductible_used_oon &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          not_covered_amt == o.not_covered_amt &&
          not_covered_amt_net == o.not_covered_amt_net &&
          not_covered_oon == o.not_covered_oon &&
          out_of_pocket == o.out_of_pocket &&
          out_of_pocket_net == o.out_of_pocket_net &&
          out_of_pocket_oon == o.out_of_pocket_oon &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, group_id, plan_year, plan_type, benefit_code, added_accum, allowed_amt, allowed_amt_net, allowed_amt_oon, benefit_used, benefit_used_net, benefit_used_oon, billed_amt, billed_amt_net, billed_amt_oon, co_b_amt, co_b_amt_net, co_b_amt_oon, coins_amt, coins_amt_net, coins_amt_oon, copay_amt, copay_amt_net, copay_amt_oon, ded_credit_oon_used, ded_credit_ppo_used, ded_credit_used, ded_ppo_used, deductible_used, deductible_used_oon, entry_date, entry_user, not_covered_amt, not_covered_amt_net, not_covered_oon, out_of_pocket, out_of_pocket_net, out_of_pocket_oon, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
