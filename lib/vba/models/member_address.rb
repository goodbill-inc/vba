=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class MemberAddress
    # References Members.Subscriber_ID value on the parent record.
    attr_accessor :subscriber_id

    # References Members.Member_Seq value on the parent record.
    attr_accessor :member_seq

    # Primary address of the Member.
    attr_accessor :address

    # Address line 2 of the Member's primary address.
    attr_accessor :address2

    # Country code of the Member's cell phone number.
    attr_accessor :cell_country_code

    # Cell phone number of the Member.
    attr_accessor :cell_phone

    # City of the Member's primary address.
    attr_accessor :city

    # Identifier of the country of the Member's primary address.
    attr_accessor :country_id

    # County code of the Member's primary address.
    attr_accessor :county_code

    # Date when the Member Address becomes/became effective.
    attr_accessor :effective_date

    # Email address of the Member.
    attr_accessor :email_address

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Country code of the Member's home phone number.
    attr_accessor :home_country_code

    # Home phone number of the Member.
    attr_accessor :home_phone

    # Latitudinal coordinate of the Member's primary address.
    attr_accessor :latitude

    # Longitudinal coordinate of the Member's primary address.
    attr_accessor :longitude

    # Region code of the Member's primary address.
    attr_accessor :region_code

    # Secondary address associated with the Member.
    attr_accessor :secondary_address

    # Line 2 of secondary address associated with the Member.
    attr_accessor :secondary_address2

    # City of the Member's secondary address.
    attr_accessor :secondary_city

    # County code of the Secondary Address
    attr_accessor :secondary_county_code

    # State of the Member's secondary address.
    attr_accessor :secondary_state

    # Zip code of the Member's secondary address.
    attr_accessor :secondary_zip_code

    # State of the Member's primary address.
    attr_accessor :state

    # Date when the Member Address is no longer valid/effective.
    attr_accessor :term_date

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Country code of the Member's work phone number.
    attr_accessor :work_country_code

    # Work phone number of the Member.
    attr_accessor :work_phone

    # Zip code of the Member's primary address.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'member_seq' => :'member_Seq',
        :'address' => :'address',
        :'address2' => :'address2',
        :'cell_country_code' => :'cell_Country_Code',
        :'cell_phone' => :'cell_Phone',
        :'city' => :'city',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'effective_date' => :'effective_Date',
        :'email_address' => :'email_Address',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'home_country_code' => :'home_Country_Code',
        :'home_phone' => :'home_Phone',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'region_code' => :'region_Code',
        :'secondary_address' => :'secondary_Address',
        :'secondary_address2' => :'secondary_Address2',
        :'secondary_city' => :'secondary_City',
        :'secondary_county_code' => :'secondary_County_Code',
        :'secondary_state' => :'secondary_State',
        :'secondary_zip_code' => :'secondary_Zip_Code',
        :'state' => :'state',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'work_country_code' => :'work_Country_Code',
        :'work_phone' => :'work_Phone',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'member_seq' => :'String',
        :'address' => :'String',
        :'address2' => :'String',
        :'cell_country_code' => :'String',
        :'cell_phone' => :'String',
        :'city' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'effective_date' => :'Time',
        :'email_address' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'home_country_code' => :'String',
        :'home_phone' => :'String',
        :'latitude' => :'String',
        :'longitude' => :'String',
        :'region_code' => :'String',
        :'secondary_address' => :'String',
        :'secondary_address2' => :'String',
        :'secondary_city' => :'String',
        :'secondary_county_code' => :'String',
        :'secondary_state' => :'String',
        :'secondary_zip_code' => :'String',
        :'state' => :'String',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'work_country_code' => :'String',
        :'work_phone' => :'String',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address',
        :'address2',
        :'cell_country_code',
        :'cell_phone',
        :'city',
        :'country_id',
        :'county_code',
        :'effective_date',
        :'email_address',
        :'entry_user',
        :'home_country_code',
        :'home_phone',
        :'latitude',
        :'longitude',
        :'region_code',
        :'secondary_address',
        :'secondary_address2',
        :'secondary_city',
        :'secondary_county_code',
        :'secondary_state',
        :'secondary_zip_code',
        :'state',
        :'term_date',
        :'update_user',
        :'work_country_code',
        :'work_phone',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::MemberAddress` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::MemberAddress`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      else
        self.member_seq = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'cell_country_code')
        self.cell_country_code = attributes[:'cell_country_code']
      end

      if attributes.key?(:'cell_phone')
        self.cell_phone = attributes[:'cell_phone']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'home_country_code')
        self.home_country_code = attributes[:'home_country_code']
      end

      if attributes.key?(:'home_phone')
        self.home_phone = attributes[:'home_phone']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'region_code')
        self.region_code = attributes[:'region_code']
      end

      if attributes.key?(:'secondary_address')
        self.secondary_address = attributes[:'secondary_address']
      end

      if attributes.key?(:'secondary_address2')
        self.secondary_address2 = attributes[:'secondary_address2']
      end

      if attributes.key?(:'secondary_city')
        self.secondary_city = attributes[:'secondary_city']
      end

      if attributes.key?(:'secondary_county_code')
        self.secondary_county_code = attributes[:'secondary_county_code']
      end

      if attributes.key?(:'secondary_state')
        self.secondary_state = attributes[:'secondary_state']
      end

      if attributes.key?(:'secondary_zip_code')
        self.secondary_zip_code = attributes[:'secondary_zip_code']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'work_country_code')
        self.work_country_code = attributes[:'work_country_code']
      end

      if attributes.key?(:'work_phone')
        self.work_phone = attributes[:'work_phone']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if @member_seq.nil?
        invalid_properties.push('invalid value for "member_seq", member_seq cannot be nil.')
      end

      if @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @member_seq.to_s.length < 1
        invalid_properties.push('invalid value for "member_seq", the character length must be great than or equal to 1.')
      end

      if !@address.nil? && @address.to_s.length > 128
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 128.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if !@cell_country_code.nil? && @cell_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "cell_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@cell_phone.nil? && @cell_phone.to_s.length > 32
        invalid_properties.push('invalid value for "cell_phone", the character length must be smaller than or equal to 32.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if !@email_address.nil? && @email_address.to_s.length > 128
        invalid_properties.push('invalid value for "email_address", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@home_country_code.nil? && @home_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "home_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@home_phone.nil? && @home_phone.to_s.length > 32
        invalid_properties.push('invalid value for "home_phone", the character length must be smaller than or equal to 32.')
      end

      if !@latitude.nil? && @latitude.to_s.length > 12
        invalid_properties.push('invalid value for "latitude", the character length must be smaller than or equal to 12.')
      end

      if !@longitude.nil? && @longitude.to_s.length > 13
        invalid_properties.push('invalid value for "longitude", the character length must be smaller than or equal to 13.')
      end

      if !@region_code.nil? && @region_code.to_s.length > 32
        invalid_properties.push('invalid value for "region_code", the character length must be smaller than or equal to 32.')
      end

      if !@secondary_address.nil? && @secondary_address.to_s.length > 128
        invalid_properties.push('invalid value for "secondary_address", the character length must be smaller than or equal to 128.')
      end

      if !@secondary_address2.nil? && @secondary_address2.to_s.length > 256
        invalid_properties.push('invalid value for "secondary_address2", the character length must be smaller than or equal to 256.')
      end

      if !@secondary_city.nil? && @secondary_city.to_s.length > 32
        invalid_properties.push('invalid value for "secondary_city", the character length must be smaller than or equal to 32.')
      end

      if !@secondary_county_code.nil? && @secondary_county_code.to_s.length > 8
        invalid_properties.push('invalid value for "secondary_county_code", the character length must be smaller than or equal to 8.')
      end

      if !@secondary_state.nil? && @secondary_state.to_s.length > 2
        invalid_properties.push('invalid value for "secondary_state", the character length must be smaller than or equal to 2.')
      end

      if !@secondary_zip_code.nil? && @secondary_zip_code.to_s.length > 10
        invalid_properties.push('invalid value for "secondary_zip_code", the character length must be smaller than or equal to 10.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@work_country_code.nil? && @work_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "work_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@work_phone.nil? && @work_phone.to_s.length > 32
        invalid_properties.push('invalid value for "work_phone", the character length must be smaller than or equal to 32.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if @member_seq.nil?
      return false if @member_seq.to_s.length > 2
      return false if @member_seq.to_s.length < 1
      return false if !@address.nil? && @address.to_s.length > 128
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if !@cell_country_code.nil? && @cell_country_code.to_s.length > 8
      return false if !@cell_phone.nil? && @cell_phone.to_s.length > 32
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if !@email_address.nil? && @email_address.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@home_country_code.nil? && @home_country_code.to_s.length > 8
      return false if !@home_phone.nil? && @home_phone.to_s.length > 32
      return false if !@latitude.nil? && @latitude.to_s.length > 12
      return false if !@longitude.nil? && @longitude.to_s.length > 13
      return false if !@region_code.nil? && @region_code.to_s.length > 32
      return false if !@secondary_address.nil? && @secondary_address.to_s.length > 128
      return false if !@secondary_address2.nil? && @secondary_address2.to_s.length > 256
      return false if !@secondary_city.nil? && @secondary_city.to_s.length > 32
      return false if !@secondary_county_code.nil? && @secondary_county_code.to_s.length > 8
      return false if !@secondary_state.nil? && @secondary_state.to_s.length > 2
      return false if !@secondary_zip_code.nil? && @secondary_zip_code.to_s.length > 10
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@work_country_code.nil? && @work_country_code.to_s.length > 8
      return false if !@work_phone.nil? && @work_phone.to_s.length > 32
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if member_seq.nil?
        fail ArgumentError, 'member_seq cannot be nil'
      end

      if member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      if member_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "member_seq", the character length must be great than or equal to 1.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 128
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 128.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] cell_country_code Value to be assigned
    def cell_country_code=(cell_country_code)
      if !cell_country_code.nil? && cell_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "cell_country_code", the character length must be smaller than or equal to 8.'
      end

      @cell_country_code = cell_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] cell_phone Value to be assigned
    def cell_phone=(cell_phone)
      if !cell_phone.nil? && cell_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "cell_phone", the character length must be smaller than or equal to 32.'
      end

      @cell_phone = cell_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] email_address Value to be assigned
    def email_address=(email_address)
      if !email_address.nil? && email_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "email_address", the character length must be smaller than or equal to 128.'
      end

      @email_address = email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] home_country_code Value to be assigned
    def home_country_code=(home_country_code)
      if !home_country_code.nil? && home_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "home_country_code", the character length must be smaller than or equal to 8.'
      end

      @home_country_code = home_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone Value to be assigned
    def home_phone=(home_phone)
      if !home_phone.nil? && home_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "home_phone", the character length must be smaller than or equal to 32.'
      end

      @home_phone = home_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] latitude Value to be assigned
    def latitude=(latitude)
      if !latitude.nil? && latitude.to_s.length > 12
        fail ArgumentError, 'invalid value for "latitude", the character length must be smaller than or equal to 12.'
      end

      @latitude = latitude
    end

    # Custom attribute writer method with validation
    # @param [Object] longitude Value to be assigned
    def longitude=(longitude)
      if !longitude.nil? && longitude.to_s.length > 13
        fail ArgumentError, 'invalid value for "longitude", the character length must be smaller than or equal to 13.'
      end

      @longitude = longitude
    end

    # Custom attribute writer method with validation
    # @param [Object] region_code Value to be assigned
    def region_code=(region_code)
      if !region_code.nil? && region_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "region_code", the character length must be smaller than or equal to 32.'
      end

      @region_code = region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_address Value to be assigned
    def secondary_address=(secondary_address)
      if !secondary_address.nil? && secondary_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "secondary_address", the character length must be smaller than or equal to 128.'
      end

      @secondary_address = secondary_address
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_address2 Value to be assigned
    def secondary_address2=(secondary_address2)
      if !secondary_address2.nil? && secondary_address2.to_s.length > 256
        fail ArgumentError, 'invalid value for "secondary_address2", the character length must be smaller than or equal to 256.'
      end

      @secondary_address2 = secondary_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_city Value to be assigned
    def secondary_city=(secondary_city)
      if !secondary_city.nil? && secondary_city.to_s.length > 32
        fail ArgumentError, 'invalid value for "secondary_city", the character length must be smaller than or equal to 32.'
      end

      @secondary_city = secondary_city
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_county_code Value to be assigned
    def secondary_county_code=(secondary_county_code)
      if !secondary_county_code.nil? && secondary_county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "secondary_county_code", the character length must be smaller than or equal to 8.'
      end

      @secondary_county_code = secondary_county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_state Value to be assigned
    def secondary_state=(secondary_state)
      if !secondary_state.nil? && secondary_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "secondary_state", the character length must be smaller than or equal to 2.'
      end

      @secondary_state = secondary_state
    end

    # Custom attribute writer method with validation
    # @param [Object] secondary_zip_code Value to be assigned
    def secondary_zip_code=(secondary_zip_code)
      if !secondary_zip_code.nil? && secondary_zip_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "secondary_zip_code", the character length must be smaller than or equal to 10.'
      end

      @secondary_zip_code = secondary_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] work_country_code Value to be assigned
    def work_country_code=(work_country_code)
      if !work_country_code.nil? && work_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "work_country_code", the character length must be smaller than or equal to 8.'
      end

      @work_country_code = work_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] work_phone Value to be assigned
    def work_phone=(work_phone)
      if !work_phone.nil? && work_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "work_phone", the character length must be smaller than or equal to 32.'
      end

      @work_phone = work_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          member_seq == o.member_seq &&
          address == o.address &&
          address2 == o.address2 &&
          cell_country_code == o.cell_country_code &&
          cell_phone == o.cell_phone &&
          city == o.city &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          effective_date == o.effective_date &&
          email_address == o.email_address &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          home_country_code == o.home_country_code &&
          home_phone == o.home_phone &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          region_code == o.region_code &&
          secondary_address == o.secondary_address &&
          secondary_address2 == o.secondary_address2 &&
          secondary_city == o.secondary_city &&
          secondary_county_code == o.secondary_county_code &&
          secondary_state == o.secondary_state &&
          secondary_zip_code == o.secondary_zip_code &&
          state == o.state &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          work_country_code == o.work_country_code &&
          work_phone == o.work_phone &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, member_seq, address, address2, cell_country_code, cell_phone, city, country_id, county_code, effective_date, email_address, entry_date, entry_user, home_country_code, home_phone, latitude, longitude, region_code, secondary_address, secondary_address2, secondary_city, secondary_county_code, secondary_state, secondary_zip_code, state, term_date, update_date, update_user, work_country_code, work_phone, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
