=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CostContainContext4ExCode
    attr_accessor :ex_code_key

    attr_accessor :case_index

    attr_accessor :category

    attr_accessor :default_action

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :error_number_from

    attr_accessor :error_number_thru

    attr_accessor :ex_code

    attr_accessor :message_type

    attr_accessor :offending_code

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ex_code_key' => :'exCode_Key',
        :'case_index' => :'caseIndex',
        :'category' => :'category',
        :'default_action' => :'defaultAction',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'error_number_from' => :'errorNumber_From',
        :'error_number_thru' => :'errorNumber_Thru',
        :'ex_code' => :'ex_Code',
        :'message_type' => :'messageType',
        :'offending_code' => :'offendingCode',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ex_code_key' => :'Integer',
        :'case_index' => :'String',
        :'category' => :'String',
        :'default_action' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'error_number_from' => :'String',
        :'error_number_thru' => :'String',
        :'ex_code' => :'String',
        :'message_type' => :'String',
        :'offending_code' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'case_index',
        :'category',
        :'default_action',
        :'entry_user',
        :'error_number_from',
        :'error_number_thru',
        :'ex_code',
        :'message_type',
        :'offending_code',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CostContainContext4ExCode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CostContainContext4ExCode`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ex_code_key')
        self.ex_code_key = attributes[:'ex_code_key']
      else
        self.ex_code_key = nil
      end

      if attributes.key?(:'case_index')
        self.case_index = attributes[:'case_index']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'default_action')
        self.default_action = attributes[:'default_action']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'error_number_from')
        self.error_number_from = attributes[:'error_number_from']
      end

      if attributes.key?(:'error_number_thru')
        self.error_number_thru = attributes[:'error_number_thru']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'message_type')
        self.message_type = attributes[:'message_type']
      end

      if attributes.key?(:'offending_code')
        self.offending_code = attributes[:'offending_code']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @ex_code_key.nil?
        invalid_properties.push('invalid value for "ex_code_key", ex_code_key cannot be nil.')
      end

      if !@case_index.nil? && @case_index.to_s.length > 8
        invalid_properties.push('invalid value for "case_index", the character length must be smaller than or equal to 8.')
      end

      if !@category.nil? && @category.to_s.length > 8
        invalid_properties.push('invalid value for "category", the character length must be smaller than or equal to 8.')
      end

      if !@default_action.nil? && @default_action.to_s.length > 8
        invalid_properties.push('invalid value for "default_action", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@error_number_from.nil? && @error_number_from.to_s.length > 16
        invalid_properties.push('invalid value for "error_number_from", the character length must be smaller than or equal to 16.')
      end

      if !@error_number_thru.nil? && @error_number_thru.to_s.length > 16
        invalid_properties.push('invalid value for "error_number_thru", the character length must be smaller than or equal to 16.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@message_type.nil? && @message_type.to_s.length > 8
        invalid_properties.push('invalid value for "message_type", the character length must be smaller than or equal to 8.')
      end

      if !@offending_code.nil? && @offending_code.to_s.length > 32
        invalid_properties.push('invalid value for "offending_code", the character length must be smaller than or equal to 32.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @ex_code_key.nil?
      return false if !@case_index.nil? && @case_index.to_s.length > 8
      return false if !@category.nil? && @category.to_s.length > 8
      return false if !@default_action.nil? && @default_action.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@error_number_from.nil? && @error_number_from.to_s.length > 16
      return false if !@error_number_thru.nil? && @error_number_thru.to_s.length > 16
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@message_type.nil? && @message_type.to_s.length > 8
      return false if !@offending_code.nil? && @offending_code.to_s.length > 32
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code_key Value to be assigned
    def ex_code_key=(ex_code_key)
      if ex_code_key.nil?
        fail ArgumentError, 'ex_code_key cannot be nil'
      end

      @ex_code_key = ex_code_key
    end

    # Custom attribute writer method with validation
    # @param [Object] case_index Value to be assigned
    def case_index=(case_index)
      if !case_index.nil? && case_index.to_s.length > 8
        fail ArgumentError, 'invalid value for "case_index", the character length must be smaller than or equal to 8.'
      end

      @case_index = case_index
    end

    # Custom attribute writer method with validation
    # @param [Object] category Value to be assigned
    def category=(category)
      if !category.nil? && category.to_s.length > 8
        fail ArgumentError, 'invalid value for "category", the character length must be smaller than or equal to 8.'
      end

      @category = category
    end

    # Custom attribute writer method with validation
    # @param [Object] default_action Value to be assigned
    def default_action=(default_action)
      if !default_action.nil? && default_action.to_s.length > 8
        fail ArgumentError, 'invalid value for "default_action", the character length must be smaller than or equal to 8.'
      end

      @default_action = default_action
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] error_number_from Value to be assigned
    def error_number_from=(error_number_from)
      if !error_number_from.nil? && error_number_from.to_s.length > 16
        fail ArgumentError, 'invalid value for "error_number_from", the character length must be smaller than or equal to 16.'
      end

      @error_number_from = error_number_from
    end

    # Custom attribute writer method with validation
    # @param [Object] error_number_thru Value to be assigned
    def error_number_thru=(error_number_thru)
      if !error_number_thru.nil? && error_number_thru.to_s.length > 16
        fail ArgumentError, 'invalid value for "error_number_thru", the character length must be smaller than or equal to 16.'
      end

      @error_number_thru = error_number_thru
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] message_type Value to be assigned
    def message_type=(message_type)
      if !message_type.nil? && message_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "message_type", the character length must be smaller than or equal to 8.'
      end

      @message_type = message_type
    end

    # Custom attribute writer method with validation
    # @param [Object] offending_code Value to be assigned
    def offending_code=(offending_code)
      if !offending_code.nil? && offending_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "offending_code", the character length must be smaller than or equal to 32.'
      end

      @offending_code = offending_code
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ex_code_key == o.ex_code_key &&
          case_index == o.case_index &&
          category == o.category &&
          default_action == o.default_action &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          error_number_from == o.error_number_from &&
          error_number_thru == o.error_number_thru &&
          ex_code == o.ex_code &&
          message_type == o.message_type &&
          offending_code == o.offending_code &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ex_code_key, case_index, category, default_action, entry_date, entry_user, error_number_from, error_number_thru, ex_code, message_type, offending_code, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
