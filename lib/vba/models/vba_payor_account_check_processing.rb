=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAPayorAccountCheckProcessing
    # Unique identifier assigned to the Payor.
    attr_accessor :payor_id

    # References the Funding Account's Account Key associated with this Payor/Account.
    attr_accessor :account_key

    # Name of the Payor individual or institution.
    attr_accessor :payor_name

    # The Funding Account Name
    attr_accessor :account_name

    # The Payor Account's calculated Account Balance
    attr_accessor :account_balance

    # Calculated balance for all candidate Claims
    attr_accessor :candidate_balance

    # Number of individual candidate Claims
    attr_accessor :candidate_count

    # The Funding or Payor Account's Signature key.
    attr_accessor :signature_key

    # Presence indicator for Candidate Balance or Candidate Count
    attr_accessor :selected

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payor_id' => :'payor_ID',
        :'account_key' => :'account_Key',
        :'payor_name' => :'payor_Name',
        :'account_name' => :'account_Name',
        :'account_balance' => :'account_Balance',
        :'candidate_balance' => :'candidate_Balance',
        :'candidate_count' => :'candidate_Count',
        :'signature_key' => :'signature_Key',
        :'selected' => :'selected'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payor_id' => :'String',
        :'account_key' => :'Integer',
        :'payor_name' => :'String',
        :'account_name' => :'String',
        :'account_balance' => :'Float',
        :'candidate_balance' => :'Float',
        :'candidate_count' => :'Integer',
        :'signature_key' => :'Integer',
        :'selected' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'payor_name',
        :'account_name',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAPayorAccountCheckProcessing` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAPayorAccountCheckProcessing`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      else
        self.payor_id = nil
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      else
        self.account_key = nil
      end

      if attributes.key?(:'payor_name')
        self.payor_name = attributes[:'payor_name']
      end

      if attributes.key?(:'account_name')
        self.account_name = attributes[:'account_name']
      end

      if attributes.key?(:'account_balance')
        self.account_balance = attributes[:'account_balance']
      end

      if attributes.key?(:'candidate_balance')
        self.candidate_balance = attributes[:'candidate_balance']
      end

      if attributes.key?(:'candidate_count')
        self.candidate_count = attributes[:'candidate_count']
      end

      if attributes.key?(:'signature_key')
        self.signature_key = attributes[:'signature_key']
      end

      if attributes.key?(:'selected')
        self.selected = attributes[:'selected']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @payor_id.nil?
        invalid_properties.push('invalid value for "payor_id", payor_id cannot be nil.')
      end

      if @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if @payor_id.to_s.length < 1
        invalid_properties.push('invalid value for "payor_id", the character length must be great than or equal to 1.')
      end

      if @account_key.nil?
        invalid_properties.push('invalid value for "account_key", account_key cannot be nil.')
      end

      if !@payor_name.nil? && @payor_name.to_s.length > 100
        invalid_properties.push('invalid value for "payor_name", the character length must be smaller than or equal to 100.')
      end

      if !@account_name.nil? && @account_name.to_s.length > 64
        invalid_properties.push('invalid value for "account_name", the character length must be smaller than or equal to 64.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @payor_id.nil?
      return false if @payor_id.to_s.length > 20
      return false if @payor_id.to_s.length < 1
      return false if @account_key.nil?
      return false if !@payor_name.nil? && @payor_name.to_s.length > 100
      return false if !@account_name.nil? && @account_name.to_s.length > 64
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if payor_id.nil?
        fail ArgumentError, 'payor_id cannot be nil'
      end

      if payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      if payor_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "payor_id", the character length must be great than or equal to 1.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] account_key Value to be assigned
    def account_key=(account_key)
      if account_key.nil?
        fail ArgumentError, 'account_key cannot be nil'
      end

      @account_key = account_key
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_name Value to be assigned
    def payor_name=(payor_name)
      if !payor_name.nil? && payor_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "payor_name", the character length must be smaller than or equal to 100.'
      end

      @payor_name = payor_name
    end

    # Custom attribute writer method with validation
    # @param [Object] account_name Value to be assigned
    def account_name=(account_name)
      if !account_name.nil? && account_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "account_name", the character length must be smaller than or equal to 64.'
      end

      @account_name = account_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payor_id == o.payor_id &&
          account_key == o.account_key &&
          payor_name == o.payor_name &&
          account_name == o.account_name &&
          account_balance == o.account_balance &&
          candidate_balance == o.candidate_balance &&
          candidate_count == o.candidate_count &&
          signature_key == o.signature_key &&
          selected == o.selected
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payor_id, account_key, payor_name, account_name, account_balance, candidate_balance, candidate_count, signature_key, selected].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
