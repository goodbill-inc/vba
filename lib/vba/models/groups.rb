=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Groups
    # Unique identifier for each Group.
    attr_accessor :group_id

    # Identifies the Account associated with this Group.
    attr_accessor :account_key

    # Information field used in custom client reporting.
    attr_accessor :account_manager

    # Determines whether a Group's AddOn Rates are combined and applied once (Additive) or applies rates separately, in a sequence (Sequential).
    attr_accessor :add_on_rate_option

    # Adderss of the Group.
    attr_accessor :address

    # Line 2 of the Group's address.
    attr_accessor :address2

    # Indicates if this Group administers COBRA. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :admin_cobra

    # Identifies the age at which dependents are considered to be adults. Student status information is required on the enrollment to allow claims to pay for a dependent whose age exceeds the age defined here.
    attr_accessor :adult_age

    # Notes if the claims for this Group should be Advice_To_Pay (flagged as unpaid when processed). Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :advice_to_pay

    # Flag if adjudication should apply an Ex Code to a claim for this Group. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :apply_ex_code

    # Notes if this group allows Auth Required claims edit to be overridden and paid. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :auth_not_reqd_override

    # No longer in use. Replaced by Premium Billing module.
    attr_accessor :billing_age_calc

    # Identifies the bill cycle for this Group. This will be used when creating invoices.
    attr_accessor :billing_cycle_id

    # Used when Set_Billing_Due_Date is enabled.
    attr_accessor :billing_due_date_range

    # Used when Set_Billing_Due_Date is enabled.
    attr_accessor :billing_due_date_range_type

    # Used when Set_Billing_Due_Date is enabled.
    attr_accessor :billing_due_date_type

    # Indicates the group is included in invoice generation processes.
    attr_accessor :billing_invoice_create

    # Indicates how many bills (based on billing cycles) should be interrogated to determine adjustments.
    attr_accessor :billing_retro_limit

    # No longer in use.
    attr_accessor :case_rate

    # Identifies whether date of birth edits are performed for this Group during adjudication.
    attr_accessor :check_birthday

    # City of the Group's address.
    attr_accessor :city

    # No longer in use.
    attr_accessor :claim_days_allowed

    # Notes that this group calculates copay max (based on plan configuration) by provider rather than across the entire plan. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_pay_max_per_date_provider

    # Notes the number of billing cycles to lookback when calculating commissions.
    attr_accessor :commission_lookback

    # Country code of the Group's contact number.
    attr_accessor :contact_country_code

    # Email address of the identified Group contact.
    attr_accessor :contact_email_address

    # Extension number of the Group's contact.
    attr_accessor :contact_extension

    # Phone number of the Group's contact.
    attr_accessor :contact_phone

    # Title of the Group's primary contact.
    attr_accessor :contact_title

    # Identifier of the Groups's country.
    attr_accessor :country_id

    # County code of the Group address.
    attr_accessor :county_code

    # Identifies the age at which dependents are no longer eligible for coverage. Adult Dependent information is required on the enrollment to allow claims to pay for a dependent whose age exceeds the age defined here.
    attr_accessor :cutoff_age

    # Defines the default EOB report object from our core admin system. This is a developer setting.
    attr_accessor :default_eob_report

    # By default, indicates which Invoice report should be used for automation.
    attr_accessor :default_invoice_report_definition_key

    # Process by Disability Date can be defined here to apply to all claims for this group rather than on a claim by claim basis (acts as a default). Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :default_process_by_disability_date

    # Roll Up Waiting Period can be defined here to apply to all claims for this group rather than on a claim by claim basis (acts as a default). Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :default_roll_up_waiting_period

    # The day of the week that Paid Through is calculated for Disability premiums.
    attr_accessor :disability_pay_through_day

    # This flag indicates that the Group COBRA premium will not be automatically populated during member disenrollment. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :disable_cobra_auto_select

    # Date when the Group expires/expired.
    attr_accessor :disenroll_date

    # For Premium Distribution processing, this notes the Account for the source of distributed funds.
    attr_accessor :distribution_account_key

    # For Premium Distribution processing, this notes the Payor ID for the source of distributed funds.
    attr_accessor :distribution_payor_id

    # Notes if this group allows Duplicate Claims to be overridden to be paid. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :duplicate_claim_override

    # Used for determining Flex Election.
    attr_accessor :election_range

    # Used with Election_Range to determine the Flex Election.
    attr_accessor :election_range_type

    # Information field used in custom client reporting.
    attr_accessor :employer_size

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # The Ex Code applied during claims adjudication if \"Apply_Ex_Code\" is enabled.
    attr_accessor :ex_code

    # Fax number of the Group.
    attr_accessor :fax

    # Country code of the Group's fax number.
    attr_accessor :fax_country_code

    # Federal tax identifier of the Group.
    attr_accessor :federal_id

    # No longer in use. Replaced by Premium Billing module.
    attr_accessor :generate_adjustments

    # No longer in use. Replaced by Premium Billing module.
    attr_accessor :generate_invoices

    # Holds the account reference for the Employer Account. Not used in processing.
    attr_accessor :group_account

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :individual_billing

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :individual_cycle

    # No longer in use. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :individual_dates

    # The grace period value based on \"Grace_Period_Type\" for how long you have to process an invoice after the term date.
    attr_accessor :inv_grace_period

    # Works with Grace_Period to determine how long after term date an invoice can be processed.
    attr_accessor :inv_grace_period_type

    # Used to determine eligiblity during invoice generation for enrolled members.
    attr_accessor :invoice_enrolled_by

    # Used to determine eligiblity during invoice generation for enrolled members.
    attr_accessor :invoice_enrolled_thru

    # Identifies the sate in which the Group is insured.
    attr_accessor :issue_state

    # Name of the Group.
    attr_accessor :name

    # No longer in use, replaced by Notes Service.
    attr_accessor :notes

    # Information field used in custom client reporting. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :open_closed_enrollment

    # Date when the Group becomes/became active.
    attr_accessor :original_date

    # Date through which the Group premium has been paid.
    attr_accessor :paid_through

    # Notes if this Group is Paperless (this overrides the individual member settings from VBAGateway). Used in process automation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :paperless

    # The Pay To Account used for external payments.
    attr_accessor :pay_to_account

    # Identifier of the Payor associated with the Group.
    attr_accessor :payor_id

    # Phone number of the Group.
    attr_accessor :phone

    # Country code of the Group's phone number.
    attr_accessor :phone_country_code

    # Information field used in custom client reporting. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :prepaid_group

    # Primary contact of the Group.
    attr_accessor :primary_contact

    # Information field used in custom client reporting.
    attr_accessor :producer

    # Notes if the disability deductions should be prorated during adjudication. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :prorate_deduction

    # For Disability, notes the Deduction Type to have prorate applied.
    attr_accessor :prorate_deduction_type

    # Information field used in custom client reporting.
    attr_accessor :r_x_bin

    # Information field used in custom client reporting.
    attr_accessor :r_x_cs_contact

    # Information field used in custom client reporting.
    attr_accessor :r_x_cs_phone

    # Information field used in custom client reporting.
    attr_accessor :r_x_grp

    # Information field used in custom client reporting.
    attr_accessor :r_x_name

    # Information field used in custom client reporting.
    attr_accessor :r_x_pcn

    # No longer in use.
    attr_accessor :reason_id

    # Region Code for this group (locality).
    attr_accessor :region_code

    # Information field used in custom client reporting.
    attr_accessor :renewal_completion_date

    # The last renewal date for this Group. Used in custom reporting. Not used in processing.
    attr_accessor :renewal_date

    # Notes if this group has Self-Admin billing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :self_admin

    # Indicates if the system should calculate the Due Date on an invoice based on Billing_Due_Date settings. By default the due date is the \"Bill Thru\" on an invoice, this gives the option to change that calculation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :set_billing_due_date

    # State of the Group's address.
    attr_accessor :state

    # The automatically applied Subscriber ID prefix when using auto generated IDs.
    attr_accessor :subscriber_id_prefix

    # The automatically applied Subscriber ID suffix when using auto generated IDs.
    attr_accessor :subscriber_id_suffix

    # Information field used in custom client reporting.
    attr_accessor :total_employees

    # Identifies the Usual and Customary percentage of the Group.
    attr_accessor :u_c_percent

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Notes if Employe State, not Subscriber State, should be used in invoice generation. Note: The database will apply a default value of `False` for this field if a value is not provided.
    attr_accessor :use_employer_state

    # Zip code of the Group's address.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'account_key' => :'account_Key',
        :'account_manager' => :'account_Manager',
        :'add_on_rate_option' => :'addOn_Rate_Option',
        :'address' => :'address',
        :'address2' => :'address2',
        :'admin_cobra' => :'admin_COBRA',
        :'adult_age' => :'adult_Age',
        :'advice_to_pay' => :'advice_To_Pay',
        :'apply_ex_code' => :'apply_Ex_Code',
        :'auth_not_reqd_override' => :'auth_Not_Reqd_Override',
        :'billing_age_calc' => :'billing_Age_Calc',
        :'billing_cycle_id' => :'billing_Cycle_ID',
        :'billing_due_date_range' => :'billing_Due_Date_Range',
        :'billing_due_date_range_type' => :'billing_Due_Date_Range_Type',
        :'billing_due_date_type' => :'billing_Due_Date_Type',
        :'billing_invoice_create' => :'billing_Invoice_Create',
        :'billing_retro_limit' => :'billing_Retro_Limit',
        :'case_rate' => :'caseRate',
        :'check_birthday' => :'check_Birthday',
        :'city' => :'city',
        :'claim_days_allowed' => :'claim_Days_Allowed',
        :'co_pay_max_per_date_provider' => :'coPay_Max_Per_Date_Provider',
        :'commission_lookback' => :'commission_Lookback',
        :'contact_country_code' => :'contact_Country_Code',
        :'contact_email_address' => :'contact_Email_Address',
        :'contact_extension' => :'contact_Extension',
        :'contact_phone' => :'contact_Phone',
        :'contact_title' => :'contact_Title',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'cutoff_age' => :'cutoff_Age',
        :'default_eob_report' => :'default_EOB_Report',
        :'default_invoice_report_definition_key' => :'default_Invoice_ReportDefinition_Key',
        :'default_process_by_disability_date' => :'default_Process_by_Disability_Date',
        :'default_roll_up_waiting_period' => :'default_Roll_Up_Waiting_Period',
        :'disability_pay_through_day' => :'disability_Pay_Through_Day',
        :'disable_cobra_auto_select' => :'disable_COBRA_Auto_Select',
        :'disenroll_date' => :'disenroll_Date',
        :'distribution_account_key' => :'distribution_Account_Key',
        :'distribution_payor_id' => :'distribution_Payor_ID',
        :'duplicate_claim_override' => :'duplicate_Claim_Override',
        :'election_range' => :'election_Range',
        :'election_range_type' => :'election_Range_Type',
        :'employer_size' => :'employer_Size',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'fax' => :'fax',
        :'fax_country_code' => :'fax_Country_Code',
        :'federal_id' => :'federal_ID',
        :'generate_adjustments' => :'generate_Adjustments',
        :'generate_invoices' => :'generate_Invoices',
        :'group_account' => :'group_Account',
        :'individual_billing' => :'individual_Billing',
        :'individual_cycle' => :'individual_Cycle',
        :'individual_dates' => :'individual_Dates',
        :'inv_grace_period' => :'inv_Grace_Period',
        :'inv_grace_period_type' => :'inv_Grace_Period_Type',
        :'invoice_enrolled_by' => :'invoice_Enrolled_By',
        :'invoice_enrolled_thru' => :'invoice_Enrolled_Thru',
        :'issue_state' => :'issue_State',
        :'name' => :'name',
        :'notes' => :'notes',
        :'open_closed_enrollment' => :'open_Closed_Enrollment',
        :'original_date' => :'original_Date',
        :'paid_through' => :'paid_Through',
        :'paperless' => :'paperless',
        :'pay_to_account' => :'pay_To_Account',
        :'payor_id' => :'payor_ID',
        :'phone' => :'phone',
        :'phone_country_code' => :'phone_Country_Code',
        :'prepaid_group' => :'prepaid_Group',
        :'primary_contact' => :'primary_Contact',
        :'producer' => :'producer',
        :'prorate_deduction' => :'prorate_Deduction',
        :'prorate_deduction_type' => :'prorate_Deduction_Type',
        :'r_x_bin' => :'rX_BIN',
        :'r_x_cs_contact' => :'rX_CS_Contact',
        :'r_x_cs_phone' => :'rX_CS_Phone',
        :'r_x_grp' => :'rX_GRP',
        :'r_x_name' => :'rX_Name',
        :'r_x_pcn' => :'rX_PCN',
        :'reason_id' => :'reason_ID',
        :'region_code' => :'region_Code',
        :'renewal_completion_date' => :'renewal_Completion_Date',
        :'renewal_date' => :'renewal_Date',
        :'self_admin' => :'self_Admin',
        :'set_billing_due_date' => :'set_Billing_Due_Date',
        :'state' => :'state',
        :'subscriber_id_prefix' => :'subscriber_ID_Prefix',
        :'subscriber_id_suffix' => :'subscriber_ID_Suffix',
        :'total_employees' => :'total_Employees',
        :'u_c_percent' => :'uC_Percent',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_employer_state' => :'use_Employer_State',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'account_key' => :'Integer',
        :'account_manager' => :'String',
        :'add_on_rate_option' => :'String',
        :'address' => :'String',
        :'address2' => :'String',
        :'admin_cobra' => :'Boolean',
        :'adult_age' => :'Integer',
        :'advice_to_pay' => :'Boolean',
        :'apply_ex_code' => :'Boolean',
        :'auth_not_reqd_override' => :'Boolean',
        :'billing_age_calc' => :'String',
        :'billing_cycle_id' => :'String',
        :'billing_due_date_range' => :'Integer',
        :'billing_due_date_range_type' => :'String',
        :'billing_due_date_type' => :'String',
        :'billing_invoice_create' => :'Integer',
        :'billing_retro_limit' => :'Integer',
        :'case_rate' => :'Float',
        :'check_birthday' => :'String',
        :'city' => :'String',
        :'claim_days_allowed' => :'Integer',
        :'co_pay_max_per_date_provider' => :'Boolean',
        :'commission_lookback' => :'Integer',
        :'contact_country_code' => :'String',
        :'contact_email_address' => :'String',
        :'contact_extension' => :'String',
        :'contact_phone' => :'String',
        :'contact_title' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'cutoff_age' => :'Integer',
        :'default_eob_report' => :'Integer',
        :'default_invoice_report_definition_key' => :'Integer',
        :'default_process_by_disability_date' => :'Boolean',
        :'default_roll_up_waiting_period' => :'Boolean',
        :'disability_pay_through_day' => :'Integer',
        :'disable_cobra_auto_select' => :'Boolean',
        :'disenroll_date' => :'Time',
        :'distribution_account_key' => :'Integer',
        :'distribution_payor_id' => :'String',
        :'duplicate_claim_override' => :'Boolean',
        :'election_range' => :'Integer',
        :'election_range_type' => :'String',
        :'employer_size' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'fax' => :'String',
        :'fax_country_code' => :'String',
        :'federal_id' => :'String',
        :'generate_adjustments' => :'String',
        :'generate_invoices' => :'String',
        :'group_account' => :'Integer',
        :'individual_billing' => :'Boolean',
        :'individual_cycle' => :'Boolean',
        :'individual_dates' => :'Boolean',
        :'inv_grace_period' => :'Integer',
        :'inv_grace_period_type' => :'String',
        :'invoice_enrolled_by' => :'Integer',
        :'invoice_enrolled_thru' => :'Integer',
        :'issue_state' => :'String',
        :'name' => :'String',
        :'notes' => :'String',
        :'open_closed_enrollment' => :'Boolean',
        :'original_date' => :'Time',
        :'paid_through' => :'Time',
        :'paperless' => :'Boolean',
        :'pay_to_account' => :'Integer',
        :'payor_id' => :'String',
        :'phone' => :'String',
        :'phone_country_code' => :'String',
        :'prepaid_group' => :'Boolean',
        :'primary_contact' => :'String',
        :'producer' => :'String',
        :'prorate_deduction' => :'Boolean',
        :'prorate_deduction_type' => :'String',
        :'r_x_bin' => :'String',
        :'r_x_cs_contact' => :'String',
        :'r_x_cs_phone' => :'String',
        :'r_x_grp' => :'String',
        :'r_x_name' => :'String',
        :'r_x_pcn' => :'String',
        :'reason_id' => :'Integer',
        :'region_code' => :'String',
        :'renewal_completion_date' => :'Time',
        :'renewal_date' => :'Time',
        :'self_admin' => :'Boolean',
        :'set_billing_due_date' => :'Boolean',
        :'state' => :'String',
        :'subscriber_id_prefix' => :'String',
        :'subscriber_id_suffix' => :'String',
        :'total_employees' => :'Integer',
        :'u_c_percent' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_employer_state' => :'Boolean',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'account_key',
        :'account_manager',
        :'add_on_rate_option',
        :'address',
        :'address2',
        :'adult_age',
        :'billing_age_calc',
        :'billing_cycle_id',
        :'billing_due_date_range',
        :'billing_due_date_range_type',
        :'billing_due_date_type',
        :'billing_invoice_create',
        :'billing_retro_limit',
        :'case_rate',
        :'check_birthday',
        :'city',
        :'claim_days_allowed',
        :'commission_lookback',
        :'contact_country_code',
        :'contact_email_address',
        :'contact_extension',
        :'contact_phone',
        :'contact_title',
        :'country_id',
        :'county_code',
        :'cutoff_age',
        :'default_eob_report',
        :'default_invoice_report_definition_key',
        :'disability_pay_through_day',
        :'disenroll_date',
        :'distribution_account_key',
        :'distribution_payor_id',
        :'election_range',
        :'election_range_type',
        :'employer_size',
        :'entry_user',
        :'ex_code',
        :'fax',
        :'fax_country_code',
        :'federal_id',
        :'generate_adjustments',
        :'generate_invoices',
        :'group_account',
        :'inv_grace_period',
        :'inv_grace_period_type',
        :'invoice_enrolled_by',
        :'invoice_enrolled_thru',
        :'issue_state',
        :'name',
        :'notes',
        :'original_date',
        :'paid_through',
        :'pay_to_account',
        :'payor_id',
        :'phone',
        :'phone_country_code',
        :'primary_contact',
        :'producer',
        :'prorate_deduction_type',
        :'r_x_bin',
        :'r_x_cs_contact',
        :'r_x_cs_phone',
        :'r_x_grp',
        :'r_x_name',
        :'r_x_pcn',
        :'reason_id',
        :'region_code',
        :'renewal_completion_date',
        :'renewal_date',
        :'state',
        :'subscriber_id_prefix',
        :'subscriber_id_suffix',
        :'total_employees',
        :'u_c_percent',
        :'update_user',
        :'use_employer_state',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Groups` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Groups`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'account_manager')
        self.account_manager = attributes[:'account_manager']
      end

      if attributes.key?(:'add_on_rate_option')
        self.add_on_rate_option = attributes[:'add_on_rate_option']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'admin_cobra')
        self.admin_cobra = attributes[:'admin_cobra']
      else
        self.admin_cobra = nil
      end

      if attributes.key?(:'adult_age')
        self.adult_age = attributes[:'adult_age']
      end

      if attributes.key?(:'advice_to_pay')
        self.advice_to_pay = attributes[:'advice_to_pay']
      else
        self.advice_to_pay = nil
      end

      if attributes.key?(:'apply_ex_code')
        self.apply_ex_code = attributes[:'apply_ex_code']
      else
        self.apply_ex_code = nil
      end

      if attributes.key?(:'auth_not_reqd_override')
        self.auth_not_reqd_override = attributes[:'auth_not_reqd_override']
      else
        self.auth_not_reqd_override = nil
      end

      if attributes.key?(:'billing_age_calc')
        self.billing_age_calc = attributes[:'billing_age_calc']
      end

      if attributes.key?(:'billing_cycle_id')
        self.billing_cycle_id = attributes[:'billing_cycle_id']
      end

      if attributes.key?(:'billing_due_date_range')
        self.billing_due_date_range = attributes[:'billing_due_date_range']
      end

      if attributes.key?(:'billing_due_date_range_type')
        self.billing_due_date_range_type = attributes[:'billing_due_date_range_type']
      end

      if attributes.key?(:'billing_due_date_type')
        self.billing_due_date_type = attributes[:'billing_due_date_type']
      end

      if attributes.key?(:'billing_invoice_create')
        self.billing_invoice_create = attributes[:'billing_invoice_create']
      end

      if attributes.key?(:'billing_retro_limit')
        self.billing_retro_limit = attributes[:'billing_retro_limit']
      end

      if attributes.key?(:'case_rate')
        self.case_rate = attributes[:'case_rate']
      end

      if attributes.key?(:'check_birthday')
        self.check_birthday = attributes[:'check_birthday']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'claim_days_allowed')
        self.claim_days_allowed = attributes[:'claim_days_allowed']
      end

      if attributes.key?(:'co_pay_max_per_date_provider')
        self.co_pay_max_per_date_provider = attributes[:'co_pay_max_per_date_provider']
      else
        self.co_pay_max_per_date_provider = nil
      end

      if attributes.key?(:'commission_lookback')
        self.commission_lookback = attributes[:'commission_lookback']
      end

      if attributes.key?(:'contact_country_code')
        self.contact_country_code = attributes[:'contact_country_code']
      end

      if attributes.key?(:'contact_email_address')
        self.contact_email_address = attributes[:'contact_email_address']
      end

      if attributes.key?(:'contact_extension')
        self.contact_extension = attributes[:'contact_extension']
      end

      if attributes.key?(:'contact_phone')
        self.contact_phone = attributes[:'contact_phone']
      end

      if attributes.key?(:'contact_title')
        self.contact_title = attributes[:'contact_title']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'cutoff_age')
        self.cutoff_age = attributes[:'cutoff_age']
      end

      if attributes.key?(:'default_eob_report')
        self.default_eob_report = attributes[:'default_eob_report']
      end

      if attributes.key?(:'default_invoice_report_definition_key')
        self.default_invoice_report_definition_key = attributes[:'default_invoice_report_definition_key']
      end

      if attributes.key?(:'default_process_by_disability_date')
        self.default_process_by_disability_date = attributes[:'default_process_by_disability_date']
      else
        self.default_process_by_disability_date = nil
      end

      if attributes.key?(:'default_roll_up_waiting_period')
        self.default_roll_up_waiting_period = attributes[:'default_roll_up_waiting_period']
      else
        self.default_roll_up_waiting_period = nil
      end

      if attributes.key?(:'disability_pay_through_day')
        self.disability_pay_through_day = attributes[:'disability_pay_through_day']
      end

      if attributes.key?(:'disable_cobra_auto_select')
        self.disable_cobra_auto_select = attributes[:'disable_cobra_auto_select']
      else
        self.disable_cobra_auto_select = nil
      end

      if attributes.key?(:'disenroll_date')
        self.disenroll_date = attributes[:'disenroll_date']
      end

      if attributes.key?(:'distribution_account_key')
        self.distribution_account_key = attributes[:'distribution_account_key']
      end

      if attributes.key?(:'distribution_payor_id')
        self.distribution_payor_id = attributes[:'distribution_payor_id']
      end

      if attributes.key?(:'duplicate_claim_override')
        self.duplicate_claim_override = attributes[:'duplicate_claim_override']
      else
        self.duplicate_claim_override = nil
      end

      if attributes.key?(:'election_range')
        self.election_range = attributes[:'election_range']
      end

      if attributes.key?(:'election_range_type')
        self.election_range_type = attributes[:'election_range_type']
      end

      if attributes.key?(:'employer_size')
        self.employer_size = attributes[:'employer_size']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'fax_country_code')
        self.fax_country_code = attributes[:'fax_country_code']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'generate_adjustments')
        self.generate_adjustments = attributes[:'generate_adjustments']
      end

      if attributes.key?(:'generate_invoices')
        self.generate_invoices = attributes[:'generate_invoices']
      end

      if attributes.key?(:'group_account')
        self.group_account = attributes[:'group_account']
      end

      if attributes.key?(:'individual_billing')
        self.individual_billing = attributes[:'individual_billing']
      else
        self.individual_billing = nil
      end

      if attributes.key?(:'individual_cycle')
        self.individual_cycle = attributes[:'individual_cycle']
      else
        self.individual_cycle = nil
      end

      if attributes.key?(:'individual_dates')
        self.individual_dates = attributes[:'individual_dates']
      else
        self.individual_dates = nil
      end

      if attributes.key?(:'inv_grace_period')
        self.inv_grace_period = attributes[:'inv_grace_period']
      end

      if attributes.key?(:'inv_grace_period_type')
        self.inv_grace_period_type = attributes[:'inv_grace_period_type']
      end

      if attributes.key?(:'invoice_enrolled_by')
        self.invoice_enrolled_by = attributes[:'invoice_enrolled_by']
      end

      if attributes.key?(:'invoice_enrolled_thru')
        self.invoice_enrolled_thru = attributes[:'invoice_enrolled_thru']
      end

      if attributes.key?(:'issue_state')
        self.issue_state = attributes[:'issue_state']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'open_closed_enrollment')
        self.open_closed_enrollment = attributes[:'open_closed_enrollment']
      else
        self.open_closed_enrollment = nil
      end

      if attributes.key?(:'original_date')
        self.original_date = attributes[:'original_date']
      end

      if attributes.key?(:'paid_through')
        self.paid_through = attributes[:'paid_through']
      end

      if attributes.key?(:'paperless')
        self.paperless = attributes[:'paperless']
      else
        self.paperless = nil
      end

      if attributes.key?(:'pay_to_account')
        self.pay_to_account = attributes[:'pay_to_account']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'prepaid_group')
        self.prepaid_group = attributes[:'prepaid_group']
      else
        self.prepaid_group = nil
      end

      if attributes.key?(:'primary_contact')
        self.primary_contact = attributes[:'primary_contact']
      end

      if attributes.key?(:'producer')
        self.producer = attributes[:'producer']
      end

      if attributes.key?(:'prorate_deduction')
        self.prorate_deduction = attributes[:'prorate_deduction']
      else
        self.prorate_deduction = nil
      end

      if attributes.key?(:'prorate_deduction_type')
        self.prorate_deduction_type = attributes[:'prorate_deduction_type']
      end

      if attributes.key?(:'r_x_bin')
        self.r_x_bin = attributes[:'r_x_bin']
      end

      if attributes.key?(:'r_x_cs_contact')
        self.r_x_cs_contact = attributes[:'r_x_cs_contact']
      end

      if attributes.key?(:'r_x_cs_phone')
        self.r_x_cs_phone = attributes[:'r_x_cs_phone']
      end

      if attributes.key?(:'r_x_grp')
        self.r_x_grp = attributes[:'r_x_grp']
      end

      if attributes.key?(:'r_x_name')
        self.r_x_name = attributes[:'r_x_name']
      end

      if attributes.key?(:'r_x_pcn')
        self.r_x_pcn = attributes[:'r_x_pcn']
      end

      if attributes.key?(:'reason_id')
        self.reason_id = attributes[:'reason_id']
      end

      if attributes.key?(:'region_code')
        self.region_code = attributes[:'region_code']
      end

      if attributes.key?(:'renewal_completion_date')
        self.renewal_completion_date = attributes[:'renewal_completion_date']
      end

      if attributes.key?(:'renewal_date')
        self.renewal_date = attributes[:'renewal_date']
      end

      if attributes.key?(:'self_admin')
        self.self_admin = attributes[:'self_admin']
      else
        self.self_admin = nil
      end

      if attributes.key?(:'set_billing_due_date')
        self.set_billing_due_date = attributes[:'set_billing_due_date']
      else
        self.set_billing_due_date = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'subscriber_id_prefix')
        self.subscriber_id_prefix = attributes[:'subscriber_id_prefix']
      end

      if attributes.key?(:'subscriber_id_suffix')
        self.subscriber_id_suffix = attributes[:'subscriber_id_suffix']
      end

      if attributes.key?(:'total_employees')
        self.total_employees = attributes[:'total_employees']
      end

      if attributes.key?(:'u_c_percent')
        self.u_c_percent = attributes[:'u_c_percent']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_employer_state')
        self.use_employer_state = attributes[:'use_employer_state']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if !@account_manager.nil? && @account_manager.to_s.length > 128
        invalid_properties.push('invalid value for "account_manager", the character length must be smaller than or equal to 128.')
      end

      if !@add_on_rate_option.nil? && @add_on_rate_option.to_s.length > 8
        invalid_properties.push('invalid value for "add_on_rate_option", the character length must be smaller than or equal to 8.')
      end

      if !@address.nil? && @address.to_s.length > 255
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 255.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if @admin_cobra.nil?
        invalid_properties.push('invalid value for "admin_cobra", admin_cobra cannot be nil.')
      end

      if @advice_to_pay.nil?
        invalid_properties.push('invalid value for "advice_to_pay", advice_to_pay cannot be nil.')
      end

      if @apply_ex_code.nil?
        invalid_properties.push('invalid value for "apply_ex_code", apply_ex_code cannot be nil.')
      end

      if @auth_not_reqd_override.nil?
        invalid_properties.push('invalid value for "auth_not_reqd_override", auth_not_reqd_override cannot be nil.')
      end

      if !@billing_age_calc.nil? && @billing_age_calc.to_s.length > 1
        invalid_properties.push('invalid value for "billing_age_calc", the character length must be smaller than or equal to 1.')
      end

      if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
        invalid_properties.push('invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.')
      end

      if !@billing_due_date_range_type.nil? && @billing_due_date_range_type.to_s.length > 16
        invalid_properties.push('invalid value for "billing_due_date_range_type", the character length must be smaller than or equal to 16.')
      end

      if !@billing_due_date_type.nil? && @billing_due_date_type.to_s.length > 32
        invalid_properties.push('invalid value for "billing_due_date_type", the character length must be smaller than or equal to 32.')
      end

      if !@check_birthday.nil? && @check_birthday.to_s.length > 1
        invalid_properties.push('invalid value for "check_birthday", the character length must be smaller than or equal to 1.')
      end

      if !@city.nil? && @city.to_s.length > 25
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 25.')
      end

      if @co_pay_max_per_date_provider.nil?
        invalid_properties.push('invalid value for "co_pay_max_per_date_provider", co_pay_max_per_date_provider cannot be nil.')
      end

      if !@contact_country_code.nil? && @contact_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "contact_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@contact_email_address.nil? && @contact_email_address.to_s.length > 128
        invalid_properties.push('invalid value for "contact_email_address", the character length must be smaller than or equal to 128.')
      end

      if !@contact_extension.nil? && @contact_extension.to_s.length > 6
        invalid_properties.push('invalid value for "contact_extension", the character length must be smaller than or equal to 6.')
      end

      if !@contact_phone.nil? && @contact_phone.to_s.length > 20
        invalid_properties.push('invalid value for "contact_phone", the character length must be smaller than or equal to 20.')
      end

      if !@contact_title.nil? && @contact_title.to_s.length > 20
        invalid_properties.push('invalid value for "contact_title", the character length must be smaller than or equal to 20.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if @default_process_by_disability_date.nil?
        invalid_properties.push('invalid value for "default_process_by_disability_date", default_process_by_disability_date cannot be nil.')
      end

      if @default_roll_up_waiting_period.nil?
        invalid_properties.push('invalid value for "default_roll_up_waiting_period", default_roll_up_waiting_period cannot be nil.')
      end

      if @disable_cobra_auto_select.nil?
        invalid_properties.push('invalid value for "disable_cobra_auto_select", disable_cobra_auto_select cannot be nil.')
      end

      if !@distribution_payor_id.nil? && @distribution_payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "distribution_payor_id", the character length must be smaller than or equal to 20.')
      end

      if @duplicate_claim_override.nil?
        invalid_properties.push('invalid value for "duplicate_claim_override", duplicate_claim_override cannot be nil.')
      end

      if !@election_range_type.nil? && @election_range_type.to_s.length > 16
        invalid_properties.push('invalid value for "election_range_type", the character length must be smaller than or equal to 16.')
      end

      if !@employer_size.nil? && @employer_size.to_s.length > 8
        invalid_properties.push('invalid value for "employer_size", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@fax.nil? && @fax.to_s.length > 20
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 20.')
      end

      if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@generate_adjustments.nil? && @generate_adjustments.to_s.length > 1
        invalid_properties.push('invalid value for "generate_adjustments", the character length must be smaller than or equal to 1.')
      end

      if !@generate_invoices.nil? && @generate_invoices.to_s.length > 1
        invalid_properties.push('invalid value for "generate_invoices", the character length must be smaller than or equal to 1.')
      end

      if @individual_billing.nil?
        invalid_properties.push('invalid value for "individual_billing", individual_billing cannot be nil.')
      end

      if @individual_cycle.nil?
        invalid_properties.push('invalid value for "individual_cycle", individual_cycle cannot be nil.')
      end

      if @individual_dates.nil?
        invalid_properties.push('invalid value for "individual_dates", individual_dates cannot be nil.')
      end

      if !@inv_grace_period_type.nil? && @inv_grace_period_type.to_s.length > 1
        invalid_properties.push('invalid value for "inv_grace_period_type", the character length must be smaller than or equal to 1.')
      end

      if !@issue_state.nil? && @issue_state.to_s.length > 2
        invalid_properties.push('invalid value for "issue_state", the character length must be smaller than or equal to 2.')
      end

      if !@name.nil? && @name.to_s.length > 50
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 50.')
      end

      if @open_closed_enrollment.nil?
        invalid_properties.push('invalid value for "open_closed_enrollment", open_closed_enrollment cannot be nil.')
      end

      if @paperless.nil?
        invalid_properties.push('invalid value for "paperless", paperless cannot be nil.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@phone.nil? && @phone.to_s.length > 20
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 20.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if @prepaid_group.nil?
        invalid_properties.push('invalid value for "prepaid_group", prepaid_group cannot be nil.')
      end

      if !@primary_contact.nil? && @primary_contact.to_s.length > 25
        invalid_properties.push('invalid value for "primary_contact", the character length must be smaller than or equal to 25.')
      end

      if !@producer.nil? && @producer.to_s.length > 128
        invalid_properties.push('invalid value for "producer", the character length must be smaller than or equal to 128.')
      end

      if @prorate_deduction.nil?
        invalid_properties.push('invalid value for "prorate_deduction", prorate_deduction cannot be nil.')
      end

      if !@prorate_deduction_type.nil? && @prorate_deduction_type.to_s.length > 10
        invalid_properties.push('invalid value for "prorate_deduction_type", the character length must be smaller than or equal to 10.')
      end

      if !@r_x_bin.nil? && @r_x_bin.to_s.length > 64
        invalid_properties.push('invalid value for "r_x_bin", the character length must be smaller than or equal to 64.')
      end

      if !@r_x_cs_contact.nil? && @r_x_cs_contact.to_s.length > 128
        invalid_properties.push('invalid value for "r_x_cs_contact", the character length must be smaller than or equal to 128.')
      end

      if !@r_x_cs_phone.nil? && @r_x_cs_phone.to_s.length > 32
        invalid_properties.push('invalid value for "r_x_cs_phone", the character length must be smaller than or equal to 32.')
      end

      if !@r_x_grp.nil? && @r_x_grp.to_s.length > 64
        invalid_properties.push('invalid value for "r_x_grp", the character length must be smaller than or equal to 64.')
      end

      if !@r_x_name.nil? && @r_x_name.to_s.length > 512
        invalid_properties.push('invalid value for "r_x_name", the character length must be smaller than or equal to 512.')
      end

      if !@r_x_pcn.nil? && @r_x_pcn.to_s.length > 64
        invalid_properties.push('invalid value for "r_x_pcn", the character length must be smaller than or equal to 64.')
      end

      if !@region_code.nil? && @region_code.to_s.length > 32
        invalid_properties.push('invalid value for "region_code", the character length must be smaller than or equal to 32.')
      end

      if @self_admin.nil?
        invalid_properties.push('invalid value for "self_admin", self_admin cannot be nil.')
      end

      if @set_billing_due_date.nil?
        invalid_properties.push('invalid value for "set_billing_due_date", set_billing_due_date cannot be nil.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@subscriber_id_prefix.nil? && @subscriber_id_prefix.to_s.length > 3
        invalid_properties.push('invalid value for "subscriber_id_prefix", the character length must be smaller than or equal to 3.')
      end

      if !@subscriber_id_suffix.nil? && @subscriber_id_suffix.to_s.length > 3
        invalid_properties.push('invalid value for "subscriber_id_suffix", the character length must be smaller than or equal to 3.')
      end

      if !@u_c_percent.nil? && @u_c_percent.to_s.length > 8
        invalid_properties.push('invalid value for "u_c_percent", the character length must be smaller than or equal to 8.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if !@account_manager.nil? && @account_manager.to_s.length > 128
      return false if !@add_on_rate_option.nil? && @add_on_rate_option.to_s.length > 8
      return false if !@address.nil? && @address.to_s.length > 255
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if @admin_cobra.nil?
      return false if @advice_to_pay.nil?
      return false if @apply_ex_code.nil?
      return false if @auth_not_reqd_override.nil?
      return false if !@billing_age_calc.nil? && @billing_age_calc.to_s.length > 1
      return false if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
      return false if !@billing_due_date_range_type.nil? && @billing_due_date_range_type.to_s.length > 16
      return false if !@billing_due_date_type.nil? && @billing_due_date_type.to_s.length > 32
      return false if !@check_birthday.nil? && @check_birthday.to_s.length > 1
      return false if !@city.nil? && @city.to_s.length > 25
      return false if @co_pay_max_per_date_provider.nil?
      return false if !@contact_country_code.nil? && @contact_country_code.to_s.length > 8
      return false if !@contact_email_address.nil? && @contact_email_address.to_s.length > 128
      return false if !@contact_extension.nil? && @contact_extension.to_s.length > 6
      return false if !@contact_phone.nil? && @contact_phone.to_s.length > 20
      return false if !@contact_title.nil? && @contact_title.to_s.length > 20
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if @default_process_by_disability_date.nil?
      return false if @default_roll_up_waiting_period.nil?
      return false if @disable_cobra_auto_select.nil?
      return false if !@distribution_payor_id.nil? && @distribution_payor_id.to_s.length > 20
      return false if @duplicate_claim_override.nil?
      return false if !@election_range_type.nil? && @election_range_type.to_s.length > 16
      return false if !@employer_size.nil? && @employer_size.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@fax.nil? && @fax.to_s.length > 20
      return false if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if !@generate_adjustments.nil? && @generate_adjustments.to_s.length > 1
      return false if !@generate_invoices.nil? && @generate_invoices.to_s.length > 1
      return false if @individual_billing.nil?
      return false if @individual_cycle.nil?
      return false if @individual_dates.nil?
      return false if !@inv_grace_period_type.nil? && @inv_grace_period_type.to_s.length > 1
      return false if !@issue_state.nil? && @issue_state.to_s.length > 2
      return false if !@name.nil? && @name.to_s.length > 50
      return false if @open_closed_enrollment.nil?
      return false if @paperless.nil?
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@phone.nil? && @phone.to_s.length > 20
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if @prepaid_group.nil?
      return false if !@primary_contact.nil? && @primary_contact.to_s.length > 25
      return false if !@producer.nil? && @producer.to_s.length > 128
      return false if @prorate_deduction.nil?
      return false if !@prorate_deduction_type.nil? && @prorate_deduction_type.to_s.length > 10
      return false if !@r_x_bin.nil? && @r_x_bin.to_s.length > 64
      return false if !@r_x_cs_contact.nil? && @r_x_cs_contact.to_s.length > 128
      return false if !@r_x_cs_phone.nil? && @r_x_cs_phone.to_s.length > 32
      return false if !@r_x_grp.nil? && @r_x_grp.to_s.length > 64
      return false if !@r_x_name.nil? && @r_x_name.to_s.length > 512
      return false if !@r_x_pcn.nil? && @r_x_pcn.to_s.length > 64
      return false if !@region_code.nil? && @region_code.to_s.length > 32
      return false if @self_admin.nil?
      return false if @set_billing_due_date.nil?
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@subscriber_id_prefix.nil? && @subscriber_id_prefix.to_s.length > 3
      return false if !@subscriber_id_suffix.nil? && @subscriber_id_suffix.to_s.length > 3
      return false if !@u_c_percent.nil? && @u_c_percent.to_s.length > 8
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] account_manager Value to be assigned
    def account_manager=(account_manager)
      if !account_manager.nil? && account_manager.to_s.length > 128
        fail ArgumentError, 'invalid value for "account_manager", the character length must be smaller than or equal to 128.'
      end

      @account_manager = account_manager
    end

    # Custom attribute writer method with validation
    # @param [Object] add_on_rate_option Value to be assigned
    def add_on_rate_option=(add_on_rate_option)
      if !add_on_rate_option.nil? && add_on_rate_option.to_s.length > 8
        fail ArgumentError, 'invalid value for "add_on_rate_option", the character length must be smaller than or equal to 8.'
      end

      @add_on_rate_option = add_on_rate_option
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 255
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 255.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] admin_cobra Value to be assigned
    def admin_cobra=(admin_cobra)
      if admin_cobra.nil?
        fail ArgumentError, 'admin_cobra cannot be nil'
      end

      @admin_cobra = admin_cobra
    end

    # Custom attribute writer method with validation
    # @param [Object] advice_to_pay Value to be assigned
    def advice_to_pay=(advice_to_pay)
      if advice_to_pay.nil?
        fail ArgumentError, 'advice_to_pay cannot be nil'
      end

      @advice_to_pay = advice_to_pay
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_ex_code Value to be assigned
    def apply_ex_code=(apply_ex_code)
      if apply_ex_code.nil?
        fail ArgumentError, 'apply_ex_code cannot be nil'
      end

      @apply_ex_code = apply_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_not_reqd_override Value to be assigned
    def auth_not_reqd_override=(auth_not_reqd_override)
      if auth_not_reqd_override.nil?
        fail ArgumentError, 'auth_not_reqd_override cannot be nil'
      end

      @auth_not_reqd_override = auth_not_reqd_override
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_age_calc Value to be assigned
    def billing_age_calc=(billing_age_calc)
      if !billing_age_calc.nil? && billing_age_calc.to_s.length > 1
        fail ArgumentError, 'invalid value for "billing_age_calc", the character length must be smaller than or equal to 1.'
      end

      @billing_age_calc = billing_age_calc
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_cycle_id Value to be assigned
    def billing_cycle_id=(billing_cycle_id)
      if !billing_cycle_id.nil? && billing_cycle_id.to_s.length > 2
        fail ArgumentError, 'invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.'
      end

      @billing_cycle_id = billing_cycle_id
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_due_date_range_type Value to be assigned
    def billing_due_date_range_type=(billing_due_date_range_type)
      if !billing_due_date_range_type.nil? && billing_due_date_range_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "billing_due_date_range_type", the character length must be smaller than or equal to 16.'
      end

      @billing_due_date_range_type = billing_due_date_range_type
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_due_date_type Value to be assigned
    def billing_due_date_type=(billing_due_date_type)
      if !billing_due_date_type.nil? && billing_due_date_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "billing_due_date_type", the character length must be smaller than or equal to 32.'
      end

      @billing_due_date_type = billing_due_date_type
    end

    # Custom attribute writer method with validation
    # @param [Object] check_birthday Value to be assigned
    def check_birthday=(check_birthday)
      if !check_birthday.nil? && check_birthday.to_s.length > 1
        fail ArgumentError, 'invalid value for "check_birthday", the character length must be smaller than or equal to 1.'
      end

      @check_birthday = check_birthday
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 25
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 25.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] co_pay_max_per_date_provider Value to be assigned
    def co_pay_max_per_date_provider=(co_pay_max_per_date_provider)
      if co_pay_max_per_date_provider.nil?
        fail ArgumentError, 'co_pay_max_per_date_provider cannot be nil'
      end

      @co_pay_max_per_date_provider = co_pay_max_per_date_provider
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_country_code Value to be assigned
    def contact_country_code=(contact_country_code)
      if !contact_country_code.nil? && contact_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "contact_country_code", the character length must be smaller than or equal to 8.'
      end

      @contact_country_code = contact_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_email_address Value to be assigned
    def contact_email_address=(contact_email_address)
      if !contact_email_address.nil? && contact_email_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "contact_email_address", the character length must be smaller than or equal to 128.'
      end

      @contact_email_address = contact_email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_extension Value to be assigned
    def contact_extension=(contact_extension)
      if !contact_extension.nil? && contact_extension.to_s.length > 6
        fail ArgumentError, 'invalid value for "contact_extension", the character length must be smaller than or equal to 6.'
      end

      @contact_extension = contact_extension
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_phone Value to be assigned
    def contact_phone=(contact_phone)
      if !contact_phone.nil? && contact_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "contact_phone", the character length must be smaller than or equal to 20.'
      end

      @contact_phone = contact_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_title Value to be assigned
    def contact_title=(contact_title)
      if !contact_title.nil? && contact_title.to_s.length > 20
        fail ArgumentError, 'invalid value for "contact_title", the character length must be smaller than or equal to 20.'
      end

      @contact_title = contact_title
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] default_process_by_disability_date Value to be assigned
    def default_process_by_disability_date=(default_process_by_disability_date)
      if default_process_by_disability_date.nil?
        fail ArgumentError, 'default_process_by_disability_date cannot be nil'
      end

      @default_process_by_disability_date = default_process_by_disability_date
    end

    # Custom attribute writer method with validation
    # @param [Object] default_roll_up_waiting_period Value to be assigned
    def default_roll_up_waiting_period=(default_roll_up_waiting_period)
      if default_roll_up_waiting_period.nil?
        fail ArgumentError, 'default_roll_up_waiting_period cannot be nil'
      end

      @default_roll_up_waiting_period = default_roll_up_waiting_period
    end

    # Custom attribute writer method with validation
    # @param [Object] disable_cobra_auto_select Value to be assigned
    def disable_cobra_auto_select=(disable_cobra_auto_select)
      if disable_cobra_auto_select.nil?
        fail ArgumentError, 'disable_cobra_auto_select cannot be nil'
      end

      @disable_cobra_auto_select = disable_cobra_auto_select
    end

    # Custom attribute writer method with validation
    # @param [Object] distribution_payor_id Value to be assigned
    def distribution_payor_id=(distribution_payor_id)
      if !distribution_payor_id.nil? && distribution_payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "distribution_payor_id", the character length must be smaller than or equal to 20.'
      end

      @distribution_payor_id = distribution_payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] duplicate_claim_override Value to be assigned
    def duplicate_claim_override=(duplicate_claim_override)
      if duplicate_claim_override.nil?
        fail ArgumentError, 'duplicate_claim_override cannot be nil'
      end

      @duplicate_claim_override = duplicate_claim_override
    end

    # Custom attribute writer method with validation
    # @param [Object] election_range_type Value to be assigned
    def election_range_type=(election_range_type)
      if !election_range_type.nil? && election_range_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "election_range_type", the character length must be smaller than or equal to 16.'
      end

      @election_range_type = election_range_type
    end

    # Custom attribute writer method with validation
    # @param [Object] employer_size Value to be assigned
    def employer_size=(employer_size)
      if !employer_size.nil? && employer_size.to_s.length > 8
        fail ArgumentError, 'invalid value for "employer_size", the character length must be smaller than or equal to 8.'
      end

      @employer_size = employer_size
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 20.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_country_code Value to be assigned
    def fax_country_code=(fax_country_code)
      if !fax_country_code.nil? && fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @fax_country_code = fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] generate_adjustments Value to be assigned
    def generate_adjustments=(generate_adjustments)
      if !generate_adjustments.nil? && generate_adjustments.to_s.length > 1
        fail ArgumentError, 'invalid value for "generate_adjustments", the character length must be smaller than or equal to 1.'
      end

      @generate_adjustments = generate_adjustments
    end

    # Custom attribute writer method with validation
    # @param [Object] generate_invoices Value to be assigned
    def generate_invoices=(generate_invoices)
      if !generate_invoices.nil? && generate_invoices.to_s.length > 1
        fail ArgumentError, 'invalid value for "generate_invoices", the character length must be smaller than or equal to 1.'
      end

      @generate_invoices = generate_invoices
    end

    # Custom attribute writer method with validation
    # @param [Object] individual_billing Value to be assigned
    def individual_billing=(individual_billing)
      if individual_billing.nil?
        fail ArgumentError, 'individual_billing cannot be nil'
      end

      @individual_billing = individual_billing
    end

    # Custom attribute writer method with validation
    # @param [Object] individual_cycle Value to be assigned
    def individual_cycle=(individual_cycle)
      if individual_cycle.nil?
        fail ArgumentError, 'individual_cycle cannot be nil'
      end

      @individual_cycle = individual_cycle
    end

    # Custom attribute writer method with validation
    # @param [Object] individual_dates Value to be assigned
    def individual_dates=(individual_dates)
      if individual_dates.nil?
        fail ArgumentError, 'individual_dates cannot be nil'
      end

      @individual_dates = individual_dates
    end

    # Custom attribute writer method with validation
    # @param [Object] inv_grace_period_type Value to be assigned
    def inv_grace_period_type=(inv_grace_period_type)
      if !inv_grace_period_type.nil? && inv_grace_period_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "inv_grace_period_type", the character length must be smaller than or equal to 1.'
      end

      @inv_grace_period_type = inv_grace_period_type
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_state Value to be assigned
    def issue_state=(issue_state)
      if !issue_state.nil? && issue_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "issue_state", the character length must be smaller than or equal to 2.'
      end

      @issue_state = issue_state
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 50
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 50.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] open_closed_enrollment Value to be assigned
    def open_closed_enrollment=(open_closed_enrollment)
      if open_closed_enrollment.nil?
        fail ArgumentError, 'open_closed_enrollment cannot be nil'
      end

      @open_closed_enrollment = open_closed_enrollment
    end

    # Custom attribute writer method with validation
    # @param [Object] paperless Value to be assigned
    def paperless=(paperless)
      if paperless.nil?
        fail ArgumentError, 'paperless cannot be nil'
      end

      @paperless = paperless
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 20.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] prepaid_group Value to be assigned
    def prepaid_group=(prepaid_group)
      if prepaid_group.nil?
        fail ArgumentError, 'prepaid_group cannot be nil'
      end

      @prepaid_group = prepaid_group
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_contact Value to be assigned
    def primary_contact=(primary_contact)
      if !primary_contact.nil? && primary_contact.to_s.length > 25
        fail ArgumentError, 'invalid value for "primary_contact", the character length must be smaller than or equal to 25.'
      end

      @primary_contact = primary_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] producer Value to be assigned
    def producer=(producer)
      if !producer.nil? && producer.to_s.length > 128
        fail ArgumentError, 'invalid value for "producer", the character length must be smaller than or equal to 128.'
      end

      @producer = producer
    end

    # Custom attribute writer method with validation
    # @param [Object] prorate_deduction Value to be assigned
    def prorate_deduction=(prorate_deduction)
      if prorate_deduction.nil?
        fail ArgumentError, 'prorate_deduction cannot be nil'
      end

      @prorate_deduction = prorate_deduction
    end

    # Custom attribute writer method with validation
    # @param [Object] prorate_deduction_type Value to be assigned
    def prorate_deduction_type=(prorate_deduction_type)
      if !prorate_deduction_type.nil? && prorate_deduction_type.to_s.length > 10
        fail ArgumentError, 'invalid value for "prorate_deduction_type", the character length must be smaller than or equal to 10.'
      end

      @prorate_deduction_type = prorate_deduction_type
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_bin Value to be assigned
    def r_x_bin=(r_x_bin)
      if !r_x_bin.nil? && r_x_bin.to_s.length > 64
        fail ArgumentError, 'invalid value for "r_x_bin", the character length must be smaller than or equal to 64.'
      end

      @r_x_bin = r_x_bin
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_cs_contact Value to be assigned
    def r_x_cs_contact=(r_x_cs_contact)
      if !r_x_cs_contact.nil? && r_x_cs_contact.to_s.length > 128
        fail ArgumentError, 'invalid value for "r_x_cs_contact", the character length must be smaller than or equal to 128.'
      end

      @r_x_cs_contact = r_x_cs_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_cs_phone Value to be assigned
    def r_x_cs_phone=(r_x_cs_phone)
      if !r_x_cs_phone.nil? && r_x_cs_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "r_x_cs_phone", the character length must be smaller than or equal to 32.'
      end

      @r_x_cs_phone = r_x_cs_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_grp Value to be assigned
    def r_x_grp=(r_x_grp)
      if !r_x_grp.nil? && r_x_grp.to_s.length > 64
        fail ArgumentError, 'invalid value for "r_x_grp", the character length must be smaller than or equal to 64.'
      end

      @r_x_grp = r_x_grp
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_name Value to be assigned
    def r_x_name=(r_x_name)
      if !r_x_name.nil? && r_x_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "r_x_name", the character length must be smaller than or equal to 512.'
      end

      @r_x_name = r_x_name
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_pcn Value to be assigned
    def r_x_pcn=(r_x_pcn)
      if !r_x_pcn.nil? && r_x_pcn.to_s.length > 64
        fail ArgumentError, 'invalid value for "r_x_pcn", the character length must be smaller than or equal to 64.'
      end

      @r_x_pcn = r_x_pcn
    end

    # Custom attribute writer method with validation
    # @param [Object] region_code Value to be assigned
    def region_code=(region_code)
      if !region_code.nil? && region_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "region_code", the character length must be smaller than or equal to 32.'
      end

      @region_code = region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] self_admin Value to be assigned
    def self_admin=(self_admin)
      if self_admin.nil?
        fail ArgumentError, 'self_admin cannot be nil'
      end

      @self_admin = self_admin
    end

    # Custom attribute writer method with validation
    # @param [Object] set_billing_due_date Value to be assigned
    def set_billing_due_date=(set_billing_due_date)
      if set_billing_due_date.nil?
        fail ArgumentError, 'set_billing_due_date cannot be nil'
      end

      @set_billing_due_date = set_billing_due_date
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id_prefix Value to be assigned
    def subscriber_id_prefix=(subscriber_id_prefix)
      if !subscriber_id_prefix.nil? && subscriber_id_prefix.to_s.length > 3
        fail ArgumentError, 'invalid value for "subscriber_id_prefix", the character length must be smaller than or equal to 3.'
      end

      @subscriber_id_prefix = subscriber_id_prefix
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id_suffix Value to be assigned
    def subscriber_id_suffix=(subscriber_id_suffix)
      if !subscriber_id_suffix.nil? && subscriber_id_suffix.to_s.length > 3
        fail ArgumentError, 'invalid value for "subscriber_id_suffix", the character length must be smaller than or equal to 3.'
      end

      @subscriber_id_suffix = subscriber_id_suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] u_c_percent Value to be assigned
    def u_c_percent=(u_c_percent)
      if !u_c_percent.nil? && u_c_percent.to_s.length > 8
        fail ArgumentError, 'invalid value for "u_c_percent", the character length must be smaller than or equal to 8.'
      end

      @u_c_percent = u_c_percent
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          account_key == o.account_key &&
          account_manager == o.account_manager &&
          add_on_rate_option == o.add_on_rate_option &&
          address == o.address &&
          address2 == o.address2 &&
          admin_cobra == o.admin_cobra &&
          adult_age == o.adult_age &&
          advice_to_pay == o.advice_to_pay &&
          apply_ex_code == o.apply_ex_code &&
          auth_not_reqd_override == o.auth_not_reqd_override &&
          billing_age_calc == o.billing_age_calc &&
          billing_cycle_id == o.billing_cycle_id &&
          billing_due_date_range == o.billing_due_date_range &&
          billing_due_date_range_type == o.billing_due_date_range_type &&
          billing_due_date_type == o.billing_due_date_type &&
          billing_invoice_create == o.billing_invoice_create &&
          billing_retro_limit == o.billing_retro_limit &&
          case_rate == o.case_rate &&
          check_birthday == o.check_birthday &&
          city == o.city &&
          claim_days_allowed == o.claim_days_allowed &&
          co_pay_max_per_date_provider == o.co_pay_max_per_date_provider &&
          commission_lookback == o.commission_lookback &&
          contact_country_code == o.contact_country_code &&
          contact_email_address == o.contact_email_address &&
          contact_extension == o.contact_extension &&
          contact_phone == o.contact_phone &&
          contact_title == o.contact_title &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          cutoff_age == o.cutoff_age &&
          default_eob_report == o.default_eob_report &&
          default_invoice_report_definition_key == o.default_invoice_report_definition_key &&
          default_process_by_disability_date == o.default_process_by_disability_date &&
          default_roll_up_waiting_period == o.default_roll_up_waiting_period &&
          disability_pay_through_day == o.disability_pay_through_day &&
          disable_cobra_auto_select == o.disable_cobra_auto_select &&
          disenroll_date == o.disenroll_date &&
          distribution_account_key == o.distribution_account_key &&
          distribution_payor_id == o.distribution_payor_id &&
          duplicate_claim_override == o.duplicate_claim_override &&
          election_range == o.election_range &&
          election_range_type == o.election_range_type &&
          employer_size == o.employer_size &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          fax == o.fax &&
          fax_country_code == o.fax_country_code &&
          federal_id == o.federal_id &&
          generate_adjustments == o.generate_adjustments &&
          generate_invoices == o.generate_invoices &&
          group_account == o.group_account &&
          individual_billing == o.individual_billing &&
          individual_cycle == o.individual_cycle &&
          individual_dates == o.individual_dates &&
          inv_grace_period == o.inv_grace_period &&
          inv_grace_period_type == o.inv_grace_period_type &&
          invoice_enrolled_by == o.invoice_enrolled_by &&
          invoice_enrolled_thru == o.invoice_enrolled_thru &&
          issue_state == o.issue_state &&
          name == o.name &&
          notes == o.notes &&
          open_closed_enrollment == o.open_closed_enrollment &&
          original_date == o.original_date &&
          paid_through == o.paid_through &&
          paperless == o.paperless &&
          pay_to_account == o.pay_to_account &&
          payor_id == o.payor_id &&
          phone == o.phone &&
          phone_country_code == o.phone_country_code &&
          prepaid_group == o.prepaid_group &&
          primary_contact == o.primary_contact &&
          producer == o.producer &&
          prorate_deduction == o.prorate_deduction &&
          prorate_deduction_type == o.prorate_deduction_type &&
          r_x_bin == o.r_x_bin &&
          r_x_cs_contact == o.r_x_cs_contact &&
          r_x_cs_phone == o.r_x_cs_phone &&
          r_x_grp == o.r_x_grp &&
          r_x_name == o.r_x_name &&
          r_x_pcn == o.r_x_pcn &&
          reason_id == o.reason_id &&
          region_code == o.region_code &&
          renewal_completion_date == o.renewal_completion_date &&
          renewal_date == o.renewal_date &&
          self_admin == o.self_admin &&
          set_billing_due_date == o.set_billing_due_date &&
          state == o.state &&
          subscriber_id_prefix == o.subscriber_id_prefix &&
          subscriber_id_suffix == o.subscriber_id_suffix &&
          total_employees == o.total_employees &&
          u_c_percent == o.u_c_percent &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_employer_state == o.use_employer_state &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, account_key, account_manager, add_on_rate_option, address, address2, admin_cobra, adult_age, advice_to_pay, apply_ex_code, auth_not_reqd_override, billing_age_calc, billing_cycle_id, billing_due_date_range, billing_due_date_range_type, billing_due_date_type, billing_invoice_create, billing_retro_limit, case_rate, check_birthday, city, claim_days_allowed, co_pay_max_per_date_provider, commission_lookback, contact_country_code, contact_email_address, contact_extension, contact_phone, contact_title, country_id, county_code, cutoff_age, default_eob_report, default_invoice_report_definition_key, default_process_by_disability_date, default_roll_up_waiting_period, disability_pay_through_day, disable_cobra_auto_select, disenroll_date, distribution_account_key, distribution_payor_id, duplicate_claim_override, election_range, election_range_type, employer_size, entry_date, entry_user, ex_code, fax, fax_country_code, federal_id, generate_adjustments, generate_invoices, group_account, individual_billing, individual_cycle, individual_dates, inv_grace_period, inv_grace_period_type, invoice_enrolled_by, invoice_enrolled_thru, issue_state, name, notes, open_closed_enrollment, original_date, paid_through, paperless, pay_to_account, payor_id, phone, phone_country_code, prepaid_group, primary_contact, producer, prorate_deduction, prorate_deduction_type, r_x_bin, r_x_cs_contact, r_x_cs_phone, r_x_grp, r_x_name, r_x_pcn, reason_id, region_code, renewal_completion_date, renewal_date, self_admin, set_billing_due_date, state, subscriber_id_prefix, subscriber_id_suffix, total_employees, u_c_percent, update_date, update_user, use_employer_state, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
