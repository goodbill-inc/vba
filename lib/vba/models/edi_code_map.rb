=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class EDICodeMap
    # Key value that identifies the EDI code map Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :edi_code_map_key

    # Value that is assigned at the destination when the source value is encountered
    attr_accessor :destination_value

    # Specifies the direction of the EDI transfer - import or export
    attr_accessor :direction

    # Optional date when the EDI code map condition becomes effective
    attr_accessor :effective_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Type of map that is being used for the EDI transfer
    attr_accessor :map_type

    # Variable associated with the EDI code map
    attr_accessor :map_variable1

    # Variable associated with the EDI code map
    attr_accessor :map_variable2

    # Variable associated with the EDI code map
    attr_accessor :map_variable3

    # Variable associated with the EDI code map
    attr_accessor :map_variable4

    # Variable associated with the EDI code map
    attr_accessor :map_variable5

    # Value specified by the source that needs to be mapped
    attr_accessor :source_value

    # Optional date when the EDI code map condition terminates
    attr_accessor :term_date

    # Kev value that identifies the EDI trading partner or vendor
    attr_accessor :trading_partner_key

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'edi_code_map_key' => :'ediCodeMap_Key',
        :'destination_value' => :'destination_Value',
        :'direction' => :'direction',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'map_type' => :'map_Type',
        :'map_variable1' => :'map_Variable1',
        :'map_variable2' => :'map_Variable2',
        :'map_variable3' => :'map_Variable3',
        :'map_variable4' => :'map_Variable4',
        :'map_variable5' => :'map_Variable5',
        :'source_value' => :'source_Value',
        :'term_date' => :'term_Date',
        :'trading_partner_key' => :'trading_Partner_Key',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'edi_code_map_key' => :'Integer',
        :'destination_value' => :'String',
        :'direction' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'map_type' => :'String',
        :'map_variable1' => :'String',
        :'map_variable2' => :'String',
        :'map_variable3' => :'String',
        :'map_variable4' => :'String',
        :'map_variable5' => :'String',
        :'source_value' => :'String',
        :'term_date' => :'Time',
        :'trading_partner_key' => :'Integer',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'effective_date',
        :'entry_user',
        :'map_variable1',
        :'map_variable2',
        :'map_variable3',
        :'map_variable4',
        :'map_variable5',
        :'term_date',
        :'trading_partner_key',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::EDICodeMap` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::EDICodeMap`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'edi_code_map_key')
        self.edi_code_map_key = attributes[:'edi_code_map_key']
      else
        self.edi_code_map_key = nil
      end

      if attributes.key?(:'destination_value')
        self.destination_value = attributes[:'destination_value']
      else
        self.destination_value = nil
      end

      if attributes.key?(:'direction')
        self.direction = attributes[:'direction']
      else
        self.direction = nil
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'map_type')
        self.map_type = attributes[:'map_type']
      else
        self.map_type = nil
      end

      if attributes.key?(:'map_variable1')
        self.map_variable1 = attributes[:'map_variable1']
      end

      if attributes.key?(:'map_variable2')
        self.map_variable2 = attributes[:'map_variable2']
      end

      if attributes.key?(:'map_variable3')
        self.map_variable3 = attributes[:'map_variable3']
      end

      if attributes.key?(:'map_variable4')
        self.map_variable4 = attributes[:'map_variable4']
      end

      if attributes.key?(:'map_variable5')
        self.map_variable5 = attributes[:'map_variable5']
      end

      if attributes.key?(:'source_value')
        self.source_value = attributes[:'source_value']
      else
        self.source_value = nil
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'trading_partner_key')
        self.trading_partner_key = attributes[:'trading_partner_key']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @edi_code_map_key.nil?
        invalid_properties.push('invalid value for "edi_code_map_key", edi_code_map_key cannot be nil.')
      end

      if @destination_value.nil?
        invalid_properties.push('invalid value for "destination_value", destination_value cannot be nil.')
      end

      if @destination_value.to_s.length > 64
        invalid_properties.push('invalid value for "destination_value", the character length must be smaller than or equal to 64.')
      end

      if @destination_value.to_s.length < 1
        invalid_properties.push('invalid value for "destination_value", the character length must be great than or equal to 1.')
      end

      if @direction.nil?
        invalid_properties.push('invalid value for "direction", direction cannot be nil.')
      end

      if @direction.to_s.length > 3
        invalid_properties.push('invalid value for "direction", the character length must be smaller than or equal to 3.')
      end

      if @direction.to_s.length < 1
        invalid_properties.push('invalid value for "direction", the character length must be great than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @map_type.nil?
        invalid_properties.push('invalid value for "map_type", map_type cannot be nil.')
      end

      if @map_type.to_s.length > 16
        invalid_properties.push('invalid value for "map_type", the character length must be smaller than or equal to 16.')
      end

      if @map_type.to_s.length < 1
        invalid_properties.push('invalid value for "map_type", the character length must be great than or equal to 1.')
      end

      if !@map_variable1.nil? && @map_variable1.to_s.length > 128
        invalid_properties.push('invalid value for "map_variable1", the character length must be smaller than or equal to 128.')
      end

      if !@map_variable2.nil? && @map_variable2.to_s.length > 128
        invalid_properties.push('invalid value for "map_variable2", the character length must be smaller than or equal to 128.')
      end

      if !@map_variable3.nil? && @map_variable3.to_s.length > 128
        invalid_properties.push('invalid value for "map_variable3", the character length must be smaller than or equal to 128.')
      end

      if !@map_variable4.nil? && @map_variable4.to_s.length > 128
        invalid_properties.push('invalid value for "map_variable4", the character length must be smaller than or equal to 128.')
      end

      if !@map_variable5.nil? && @map_variable5.to_s.length > 128
        invalid_properties.push('invalid value for "map_variable5", the character length must be smaller than or equal to 128.')
      end

      if @source_value.nil?
        invalid_properties.push('invalid value for "source_value", source_value cannot be nil.')
      end

      if @source_value.to_s.length > 64
        invalid_properties.push('invalid value for "source_value", the character length must be smaller than or equal to 64.')
      end

      if @source_value.to_s.length < 1
        invalid_properties.push('invalid value for "source_value", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @edi_code_map_key.nil?
      return false if @destination_value.nil?
      return false if @destination_value.to_s.length > 64
      return false if @destination_value.to_s.length < 1
      return false if @direction.nil?
      return false if @direction.to_s.length > 3
      return false if @direction.to_s.length < 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @map_type.nil?
      return false if @map_type.to_s.length > 16
      return false if @map_type.to_s.length < 1
      return false if !@map_variable1.nil? && @map_variable1.to_s.length > 128
      return false if !@map_variable2.nil? && @map_variable2.to_s.length > 128
      return false if !@map_variable3.nil? && @map_variable3.to_s.length > 128
      return false if !@map_variable4.nil? && @map_variable4.to_s.length > 128
      return false if !@map_variable5.nil? && @map_variable5.to_s.length > 128
      return false if @source_value.nil?
      return false if @source_value.to_s.length > 64
      return false if @source_value.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] edi_code_map_key Value to be assigned
    def edi_code_map_key=(edi_code_map_key)
      if edi_code_map_key.nil?
        fail ArgumentError, 'edi_code_map_key cannot be nil'
      end

      @edi_code_map_key = edi_code_map_key
    end

    # Custom attribute writer method with validation
    # @param [Object] destination_value Value to be assigned
    def destination_value=(destination_value)
      if destination_value.nil?
        fail ArgumentError, 'destination_value cannot be nil'
      end

      if destination_value.to_s.length > 64
        fail ArgumentError, 'invalid value for "destination_value", the character length must be smaller than or equal to 64.'
      end

      if destination_value.to_s.length < 1
        fail ArgumentError, 'invalid value for "destination_value", the character length must be great than or equal to 1.'
      end

      @destination_value = destination_value
    end

    # Custom attribute writer method with validation
    # @param [Object] direction Value to be assigned
    def direction=(direction)
      if direction.nil?
        fail ArgumentError, 'direction cannot be nil'
      end

      if direction.to_s.length > 3
        fail ArgumentError, 'invalid value for "direction", the character length must be smaller than or equal to 3.'
      end

      if direction.to_s.length < 1
        fail ArgumentError, 'invalid value for "direction", the character length must be great than or equal to 1.'
      end

      @direction = direction
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] map_type Value to be assigned
    def map_type=(map_type)
      if map_type.nil?
        fail ArgumentError, 'map_type cannot be nil'
      end

      if map_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "map_type", the character length must be smaller than or equal to 16.'
      end

      if map_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "map_type", the character length must be great than or equal to 1.'
      end

      @map_type = map_type
    end

    # Custom attribute writer method with validation
    # @param [Object] map_variable1 Value to be assigned
    def map_variable1=(map_variable1)
      if !map_variable1.nil? && map_variable1.to_s.length > 128
        fail ArgumentError, 'invalid value for "map_variable1", the character length must be smaller than or equal to 128.'
      end

      @map_variable1 = map_variable1
    end

    # Custom attribute writer method with validation
    # @param [Object] map_variable2 Value to be assigned
    def map_variable2=(map_variable2)
      if !map_variable2.nil? && map_variable2.to_s.length > 128
        fail ArgumentError, 'invalid value for "map_variable2", the character length must be smaller than or equal to 128.'
      end

      @map_variable2 = map_variable2
    end

    # Custom attribute writer method with validation
    # @param [Object] map_variable3 Value to be assigned
    def map_variable3=(map_variable3)
      if !map_variable3.nil? && map_variable3.to_s.length > 128
        fail ArgumentError, 'invalid value for "map_variable3", the character length must be smaller than or equal to 128.'
      end

      @map_variable3 = map_variable3
    end

    # Custom attribute writer method with validation
    # @param [Object] map_variable4 Value to be assigned
    def map_variable4=(map_variable4)
      if !map_variable4.nil? && map_variable4.to_s.length > 128
        fail ArgumentError, 'invalid value for "map_variable4", the character length must be smaller than or equal to 128.'
      end

      @map_variable4 = map_variable4
    end

    # Custom attribute writer method with validation
    # @param [Object] map_variable5 Value to be assigned
    def map_variable5=(map_variable5)
      if !map_variable5.nil? && map_variable5.to_s.length > 128
        fail ArgumentError, 'invalid value for "map_variable5", the character length must be smaller than or equal to 128.'
      end

      @map_variable5 = map_variable5
    end

    # Custom attribute writer method with validation
    # @param [Object] source_value Value to be assigned
    def source_value=(source_value)
      if source_value.nil?
        fail ArgumentError, 'source_value cannot be nil'
      end

      if source_value.to_s.length > 64
        fail ArgumentError, 'invalid value for "source_value", the character length must be smaller than or equal to 64.'
      end

      if source_value.to_s.length < 1
        fail ArgumentError, 'invalid value for "source_value", the character length must be great than or equal to 1.'
      end

      @source_value = source_value
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          edi_code_map_key == o.edi_code_map_key &&
          destination_value == o.destination_value &&
          direction == o.direction &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          map_type == o.map_type &&
          map_variable1 == o.map_variable1 &&
          map_variable2 == o.map_variable2 &&
          map_variable3 == o.map_variable3 &&
          map_variable4 == o.map_variable4 &&
          map_variable5 == o.map_variable5 &&
          source_value == o.source_value &&
          term_date == o.term_date &&
          trading_partner_key == o.trading_partner_key &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [edi_code_map_key, destination_value, direction, effective_date, entry_date, entry_user, map_type, map_variable1, map_variable2, map_variable3, map_variable4, map_variable5, source_value, term_date, trading_partner_key, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
