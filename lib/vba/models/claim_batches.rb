=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimBatches
    attr_accessor :batch_number

    attr_accessor :batch_type

    attr_accessor :case_status

    attr_accessor :case_status_date

    attr_accessor :case_status_reason

    attr_accessor :case_status_user

    attr_accessor :current_phys_tax_id

    attr_accessor :default_claim_type

    attr_accessor :default_date

    attr_accessor :default_plan_type

    attr_accessor :default_plan_type2

    attr_accessor :default_plan_type3

    attr_accessor :description

    attr_accessor :ed_i_key

    attr_accessor :ed_i_location

    attr_accessor :ed_i_source_file_name

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :member_seq

    attr_accessor :original_claim_count

    attr_accessor :original_phys_tax_id

    attr_accessor :overpayment_ex_code

    attr_accessor :overpayment_total

    attr_accessor :process_by_disability_date

    attr_accessor :reviewed_date

    attr_accessor :reviewed_status

    attr_accessor :reviewed_user

    attr_accessor :status

    attr_accessor :subscriber_id

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :use_default_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_number' => :'batch_Number',
        :'batch_type' => :'batch_Type',
        :'case_status' => :'case_Status',
        :'case_status_date' => :'case_Status_Date',
        :'case_status_reason' => :'case_Status_Reason',
        :'case_status_user' => :'case_Status_User',
        :'current_phys_tax_id' => :'current_Phys_Tax_ID',
        :'default_claim_type' => :'default_Claim_Type',
        :'default_date' => :'default_Date',
        :'default_plan_type' => :'default_Plan_Type',
        :'default_plan_type2' => :'default_Plan_Type2',
        :'default_plan_type3' => :'default_Plan_Type3',
        :'description' => :'description',
        :'ed_i_key' => :'edI_Key',
        :'ed_i_location' => :'edI_Location',
        :'ed_i_source_file_name' => :'edI_Source_File_Name',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'member_seq' => :'member_Seq',
        :'original_claim_count' => :'original_Claim_Count',
        :'original_phys_tax_id' => :'original_Phys_Tax_ID',
        :'overpayment_ex_code' => :'overpayment_Ex_Code',
        :'overpayment_total' => :'overpayment_Total',
        :'process_by_disability_date' => :'process_By_Disability_Date',
        :'reviewed_date' => :'reviewed_Date',
        :'reviewed_status' => :'reviewed_Status',
        :'reviewed_user' => :'reviewed_User',
        :'status' => :'status',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_default_date' => :'use_Default_Date'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batch_number' => :'Integer',
        :'batch_type' => :'String',
        :'case_status' => :'String',
        :'case_status_date' => :'Time',
        :'case_status_reason' => :'String',
        :'case_status_user' => :'String',
        :'current_phys_tax_id' => :'String',
        :'default_claim_type' => :'String',
        :'default_date' => :'Time',
        :'default_plan_type' => :'String',
        :'default_plan_type2' => :'String',
        :'default_plan_type3' => :'String',
        :'description' => :'String',
        :'ed_i_key' => :'Integer',
        :'ed_i_location' => :'String',
        :'ed_i_source_file_name' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'member_seq' => :'String',
        :'original_claim_count' => :'Integer',
        :'original_phys_tax_id' => :'String',
        :'overpayment_ex_code' => :'String',
        :'overpayment_total' => :'Float',
        :'process_by_disability_date' => :'Boolean',
        :'reviewed_date' => :'Time',
        :'reviewed_status' => :'String',
        :'reviewed_user' => :'String',
        :'status' => :'String',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_default_date' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'batch_type',
        :'case_status',
        :'case_status_date',
        :'case_status_reason',
        :'case_status_user',
        :'current_phys_tax_id',
        :'default_claim_type',
        :'default_date',
        :'default_plan_type',
        :'default_plan_type2',
        :'default_plan_type3',
        :'description',
        :'ed_i_key',
        :'ed_i_location',
        :'ed_i_source_file_name',
        :'entry_user',
        :'member_seq',
        :'original_claim_count',
        :'original_phys_tax_id',
        :'overpayment_ex_code',
        :'overpayment_total',
        :'reviewed_date',
        :'reviewed_status',
        :'reviewed_user',
        :'status',
        :'subscriber_id',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimBatches` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimBatches`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'batch_type')
        self.batch_type = attributes[:'batch_type']
      end

      if attributes.key?(:'case_status')
        self.case_status = attributes[:'case_status']
      end

      if attributes.key?(:'case_status_date')
        self.case_status_date = attributes[:'case_status_date']
      end

      if attributes.key?(:'case_status_reason')
        self.case_status_reason = attributes[:'case_status_reason']
      end

      if attributes.key?(:'case_status_user')
        self.case_status_user = attributes[:'case_status_user']
      end

      if attributes.key?(:'current_phys_tax_id')
        self.current_phys_tax_id = attributes[:'current_phys_tax_id']
      end

      if attributes.key?(:'default_claim_type')
        self.default_claim_type = attributes[:'default_claim_type']
      end

      if attributes.key?(:'default_date')
        self.default_date = attributes[:'default_date']
      end

      if attributes.key?(:'default_plan_type')
        self.default_plan_type = attributes[:'default_plan_type']
      end

      if attributes.key?(:'default_plan_type2')
        self.default_plan_type2 = attributes[:'default_plan_type2']
      end

      if attributes.key?(:'default_plan_type3')
        self.default_plan_type3 = attributes[:'default_plan_type3']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'ed_i_key')
        self.ed_i_key = attributes[:'ed_i_key']
      end

      if attributes.key?(:'ed_i_location')
        self.ed_i_location = attributes[:'ed_i_location']
      end

      if attributes.key?(:'ed_i_source_file_name')
        self.ed_i_source_file_name = attributes[:'ed_i_source_file_name']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'original_claim_count')
        self.original_claim_count = attributes[:'original_claim_count']
      end

      if attributes.key?(:'original_phys_tax_id')
        self.original_phys_tax_id = attributes[:'original_phys_tax_id']
      end

      if attributes.key?(:'overpayment_ex_code')
        self.overpayment_ex_code = attributes[:'overpayment_ex_code']
      end

      if attributes.key?(:'overpayment_total')
        self.overpayment_total = attributes[:'overpayment_total']
      end

      if attributes.key?(:'process_by_disability_date')
        self.process_by_disability_date = attributes[:'process_by_disability_date']
      else
        self.process_by_disability_date = nil
      end

      if attributes.key?(:'reviewed_date')
        self.reviewed_date = attributes[:'reviewed_date']
      end

      if attributes.key?(:'reviewed_status')
        self.reviewed_status = attributes[:'reviewed_status']
      end

      if attributes.key?(:'reviewed_user')
        self.reviewed_user = attributes[:'reviewed_user']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_default_date')
        self.use_default_date = attributes[:'use_default_date']
      else
        self.use_default_date = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if !@batch_type.nil? && @batch_type.to_s.length > 16
        invalid_properties.push('invalid value for "batch_type", the character length must be smaller than or equal to 16.')
      end

      if !@case_status.nil? && @case_status.to_s.length > 8
        invalid_properties.push('invalid value for "case_status", the character length must be smaller than or equal to 8.')
      end

      if !@case_status_reason.nil? && @case_status_reason.to_s.length > 8
        invalid_properties.push('invalid value for "case_status_reason", the character length must be smaller than or equal to 8.')
      end

      if !@case_status_user.nil? && @case_status_user.to_s.length > 20
        invalid_properties.push('invalid value for "case_status_user", the character length must be smaller than or equal to 20.')
      end

      if !@current_phys_tax_id.nil? && @current_phys_tax_id.to_s.length > 20
        invalid_properties.push('invalid value for "current_phys_tax_id", the character length must be smaller than or equal to 20.')
      end

      if !@default_claim_type.nil? && @default_claim_type.to_s.length > 20
        invalid_properties.push('invalid value for "default_claim_type", the character length must be smaller than or equal to 20.')
      end

      if !@default_plan_type.nil? && @default_plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "default_plan_type", the character length must be smaller than or equal to 6.')
      end

      if !@default_plan_type2.nil? && @default_plan_type2.to_s.length > 6
        invalid_properties.push('invalid value for "default_plan_type2", the character length must be smaller than or equal to 6.')
      end

      if !@default_plan_type3.nil? && @default_plan_type3.to_s.length > 6
        invalid_properties.push('invalid value for "default_plan_type3", the character length must be smaller than or equal to 6.')
      end

      if !@description.nil? && @description.to_s.length > 64
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 64.')
      end

      if !@ed_i_location.nil? && @ed_i_location.to_s.length > 16
        invalid_properties.push('invalid value for "ed_i_location", the character length must be smaller than or equal to 16.')
      end

      if !@ed_i_source_file_name.nil? && @ed_i_source_file_name.to_s.length > 128
        invalid_properties.push('invalid value for "ed_i_source_file_name", the character length must be smaller than or equal to 128.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@original_phys_tax_id.nil? && @original_phys_tax_id.to_s.length > 20
        invalid_properties.push('invalid value for "original_phys_tax_id", the character length must be smaller than or equal to 20.')
      end

      if !@overpayment_ex_code.nil? && @overpayment_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "overpayment_ex_code", the character length must be smaller than or equal to 6.')
      end

      if @process_by_disability_date.nil?
        invalid_properties.push('invalid value for "process_by_disability_date", process_by_disability_date cannot be nil.')
      end

      if !@reviewed_status.nil? && @reviewed_status.to_s.length > 6
        invalid_properties.push('invalid value for "reviewed_status", the character length must be smaller than or equal to 6.')
      end

      if !@reviewed_user.nil? && @reviewed_user.to_s.length > 20
        invalid_properties.push('invalid value for "reviewed_user", the character length must be smaller than or equal to 20.')
      end

      if !@status.nil? && @status.to_s.length > 16
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 16.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_default_date.nil?
        invalid_properties.push('invalid value for "use_default_date", use_default_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @batch_number.nil?
      return false if !@batch_type.nil? && @batch_type.to_s.length > 16
      return false if !@case_status.nil? && @case_status.to_s.length > 8
      return false if !@case_status_reason.nil? && @case_status_reason.to_s.length > 8
      return false if !@case_status_user.nil? && @case_status_user.to_s.length > 20
      return false if !@current_phys_tax_id.nil? && @current_phys_tax_id.to_s.length > 20
      return false if !@default_claim_type.nil? && @default_claim_type.to_s.length > 20
      return false if !@default_plan_type.nil? && @default_plan_type.to_s.length > 6
      return false if !@default_plan_type2.nil? && @default_plan_type2.to_s.length > 6
      return false if !@default_plan_type3.nil? && @default_plan_type3.to_s.length > 6
      return false if !@description.nil? && @description.to_s.length > 64
      return false if !@ed_i_location.nil? && @ed_i_location.to_s.length > 16
      return false if !@ed_i_source_file_name.nil? && @ed_i_source_file_name.to_s.length > 128
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@original_phys_tax_id.nil? && @original_phys_tax_id.to_s.length > 20
      return false if !@overpayment_ex_code.nil? && @overpayment_ex_code.to_s.length > 6
      return false if @process_by_disability_date.nil?
      return false if !@reviewed_status.nil? && @reviewed_status.to_s.length > 6
      return false if !@reviewed_user.nil? && @reviewed_user.to_s.length > 20
      return false if !@status.nil? && @status.to_s.length > 16
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_default_date.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_type Value to be assigned
    def batch_type=(batch_type)
      if !batch_type.nil? && batch_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "batch_type", the character length must be smaller than or equal to 16.'
      end

      @batch_type = batch_type
    end

    # Custom attribute writer method with validation
    # @param [Object] case_status Value to be assigned
    def case_status=(case_status)
      if !case_status.nil? && case_status.to_s.length > 8
        fail ArgumentError, 'invalid value for "case_status", the character length must be smaller than or equal to 8.'
      end

      @case_status = case_status
    end

    # Custom attribute writer method with validation
    # @param [Object] case_status_reason Value to be assigned
    def case_status_reason=(case_status_reason)
      if !case_status_reason.nil? && case_status_reason.to_s.length > 8
        fail ArgumentError, 'invalid value for "case_status_reason", the character length must be smaller than or equal to 8.'
      end

      @case_status_reason = case_status_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] case_status_user Value to be assigned
    def case_status_user=(case_status_user)
      if !case_status_user.nil? && case_status_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "case_status_user", the character length must be smaller than or equal to 20.'
      end

      @case_status_user = case_status_user
    end

    # Custom attribute writer method with validation
    # @param [Object] current_phys_tax_id Value to be assigned
    def current_phys_tax_id=(current_phys_tax_id)
      if !current_phys_tax_id.nil? && current_phys_tax_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "current_phys_tax_id", the character length must be smaller than or equal to 20.'
      end

      @current_phys_tax_id = current_phys_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] default_claim_type Value to be assigned
    def default_claim_type=(default_claim_type)
      if !default_claim_type.nil? && default_claim_type.to_s.length > 20
        fail ArgumentError, 'invalid value for "default_claim_type", the character length must be smaller than or equal to 20.'
      end

      @default_claim_type = default_claim_type
    end

    # Custom attribute writer method with validation
    # @param [Object] default_plan_type Value to be assigned
    def default_plan_type=(default_plan_type)
      if !default_plan_type.nil? && default_plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "default_plan_type", the character length must be smaller than or equal to 6.'
      end

      @default_plan_type = default_plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] default_plan_type2 Value to be assigned
    def default_plan_type2=(default_plan_type2)
      if !default_plan_type2.nil? && default_plan_type2.to_s.length > 6
        fail ArgumentError, 'invalid value for "default_plan_type2", the character length must be smaller than or equal to 6.'
      end

      @default_plan_type2 = default_plan_type2
    end

    # Custom attribute writer method with validation
    # @param [Object] default_plan_type3 Value to be assigned
    def default_plan_type3=(default_plan_type3)
      if !default_plan_type3.nil? && default_plan_type3.to_s.length > 6
        fail ArgumentError, 'invalid value for "default_plan_type3", the character length must be smaller than or equal to 6.'
      end

      @default_plan_type3 = default_plan_type3
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 64
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 64.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] ed_i_location Value to be assigned
    def ed_i_location=(ed_i_location)
      if !ed_i_location.nil? && ed_i_location.to_s.length > 16
        fail ArgumentError, 'invalid value for "ed_i_location", the character length must be smaller than or equal to 16.'
      end

      @ed_i_location = ed_i_location
    end

    # Custom attribute writer method with validation
    # @param [Object] ed_i_source_file_name Value to be assigned
    def ed_i_source_file_name=(ed_i_source_file_name)
      if !ed_i_source_file_name.nil? && ed_i_source_file_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "ed_i_source_file_name", the character length must be smaller than or equal to 128.'
      end

      @ed_i_source_file_name = ed_i_source_file_name
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] original_phys_tax_id Value to be assigned
    def original_phys_tax_id=(original_phys_tax_id)
      if !original_phys_tax_id.nil? && original_phys_tax_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "original_phys_tax_id", the character length must be smaller than or equal to 20.'
      end

      @original_phys_tax_id = original_phys_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] overpayment_ex_code Value to be assigned
    def overpayment_ex_code=(overpayment_ex_code)
      if !overpayment_ex_code.nil? && overpayment_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "overpayment_ex_code", the character length must be smaller than or equal to 6.'
      end

      @overpayment_ex_code = overpayment_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] process_by_disability_date Value to be assigned
    def process_by_disability_date=(process_by_disability_date)
      if process_by_disability_date.nil?
        fail ArgumentError, 'process_by_disability_date cannot be nil'
      end

      @process_by_disability_date = process_by_disability_date
    end

    # Custom attribute writer method with validation
    # @param [Object] reviewed_status Value to be assigned
    def reviewed_status=(reviewed_status)
      if !reviewed_status.nil? && reviewed_status.to_s.length > 6
        fail ArgumentError, 'invalid value for "reviewed_status", the character length must be smaller than or equal to 6.'
      end

      @reviewed_status = reviewed_status
    end

    # Custom attribute writer method with validation
    # @param [Object] reviewed_user Value to be assigned
    def reviewed_user=(reviewed_user)
      if !reviewed_user.nil? && reviewed_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "reviewed_user", the character length must be smaller than or equal to 20.'
      end

      @reviewed_user = reviewed_user
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.length > 16
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 16.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_default_date Value to be assigned
    def use_default_date=(use_default_date)
      if use_default_date.nil?
        fail ArgumentError, 'use_default_date cannot be nil'
      end

      @use_default_date = use_default_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_number == o.batch_number &&
          batch_type == o.batch_type &&
          case_status == o.case_status &&
          case_status_date == o.case_status_date &&
          case_status_reason == o.case_status_reason &&
          case_status_user == o.case_status_user &&
          current_phys_tax_id == o.current_phys_tax_id &&
          default_claim_type == o.default_claim_type &&
          default_date == o.default_date &&
          default_plan_type == o.default_plan_type &&
          default_plan_type2 == o.default_plan_type2 &&
          default_plan_type3 == o.default_plan_type3 &&
          description == o.description &&
          ed_i_key == o.ed_i_key &&
          ed_i_location == o.ed_i_location &&
          ed_i_source_file_name == o.ed_i_source_file_name &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          member_seq == o.member_seq &&
          original_claim_count == o.original_claim_count &&
          original_phys_tax_id == o.original_phys_tax_id &&
          overpayment_ex_code == o.overpayment_ex_code &&
          overpayment_total == o.overpayment_total &&
          process_by_disability_date == o.process_by_disability_date &&
          reviewed_date == o.reviewed_date &&
          reviewed_status == o.reviewed_status &&
          reviewed_user == o.reviewed_user &&
          status == o.status &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_default_date == o.use_default_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_number, batch_type, case_status, case_status_date, case_status_reason, case_status_user, current_phys_tax_id, default_claim_type, default_date, default_plan_type, default_plan_type2, default_plan_type3, description, ed_i_key, ed_i_location, ed_i_source_file_name, entry_date, entry_user, member_seq, original_claim_count, original_phys_tax_id, overpayment_ex_code, overpayment_total, process_by_disability_date, reviewed_date, reviewed_status, reviewed_user, status, subscriber_id, update_date, update_user, use_default_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
