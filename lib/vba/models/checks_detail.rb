=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ChecksDetail
    # ID of the check. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :check_id

    # Sequential identifier of the check item. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :item_seq

    # Adjustment amount for the check line.
    attr_accessor :adjustment

    # Admin fee associated with the check line.
    attr_accessor :admin_amt

    # Total amount due for the check.
    attr_accessor :amount_due

    # Number of the claim associated with the check line.
    attr_accessor :claim_number

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Interest amount associated with the check line.
    attr_accessor :interest

    # Date when the check line item was received.
    attr_accessor :item_date

    # Description of the item associated with the check line.
    attr_accessor :item_description

    # Identifies the type of item associated with the check line.
    attr_accessor :item_type

    # The message on the check.
    attr_accessor :message

    # Indicates tha the check has been processed.
    attr_accessor :processed

    # ID of the Provider associated with the check line.
    attr_accessor :provider_id

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'check_id' => :'check_ID',
        :'item_seq' => :'item_Seq',
        :'adjustment' => :'adjustment',
        :'admin_amt' => :'admin_Amt',
        :'amount_due' => :'amount_Due',
        :'claim_number' => :'claim_Number',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'interest' => :'interest',
        :'item_date' => :'item_Date',
        :'item_description' => :'item_Description',
        :'item_type' => :'item_Type',
        :'message' => :'message',
        :'processed' => :'processed',
        :'provider_id' => :'provider_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'check_id' => :'Integer',
        :'item_seq' => :'Integer',
        :'adjustment' => :'Float',
        :'admin_amt' => :'Float',
        :'amount_due' => :'Float',
        :'claim_number' => :'Integer',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'interest' => :'Float',
        :'item_date' => :'Time',
        :'item_description' => :'String',
        :'item_type' => :'String',
        :'message' => :'String',
        :'processed' => :'String',
        :'provider_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adjustment',
        :'admin_amt',
        :'amount_due',
        :'claim_number',
        :'entry_user',
        :'interest',
        :'item_date',
        :'item_description',
        :'item_type',
        :'message',
        :'processed',
        :'provider_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ChecksDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ChecksDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'check_id')
        self.check_id = attributes[:'check_id']
      else
        self.check_id = nil
      end

      if attributes.key?(:'item_seq')
        self.item_seq = attributes[:'item_seq']
      else
        self.item_seq = nil
      end

      if attributes.key?(:'adjustment')
        self.adjustment = attributes[:'adjustment']
      end

      if attributes.key?(:'admin_amt')
        self.admin_amt = attributes[:'admin_amt']
      end

      if attributes.key?(:'amount_due')
        self.amount_due = attributes[:'amount_due']
      end

      if attributes.key?(:'claim_number')
        self.claim_number = attributes[:'claim_number']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      end

      if attributes.key?(:'item_date')
        self.item_date = attributes[:'item_date']
      end

      if attributes.key?(:'item_description')
        self.item_description = attributes[:'item_description']
      end

      if attributes.key?(:'item_type')
        self.item_type = attributes[:'item_type']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'processed')
        self.processed = attributes[:'processed']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @check_id.nil?
        invalid_properties.push('invalid value for "check_id", check_id cannot be nil.')
      end

      if @item_seq.nil?
        invalid_properties.push('invalid value for "item_seq", item_seq cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@item_description.nil? && @item_description.to_s.length > 45
        invalid_properties.push('invalid value for "item_description", the character length must be smaller than or equal to 45.')
      end

      if !@item_type.nil? && @item_type.to_s.length > 3
        invalid_properties.push('invalid value for "item_type", the character length must be smaller than or equal to 3.')
      end

      if !@message.nil? && @message.to_s.length > 50
        invalid_properties.push('invalid value for "message", the character length must be smaller than or equal to 50.')
      end

      if !@processed.nil? && @processed.to_s.length > 1
        invalid_properties.push('invalid value for "processed", the character length must be smaller than or equal to 1.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @check_id.nil?
      return false if @item_seq.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@item_description.nil? && @item_description.to_s.length > 45
      return false if !@item_type.nil? && @item_type.to_s.length > 3
      return false if !@message.nil? && @message.to_s.length > 50
      return false if !@processed.nil? && @processed.to_s.length > 1
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] check_id Value to be assigned
    def check_id=(check_id)
      if check_id.nil?
        fail ArgumentError, 'check_id cannot be nil'
      end

      @check_id = check_id
    end

    # Custom attribute writer method with validation
    # @param [Object] item_seq Value to be assigned
    def item_seq=(item_seq)
      if item_seq.nil?
        fail ArgumentError, 'item_seq cannot be nil'
      end

      @item_seq = item_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] item_description Value to be assigned
    def item_description=(item_description)
      if !item_description.nil? && item_description.to_s.length > 45
        fail ArgumentError, 'invalid value for "item_description", the character length must be smaller than or equal to 45.'
      end

      @item_description = item_description
    end

    # Custom attribute writer method with validation
    # @param [Object] item_type Value to be assigned
    def item_type=(item_type)
      if !item_type.nil? && item_type.to_s.length > 3
        fail ArgumentError, 'invalid value for "item_type", the character length must be smaller than or equal to 3.'
      end

      @item_type = item_type
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)
      if !message.nil? && message.to_s.length > 50
        fail ArgumentError, 'invalid value for "message", the character length must be smaller than or equal to 50.'
      end

      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] processed Value to be assigned
    def processed=(processed)
      if !processed.nil? && processed.to_s.length > 1
        fail ArgumentError, 'invalid value for "processed", the character length must be smaller than or equal to 1.'
      end

      @processed = processed
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          check_id == o.check_id &&
          item_seq == o.item_seq &&
          adjustment == o.adjustment &&
          admin_amt == o.admin_amt &&
          amount_due == o.amount_due &&
          claim_number == o.claim_number &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          interest == o.interest &&
          item_date == o.item_date &&
          item_description == o.item_description &&
          item_type == o.item_type &&
          message == o.message &&
          processed == o.processed &&
          provider_id == o.provider_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [check_id, item_seq, adjustment, admin_amt, amount_due, claim_number, entry_date, entry_user, interest, item_date, item_description, item_type, message, processed, provider_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
