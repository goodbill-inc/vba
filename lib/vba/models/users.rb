=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class Users
    # User ID of the selected User.
    attr_accessor :user_id

    # This option will lock the account out of the application. To unlock the account, uncheck the box. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :account_locked

    # Address of the selected User.
    attr_accessor :address

    # Address line 2 of the selected User.
    attr_accessor :address2

    # Grants the User administrative rights. No security area needs to be assigned. This User will have full rights to every aspect of the application. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :administrator

    # This option enables logging based on the definitions provided within ‘User Log Message’. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :audit_user

    # If this option is selected, the User can override the ‘Allowed’ amount on the ‘Claim’ screen. This option applies to Users who are not flagged as an Administrator but have ‘View Access’ to the ‘Claim’ screen.
    attr_accessor :can_set_allowed

    # If this option is selected, the User can override the ‘Co-Ins’ amount on the ‘Claim’ screen. This option applies to Users who are not flagged as an Administrator but have ‘View Access’ to the ‘Claim’ screen.
    attr_accessor :can_set_co_ins

    # If this option is selected, the User can override the ‘Not Covered’ amount on the ‘Claim’ screen. This option applies to Users who are not flagged as an Administrator but have ‘View Access’ to the ‘Claim’ screen.
    attr_accessor :can_set_not_covered

    # City of the selected User's address.
    attr_accessor :city

    # When an adjudicated claim’s ‘Payable Amount’ exceeds this number, the ‘User Claim Max Exceeded’ Ex Code will be applied to the claim.
    attr_accessor :claim_maximum

    # ID of the country of the User's address.
    attr_accessor :country_id

    # Email address of the User.
    attr_accessor :e_mail_address

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Fax number of the User.
    attr_accessor :fax

    # Country code of the User's fax number.
    attr_accessor :fax_country_code

    # Identifies the number of login attempts that are allowed before the User's account is locked.
    attr_accessor :grace_logins

    # Home phone number of the User.
    attr_accessor :home_phone

    # Country code of the User's home phone number.
    attr_accessor :home_phone_country_code

    # This option is informational only but can be used with a custom report. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :i_d_card_notification

    # Notes that this user is utilizing SSO to authenticate and login. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :is_sso_user

    # Identifies the machine on which the User is logged in.
    attr_accessor :login_machine

    # No Longer In Use
    attr_accessor :login_sound

    # Identifies the login status of the associated User.
    attr_accessor :login_status

    # The device name for the authenticator being utilzied by this user.
    attr_accessor :mf_a_device_name

    # Identifies that this user has enabled MFA (Multi-Factor Authentication) and a code is required to login. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :mf_a_enabled

    # Name of the selected User.
    attr_accessor :name

    # Identifies the color that will be used for navigation fields.
    attr_accessor :nav_id_color

    # The nav. (navigation) fields are related to the functionality within VBA that allows a User to use hyperlinks to move between screens/service areas. The fields will appear blank on the ‘User System Options’ area, but the system is setup with the default functionality that is recommended by VBA.
    attr_accessor :nav_id_type

    # When the box is checked, the field hyperlinks within VBA will appear underlined. When the box is unchecked, the hyperlinks will still function but will not be underlined. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :nav_id_underline

    # Password of the selected User. Password requirements are set within the 'Application Settings' found from 'System Services' > 'VBA Control Panel'.
    attr_accessor :password

    # Date when the User's password will expire.
    attr_accessor :password_expiration

    # Phone number of the User.
    attr_accessor :phone

    # Country code of the User's phone number.
    attr_accessor :phone_country_code

    # The SSO user name to be used during the Single Sign-On process.
    attr_accessor :ss_o_user_name

    # This option indicates that only one application can be opened using this login ID. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :single_use_account

    # State of the selected User's address.
    attr_accessor :state

    # Title of the selected User.
    attr_accessor :title

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Whether or not to use Windows Authentication to login Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_windows_authentication

    # Identifies the idle time, in seconds, before the application closes.
    attr_accessor :user_idle

    # Identifies the type associated with the User.
    attr_accessor :user_type

    # This flag indicates that this user can change other VBA_User's passwords. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :vb_a_password_reset

    # Identifies that the User is a VBA User. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :vb_a_user

    # Zip code of the selected User's address.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'user_ID',
        :'account_locked' => :'account_Locked',
        :'address' => :'address',
        :'address2' => :'address2',
        :'administrator' => :'administrator',
        :'audit_user' => :'audit_User',
        :'can_set_allowed' => :'can_Set_Allowed',
        :'can_set_co_ins' => :'can_Set_Co_Ins',
        :'can_set_not_covered' => :'can_Set_Not_Covered',
        :'city' => :'city',
        :'claim_maximum' => :'claim_Maximum',
        :'country_id' => :'country_ID',
        :'e_mail_address' => :'eMail_Address',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'fax' => :'fax',
        :'fax_country_code' => :'fax_Country_Code',
        :'grace_logins' => :'grace_Logins',
        :'home_phone' => :'home_Phone',
        :'home_phone_country_code' => :'home_Phone_Country_Code',
        :'i_d_card_notification' => :'iD_Card_Notification',
        :'is_sso_user' => :'is_SSO_User',
        :'login_machine' => :'login_Machine',
        :'login_sound' => :'login_Sound',
        :'login_status' => :'login_Status',
        :'mf_a_device_name' => :'mfA_Device_Name',
        :'mf_a_enabled' => :'mfA_Enabled',
        :'name' => :'name',
        :'nav_id_color' => :'nav_ID_Color',
        :'nav_id_type' => :'nav_ID_Type',
        :'nav_id_underline' => :'nav_ID_Underline',
        :'password' => :'password',
        :'password_expiration' => :'password_Expiration',
        :'phone' => :'phone',
        :'phone_country_code' => :'phone_Country_Code',
        :'ss_o_user_name' => :'ssO_User_Name',
        :'single_use_account' => :'single_Use_Account',
        :'state' => :'state',
        :'title' => :'title',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_windows_authentication' => :'use_Windows_Authentication',
        :'user_idle' => :'user_Idle',
        :'user_type' => :'user_Type',
        :'vb_a_password_reset' => :'vbA_Password_Reset',
        :'vb_a_user' => :'vbA_User',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'String',
        :'account_locked' => :'Boolean',
        :'address' => :'String',
        :'address2' => :'String',
        :'administrator' => :'Boolean',
        :'audit_user' => :'Boolean',
        :'can_set_allowed' => :'String',
        :'can_set_co_ins' => :'String',
        :'can_set_not_covered' => :'String',
        :'city' => :'String',
        :'claim_maximum' => :'Float',
        :'country_id' => :'String',
        :'e_mail_address' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'fax' => :'String',
        :'fax_country_code' => :'String',
        :'grace_logins' => :'Integer',
        :'home_phone' => :'String',
        :'home_phone_country_code' => :'String',
        :'i_d_card_notification' => :'Boolean',
        :'is_sso_user' => :'Boolean',
        :'login_machine' => :'String',
        :'login_sound' => :'String',
        :'login_status' => :'Integer',
        :'mf_a_device_name' => :'String',
        :'mf_a_enabled' => :'Boolean',
        :'name' => :'String',
        :'nav_id_color' => :'Integer',
        :'nav_id_type' => :'String',
        :'nav_id_underline' => :'Boolean',
        :'password' => :'String',
        :'password_expiration' => :'Time',
        :'phone' => :'String',
        :'phone_country_code' => :'String',
        :'ss_o_user_name' => :'String',
        :'single_use_account' => :'Boolean',
        :'state' => :'String',
        :'title' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_windows_authentication' => :'Boolean',
        :'user_idle' => :'Integer',
        :'user_type' => :'String',
        :'vb_a_password_reset' => :'Boolean',
        :'vb_a_user' => :'Boolean',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address',
        :'address2',
        :'can_set_allowed',
        :'can_set_co_ins',
        :'can_set_not_covered',
        :'city',
        :'claim_maximum',
        :'country_id',
        :'entry_user',
        :'fax',
        :'fax_country_code',
        :'grace_logins',
        :'home_phone',
        :'home_phone_country_code',
        :'login_machine',
        :'login_sound',
        :'login_status',
        :'mf_a_device_name',
        :'name',
        :'nav_id_color',
        :'nav_id_type',
        :'password',
        :'password_expiration',
        :'phone',
        :'phone_country_code',
        :'ss_o_user_name',
        :'state',
        :'title',
        :'update_user',
        :'user_idle',
        :'user_type',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::Users` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::Users`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      else
        self.user_id = nil
      end

      if attributes.key?(:'account_locked')
        self.account_locked = attributes[:'account_locked']
      else
        self.account_locked = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'administrator')
        self.administrator = attributes[:'administrator']
      else
        self.administrator = nil
      end

      if attributes.key?(:'audit_user')
        self.audit_user = attributes[:'audit_user']
      else
        self.audit_user = nil
      end

      if attributes.key?(:'can_set_allowed')
        self.can_set_allowed = attributes[:'can_set_allowed']
      end

      if attributes.key?(:'can_set_co_ins')
        self.can_set_co_ins = attributes[:'can_set_co_ins']
      end

      if attributes.key?(:'can_set_not_covered')
        self.can_set_not_covered = attributes[:'can_set_not_covered']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'claim_maximum')
        self.claim_maximum = attributes[:'claim_maximum']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'e_mail_address')
        self.e_mail_address = attributes[:'e_mail_address']
      else
        self.e_mail_address = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'fax_country_code')
        self.fax_country_code = attributes[:'fax_country_code']
      end

      if attributes.key?(:'grace_logins')
        self.grace_logins = attributes[:'grace_logins']
      end

      if attributes.key?(:'home_phone')
        self.home_phone = attributes[:'home_phone']
      end

      if attributes.key?(:'home_phone_country_code')
        self.home_phone_country_code = attributes[:'home_phone_country_code']
      end

      if attributes.key?(:'i_d_card_notification')
        self.i_d_card_notification = attributes[:'i_d_card_notification']
      else
        self.i_d_card_notification = nil
      end

      if attributes.key?(:'is_sso_user')
        self.is_sso_user = attributes[:'is_sso_user']
      else
        self.is_sso_user = nil
      end

      if attributes.key?(:'login_machine')
        self.login_machine = attributes[:'login_machine']
      end

      if attributes.key?(:'login_sound')
        self.login_sound = attributes[:'login_sound']
      end

      if attributes.key?(:'login_status')
        self.login_status = attributes[:'login_status']
      end

      if attributes.key?(:'mf_a_device_name')
        self.mf_a_device_name = attributes[:'mf_a_device_name']
      end

      if attributes.key?(:'mf_a_enabled')
        self.mf_a_enabled = attributes[:'mf_a_enabled']
      else
        self.mf_a_enabled = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'nav_id_color')
        self.nav_id_color = attributes[:'nav_id_color']
      end

      if attributes.key?(:'nav_id_type')
        self.nav_id_type = attributes[:'nav_id_type']
      end

      if attributes.key?(:'nav_id_underline')
        self.nav_id_underline = attributes[:'nav_id_underline']
      else
        self.nav_id_underline = nil
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'password_expiration')
        self.password_expiration = attributes[:'password_expiration']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'ss_o_user_name')
        self.ss_o_user_name = attributes[:'ss_o_user_name']
      end

      if attributes.key?(:'single_use_account')
        self.single_use_account = attributes[:'single_use_account']
      else
        self.single_use_account = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_windows_authentication')
        self.use_windows_authentication = attributes[:'use_windows_authentication']
      else
        self.use_windows_authentication = nil
      end

      if attributes.key?(:'user_idle')
        self.user_idle = attributes[:'user_idle']
      end

      if attributes.key?(:'user_type')
        self.user_type = attributes[:'user_type']
      end

      if attributes.key?(:'vb_a_password_reset')
        self.vb_a_password_reset = attributes[:'vb_a_password_reset']
      else
        self.vb_a_password_reset = nil
      end

      if attributes.key?(:'vb_a_user')
        self.vb_a_user = attributes[:'vb_a_user']
      else
        self.vb_a_user = nil
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @user_id.to_s.length > 16
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 16.')
      end

      if @user_id.to_s.length < 1
        invalid_properties.push('invalid value for "user_id", the character length must be great than or equal to 1.')
      end

      if @account_locked.nil?
        invalid_properties.push('invalid value for "account_locked", account_locked cannot be nil.')
      end

      if !@address.nil? && @address.to_s.length > 255
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 255.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if @administrator.nil?
        invalid_properties.push('invalid value for "administrator", administrator cannot be nil.')
      end

      if @audit_user.nil?
        invalid_properties.push('invalid value for "audit_user", audit_user cannot be nil.')
      end

      if !@can_set_allowed.nil? && @can_set_allowed.to_s.length > 1
        invalid_properties.push('invalid value for "can_set_allowed", the character length must be smaller than or equal to 1.')
      end

      if !@can_set_co_ins.nil? && @can_set_co_ins.to_s.length > 1
        invalid_properties.push('invalid value for "can_set_co_ins", the character length must be smaller than or equal to 1.')
      end

      if !@can_set_not_covered.nil? && @can_set_not_covered.to_s.length > 1
        invalid_properties.push('invalid value for "can_set_not_covered", the character length must be smaller than or equal to 1.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if @e_mail_address.nil?
        invalid_properties.push('invalid value for "e_mail_address", e_mail_address cannot be nil.')
      end

      if @e_mail_address.to_s.length > 128
        invalid_properties.push('invalid value for "e_mail_address", the character length must be smaller than or equal to 128.')
      end

      if @e_mail_address.to_s.length < 1
        invalid_properties.push('invalid value for "e_mail_address", the character length must be great than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@fax.nil? && @fax.to_s.length > 20
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 20.')
      end

      if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@home_phone.nil? && @home_phone.to_s.length > 32
        invalid_properties.push('invalid value for "home_phone", the character length must be smaller than or equal to 32.')
      end

      if !@home_phone_country_code.nil? && @home_phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "home_phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if @i_d_card_notification.nil?
        invalid_properties.push('invalid value for "i_d_card_notification", i_d_card_notification cannot be nil.')
      end

      if @is_sso_user.nil?
        invalid_properties.push('invalid value for "is_sso_user", is_sso_user cannot be nil.')
      end

      if !@login_machine.nil? && @login_machine.to_s.length > 128
        invalid_properties.push('invalid value for "login_machine", the character length must be smaller than or equal to 128.')
      end

      if !@login_sound.nil? && @login_sound.to_s.length > 128
        invalid_properties.push('invalid value for "login_sound", the character length must be smaller than or equal to 128.')
      end

      if !@mf_a_device_name.nil? && @mf_a_device_name.to_s.length > 256
        invalid_properties.push('invalid value for "mf_a_device_name", the character length must be smaller than or equal to 256.')
      end

      if @mf_a_enabled.nil?
        invalid_properties.push('invalid value for "mf_a_enabled", mf_a_enabled cannot be nil.')
      end

      if !@name.nil? && @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      if !@nav_id_type.nil? && @nav_id_type.to_s.length > 2
        invalid_properties.push('invalid value for "nav_id_type", the character length must be smaller than or equal to 2.')
      end

      if @nav_id_underline.nil?
        invalid_properties.push('invalid value for "nav_id_underline", nav_id_underline cannot be nil.')
      end

      if !@password.nil? && @password.to_s.length > 32
        invalid_properties.push('invalid value for "password", the character length must be smaller than or equal to 32.')
      end

      if !@phone.nil? && @phone.to_s.length > 20
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 20.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@ss_o_user_name.nil? && @ss_o_user_name.to_s.length > 256
        invalid_properties.push('invalid value for "ss_o_user_name", the character length must be smaller than or equal to 256.')
      end

      if @single_use_account.nil?
        invalid_properties.push('invalid value for "single_use_account", single_use_account cannot be nil.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@title.nil? && @title.to_s.length > 128
        invalid_properties.push('invalid value for "title", the character length must be smaller than or equal to 128.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_windows_authentication.nil?
        invalid_properties.push('invalid value for "use_windows_authentication", use_windows_authentication cannot be nil.')
      end

      if !@user_type.nil? && @user_type.to_s.length > 16
        invalid_properties.push('invalid value for "user_type", the character length must be smaller than or equal to 16.')
      end

      if @vb_a_password_reset.nil?
        invalid_properties.push('invalid value for "vb_a_password_reset", vb_a_password_reset cannot be nil.')
      end

      if @vb_a_user.nil?
        invalid_properties.push('invalid value for "vb_a_user", vb_a_user cannot be nil.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @user_id.nil?
      return false if @user_id.to_s.length > 16
      return false if @user_id.to_s.length < 1
      return false if @account_locked.nil?
      return false if !@address.nil? && @address.to_s.length > 255
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if @administrator.nil?
      return false if @audit_user.nil?
      return false if !@can_set_allowed.nil? && @can_set_allowed.to_s.length > 1
      return false if !@can_set_co_ins.nil? && @can_set_co_ins.to_s.length > 1
      return false if !@can_set_not_covered.nil? && @can_set_not_covered.to_s.length > 1
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if @e_mail_address.nil?
      return false if @e_mail_address.to_s.length > 128
      return false if @e_mail_address.to_s.length < 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@fax.nil? && @fax.to_s.length > 20
      return false if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
      return false if !@home_phone.nil? && @home_phone.to_s.length > 32
      return false if !@home_phone_country_code.nil? && @home_phone_country_code.to_s.length > 8
      return false if @i_d_card_notification.nil?
      return false if @is_sso_user.nil?
      return false if !@login_machine.nil? && @login_machine.to_s.length > 128
      return false if !@login_sound.nil? && @login_sound.to_s.length > 128
      return false if !@mf_a_device_name.nil? && @mf_a_device_name.to_s.length > 256
      return false if @mf_a_enabled.nil?
      return false if !@name.nil? && @name.to_s.length > 64
      return false if !@nav_id_type.nil? && @nav_id_type.to_s.length > 2
      return false if @nav_id_underline.nil?
      return false if !@password.nil? && @password.to_s.length > 32
      return false if !@phone.nil? && @phone.to_s.length > 20
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if !@ss_o_user_name.nil? && @ss_o_user_name.to_s.length > 256
      return false if @single_use_account.nil?
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@title.nil? && @title.to_s.length > 128
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_windows_authentication.nil?
      return false if !@user_type.nil? && @user_type.to_s.length > 16
      return false if @vb_a_password_reset.nil?
      return false if @vb_a_user.nil?
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if user_id.nil?
        fail ArgumentError, 'user_id cannot be nil'
      end

      if user_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 16.'
      end

      if user_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_id", the character length must be great than or equal to 1.'
      end

      @user_id = user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] account_locked Value to be assigned
    def account_locked=(account_locked)
      if account_locked.nil?
        fail ArgumentError, 'account_locked cannot be nil'
      end

      @account_locked = account_locked
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 255
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 255.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] administrator Value to be assigned
    def administrator=(administrator)
      if administrator.nil?
        fail ArgumentError, 'administrator cannot be nil'
      end

      @administrator = administrator
    end

    # Custom attribute writer method with validation
    # @param [Object] audit_user Value to be assigned
    def audit_user=(audit_user)
      if audit_user.nil?
        fail ArgumentError, 'audit_user cannot be nil'
      end

      @audit_user = audit_user
    end

    # Custom attribute writer method with validation
    # @param [Object] can_set_allowed Value to be assigned
    def can_set_allowed=(can_set_allowed)
      if !can_set_allowed.nil? && can_set_allowed.to_s.length > 1
        fail ArgumentError, 'invalid value for "can_set_allowed", the character length must be smaller than or equal to 1.'
      end

      @can_set_allowed = can_set_allowed
    end

    # Custom attribute writer method with validation
    # @param [Object] can_set_co_ins Value to be assigned
    def can_set_co_ins=(can_set_co_ins)
      if !can_set_co_ins.nil? && can_set_co_ins.to_s.length > 1
        fail ArgumentError, 'invalid value for "can_set_co_ins", the character length must be smaller than or equal to 1.'
      end

      @can_set_co_ins = can_set_co_ins
    end

    # Custom attribute writer method with validation
    # @param [Object] can_set_not_covered Value to be assigned
    def can_set_not_covered=(can_set_not_covered)
      if !can_set_not_covered.nil? && can_set_not_covered.to_s.length > 1
        fail ArgumentError, 'invalid value for "can_set_not_covered", the character length must be smaller than or equal to 1.'
      end

      @can_set_not_covered = can_set_not_covered
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] e_mail_address Value to be assigned
    def e_mail_address=(e_mail_address)
      if e_mail_address.nil?
        fail ArgumentError, 'e_mail_address cannot be nil'
      end

      if e_mail_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "e_mail_address", the character length must be smaller than or equal to 128.'
      end

      if e_mail_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "e_mail_address", the character length must be great than or equal to 1.'
      end

      @e_mail_address = e_mail_address
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 20.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_country_code Value to be assigned
    def fax_country_code=(fax_country_code)
      if !fax_country_code.nil? && fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @fax_country_code = fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone Value to be assigned
    def home_phone=(home_phone)
      if !home_phone.nil? && home_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "home_phone", the character length must be smaller than or equal to 32.'
      end

      @home_phone = home_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] home_phone_country_code Value to be assigned
    def home_phone_country_code=(home_phone_country_code)
      if !home_phone_country_code.nil? && home_phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "home_phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @home_phone_country_code = home_phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] i_d_card_notification Value to be assigned
    def i_d_card_notification=(i_d_card_notification)
      if i_d_card_notification.nil?
        fail ArgumentError, 'i_d_card_notification cannot be nil'
      end

      @i_d_card_notification = i_d_card_notification
    end

    # Custom attribute writer method with validation
    # @param [Object] is_sso_user Value to be assigned
    def is_sso_user=(is_sso_user)
      if is_sso_user.nil?
        fail ArgumentError, 'is_sso_user cannot be nil'
      end

      @is_sso_user = is_sso_user
    end

    # Custom attribute writer method with validation
    # @param [Object] login_machine Value to be assigned
    def login_machine=(login_machine)
      if !login_machine.nil? && login_machine.to_s.length > 128
        fail ArgumentError, 'invalid value for "login_machine", the character length must be smaller than or equal to 128.'
      end

      @login_machine = login_machine
    end

    # Custom attribute writer method with validation
    # @param [Object] login_sound Value to be assigned
    def login_sound=(login_sound)
      if !login_sound.nil? && login_sound.to_s.length > 128
        fail ArgumentError, 'invalid value for "login_sound", the character length must be smaller than or equal to 128.'
      end

      @login_sound = login_sound
    end

    # Custom attribute writer method with validation
    # @param [Object] mf_a_device_name Value to be assigned
    def mf_a_device_name=(mf_a_device_name)
      if !mf_a_device_name.nil? && mf_a_device_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "mf_a_device_name", the character length must be smaller than or equal to 256.'
      end

      @mf_a_device_name = mf_a_device_name
    end

    # Custom attribute writer method with validation
    # @param [Object] mf_a_enabled Value to be assigned
    def mf_a_enabled=(mf_a_enabled)
      if mf_a_enabled.nil?
        fail ArgumentError, 'mf_a_enabled cannot be nil'
      end

      @mf_a_enabled = mf_a_enabled
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] nav_id_type Value to be assigned
    def nav_id_type=(nav_id_type)
      if !nav_id_type.nil? && nav_id_type.to_s.length > 2
        fail ArgumentError, 'invalid value for "nav_id_type", the character length must be smaller than or equal to 2.'
      end

      @nav_id_type = nav_id_type
    end

    # Custom attribute writer method with validation
    # @param [Object] nav_id_underline Value to be assigned
    def nav_id_underline=(nav_id_underline)
      if nav_id_underline.nil?
        fail ArgumentError, 'nav_id_underline cannot be nil'
      end

      @nav_id_underline = nav_id_underline
    end

    # Custom attribute writer method with validation
    # @param [Object] password Value to be assigned
    def password=(password)
      if !password.nil? && password.to_s.length > 32
        fail ArgumentError, 'invalid value for "password", the character length must be smaller than or equal to 32.'
      end

      @password = password
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 20.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] ss_o_user_name Value to be assigned
    def ss_o_user_name=(ss_o_user_name)
      if !ss_o_user_name.nil? && ss_o_user_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "ss_o_user_name", the character length must be smaller than or equal to 256.'
      end

      @ss_o_user_name = ss_o_user_name
    end

    # Custom attribute writer method with validation
    # @param [Object] single_use_account Value to be assigned
    def single_use_account=(single_use_account)
      if single_use_account.nil?
        fail ArgumentError, 'single_use_account cannot be nil'
      end

      @single_use_account = single_use_account
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if !title.nil? && title.to_s.length > 128
        fail ArgumentError, 'invalid value for "title", the character length must be smaller than or equal to 128.'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_windows_authentication Value to be assigned
    def use_windows_authentication=(use_windows_authentication)
      if use_windows_authentication.nil?
        fail ArgumentError, 'use_windows_authentication cannot be nil'
      end

      @use_windows_authentication = use_windows_authentication
    end

    # Custom attribute writer method with validation
    # @param [Object] user_type Value to be assigned
    def user_type=(user_type)
      if !user_type.nil? && user_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "user_type", the character length must be smaller than or equal to 16.'
      end

      @user_type = user_type
    end

    # Custom attribute writer method with validation
    # @param [Object] vb_a_password_reset Value to be assigned
    def vb_a_password_reset=(vb_a_password_reset)
      if vb_a_password_reset.nil?
        fail ArgumentError, 'vb_a_password_reset cannot be nil'
      end

      @vb_a_password_reset = vb_a_password_reset
    end

    # Custom attribute writer method with validation
    # @param [Object] vb_a_user Value to be assigned
    def vb_a_user=(vb_a_user)
      if vb_a_user.nil?
        fail ArgumentError, 'vb_a_user cannot be nil'
      end

      @vb_a_user = vb_a_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          account_locked == o.account_locked &&
          address == o.address &&
          address2 == o.address2 &&
          administrator == o.administrator &&
          audit_user == o.audit_user &&
          can_set_allowed == o.can_set_allowed &&
          can_set_co_ins == o.can_set_co_ins &&
          can_set_not_covered == o.can_set_not_covered &&
          city == o.city &&
          claim_maximum == o.claim_maximum &&
          country_id == o.country_id &&
          e_mail_address == o.e_mail_address &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          fax == o.fax &&
          fax_country_code == o.fax_country_code &&
          grace_logins == o.grace_logins &&
          home_phone == o.home_phone &&
          home_phone_country_code == o.home_phone_country_code &&
          i_d_card_notification == o.i_d_card_notification &&
          is_sso_user == o.is_sso_user &&
          login_machine == o.login_machine &&
          login_sound == o.login_sound &&
          login_status == o.login_status &&
          mf_a_device_name == o.mf_a_device_name &&
          mf_a_enabled == o.mf_a_enabled &&
          name == o.name &&
          nav_id_color == o.nav_id_color &&
          nav_id_type == o.nav_id_type &&
          nav_id_underline == o.nav_id_underline &&
          password == o.password &&
          password_expiration == o.password_expiration &&
          phone == o.phone &&
          phone_country_code == o.phone_country_code &&
          ss_o_user_name == o.ss_o_user_name &&
          single_use_account == o.single_use_account &&
          state == o.state &&
          title == o.title &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_windows_authentication == o.use_windows_authentication &&
          user_idle == o.user_idle &&
          user_type == o.user_type &&
          vb_a_password_reset == o.vb_a_password_reset &&
          vb_a_user == o.vb_a_user &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, account_locked, address, address2, administrator, audit_user, can_set_allowed, can_set_co_ins, can_set_not_covered, city, claim_maximum, country_id, e_mail_address, entry_date, entry_user, fax, fax_country_code, grace_logins, home_phone, home_phone_country_code, i_d_card_notification, is_sso_user, login_machine, login_sound, login_status, mf_a_device_name, mf_a_enabled, name, nav_id_color, nav_id_type, nav_id_underline, password, password_expiration, phone, phone_country_code, ss_o_user_name, single_use_account, state, title, update_date, update_user, use_windows_authentication, user_idle, user_type, vb_a_password_reset, vb_a_user, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
