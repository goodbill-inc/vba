=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CriteriaDetail
    # Unique identifier of the Criteria for which this Criteria Details object belongs.    When creating a new Critiera object, omit this from the payload.
    attr_accessor :criteria_key

    # The sequential order that the criteria details will be applied.   If you have multiple criteria details to add, this is important as it dictates the order in which they are applied and constructed (eg, if you have parenthesis or concatenate with AND's / OR's).
    attr_accessor :criteria_seq

    # Specifies the AND/OR when multiple conditions are specified for a criteria.  If making a complex query, use this to concatenate multiple criteria.  For example, use the value \"Or\" if you want to match either this criteria or the next criteria.  If not needed, use null or omit.
    attr_accessor :criteria_and_or

    # Column containing the value for the criteria condition specified,  The column within the Criteria_Table for whcih this criteria will be applied.
    attr_accessor :criteria_column

    # Data type of the value for the criteria condition specified  The data type of the column value MUST be populated and MUST be one of the following values: string, date, or number
    attr_accessor :criteria_data_type

    # First value of a range or only value for a single value of the criteria condition specified  The value to use against the Criteria_Operator when comparing values (eg, >, >=, etc).  If a Criteria_Operator requires two values (eg, for BETWEEN) then this is the beginning value. If not needed, use null or omit.
    attr_accessor :criteria_from_value

    # Optional field used to hold a parenthesis for nesting criteria conditions  Allows you to start a parenthetical expression.  Add \"(\" to start the parenthesis grouping.  If not needed, use null or omit. An example of a criteria using parenthesis would be (x=1 OR x=2) OR (y=1 OR y=2).
    attr_accessor :criteria_left_paren

    attr_accessor :criteria_operator

    # Optional field used to hold a parenthesis for nesting criteria conditions  Allows you to end a parenthetical expression.  Add \")\" to end the parenthesis grouping.  If not needed, use null or omit. An example of a criteria using parenthesis would be (x=1 OR x=2) OR (y=1 OR y=2).
    attr_accessor :criteria_right_paren

    # Table where a column for criteria condition is found  The table for which this criteria will be applied.  The table should exist within the SearchConfig that this criteria is being applied.
    attr_accessor :criteria_table

    # Optional ending value of a range for the criteria condition specified  If a Criteria_Operator requires two values (eg, for BETWEEN) then this is the ending value. If not needed, use null or omit.
    attr_accessor :criteria_thru_value

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'criteria_key' => :'criteria_Key',
        :'criteria_seq' => :'criteria_Seq',
        :'criteria_and_or' => :'criteria_AndOr',
        :'criteria_column' => :'criteria_Column',
        :'criteria_data_type' => :'criteria_Data_Type',
        :'criteria_from_value' => :'criteria_From_Value',
        :'criteria_left_paren' => :'criteria_Left_Paren',
        :'criteria_operator' => :'criteria_Operator',
        :'criteria_right_paren' => :'criteria_Right_Paren',
        :'criteria_table' => :'criteria_Table',
        :'criteria_thru_value' => :'criteria_Thru_Value'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'criteria_key' => :'Integer',
        :'criteria_seq' => :'Integer',
        :'criteria_and_or' => :'String',
        :'criteria_column' => :'String',
        :'criteria_data_type' => :'String',
        :'criteria_from_value' => :'String',
        :'criteria_left_paren' => :'String',
        :'criteria_operator' => :'String',
        :'criteria_right_paren' => :'String',
        :'criteria_table' => :'String',
        :'criteria_thru_value' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'criteria_and_or',
        :'criteria_column',
        :'criteria_data_type',
        :'criteria_from_value',
        :'criteria_left_paren',
        :'criteria_operator',
        :'criteria_right_paren',
        :'criteria_table',
        :'criteria_thru_value'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CriteriaDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CriteriaDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'criteria_key')
        self.criteria_key = attributes[:'criteria_key']
      end

      if attributes.key?(:'criteria_seq')
        self.criteria_seq = attributes[:'criteria_seq']
      else
        self.criteria_seq = nil
      end

      if attributes.key?(:'criteria_and_or')
        self.criteria_and_or = attributes[:'criteria_and_or']
      end

      if attributes.key?(:'criteria_column')
        self.criteria_column = attributes[:'criteria_column']
      end

      if attributes.key?(:'criteria_data_type')
        self.criteria_data_type = attributes[:'criteria_data_type']
      end

      if attributes.key?(:'criteria_from_value')
        self.criteria_from_value = attributes[:'criteria_from_value']
      end

      if attributes.key?(:'criteria_left_paren')
        self.criteria_left_paren = attributes[:'criteria_left_paren']
      end

      if attributes.key?(:'criteria_operator')
        self.criteria_operator = attributes[:'criteria_operator']
      end

      if attributes.key?(:'criteria_right_paren')
        self.criteria_right_paren = attributes[:'criteria_right_paren']
      end

      if attributes.key?(:'criteria_table')
        self.criteria_table = attributes[:'criteria_table']
      end

      if attributes.key?(:'criteria_thru_value')
        self.criteria_thru_value = attributes[:'criteria_thru_value']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @criteria_seq.nil?
        invalid_properties.push('invalid value for "criteria_seq", criteria_seq cannot be nil.')
      end

      if !@criteria_and_or.nil? && @criteria_and_or.to_s.length > 3
        invalid_properties.push('invalid value for "criteria_and_or", the character length must be smaller than or equal to 3.')
      end

      if !@criteria_column.nil? && @criteria_column.to_s.length > 64
        invalid_properties.push('invalid value for "criteria_column", the character length must be smaller than or equal to 64.')
      end

      if !@criteria_data_type.nil? && @criteria_data_type.to_s.length > 32
        invalid_properties.push('invalid value for "criteria_data_type", the character length must be smaller than or equal to 32.')
      end

      if !@criteria_from_value.nil? && @criteria_from_value.to_s.length > 256
        invalid_properties.push('invalid value for "criteria_from_value", the character length must be smaller than or equal to 256.')
      end

      if !@criteria_left_paren.nil? && @criteria_left_paren.to_s.length > 16
        invalid_properties.push('invalid value for "criteria_left_paren", the character length must be smaller than or equal to 16.')
      end

      if !@criteria_operator.nil? && @criteria_operator.to_s.length > 32
        invalid_properties.push('invalid value for "criteria_operator", the character length must be smaller than or equal to 32.')
      end

      if !@criteria_right_paren.nil? && @criteria_right_paren.to_s.length > 16
        invalid_properties.push('invalid value for "criteria_right_paren", the character length must be smaller than or equal to 16.')
      end

      if !@criteria_table.nil? && @criteria_table.to_s.length > 64
        invalid_properties.push('invalid value for "criteria_table", the character length must be smaller than or equal to 64.')
      end

      if !@criteria_thru_value.nil? && @criteria_thru_value.to_s.length > 256
        invalid_properties.push('invalid value for "criteria_thru_value", the character length must be smaller than or equal to 256.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @criteria_seq.nil?
      return false if !@criteria_and_or.nil? && @criteria_and_or.to_s.length > 3
      return false if !@criteria_column.nil? && @criteria_column.to_s.length > 64
      return false if !@criteria_data_type.nil? && @criteria_data_type.to_s.length > 32
      return false if !@criteria_from_value.nil? && @criteria_from_value.to_s.length > 256
      return false if !@criteria_left_paren.nil? && @criteria_left_paren.to_s.length > 16
      return false if !@criteria_operator.nil? && @criteria_operator.to_s.length > 32
      return false if !@criteria_right_paren.nil? && @criteria_right_paren.to_s.length > 16
      return false if !@criteria_table.nil? && @criteria_table.to_s.length > 64
      return false if !@criteria_thru_value.nil? && @criteria_thru_value.to_s.length > 256
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_seq Value to be assigned
    def criteria_seq=(criteria_seq)
      if criteria_seq.nil?
        fail ArgumentError, 'criteria_seq cannot be nil'
      end

      @criteria_seq = criteria_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_and_or Value to be assigned
    def criteria_and_or=(criteria_and_or)
      if !criteria_and_or.nil? && criteria_and_or.to_s.length > 3
        fail ArgumentError, 'invalid value for "criteria_and_or", the character length must be smaller than or equal to 3.'
      end

      @criteria_and_or = criteria_and_or
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_column Value to be assigned
    def criteria_column=(criteria_column)
      if !criteria_column.nil? && criteria_column.to_s.length > 64
        fail ArgumentError, 'invalid value for "criteria_column", the character length must be smaller than or equal to 64.'
      end

      @criteria_column = criteria_column
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_data_type Value to be assigned
    def criteria_data_type=(criteria_data_type)
      if !criteria_data_type.nil? && criteria_data_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "criteria_data_type", the character length must be smaller than or equal to 32.'
      end

      @criteria_data_type = criteria_data_type
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_from_value Value to be assigned
    def criteria_from_value=(criteria_from_value)
      if !criteria_from_value.nil? && criteria_from_value.to_s.length > 256
        fail ArgumentError, 'invalid value for "criteria_from_value", the character length must be smaller than or equal to 256.'
      end

      @criteria_from_value = criteria_from_value
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_left_paren Value to be assigned
    def criteria_left_paren=(criteria_left_paren)
      if !criteria_left_paren.nil? && criteria_left_paren.to_s.length > 16
        fail ArgumentError, 'invalid value for "criteria_left_paren", the character length must be smaller than or equal to 16.'
      end

      @criteria_left_paren = criteria_left_paren
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_operator Value to be assigned
    def criteria_operator=(criteria_operator)
      if !criteria_operator.nil? && criteria_operator.to_s.length > 32
        fail ArgumentError, 'invalid value for "criteria_operator", the character length must be smaller than or equal to 32.'
      end

      @criteria_operator = criteria_operator
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_right_paren Value to be assigned
    def criteria_right_paren=(criteria_right_paren)
      if !criteria_right_paren.nil? && criteria_right_paren.to_s.length > 16
        fail ArgumentError, 'invalid value for "criteria_right_paren", the character length must be smaller than or equal to 16.'
      end

      @criteria_right_paren = criteria_right_paren
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_table Value to be assigned
    def criteria_table=(criteria_table)
      if !criteria_table.nil? && criteria_table.to_s.length > 64
        fail ArgumentError, 'invalid value for "criteria_table", the character length must be smaller than or equal to 64.'
      end

      @criteria_table = criteria_table
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_thru_value Value to be assigned
    def criteria_thru_value=(criteria_thru_value)
      if !criteria_thru_value.nil? && criteria_thru_value.to_s.length > 256
        fail ArgumentError, 'invalid value for "criteria_thru_value", the character length must be smaller than or equal to 256.'
      end

      @criteria_thru_value = criteria_thru_value
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          criteria_key == o.criteria_key &&
          criteria_seq == o.criteria_seq &&
          criteria_and_or == o.criteria_and_or &&
          criteria_column == o.criteria_column &&
          criteria_data_type == o.criteria_data_type &&
          criteria_from_value == o.criteria_from_value &&
          criteria_left_paren == o.criteria_left_paren &&
          criteria_operator == o.criteria_operator &&
          criteria_right_paren == o.criteria_right_paren &&
          criteria_table == o.criteria_table &&
          criteria_thru_value == o.criteria_thru_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [criteria_key, criteria_seq, criteria_and_or, criteria_column, criteria_data_type, criteria_from_value, criteria_left_paren, criteria_operator, criteria_right_paren, criteria_table, criteria_thru_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
