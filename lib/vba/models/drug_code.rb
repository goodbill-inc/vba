=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class DrugCode
    attr_accessor :drug_code_key

    attr_accessor :application_number

    attr_accessor :de_a_schedule

    attr_accessor :description

    attr_accessor :dosage_for_name

    attr_accessor :drug_code

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :labeler_code

    attr_accessor :labeler_name

    attr_accessor :listing_record_certified_through

    attr_accessor :marketing_category_name

    attr_accessor :nd_c_package_code

    attr_accessor :non_proprietary_name

    attr_accessor :package_code

    attr_accessor :package_end_marketing_date

    attr_accessor :package_ndc_exclude_flag

    attr_accessor :package_size

    attr_accessor :package_start_marketing_date

    attr_accessor :package_type

    attr_accessor :pharmacy_class

    attr_accessor :product_code

    attr_accessor :product_end_marketing_date

    attr_accessor :product_ndc_exclude_flag

    attr_accessor :product_start_marketing_date

    attr_accessor :product_type_name

    attr_accessor :proprietary_name

    attr_accessor :proprietary_name_suffix

    attr_accessor :r_x_otc

    attr_accessor :route_name

    attr_accessor :sample_package

    attr_accessor :strength

    attr_accessor :substance_name

    attr_accessor :trade_name

    attr_accessor :unit

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'drug_code_key' => :'drugCode_Key',
        :'application_number' => :'application_Number',
        :'de_a_schedule' => :'deA_Schedule',
        :'description' => :'description',
        :'dosage_for_name' => :'dosage_For_Name',
        :'drug_code' => :'drug_Code',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'labeler_code' => :'labeler_Code',
        :'labeler_name' => :'labeler_Name',
        :'listing_record_certified_through' => :'listing_Record_Certified_Through',
        :'marketing_category_name' => :'marketing_Category_Name',
        :'nd_c_package_code' => :'ndC_Package_Code',
        :'non_proprietary_name' => :'non_Proprietary_Name',
        :'package_code' => :'package_Code',
        :'package_end_marketing_date' => :'package_End_Marketing_Date',
        :'package_ndc_exclude_flag' => :'package_NDC_Exclude_Flag',
        :'package_size' => :'package_Size',
        :'package_start_marketing_date' => :'package_Start_Marketing_Date',
        :'package_type' => :'package_Type',
        :'pharmacy_class' => :'pharmacy_Class',
        :'product_code' => :'product_Code',
        :'product_end_marketing_date' => :'product_End_Marketing_Date',
        :'product_ndc_exclude_flag' => :'product_NDC_Exclude_Flag',
        :'product_start_marketing_date' => :'product_Start_Marketing_Date',
        :'product_type_name' => :'product_Type_Name',
        :'proprietary_name' => :'proprietary_Name',
        :'proprietary_name_suffix' => :'proprietary_Name_Suffix',
        :'r_x_otc' => :'rX_OTC',
        :'route_name' => :'route_Name',
        :'sample_package' => :'sample_Package',
        :'strength' => :'strength',
        :'substance_name' => :'substance_Name',
        :'trade_name' => :'trade_Name',
        :'unit' => :'unit',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'drug_code_key' => :'Integer',
        :'application_number' => :'String',
        :'de_a_schedule' => :'String',
        :'description' => :'String',
        :'dosage_for_name' => :'String',
        :'drug_code' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'labeler_code' => :'String',
        :'labeler_name' => :'String',
        :'listing_record_certified_through' => :'Time',
        :'marketing_category_name' => :'String',
        :'nd_c_package_code' => :'String',
        :'non_proprietary_name' => :'String',
        :'package_code' => :'String',
        :'package_end_marketing_date' => :'Time',
        :'package_ndc_exclude_flag' => :'String',
        :'package_size' => :'String',
        :'package_start_marketing_date' => :'Time',
        :'package_type' => :'String',
        :'pharmacy_class' => :'String',
        :'product_code' => :'String',
        :'product_end_marketing_date' => :'Time',
        :'product_ndc_exclude_flag' => :'String',
        :'product_start_marketing_date' => :'Time',
        :'product_type_name' => :'String',
        :'proprietary_name' => :'String',
        :'proprietary_name_suffix' => :'String',
        :'r_x_otc' => :'String',
        :'route_name' => :'String',
        :'sample_package' => :'String',
        :'strength' => :'String',
        :'substance_name' => :'String',
        :'trade_name' => :'String',
        :'unit' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'application_number',
        :'de_a_schedule',
        :'description',
        :'dosage_for_name',
        :'entry_user',
        :'labeler_code',
        :'labeler_name',
        :'listing_record_certified_through',
        :'marketing_category_name',
        :'nd_c_package_code',
        :'non_proprietary_name',
        :'package_code',
        :'package_end_marketing_date',
        :'package_ndc_exclude_flag',
        :'package_size',
        :'package_start_marketing_date',
        :'package_type',
        :'pharmacy_class',
        :'product_code',
        :'product_end_marketing_date',
        :'product_ndc_exclude_flag',
        :'product_start_marketing_date',
        :'product_type_name',
        :'proprietary_name',
        :'proprietary_name_suffix',
        :'r_x_otc',
        :'route_name',
        :'sample_package',
        :'strength',
        :'substance_name',
        :'trade_name',
        :'unit',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::DrugCode` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::DrugCode`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'drug_code_key')
        self.drug_code_key = attributes[:'drug_code_key']
      else
        self.drug_code_key = nil
      end

      if attributes.key?(:'application_number')
        self.application_number = attributes[:'application_number']
      end

      if attributes.key?(:'de_a_schedule')
        self.de_a_schedule = attributes[:'de_a_schedule']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'dosage_for_name')
        self.dosage_for_name = attributes[:'dosage_for_name']
      end

      if attributes.key?(:'drug_code')
        self.drug_code = attributes[:'drug_code']
      else
        self.drug_code = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'labeler_code')
        self.labeler_code = attributes[:'labeler_code']
      end

      if attributes.key?(:'labeler_name')
        self.labeler_name = attributes[:'labeler_name']
      end

      if attributes.key?(:'listing_record_certified_through')
        self.listing_record_certified_through = attributes[:'listing_record_certified_through']
      end

      if attributes.key?(:'marketing_category_name')
        self.marketing_category_name = attributes[:'marketing_category_name']
      end

      if attributes.key?(:'nd_c_package_code')
        self.nd_c_package_code = attributes[:'nd_c_package_code']
      end

      if attributes.key?(:'non_proprietary_name')
        self.non_proprietary_name = attributes[:'non_proprietary_name']
      end

      if attributes.key?(:'package_code')
        self.package_code = attributes[:'package_code']
      end

      if attributes.key?(:'package_end_marketing_date')
        self.package_end_marketing_date = attributes[:'package_end_marketing_date']
      end

      if attributes.key?(:'package_ndc_exclude_flag')
        self.package_ndc_exclude_flag = attributes[:'package_ndc_exclude_flag']
      end

      if attributes.key?(:'package_size')
        self.package_size = attributes[:'package_size']
      end

      if attributes.key?(:'package_start_marketing_date')
        self.package_start_marketing_date = attributes[:'package_start_marketing_date']
      end

      if attributes.key?(:'package_type')
        self.package_type = attributes[:'package_type']
      end

      if attributes.key?(:'pharmacy_class')
        self.pharmacy_class = attributes[:'pharmacy_class']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end

      if attributes.key?(:'product_end_marketing_date')
        self.product_end_marketing_date = attributes[:'product_end_marketing_date']
      end

      if attributes.key?(:'product_ndc_exclude_flag')
        self.product_ndc_exclude_flag = attributes[:'product_ndc_exclude_flag']
      end

      if attributes.key?(:'product_start_marketing_date')
        self.product_start_marketing_date = attributes[:'product_start_marketing_date']
      end

      if attributes.key?(:'product_type_name')
        self.product_type_name = attributes[:'product_type_name']
      end

      if attributes.key?(:'proprietary_name')
        self.proprietary_name = attributes[:'proprietary_name']
      end

      if attributes.key?(:'proprietary_name_suffix')
        self.proprietary_name_suffix = attributes[:'proprietary_name_suffix']
      end

      if attributes.key?(:'r_x_otc')
        self.r_x_otc = attributes[:'r_x_otc']
      end

      if attributes.key?(:'route_name')
        self.route_name = attributes[:'route_name']
      end

      if attributes.key?(:'sample_package')
        self.sample_package = attributes[:'sample_package']
      end

      if attributes.key?(:'strength')
        self.strength = attributes[:'strength']
      end

      if attributes.key?(:'substance_name')
        self.substance_name = attributes[:'substance_name']
      end

      if attributes.key?(:'trade_name')
        self.trade_name = attributes[:'trade_name']
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @drug_code_key.nil?
        invalid_properties.push('invalid value for "drug_code_key", drug_code_key cannot be nil.')
      end

      if !@application_number.nil? && @application_number.to_s.length > 32
        invalid_properties.push('invalid value for "application_number", the character length must be smaller than or equal to 32.')
      end

      if !@de_a_schedule.nil? && @de_a_schedule.to_s.length > 64
        invalid_properties.push('invalid value for "de_a_schedule", the character length must be smaller than or equal to 64.')
      end

      if !@dosage_for_name.nil? && @dosage_for_name.to_s.length > 512
        invalid_properties.push('invalid value for "dosage_for_name", the character length must be smaller than or equal to 512.')
      end

      if @drug_code.nil?
        invalid_properties.push('invalid value for "drug_code", drug_code cannot be nil.')
      end

      if @drug_code.to_s.length > 32
        invalid_properties.push('invalid value for "drug_code", the character length must be smaller than or equal to 32.')
      end

      if @drug_code.to_s.length < 1
        invalid_properties.push('invalid value for "drug_code", the character length must be great than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@labeler_code.nil? && @labeler_code.to_s.length > 6
        invalid_properties.push('invalid value for "labeler_code", the character length must be smaller than or equal to 6.')
      end

      if !@labeler_name.nil? && @labeler_name.to_s.length > 512
        invalid_properties.push('invalid value for "labeler_name", the character length must be smaller than or equal to 512.')
      end

      if !@marketing_category_name.nil? && @marketing_category_name.to_s.length > 64
        invalid_properties.push('invalid value for "marketing_category_name", the character length must be smaller than or equal to 64.')
      end

      if !@nd_c_package_code.nil? && @nd_c_package_code.to_s.length > 32
        invalid_properties.push('invalid value for "nd_c_package_code", the character length must be smaller than or equal to 32.')
      end

      if !@non_proprietary_name.nil? && @non_proprietary_name.to_s.length > 512
        invalid_properties.push('invalid value for "non_proprietary_name", the character length must be smaller than or equal to 512.')
      end

      if !@package_code.nil? && @package_code.to_s.length > 2
        invalid_properties.push('invalid value for "package_code", the character length must be smaller than or equal to 2.')
      end

      if !@package_ndc_exclude_flag.nil? && @package_ndc_exclude_flag.to_s.length > 8
        invalid_properties.push('invalid value for "package_ndc_exclude_flag", the character length must be smaller than or equal to 8.')
      end

      if !@package_size.nil? && @package_size.to_s.length > 25
        invalid_properties.push('invalid value for "package_size", the character length must be smaller than or equal to 25.')
      end

      if !@package_type.nil? && @package_type.to_s.length > 25
        invalid_properties.push('invalid value for "package_type", the character length must be smaller than or equal to 25.')
      end

      if !@product_code.nil? && @product_code.to_s.length > 32
        invalid_properties.push('invalid value for "product_code", the character length must be smaller than or equal to 32.')
      end

      if !@product_ndc_exclude_flag.nil? && @product_ndc_exclude_flag.to_s.length > 8
        invalid_properties.push('invalid value for "product_ndc_exclude_flag", the character length must be smaller than or equal to 8.')
      end

      if !@product_type_name.nil? && @product_type_name.to_s.length > 512
        invalid_properties.push('invalid value for "product_type_name", the character length must be smaller than or equal to 512.')
      end

      if !@proprietary_name.nil? && @proprietary_name.to_s.length > 512
        invalid_properties.push('invalid value for "proprietary_name", the character length must be smaller than or equal to 512.')
      end

      if !@proprietary_name_suffix.nil? && @proprietary_name_suffix.to_s.length > 64
        invalid_properties.push('invalid value for "proprietary_name_suffix", the character length must be smaller than or equal to 64.')
      end

      if !@r_x_otc.nil? && @r_x_otc.to_s.length > 1
        invalid_properties.push('invalid value for "r_x_otc", the character length must be smaller than or equal to 1.')
      end

      if !@route_name.nil? && @route_name.to_s.length > 512
        invalid_properties.push('invalid value for "route_name", the character length must be smaller than or equal to 512.')
      end

      if !@sample_package.nil? && @sample_package.to_s.length > 8
        invalid_properties.push('invalid value for "sample_package", the character length must be smaller than or equal to 8.')
      end

      if !@strength.nil? && @strength.to_s.length > 32
        invalid_properties.push('invalid value for "strength", the character length must be smaller than or equal to 32.')
      end

      if !@substance_name.nil? && @substance_name.to_s.length > 512
        invalid_properties.push('invalid value for "substance_name", the character length must be smaller than or equal to 512.')
      end

      if !@trade_name.nil? && @trade_name.to_s.length > 100
        invalid_properties.push('invalid value for "trade_name", the character length must be smaller than or equal to 100.')
      end

      if !@unit.nil? && @unit.to_s.length > 32
        invalid_properties.push('invalid value for "unit", the character length must be smaller than or equal to 32.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @drug_code_key.nil?
      return false if !@application_number.nil? && @application_number.to_s.length > 32
      return false if !@de_a_schedule.nil? && @de_a_schedule.to_s.length > 64
      return false if !@dosage_for_name.nil? && @dosage_for_name.to_s.length > 512
      return false if @drug_code.nil?
      return false if @drug_code.to_s.length > 32
      return false if @drug_code.to_s.length < 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@labeler_code.nil? && @labeler_code.to_s.length > 6
      return false if !@labeler_name.nil? && @labeler_name.to_s.length > 512
      return false if !@marketing_category_name.nil? && @marketing_category_name.to_s.length > 64
      return false if !@nd_c_package_code.nil? && @nd_c_package_code.to_s.length > 32
      return false if !@non_proprietary_name.nil? && @non_proprietary_name.to_s.length > 512
      return false if !@package_code.nil? && @package_code.to_s.length > 2
      return false if !@package_ndc_exclude_flag.nil? && @package_ndc_exclude_flag.to_s.length > 8
      return false if !@package_size.nil? && @package_size.to_s.length > 25
      return false if !@package_type.nil? && @package_type.to_s.length > 25
      return false if !@product_code.nil? && @product_code.to_s.length > 32
      return false if !@product_ndc_exclude_flag.nil? && @product_ndc_exclude_flag.to_s.length > 8
      return false if !@product_type_name.nil? && @product_type_name.to_s.length > 512
      return false if !@proprietary_name.nil? && @proprietary_name.to_s.length > 512
      return false if !@proprietary_name_suffix.nil? && @proprietary_name_suffix.to_s.length > 64
      return false if !@r_x_otc.nil? && @r_x_otc.to_s.length > 1
      return false if !@route_name.nil? && @route_name.to_s.length > 512
      return false if !@sample_package.nil? && @sample_package.to_s.length > 8
      return false if !@strength.nil? && @strength.to_s.length > 32
      return false if !@substance_name.nil? && @substance_name.to_s.length > 512
      return false if !@trade_name.nil? && @trade_name.to_s.length > 100
      return false if !@unit.nil? && @unit.to_s.length > 32
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] drug_code_key Value to be assigned
    def drug_code_key=(drug_code_key)
      if drug_code_key.nil?
        fail ArgumentError, 'drug_code_key cannot be nil'
      end

      @drug_code_key = drug_code_key
    end

    # Custom attribute writer method with validation
    # @param [Object] application_number Value to be assigned
    def application_number=(application_number)
      if !application_number.nil? && application_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "application_number", the character length must be smaller than or equal to 32.'
      end

      @application_number = application_number
    end

    # Custom attribute writer method with validation
    # @param [Object] de_a_schedule Value to be assigned
    def de_a_schedule=(de_a_schedule)
      if !de_a_schedule.nil? && de_a_schedule.to_s.length > 64
        fail ArgumentError, 'invalid value for "de_a_schedule", the character length must be smaller than or equal to 64.'
      end

      @de_a_schedule = de_a_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] dosage_for_name Value to be assigned
    def dosage_for_name=(dosage_for_name)
      if !dosage_for_name.nil? && dosage_for_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "dosage_for_name", the character length must be smaller than or equal to 512.'
      end

      @dosage_for_name = dosage_for_name
    end

    # Custom attribute writer method with validation
    # @param [Object] drug_code Value to be assigned
    def drug_code=(drug_code)
      if drug_code.nil?
        fail ArgumentError, 'drug_code cannot be nil'
      end

      if drug_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "drug_code", the character length must be smaller than or equal to 32.'
      end

      if drug_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "drug_code", the character length must be great than or equal to 1.'
      end

      @drug_code = drug_code
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] labeler_code Value to be assigned
    def labeler_code=(labeler_code)
      if !labeler_code.nil? && labeler_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "labeler_code", the character length must be smaller than or equal to 6.'
      end

      @labeler_code = labeler_code
    end

    # Custom attribute writer method with validation
    # @param [Object] labeler_name Value to be assigned
    def labeler_name=(labeler_name)
      if !labeler_name.nil? && labeler_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "labeler_name", the character length must be smaller than or equal to 512.'
      end

      @labeler_name = labeler_name
    end

    # Custom attribute writer method with validation
    # @param [Object] marketing_category_name Value to be assigned
    def marketing_category_name=(marketing_category_name)
      if !marketing_category_name.nil? && marketing_category_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "marketing_category_name", the character length must be smaller than or equal to 64.'
      end

      @marketing_category_name = marketing_category_name
    end

    # Custom attribute writer method with validation
    # @param [Object] nd_c_package_code Value to be assigned
    def nd_c_package_code=(nd_c_package_code)
      if !nd_c_package_code.nil? && nd_c_package_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "nd_c_package_code", the character length must be smaller than or equal to 32.'
      end

      @nd_c_package_code = nd_c_package_code
    end

    # Custom attribute writer method with validation
    # @param [Object] non_proprietary_name Value to be assigned
    def non_proprietary_name=(non_proprietary_name)
      if !non_proprietary_name.nil? && non_proprietary_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "non_proprietary_name", the character length must be smaller than or equal to 512.'
      end

      @non_proprietary_name = non_proprietary_name
    end

    # Custom attribute writer method with validation
    # @param [Object] package_code Value to be assigned
    def package_code=(package_code)
      if !package_code.nil? && package_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "package_code", the character length must be smaller than or equal to 2.'
      end

      @package_code = package_code
    end

    # Custom attribute writer method with validation
    # @param [Object] package_ndc_exclude_flag Value to be assigned
    def package_ndc_exclude_flag=(package_ndc_exclude_flag)
      if !package_ndc_exclude_flag.nil? && package_ndc_exclude_flag.to_s.length > 8
        fail ArgumentError, 'invalid value for "package_ndc_exclude_flag", the character length must be smaller than or equal to 8.'
      end

      @package_ndc_exclude_flag = package_ndc_exclude_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] package_size Value to be assigned
    def package_size=(package_size)
      if !package_size.nil? && package_size.to_s.length > 25
        fail ArgumentError, 'invalid value for "package_size", the character length must be smaller than or equal to 25.'
      end

      @package_size = package_size
    end

    # Custom attribute writer method with validation
    # @param [Object] package_type Value to be assigned
    def package_type=(package_type)
      if !package_type.nil? && package_type.to_s.length > 25
        fail ArgumentError, 'invalid value for "package_type", the character length must be smaller than or equal to 25.'
      end

      @package_type = package_type
    end

    # Custom attribute writer method with validation
    # @param [Object] product_code Value to be assigned
    def product_code=(product_code)
      if !product_code.nil? && product_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "product_code", the character length must be smaller than or equal to 32.'
      end

      @product_code = product_code
    end

    # Custom attribute writer method with validation
    # @param [Object] product_ndc_exclude_flag Value to be assigned
    def product_ndc_exclude_flag=(product_ndc_exclude_flag)
      if !product_ndc_exclude_flag.nil? && product_ndc_exclude_flag.to_s.length > 8
        fail ArgumentError, 'invalid value for "product_ndc_exclude_flag", the character length must be smaller than or equal to 8.'
      end

      @product_ndc_exclude_flag = product_ndc_exclude_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] product_type_name Value to be assigned
    def product_type_name=(product_type_name)
      if !product_type_name.nil? && product_type_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "product_type_name", the character length must be smaller than or equal to 512.'
      end

      @product_type_name = product_type_name
    end

    # Custom attribute writer method with validation
    # @param [Object] proprietary_name Value to be assigned
    def proprietary_name=(proprietary_name)
      if !proprietary_name.nil? && proprietary_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "proprietary_name", the character length must be smaller than or equal to 512.'
      end

      @proprietary_name = proprietary_name
    end

    # Custom attribute writer method with validation
    # @param [Object] proprietary_name_suffix Value to be assigned
    def proprietary_name_suffix=(proprietary_name_suffix)
      if !proprietary_name_suffix.nil? && proprietary_name_suffix.to_s.length > 64
        fail ArgumentError, 'invalid value for "proprietary_name_suffix", the character length must be smaller than or equal to 64.'
      end

      @proprietary_name_suffix = proprietary_name_suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_otc Value to be assigned
    def r_x_otc=(r_x_otc)
      if !r_x_otc.nil? && r_x_otc.to_s.length > 1
        fail ArgumentError, 'invalid value for "r_x_otc", the character length must be smaller than or equal to 1.'
      end

      @r_x_otc = r_x_otc
    end

    # Custom attribute writer method with validation
    # @param [Object] route_name Value to be assigned
    def route_name=(route_name)
      if !route_name.nil? && route_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "route_name", the character length must be smaller than or equal to 512.'
      end

      @route_name = route_name
    end

    # Custom attribute writer method with validation
    # @param [Object] sample_package Value to be assigned
    def sample_package=(sample_package)
      if !sample_package.nil? && sample_package.to_s.length > 8
        fail ArgumentError, 'invalid value for "sample_package", the character length must be smaller than or equal to 8.'
      end

      @sample_package = sample_package
    end

    # Custom attribute writer method with validation
    # @param [Object] strength Value to be assigned
    def strength=(strength)
      if !strength.nil? && strength.to_s.length > 32
        fail ArgumentError, 'invalid value for "strength", the character length must be smaller than or equal to 32.'
      end

      @strength = strength
    end

    # Custom attribute writer method with validation
    # @param [Object] substance_name Value to be assigned
    def substance_name=(substance_name)
      if !substance_name.nil? && substance_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "substance_name", the character length must be smaller than or equal to 512.'
      end

      @substance_name = substance_name
    end

    # Custom attribute writer method with validation
    # @param [Object] trade_name Value to be assigned
    def trade_name=(trade_name)
      if !trade_name.nil? && trade_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "trade_name", the character length must be smaller than or equal to 100.'
      end

      @trade_name = trade_name
    end

    # Custom attribute writer method with validation
    # @param [Object] unit Value to be assigned
    def unit=(unit)
      if !unit.nil? && unit.to_s.length > 32
        fail ArgumentError, 'invalid value for "unit", the character length must be smaller than or equal to 32.'
      end

      @unit = unit
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          drug_code_key == o.drug_code_key &&
          application_number == o.application_number &&
          de_a_schedule == o.de_a_schedule &&
          description == o.description &&
          dosage_for_name == o.dosage_for_name &&
          drug_code == o.drug_code &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          labeler_code == o.labeler_code &&
          labeler_name == o.labeler_name &&
          listing_record_certified_through == o.listing_record_certified_through &&
          marketing_category_name == o.marketing_category_name &&
          nd_c_package_code == o.nd_c_package_code &&
          non_proprietary_name == o.non_proprietary_name &&
          package_code == o.package_code &&
          package_end_marketing_date == o.package_end_marketing_date &&
          package_ndc_exclude_flag == o.package_ndc_exclude_flag &&
          package_size == o.package_size &&
          package_start_marketing_date == o.package_start_marketing_date &&
          package_type == o.package_type &&
          pharmacy_class == o.pharmacy_class &&
          product_code == o.product_code &&
          product_end_marketing_date == o.product_end_marketing_date &&
          product_ndc_exclude_flag == o.product_ndc_exclude_flag &&
          product_start_marketing_date == o.product_start_marketing_date &&
          product_type_name == o.product_type_name &&
          proprietary_name == o.proprietary_name &&
          proprietary_name_suffix == o.proprietary_name_suffix &&
          r_x_otc == o.r_x_otc &&
          route_name == o.route_name &&
          sample_package == o.sample_package &&
          strength == o.strength &&
          substance_name == o.substance_name &&
          trade_name == o.trade_name &&
          unit == o.unit &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [drug_code_key, application_number, de_a_schedule, description, dosage_for_name, drug_code, entry_date, entry_user, labeler_code, labeler_name, listing_record_certified_through, marketing_category_name, nd_c_package_code, non_proprietary_name, package_code, package_end_marketing_date, package_ndc_exclude_flag, package_size, package_start_marketing_date, package_type, pharmacy_class, product_code, product_end_marketing_date, product_ndc_exclude_flag, product_start_marketing_date, product_type_name, proprietary_name, proprietary_name_suffix, r_x_otc, route_name, sample_package, strength, substance_name, trade_name, unit, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
