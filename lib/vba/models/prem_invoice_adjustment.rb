=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PremInvoiceAdjustment
    attr_accessor :invoice_adjustment_key

    attr_accessor :adjustment_amount

    attr_accessor :adjustment_comment

    attr_accessor :adjustment_prem_rate_key

    attr_accessor :adjustment_reason

    attr_accessor :adjustment_received

    attr_accessor :auto_adjust

    attr_accessor :avoid_retro

    attr_accessor :division_id

    attr_accessor :effective_date

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :group_id

    attr_accessor :invoice_key

    attr_accessor :min_max_adjust

    attr_accessor :negative_adjustment

    attr_accessor :prem_rate_key

    attr_accessor :retro_adjustment_invoice_key

    attr_accessor :self_admin_adj

    attr_accessor :subscriber_id

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :use_premium

    attr_accessor :volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invoice_adjustment_key' => :'invoiceAdjustment_Key',
        :'adjustment_amount' => :'adjustment_Amount',
        :'adjustment_comment' => :'adjustment_Comment',
        :'adjustment_prem_rate_key' => :'adjustment_PremRate_Key',
        :'adjustment_reason' => :'adjustment_Reason',
        :'adjustment_received' => :'adjustment_Received',
        :'auto_adjust' => :'auto_Adjust',
        :'avoid_retro' => :'avoid_Retro',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'invoice_key' => :'invoice_Key',
        :'min_max_adjust' => :'min_Max_Adjust',
        :'negative_adjustment' => :'negative_Adjustment',
        :'prem_rate_key' => :'premRate_Key',
        :'retro_adjustment_invoice_key' => :'retro_Adjustment_Invoice_Key',
        :'self_admin_adj' => :'selfAdmin_Adj',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_premium' => :'use_Premium',
        :'volume' => :'volume'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'invoice_adjustment_key' => :'Integer',
        :'adjustment_amount' => :'Float',
        :'adjustment_comment' => :'String',
        :'adjustment_prem_rate_key' => :'Integer',
        :'adjustment_reason' => :'Integer',
        :'adjustment_received' => :'Float',
        :'auto_adjust' => :'Boolean',
        :'avoid_retro' => :'Boolean',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'invoice_key' => :'Integer',
        :'min_max_adjust' => :'Boolean',
        :'negative_adjustment' => :'Boolean',
        :'prem_rate_key' => :'Integer',
        :'retro_adjustment_invoice_key' => :'Integer',
        :'self_admin_adj' => :'Boolean',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_premium' => :'Boolean',
        :'volume' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adjustment_amount',
        :'adjustment_comment',
        :'adjustment_prem_rate_key',
        :'adjustment_reason',
        :'adjustment_received',
        :'division_id',
        :'effective_date',
        :'entry_user',
        :'group_id',
        :'invoice_key',
        :'prem_rate_key',
        :'retro_adjustment_invoice_key',
        :'subscriber_id',
        :'update_user',
        :'volume'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PremInvoiceAdjustment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PremInvoiceAdjustment`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'invoice_adjustment_key')
        self.invoice_adjustment_key = attributes[:'invoice_adjustment_key']
      else
        self.invoice_adjustment_key = nil
      end

      if attributes.key?(:'adjustment_amount')
        self.adjustment_amount = attributes[:'adjustment_amount']
      end

      if attributes.key?(:'adjustment_comment')
        self.adjustment_comment = attributes[:'adjustment_comment']
      end

      if attributes.key?(:'adjustment_prem_rate_key')
        self.adjustment_prem_rate_key = attributes[:'adjustment_prem_rate_key']
      end

      if attributes.key?(:'adjustment_reason')
        self.adjustment_reason = attributes[:'adjustment_reason']
      end

      if attributes.key?(:'adjustment_received')
        self.adjustment_received = attributes[:'adjustment_received']
      end

      if attributes.key?(:'auto_adjust')
        self.auto_adjust = attributes[:'auto_adjust']
      else
        self.auto_adjust = nil
      end

      if attributes.key?(:'avoid_retro')
        self.avoid_retro = attributes[:'avoid_retro']
      else
        self.avoid_retro = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'invoice_key')
        self.invoice_key = attributes[:'invoice_key']
      end

      if attributes.key?(:'min_max_adjust')
        self.min_max_adjust = attributes[:'min_max_adjust']
      else
        self.min_max_adjust = nil
      end

      if attributes.key?(:'negative_adjustment')
        self.negative_adjustment = attributes[:'negative_adjustment']
      else
        self.negative_adjustment = nil
      end

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      end

      if attributes.key?(:'retro_adjustment_invoice_key')
        self.retro_adjustment_invoice_key = attributes[:'retro_adjustment_invoice_key']
      end

      if attributes.key?(:'self_admin_adj')
        self.self_admin_adj = attributes[:'self_admin_adj']
      else
        self.self_admin_adj = nil
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_premium')
        self.use_premium = attributes[:'use_premium']
      else
        self.use_premium = nil
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @invoice_adjustment_key.nil?
        invalid_properties.push('invalid value for "invoice_adjustment_key", invoice_adjustment_key cannot be nil.')
      end

      if !@adjustment_comment.nil? && @adjustment_comment.to_s.length > 512
        invalid_properties.push('invalid value for "adjustment_comment", the character length must be smaller than or equal to 512.')
      end

      if @auto_adjust.nil?
        invalid_properties.push('invalid value for "auto_adjust", auto_adjust cannot be nil.')
      end

      if @avoid_retro.nil?
        invalid_properties.push('invalid value for "avoid_retro", avoid_retro cannot be nil.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @min_max_adjust.nil?
        invalid_properties.push('invalid value for "min_max_adjust", min_max_adjust cannot be nil.')
      end

      if @negative_adjustment.nil?
        invalid_properties.push('invalid value for "negative_adjustment", negative_adjustment cannot be nil.')
      end

      if @self_admin_adj.nil?
        invalid_properties.push('invalid value for "self_admin_adj", self_admin_adj cannot be nil.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_premium.nil?
        invalid_properties.push('invalid value for "use_premium", use_premium cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @invoice_adjustment_key.nil?
      return false if !@adjustment_comment.nil? && @adjustment_comment.to_s.length > 512
      return false if @auto_adjust.nil?
      return false if @avoid_retro.nil?
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if @min_max_adjust.nil?
      return false if @negative_adjustment.nil?
      return false if @self_admin_adj.nil?
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_premium.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_adjustment_key Value to be assigned
    def invoice_adjustment_key=(invoice_adjustment_key)
      if invoice_adjustment_key.nil?
        fail ArgumentError, 'invoice_adjustment_key cannot be nil'
      end

      @invoice_adjustment_key = invoice_adjustment_key
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_comment Value to be assigned
    def adjustment_comment=(adjustment_comment)
      if !adjustment_comment.nil? && adjustment_comment.to_s.length > 512
        fail ArgumentError, 'invalid value for "adjustment_comment", the character length must be smaller than or equal to 512.'
      end

      @adjustment_comment = adjustment_comment
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_adjust Value to be assigned
    def auto_adjust=(auto_adjust)
      if auto_adjust.nil?
        fail ArgumentError, 'auto_adjust cannot be nil'
      end

      @auto_adjust = auto_adjust
    end

    # Custom attribute writer method with validation
    # @param [Object] avoid_retro Value to be assigned
    def avoid_retro=(avoid_retro)
      if avoid_retro.nil?
        fail ArgumentError, 'avoid_retro cannot be nil'
      end

      @avoid_retro = avoid_retro
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] min_max_adjust Value to be assigned
    def min_max_adjust=(min_max_adjust)
      if min_max_adjust.nil?
        fail ArgumentError, 'min_max_adjust cannot be nil'
      end

      @min_max_adjust = min_max_adjust
    end

    # Custom attribute writer method with validation
    # @param [Object] negative_adjustment Value to be assigned
    def negative_adjustment=(negative_adjustment)
      if negative_adjustment.nil?
        fail ArgumentError, 'negative_adjustment cannot be nil'
      end

      @negative_adjustment = negative_adjustment
    end

    # Custom attribute writer method with validation
    # @param [Object] self_admin_adj Value to be assigned
    def self_admin_adj=(self_admin_adj)
      if self_admin_adj.nil?
        fail ArgumentError, 'self_admin_adj cannot be nil'
      end

      @self_admin_adj = self_admin_adj
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_premium Value to be assigned
    def use_premium=(use_premium)
      if use_premium.nil?
        fail ArgumentError, 'use_premium cannot be nil'
      end

      @use_premium = use_premium
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invoice_adjustment_key == o.invoice_adjustment_key &&
          adjustment_amount == o.adjustment_amount &&
          adjustment_comment == o.adjustment_comment &&
          adjustment_prem_rate_key == o.adjustment_prem_rate_key &&
          adjustment_reason == o.adjustment_reason &&
          adjustment_received == o.adjustment_received &&
          auto_adjust == o.auto_adjust &&
          avoid_retro == o.avoid_retro &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          invoice_key == o.invoice_key &&
          min_max_adjust == o.min_max_adjust &&
          negative_adjustment == o.negative_adjustment &&
          prem_rate_key == o.prem_rate_key &&
          retro_adjustment_invoice_key == o.retro_adjustment_invoice_key &&
          self_admin_adj == o.self_admin_adj &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_premium == o.use_premium &&
          volume == o.volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [invoice_adjustment_key, adjustment_amount, adjustment_comment, adjustment_prem_rate_key, adjustment_reason, adjustment_received, auto_adjust, avoid_retro, division_id, effective_date, entry_date, entry_user, group_id, invoice_key, min_max_adjust, negative_adjustment, prem_rate_key, retro_adjustment_invoice_key, self_admin_adj, subscriber_id, update_date, update_user, use_premium, volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
