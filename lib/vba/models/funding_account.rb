=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class FundingAccount
    # ID of the funding account. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :account_key

    # Identifies the prefix of the ACH number.
    attr_accessor :ac_h_number_prefix

    # Identifies the suffix of the ACH number.
    attr_accessor :ac_h_number_suffix

    # Identifies which category the funding account belongs to.
    attr_accessor :account_category

    # Name for the funding account.
    attr_accessor :account_name

    # Account number of the funding account.
    attr_accessor :account_number

    # Identifies the type of funding account. 'Account Types' are configured within 'Accounting Configuration'.
    attr_accessor :account_type

    # Address line 1 of the funding account's banking institution.
    attr_accessor :bank_address1

    # Address line 2 of the funding account's banking institution.
    attr_accessor :bank_address2

    # City of the banking institution's address.
    attr_accessor :bank_city

    # Identifies the country that the funding account belongs to.
    attr_accessor :bank_country_id

    # Name of the funding account's banking institution.
    attr_accessor :bank_name

    # State of the banking institution's address.
    attr_accessor :bank_state

    # Zip Code of the banking institution's address.
    attr_accessor :bank_zip

    # Address Line 1 used for the credit card.
    attr_accessor :c_c_address1

    # Address Line 2 used for the credit card.
    attr_accessor :c_c_address2

    # City used for the credit card.
    attr_accessor :c_c_city

    # Identifies the card as either a debit card or credit card.
    attr_accessor :c_c_debit_credit

    # Expiration month of the credit card.
    attr_accessor :c_c_exp_month

    # Expiration year of the credit card.
    attr_accessor :c_c_exp_year

    # Identifies the name listed on the credit card.
    attr_accessor :c_c_name_on_card

    # Credit card number.
    attr_accessor :c_c_number

    # Security code used for the credit card.
    attr_accessor :c_c_sec_code

    # State used for the credit card.
    attr_accessor :c_c_state

    # Identifies the type of credit card used by the funding account.
    attr_accessor :c_c_type

    # Zip code used for the credit card.
    attr_accessor :c_c_zip

    # Indicates what current the funding account uses.
    attr_accessor :currency_id

    # Assigns the default check stock for generated checks.
    attr_accessor :default_check_stock

    # Assigns the default funding threshold.
    attr_accessor :default_funding_threshold

    # Date when the funding account becomes/became effective.
    attr_accessor :effective_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Ex Code that will be applied to claims which are funded by this account.
    attr_accessor :ex_code

    # Identifies the Federal Tax ID of the funding account.
    attr_accessor :federal_id

    # Fractional routing number of the funding account.
    attr_accessor :fractional_routing_number

    # Number of the last generated ACH transaction from the funding account.
    attr_accessor :last_ach_number

    # Number of the last generated check from the funding account.
    attr_accessor :last_check_number

    # Identifies the starting number for the funding account's Magnietic Ink Character Recognition checks.
    attr_accessor :mic_r_check_num_start_pos

    # Identifies the Magnetic Ink Character Recognition line of the funding account's checks.
    attr_accessor :mic_r_line

    # Used to determine if a positive payment is required.
    attr_accessor :positive_pay_required

    # Routing number of the funding account.
    attr_accessor :routing_number

    # Identifies the security code of the funding account.
    attr_accessor :security_code

    # Indicates the format for generated statements.
    attr_accessor :statement_format_key

    # Identifies the swift code of the funding account.
    attr_accessor :swift_code

    # Date when the funding account expires/expired.
    attr_accessor :term_date

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Used to determine if checks are numbered by ACH. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_ach_numbering

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_key' => :'account_Key',
        :'ac_h_number_prefix' => :'acH_Number_Prefix',
        :'ac_h_number_suffix' => :'acH_Number_Suffix',
        :'account_category' => :'account_Category',
        :'account_name' => :'account_Name',
        :'account_number' => :'account_Number',
        :'account_type' => :'account_Type',
        :'bank_address1' => :'bank_Address1',
        :'bank_address2' => :'bank_Address2',
        :'bank_city' => :'bank_City',
        :'bank_country_id' => :'bank_Country_ID',
        :'bank_name' => :'bank_Name',
        :'bank_state' => :'bank_State',
        :'bank_zip' => :'bank_Zip',
        :'c_c_address1' => :'cC_Address1',
        :'c_c_address2' => :'cC_Address2',
        :'c_c_city' => :'cC_City',
        :'c_c_debit_credit' => :'cC_Debit_Credit',
        :'c_c_exp_month' => :'cC_Exp_Month',
        :'c_c_exp_year' => :'cC_Exp_Year',
        :'c_c_name_on_card' => :'cC_Name_On_Card',
        :'c_c_number' => :'cC_Number',
        :'c_c_sec_code' => :'cC_Sec_Code',
        :'c_c_state' => :'cC_State',
        :'c_c_type' => :'cC_Type',
        :'c_c_zip' => :'cC_Zip',
        :'currency_id' => :'currency_ID',
        :'default_check_stock' => :'default_Check_Stock',
        :'default_funding_threshold' => :'default_Funding_Threshold',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'federal_id' => :'federal_ID',
        :'fractional_routing_number' => :'fractional_Routing_Number',
        :'last_ach_number' => :'last_ACH_Number',
        :'last_check_number' => :'last_Check_Number',
        :'mic_r_check_num_start_pos' => :'micR_Check_Num_Start_Pos',
        :'mic_r_line' => :'micR_Line',
        :'positive_pay_required' => :'positive_Pay_Required',
        :'routing_number' => :'routing_Number',
        :'security_code' => :'security_Code',
        :'statement_format_key' => :'statement_Format_Key',
        :'swift_code' => :'swift_Code',
        :'term_date' => :'term_Date',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_ach_numbering' => :'use_ACH_Numbering'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_key' => :'Integer',
        :'ac_h_number_prefix' => :'String',
        :'ac_h_number_suffix' => :'String',
        :'account_category' => :'String',
        :'account_name' => :'String',
        :'account_number' => :'String',
        :'account_type' => :'String',
        :'bank_address1' => :'String',
        :'bank_address2' => :'String',
        :'bank_city' => :'String',
        :'bank_country_id' => :'String',
        :'bank_name' => :'String',
        :'bank_state' => :'String',
        :'bank_zip' => :'String',
        :'c_c_address1' => :'String',
        :'c_c_address2' => :'String',
        :'c_c_city' => :'String',
        :'c_c_debit_credit' => :'String',
        :'c_c_exp_month' => :'Integer',
        :'c_c_exp_year' => :'Integer',
        :'c_c_name_on_card' => :'String',
        :'c_c_number' => :'String',
        :'c_c_sec_code' => :'Integer',
        :'c_c_state' => :'String',
        :'c_c_type' => :'String',
        :'c_c_zip' => :'String',
        :'currency_id' => :'String',
        :'default_check_stock' => :'Integer',
        :'default_funding_threshold' => :'Integer',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'federal_id' => :'String',
        :'fractional_routing_number' => :'String',
        :'last_ach_number' => :'Integer',
        :'last_check_number' => :'Integer',
        :'mic_r_check_num_start_pos' => :'Integer',
        :'mic_r_line' => :'String',
        :'positive_pay_required' => :'Boolean',
        :'routing_number' => :'String',
        :'security_code' => :'String',
        :'statement_format_key' => :'Integer',
        :'swift_code' => :'String',
        :'term_date' => :'Time',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_ach_numbering' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ac_h_number_prefix',
        :'ac_h_number_suffix',
        :'account_category',
        :'account_name',
        :'account_number',
        :'account_type',
        :'bank_address1',
        :'bank_address2',
        :'bank_city',
        :'bank_country_id',
        :'bank_name',
        :'bank_state',
        :'bank_zip',
        :'c_c_address1',
        :'c_c_address2',
        :'c_c_city',
        :'c_c_debit_credit',
        :'c_c_exp_month',
        :'c_c_exp_year',
        :'c_c_name_on_card',
        :'c_c_number',
        :'c_c_sec_code',
        :'c_c_state',
        :'c_c_type',
        :'c_c_zip',
        :'currency_id',
        :'default_check_stock',
        :'default_funding_threshold',
        :'effective_date',
        :'entry_user',
        :'ex_code',
        :'federal_id',
        :'fractional_routing_number',
        :'last_ach_number',
        :'last_check_number',
        :'mic_r_check_num_start_pos',
        :'mic_r_line',
        :'positive_pay_required',
        :'routing_number',
        :'security_code',
        :'statement_format_key',
        :'swift_code',
        :'term_date',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::FundingAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::FundingAccount`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      else
        self.account_key = nil
      end

      if attributes.key?(:'ac_h_number_prefix')
        self.ac_h_number_prefix = attributes[:'ac_h_number_prefix']
      end

      if attributes.key?(:'ac_h_number_suffix')
        self.ac_h_number_suffix = attributes[:'ac_h_number_suffix']
      end

      if attributes.key?(:'account_category')
        self.account_category = attributes[:'account_category']
      end

      if attributes.key?(:'account_name')
        self.account_name = attributes[:'account_name']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'bank_address1')
        self.bank_address1 = attributes[:'bank_address1']
      end

      if attributes.key?(:'bank_address2')
        self.bank_address2 = attributes[:'bank_address2']
      end

      if attributes.key?(:'bank_city')
        self.bank_city = attributes[:'bank_city']
      end

      if attributes.key?(:'bank_country_id')
        self.bank_country_id = attributes[:'bank_country_id']
      end

      if attributes.key?(:'bank_name')
        self.bank_name = attributes[:'bank_name']
      end

      if attributes.key?(:'bank_state')
        self.bank_state = attributes[:'bank_state']
      end

      if attributes.key?(:'bank_zip')
        self.bank_zip = attributes[:'bank_zip']
      end

      if attributes.key?(:'c_c_address1')
        self.c_c_address1 = attributes[:'c_c_address1']
      end

      if attributes.key?(:'c_c_address2')
        self.c_c_address2 = attributes[:'c_c_address2']
      end

      if attributes.key?(:'c_c_city')
        self.c_c_city = attributes[:'c_c_city']
      end

      if attributes.key?(:'c_c_debit_credit')
        self.c_c_debit_credit = attributes[:'c_c_debit_credit']
      end

      if attributes.key?(:'c_c_exp_month')
        self.c_c_exp_month = attributes[:'c_c_exp_month']
      end

      if attributes.key?(:'c_c_exp_year')
        self.c_c_exp_year = attributes[:'c_c_exp_year']
      end

      if attributes.key?(:'c_c_name_on_card')
        self.c_c_name_on_card = attributes[:'c_c_name_on_card']
      end

      if attributes.key?(:'c_c_number')
        self.c_c_number = attributes[:'c_c_number']
      end

      if attributes.key?(:'c_c_sec_code')
        self.c_c_sec_code = attributes[:'c_c_sec_code']
      end

      if attributes.key?(:'c_c_state')
        self.c_c_state = attributes[:'c_c_state']
      end

      if attributes.key?(:'c_c_type')
        self.c_c_type = attributes[:'c_c_type']
      end

      if attributes.key?(:'c_c_zip')
        self.c_c_zip = attributes[:'c_c_zip']
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'default_check_stock')
        self.default_check_stock = attributes[:'default_check_stock']
      end

      if attributes.key?(:'default_funding_threshold')
        self.default_funding_threshold = attributes[:'default_funding_threshold']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'fractional_routing_number')
        self.fractional_routing_number = attributes[:'fractional_routing_number']
      end

      if attributes.key?(:'last_ach_number')
        self.last_ach_number = attributes[:'last_ach_number']
      end

      if attributes.key?(:'last_check_number')
        self.last_check_number = attributes[:'last_check_number']
      end

      if attributes.key?(:'mic_r_check_num_start_pos')
        self.mic_r_check_num_start_pos = attributes[:'mic_r_check_num_start_pos']
      end

      if attributes.key?(:'mic_r_line')
        self.mic_r_line = attributes[:'mic_r_line']
      end

      if attributes.key?(:'positive_pay_required')
        self.positive_pay_required = attributes[:'positive_pay_required']
      end

      if attributes.key?(:'routing_number')
        self.routing_number = attributes[:'routing_number']
      end

      if attributes.key?(:'security_code')
        self.security_code = attributes[:'security_code']
      end

      if attributes.key?(:'statement_format_key')
        self.statement_format_key = attributes[:'statement_format_key']
      end

      if attributes.key?(:'swift_code')
        self.swift_code = attributes[:'swift_code']
      end

      if attributes.key?(:'term_date')
        self.term_date = attributes[:'term_date']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_ach_numbering')
        self.use_ach_numbering = attributes[:'use_ach_numbering']
      else
        self.use_ach_numbering = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account_key.nil?
        invalid_properties.push('invalid value for "account_key", account_key cannot be nil.')
      end

      if !@ac_h_number_prefix.nil? && @ac_h_number_prefix.to_s.length > 8
        invalid_properties.push('invalid value for "ac_h_number_prefix", the character length must be smaller than or equal to 8.')
      end

      if !@ac_h_number_suffix.nil? && @ac_h_number_suffix.to_s.length > 8
        invalid_properties.push('invalid value for "ac_h_number_suffix", the character length must be smaller than or equal to 8.')
      end

      if !@account_category.nil? && @account_category.to_s.length > 8
        invalid_properties.push('invalid value for "account_category", the character length must be smaller than or equal to 8.')
      end

      if !@account_name.nil? && @account_name.to_s.length > 64
        invalid_properties.push('invalid value for "account_name", the character length must be smaller than or equal to 64.')
      end

      if !@account_number.nil? && @account_number.to_s.length > 32
        invalid_properties.push('invalid value for "account_number", the character length must be smaller than or equal to 32.')
      end

      if !@account_type.nil? && @account_type.to_s.length > 8
        invalid_properties.push('invalid value for "account_type", the character length must be smaller than or equal to 8.')
      end

      if !@bank_address1.nil? && @bank_address1.to_s.length > 128
        invalid_properties.push('invalid value for "bank_address1", the character length must be smaller than or equal to 128.')
      end

      if !@bank_address2.nil? && @bank_address2.to_s.length > 128
        invalid_properties.push('invalid value for "bank_address2", the character length must be smaller than or equal to 128.')
      end

      if !@bank_city.nil? && @bank_city.to_s.length > 32
        invalid_properties.push('invalid value for "bank_city", the character length must be smaller than or equal to 32.')
      end

      if !@bank_country_id.nil? && @bank_country_id.to_s.length > 8
        invalid_properties.push('invalid value for "bank_country_id", the character length must be smaller than or equal to 8.')
      end

      if !@bank_name.nil? && @bank_name.to_s.length > 64
        invalid_properties.push('invalid value for "bank_name", the character length must be smaller than or equal to 64.')
      end

      if !@bank_state.nil? && @bank_state.to_s.length > 2
        invalid_properties.push('invalid value for "bank_state", the character length must be smaller than or equal to 2.')
      end

      if !@bank_zip.nil? && @bank_zip.to_s.length > 16
        invalid_properties.push('invalid value for "bank_zip", the character length must be smaller than or equal to 16.')
      end

      if !@c_c_address1.nil? && @c_c_address1.to_s.length > 128
        invalid_properties.push('invalid value for "c_c_address1", the character length must be smaller than or equal to 128.')
      end

      if !@c_c_address2.nil? && @c_c_address2.to_s.length > 128
        invalid_properties.push('invalid value for "c_c_address2", the character length must be smaller than or equal to 128.')
      end

      if !@c_c_city.nil? && @c_c_city.to_s.length > 32
        invalid_properties.push('invalid value for "c_c_city", the character length must be smaller than or equal to 32.')
      end

      if !@c_c_debit_credit.nil? && @c_c_debit_credit.to_s.length > 8
        invalid_properties.push('invalid value for "c_c_debit_credit", the character length must be smaller than or equal to 8.')
      end

      if !@c_c_name_on_card.nil? && @c_c_name_on_card.to_s.length > 128
        invalid_properties.push('invalid value for "c_c_name_on_card", the character length must be smaller than or equal to 128.')
      end

      if !@c_c_number.nil? && @c_c_number.to_s.length > 32
        invalid_properties.push('invalid value for "c_c_number", the character length must be smaller than or equal to 32.')
      end

      if !@c_c_state.nil? && @c_c_state.to_s.length > 2
        invalid_properties.push('invalid value for "c_c_state", the character length must be smaller than or equal to 2.')
      end

      if !@c_c_type.nil? && @c_c_type.to_s.length > 16
        invalid_properties.push('invalid value for "c_c_type", the character length must be smaller than or equal to 16.')
      end

      if !@c_c_zip.nil? && @c_c_zip.to_s.length > 16
        invalid_properties.push('invalid value for "c_c_zip", the character length must be smaller than or equal to 16.')
      end

      if !@currency_id.nil? && @currency_id.to_s.length > 16
        invalid_properties.push('invalid value for "currency_id", the character length must be smaller than or equal to 16.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@fractional_routing_number.nil? && @fractional_routing_number.to_s.length > 32
        invalid_properties.push('invalid value for "fractional_routing_number", the character length must be smaller than or equal to 32.')
      end

      if !@mic_r_line.nil? && @mic_r_line.to_s.length > 128
        invalid_properties.push('invalid value for "mic_r_line", the character length must be smaller than or equal to 128.')
      end

      if !@routing_number.nil? && @routing_number.to_s.length > 32
        invalid_properties.push('invalid value for "routing_number", the character length must be smaller than or equal to 32.')
      end

      if !@security_code.nil? && @security_code.to_s.length > 8
        invalid_properties.push('invalid value for "security_code", the character length must be smaller than or equal to 8.')
      end

      if !@swift_code.nil? && @swift_code.to_s.length > 20
        invalid_properties.push('invalid value for "swift_code", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_ach_numbering.nil?
        invalid_properties.push('invalid value for "use_ach_numbering", use_ach_numbering cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account_key.nil?
      return false if !@ac_h_number_prefix.nil? && @ac_h_number_prefix.to_s.length > 8
      return false if !@ac_h_number_suffix.nil? && @ac_h_number_suffix.to_s.length > 8
      return false if !@account_category.nil? && @account_category.to_s.length > 8
      return false if !@account_name.nil? && @account_name.to_s.length > 64
      return false if !@account_number.nil? && @account_number.to_s.length > 32
      return false if !@account_type.nil? && @account_type.to_s.length > 8
      return false if !@bank_address1.nil? && @bank_address1.to_s.length > 128
      return false if !@bank_address2.nil? && @bank_address2.to_s.length > 128
      return false if !@bank_city.nil? && @bank_city.to_s.length > 32
      return false if !@bank_country_id.nil? && @bank_country_id.to_s.length > 8
      return false if !@bank_name.nil? && @bank_name.to_s.length > 64
      return false if !@bank_state.nil? && @bank_state.to_s.length > 2
      return false if !@bank_zip.nil? && @bank_zip.to_s.length > 16
      return false if !@c_c_address1.nil? && @c_c_address1.to_s.length > 128
      return false if !@c_c_address2.nil? && @c_c_address2.to_s.length > 128
      return false if !@c_c_city.nil? && @c_c_city.to_s.length > 32
      return false if !@c_c_debit_credit.nil? && @c_c_debit_credit.to_s.length > 8
      return false if !@c_c_name_on_card.nil? && @c_c_name_on_card.to_s.length > 128
      return false if !@c_c_number.nil? && @c_c_number.to_s.length > 32
      return false if !@c_c_state.nil? && @c_c_state.to_s.length > 2
      return false if !@c_c_type.nil? && @c_c_type.to_s.length > 16
      return false if !@c_c_zip.nil? && @c_c_zip.to_s.length > 16
      return false if !@currency_id.nil? && @currency_id.to_s.length > 16
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if !@fractional_routing_number.nil? && @fractional_routing_number.to_s.length > 32
      return false if !@mic_r_line.nil? && @mic_r_line.to_s.length > 128
      return false if !@routing_number.nil? && @routing_number.to_s.length > 32
      return false if !@security_code.nil? && @security_code.to_s.length > 8
      return false if !@swift_code.nil? && @swift_code.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_ach_numbering.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_key Value to be assigned
    def account_key=(account_key)
      if account_key.nil?
        fail ArgumentError, 'account_key cannot be nil'
      end

      @account_key = account_key
    end

    # Custom attribute writer method with validation
    # @param [Object] ac_h_number_prefix Value to be assigned
    def ac_h_number_prefix=(ac_h_number_prefix)
      if !ac_h_number_prefix.nil? && ac_h_number_prefix.to_s.length > 8
        fail ArgumentError, 'invalid value for "ac_h_number_prefix", the character length must be smaller than or equal to 8.'
      end

      @ac_h_number_prefix = ac_h_number_prefix
    end

    # Custom attribute writer method with validation
    # @param [Object] ac_h_number_suffix Value to be assigned
    def ac_h_number_suffix=(ac_h_number_suffix)
      if !ac_h_number_suffix.nil? && ac_h_number_suffix.to_s.length > 8
        fail ArgumentError, 'invalid value for "ac_h_number_suffix", the character length must be smaller than or equal to 8.'
      end

      @ac_h_number_suffix = ac_h_number_suffix
    end

    # Custom attribute writer method with validation
    # @param [Object] account_category Value to be assigned
    def account_category=(account_category)
      if !account_category.nil? && account_category.to_s.length > 8
        fail ArgumentError, 'invalid value for "account_category", the character length must be smaller than or equal to 8.'
      end

      @account_category = account_category
    end

    # Custom attribute writer method with validation
    # @param [Object] account_name Value to be assigned
    def account_name=(account_name)
      if !account_name.nil? && account_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "account_name", the character length must be smaller than or equal to 64.'
      end

      @account_name = account_name
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number Value to be assigned
    def account_number=(account_number)
      if !account_number.nil? && account_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "account_number", the character length must be smaller than or equal to 32.'
      end

      @account_number = account_number
    end

    # Custom attribute writer method with validation
    # @param [Object] account_type Value to be assigned
    def account_type=(account_type)
      if !account_type.nil? && account_type.to_s.length > 8
        fail ArgumentError, 'invalid value for "account_type", the character length must be smaller than or equal to 8.'
      end

      @account_type = account_type
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_address1 Value to be assigned
    def bank_address1=(bank_address1)
      if !bank_address1.nil? && bank_address1.to_s.length > 128
        fail ArgumentError, 'invalid value for "bank_address1", the character length must be smaller than or equal to 128.'
      end

      @bank_address1 = bank_address1
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_address2 Value to be assigned
    def bank_address2=(bank_address2)
      if !bank_address2.nil? && bank_address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "bank_address2", the character length must be smaller than or equal to 128.'
      end

      @bank_address2 = bank_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_city Value to be assigned
    def bank_city=(bank_city)
      if !bank_city.nil? && bank_city.to_s.length > 32
        fail ArgumentError, 'invalid value for "bank_city", the character length must be smaller than or equal to 32.'
      end

      @bank_city = bank_city
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_country_id Value to be assigned
    def bank_country_id=(bank_country_id)
      if !bank_country_id.nil? && bank_country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "bank_country_id", the character length must be smaller than or equal to 8.'
      end

      @bank_country_id = bank_country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_name Value to be assigned
    def bank_name=(bank_name)
      if !bank_name.nil? && bank_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "bank_name", the character length must be smaller than or equal to 64.'
      end

      @bank_name = bank_name
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_state Value to be assigned
    def bank_state=(bank_state)
      if !bank_state.nil? && bank_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "bank_state", the character length must be smaller than or equal to 2.'
      end

      @bank_state = bank_state
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_zip Value to be assigned
    def bank_zip=(bank_zip)
      if !bank_zip.nil? && bank_zip.to_s.length > 16
        fail ArgumentError, 'invalid value for "bank_zip", the character length must be smaller than or equal to 16.'
      end

      @bank_zip = bank_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_address1 Value to be assigned
    def c_c_address1=(c_c_address1)
      if !c_c_address1.nil? && c_c_address1.to_s.length > 128
        fail ArgumentError, 'invalid value for "c_c_address1", the character length must be smaller than or equal to 128.'
      end

      @c_c_address1 = c_c_address1
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_address2 Value to be assigned
    def c_c_address2=(c_c_address2)
      if !c_c_address2.nil? && c_c_address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "c_c_address2", the character length must be smaller than or equal to 128.'
      end

      @c_c_address2 = c_c_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_city Value to be assigned
    def c_c_city=(c_c_city)
      if !c_c_city.nil? && c_c_city.to_s.length > 32
        fail ArgumentError, 'invalid value for "c_c_city", the character length must be smaller than or equal to 32.'
      end

      @c_c_city = c_c_city
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_debit_credit Value to be assigned
    def c_c_debit_credit=(c_c_debit_credit)
      if !c_c_debit_credit.nil? && c_c_debit_credit.to_s.length > 8
        fail ArgumentError, 'invalid value for "c_c_debit_credit", the character length must be smaller than or equal to 8.'
      end

      @c_c_debit_credit = c_c_debit_credit
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_name_on_card Value to be assigned
    def c_c_name_on_card=(c_c_name_on_card)
      if !c_c_name_on_card.nil? && c_c_name_on_card.to_s.length > 128
        fail ArgumentError, 'invalid value for "c_c_name_on_card", the character length must be smaller than or equal to 128.'
      end

      @c_c_name_on_card = c_c_name_on_card
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_number Value to be assigned
    def c_c_number=(c_c_number)
      if !c_c_number.nil? && c_c_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "c_c_number", the character length must be smaller than or equal to 32.'
      end

      @c_c_number = c_c_number
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_state Value to be assigned
    def c_c_state=(c_c_state)
      if !c_c_state.nil? && c_c_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "c_c_state", the character length must be smaller than or equal to 2.'
      end

      @c_c_state = c_c_state
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_type Value to be assigned
    def c_c_type=(c_c_type)
      if !c_c_type.nil? && c_c_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "c_c_type", the character length must be smaller than or equal to 16.'
      end

      @c_c_type = c_c_type
    end

    # Custom attribute writer method with validation
    # @param [Object] c_c_zip Value to be assigned
    def c_c_zip=(c_c_zip)
      if !c_c_zip.nil? && c_c_zip.to_s.length > 16
        fail ArgumentError, 'invalid value for "c_c_zip", the character length must be smaller than or equal to 16.'
      end

      @c_c_zip = c_c_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_id Value to be assigned
    def currency_id=(currency_id)
      if !currency_id.nil? && currency_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "currency_id", the character length must be smaller than or equal to 16.'
      end

      @currency_id = currency_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fractional_routing_number Value to be assigned
    def fractional_routing_number=(fractional_routing_number)
      if !fractional_routing_number.nil? && fractional_routing_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "fractional_routing_number", the character length must be smaller than or equal to 32.'
      end

      @fractional_routing_number = fractional_routing_number
    end

    # Custom attribute writer method with validation
    # @param [Object] mic_r_line Value to be assigned
    def mic_r_line=(mic_r_line)
      if !mic_r_line.nil? && mic_r_line.to_s.length > 128
        fail ArgumentError, 'invalid value for "mic_r_line", the character length must be smaller than or equal to 128.'
      end

      @mic_r_line = mic_r_line
    end

    # Custom attribute writer method with validation
    # @param [Object] routing_number Value to be assigned
    def routing_number=(routing_number)
      if !routing_number.nil? && routing_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "routing_number", the character length must be smaller than or equal to 32.'
      end

      @routing_number = routing_number
    end

    # Custom attribute writer method with validation
    # @param [Object] security_code Value to be assigned
    def security_code=(security_code)
      if !security_code.nil? && security_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "security_code", the character length must be smaller than or equal to 8.'
      end

      @security_code = security_code
    end

    # Custom attribute writer method with validation
    # @param [Object] swift_code Value to be assigned
    def swift_code=(swift_code)
      if !swift_code.nil? && swift_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "swift_code", the character length must be smaller than or equal to 20.'
      end

      @swift_code = swift_code
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_ach_numbering Value to be assigned
    def use_ach_numbering=(use_ach_numbering)
      if use_ach_numbering.nil?
        fail ArgumentError, 'use_ach_numbering cannot be nil'
      end

      @use_ach_numbering = use_ach_numbering
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_key == o.account_key &&
          ac_h_number_prefix == o.ac_h_number_prefix &&
          ac_h_number_suffix == o.ac_h_number_suffix &&
          account_category == o.account_category &&
          account_name == o.account_name &&
          account_number == o.account_number &&
          account_type == o.account_type &&
          bank_address1 == o.bank_address1 &&
          bank_address2 == o.bank_address2 &&
          bank_city == o.bank_city &&
          bank_country_id == o.bank_country_id &&
          bank_name == o.bank_name &&
          bank_state == o.bank_state &&
          bank_zip == o.bank_zip &&
          c_c_address1 == o.c_c_address1 &&
          c_c_address2 == o.c_c_address2 &&
          c_c_city == o.c_c_city &&
          c_c_debit_credit == o.c_c_debit_credit &&
          c_c_exp_month == o.c_c_exp_month &&
          c_c_exp_year == o.c_c_exp_year &&
          c_c_name_on_card == o.c_c_name_on_card &&
          c_c_number == o.c_c_number &&
          c_c_sec_code == o.c_c_sec_code &&
          c_c_state == o.c_c_state &&
          c_c_type == o.c_c_type &&
          c_c_zip == o.c_c_zip &&
          currency_id == o.currency_id &&
          default_check_stock == o.default_check_stock &&
          default_funding_threshold == o.default_funding_threshold &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          federal_id == o.federal_id &&
          fractional_routing_number == o.fractional_routing_number &&
          last_ach_number == o.last_ach_number &&
          last_check_number == o.last_check_number &&
          mic_r_check_num_start_pos == o.mic_r_check_num_start_pos &&
          mic_r_line == o.mic_r_line &&
          positive_pay_required == o.positive_pay_required &&
          routing_number == o.routing_number &&
          security_code == o.security_code &&
          statement_format_key == o.statement_format_key &&
          swift_code == o.swift_code &&
          term_date == o.term_date &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_ach_numbering == o.use_ach_numbering
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_key, ac_h_number_prefix, ac_h_number_suffix, account_category, account_name, account_number, account_type, bank_address1, bank_address2, bank_city, bank_country_id, bank_name, bank_state, bank_zip, c_c_address1, c_c_address2, c_c_city, c_c_debit_credit, c_c_exp_month, c_c_exp_year, c_c_name_on_card, c_c_number, c_c_sec_code, c_c_state, c_c_type, c_c_zip, currency_id, default_check_stock, default_funding_threshold, effective_date, entry_date, entry_user, ex_code, federal_id, fractional_routing_number, last_ach_number, last_check_number, mic_r_check_num_start_pos, mic_r_line, positive_pay_required, routing_number, security_code, statement_format_key, swift_code, term_date, update_date, update_user, use_ach_numbering].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
