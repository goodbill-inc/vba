=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupDivision
    # References Groups.Group_ID value on parent record.
    attr_accessor :group_id

    # Unique Division identifier assigned inside this Group. This ID must be unique within the Group ID.
    attr_accessor :division_id

    # References the FundingAccount.Account_Key that holds the ACH information for this Division for any ACH processing.
    attr_accessor :ac_h_account_key

    # References the PayorAccount.Account_Key value in parent table.
    attr_accessor :account_key

    # Address associated with the Division.
    attr_accessor :address

    # Address 2 associated with the Division.
    attr_accessor :address2

    # Identifies the age at which dependents are considered to be adults. Student status information is required on the enrollment to allow claims to pay for a dependent whose age exceeds the age defined here.
    attr_accessor :adult_age

    # Information field for custom client reporting.
    attr_accessor :agri_tax_return

    # This flag tells adjudication to not error if no authorization is found on claims that require authorization. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :auth_not_reqd_override

    # Information field for custom client reporting.
    attr_accessor :brokerage

    # When utilizing the Auto-Term process, notes the adjustment reason applied to premiums impacted by a retro term.
    attr_accessor :cobr_a_auto_term_adj_reason

    # When utilizing the Auto-Term process, indicates the Term Reason to apply if COBRA is being enrolled.
    attr_accessor :cobr_a_auto_term_reason

    # Points to the Division ID that is the COBRA Division for this Division. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :cobr_a_division

    # Information field for custom client reporting. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :co_e_network

    # Information field for custom client reporting.
    attr_accessor :case_rate

    # City of the Division address.
    attr_accessor :city

    # No longer in use.
    attr_accessor :claim_days_allowed

    # No longer in use, replaced by GroupClass table.
    attr_accessor :class_description

    # No longer in use, replaced by GroupClass table.
    attr_accessor :class_id

    # Country Code for the Contact Phone Number.
    attr_accessor :contact_country_code

    # The division contact email address.
    attr_accessor :contact_email_address

    # The contacts extension for their phone number.
    attr_accessor :contact_extension

    # The Contact Phone number for this Divisions Contact.
    attr_accessor :contact_phone

    # Title of the Division's primary contact.
    attr_accessor :contact_title

    # Country ID associated with the Division.
    attr_accessor :country_id

    # County code of the Division address.
    attr_accessor :county_code

    # Identifies the age at which dependents are no longer eligible for coverage. Adult Dependent information is required on the enrollment to allow claims to pay for a dependent whose age exceeds the age defined here.
    attr_accessor :cutoff_age

    # When disenrolling a member and reenrolling into COBRA, this indicates the default reason attached to the disenroll.
    attr_accessor :default_cobra_reason

    # For reports in the \"INV\" Report_Category, this provides the user with the list of invoice reports they can set as the default report using for automated invoice generation.
    attr_accessor :default_invoice_report_definition_key

    # Indicates the day of the week the paid through is set when using automatic paid through dates.
    attr_accessor :disability_pay_through_day

    # This notes that the Division has been terminated and what date. An active Division has a NULL value here.
    attr_accessor :disenroll_date

    # References the PayorAccount.Account_Key value in parent table.
    attr_accessor :distribution_account_key

    # References the PayorAccount.Payor_ID value in parent table.
    attr_accessor :distribution_payor_id

    # This flag tells adjudication to ignore Duplicate Claims Processing logic if enabled. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :duplicate_claim_override

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # For Disability tax calculations, this indicates if the Division is exempt from taking Federal taxes on the claim payments. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_federal

    # For Disability tax calculations, this indicates if the Division is exempt from taking Medicare taxes on the claim payments. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_medicare

    # For Disability tax calculations, this indicates if the Division is exempt from taking Social Security taxes on the claim payments. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_soc_sec

    # For Disability tax calculations, this indicates if the Division is exempt from taking State taxes on the claim payments. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_state

    # Notes if the employer matches FICA (lowers that tax to 0) during claims adjudication. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :fic_a_employer_match

    # The fax number for this Division.
    attr_accessor :fax

    # Country Code for the Division Fax Number.
    attr_accessor :fax_country_code

    # This Division Tax ID.
    attr_accessor :federal_id

    # Limit of days for the federal tax exemption.
    attr_accessor :federal_tax_day_limit

    # Wage limit for the federal tax exemption.
    attr_accessor :federal_wage_limit

    # Notes if this Division is part of tax reporting and should have its data sent for W2 generation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :generate_w2

    # Information field for custom client reporting.
    attr_accessor :group_division_captive

    # Indicates the grace period for invoice generation for this Division. This value works with \"Invoice_Grace_Period_Type\" to determine duration.
    attr_accessor :invoice_grace_period

    # When a grace period is applied to an invoice that impacts \"Paid Through\", the affected claims will apply this Ex Code.
    attr_accessor :invoice_grace_period_ex_code

    # Based on \"Invoice_Grace_Period\", this is the Days, Weeks, Months or Years that grace period extends.
    attr_accessor :invoice_grace_period_type

    # Indiciates the level of invoicing done by premium billing. There are 3 levels you can configure: S - Subscriber level invoicing (meaning an invoice per enrolled Subscriber), D - Division level invoicing (meaning an invoice per Division with all enrolled Subscribers in that Division on that Invoice), and G - Group level invoicing (meaning an invoice for the whole group with all enrolled Subscribers on the same invoice).
    attr_accessor :invoice_level

    # When generating Division level invoices through premium biling, this is the Address on that invoice.
    attr_accessor :invoice_remit_address1

    # When generating Division level invoices through premium biling, this is the Address 2 on that invoice.
    attr_accessor :invoice_remit_address2

    # When generating Division level invoices through premium biling, this is the City on that invoice.
    attr_accessor :invoice_remit_city

    # When generating Division level invoices through premium biling, this is the Phone Number Country Code on that invoice.
    attr_accessor :invoice_remit_country_code

    # When generating Division level invoices through premium biling, this is the Country ID on that invoice.
    attr_accessor :invoice_remit_country_id

    # When generating Division level invoices through premium biling, this is the Name on that invoice.
    attr_accessor :invoice_remit_name

    # When generating Division level invoices through premium biling, this is the Phone Number on that invoice.
    attr_accessor :invoice_remit_phone_number

    # When generating Division level invoices through premium biling, this is the State on that invoice.
    attr_accessor :invoice_remit_state

    # When generating Division level invoices through premium biling, this is the Zip Code on that invoice.
    attr_accessor :invoice_remit_zip_code

    # For Life & Disability clients, this holds the issue state for processing taxes and reporting.
    attr_accessor :issue_state

    # For Life & Disability clients, this is the default Mail To setting applied to claims created through the advisor wizards. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :mail_to_default

    # Limit of days for the medicare tax exemption.
    attr_accessor :medicare_tax_day_limit

    # Wage liimit for the medicare tax exemption.
    attr_accessor :medicare_wage_limit

    # Name of the Group Division.
    attr_accessor :name

    # No longer in use. Replaced by the Notes module.
    attr_accessor :notes

    # Information field for custom client reporting.
    attr_accessor :number_lives

    # This is the first start date (original effective date) of the Division inside this group. This date should be equal to or earlier than the first GroupContact.Coverage_Start date attached to this Division.
    attr_accessor :original_date

    # This is the Ex Code applied if COB is identified during adjudciation and Other Insurance information is used during processing.
    attr_accessor :other_insurance_ex_code

    # This is the paid through date for any Division level invoices through premium billing. This can be manually set or updated by the system.
    attr_accessor :paid_through

    # Information field for custom client reporting.
    attr_accessor :participation_incentive_id

    # For processing that uses the Pay To Account, this referneces the FundingAccount.Account_Key for that process.
    attr_accessor :pay_to_account

    # References the PayorAccount.Payor_ID value in parent table.
    attr_accessor :payor_id

    # The Ex Code applied during claims adjudication if \"Pend_Flag\" is enabled.
    attr_accessor :pend_ex_code

    # Notes that this Division should have a pend code (Ex Code) applied during claims processing for any claims for this Division.
    attr_accessor :pend_flag

    # The phone number for this Division.
    attr_accessor :phone

    # Country Code for the Division Phone Number.
    attr_accessor :phone_country_code

    # No longer in use.
    attr_accessor :premium_location

    # Primary contact of the Division.
    attr_accessor :primary_contact

    # Notes if this division should have disability deductions pro-rated during claims processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :prorate_deduction

    # Indicates the type of prorating to calculate against. If calculating against flat deduction types only, set to F, to apply prorating to Percentage based deductions, set to P, if applying prorating on all deduction types, set to B.
    attr_accessor :prorate_deduction_type

    # Information field for custom client reporting.
    attr_accessor :reference_based_pricing

    # Information field for noting the region for this Division.
    attr_accessor :region_code

    # No longer in use. Replaces by the full reinsurance module.
    attr_accessor :reinsurance_option

    # Information field for custom client reporting.
    attr_accessor :seer_data

    # Notes if this division should have the paid through set as part of satisfying a premium bill. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :set_paid_through

    # Limit of days for the social security tax exemption.
    attr_accessor :soc_sec_tax_day_limit

    # Wage limite for Social Security tax exemption.
    attr_accessor :soc_sec_wage_limit

    # No longer in use. Replaces by the full reinsurance module.
    attr_accessor :spec_deductible

    # State of the Division address.
    attr_accessor :state

    # Limit of days for the state tax exemption.
    attr_accessor :state_tax_day_limit

    # Wage limit for the state tax exemption.
    attr_accessor :state_wage_limit

    # Indicates if the tax day limitations are by day or calendar months. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :tax_day_limit_type

    # Information field for custom client reporting.
    attr_accessor :transplant_elite

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Limits the deduction types that can be selected on disability claims to use the GroupDivisionDeductionType list. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_restricted_deductions

    # The Zip Code for this Division address.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'ac_h_account_key' => :'acH_Account_Key',
        :'account_key' => :'account_Key',
        :'address' => :'address',
        :'address2' => :'address2',
        :'adult_age' => :'adult_Age',
        :'agri_tax_return' => :'agri_Tax_Return',
        :'auth_not_reqd_override' => :'auth_Not_Reqd_Override',
        :'brokerage' => :'brokerage',
        :'cobr_a_auto_term_adj_reason' => :'cobrA_Auto_Term_Adj_Reason',
        :'cobr_a_auto_term_reason' => :'cobrA_Auto_Term_Reason',
        :'cobr_a_division' => :'cobrA_Division',
        :'co_e_network' => :'coE_Network',
        :'case_rate' => :'caseRate',
        :'city' => :'city',
        :'claim_days_allowed' => :'claim_Days_Allowed',
        :'class_description' => :'class_Description',
        :'class_id' => :'class_ID',
        :'contact_country_code' => :'contact_Country_Code',
        :'contact_email_address' => :'contact_Email_Address',
        :'contact_extension' => :'contact_Extension',
        :'contact_phone' => :'contact_Phone',
        :'contact_title' => :'contact_Title',
        :'country_id' => :'country_ID',
        :'county_code' => :'county_Code',
        :'cutoff_age' => :'cutoff_Age',
        :'default_cobra_reason' => :'default_COBRA_Reason',
        :'default_invoice_report_definition_key' => :'default_Invoice_ReportDefinition_Key',
        :'disability_pay_through_day' => :'disability_Pay_Through_Day',
        :'disenroll_date' => :'disenroll_Date',
        :'distribution_account_key' => :'distribution_Account_Key',
        :'distribution_payor_id' => :'distribution_Payor_ID',
        :'duplicate_claim_override' => :'duplicate_Claim_Override',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'exempt_federal' => :'exempt_Federal',
        :'exempt_medicare' => :'exempt_Medicare',
        :'exempt_soc_sec' => :'exempt_SocSec',
        :'exempt_state' => :'exempt_State',
        :'fic_a_employer_match' => :'ficA_Employer_Match',
        :'fax' => :'fax',
        :'fax_country_code' => :'fax_Country_Code',
        :'federal_id' => :'federal_ID',
        :'federal_tax_day_limit' => :'federal_Tax_Day_Limit',
        :'federal_wage_limit' => :'federal_Wage_Limit',
        :'generate_w2' => :'generate_W2',
        :'group_division_captive' => :'groupDivisionCaptive',
        :'invoice_grace_period' => :'invoice_Grace_Period',
        :'invoice_grace_period_ex_code' => :'invoice_Grace_Period_Ex_Code',
        :'invoice_grace_period_type' => :'invoice_Grace_Period_Type',
        :'invoice_level' => :'invoice_Level',
        :'invoice_remit_address1' => :'invoice_Remit_Address1',
        :'invoice_remit_address2' => :'invoice_Remit_Address2',
        :'invoice_remit_city' => :'invoice_Remit_City',
        :'invoice_remit_country_code' => :'invoice_Remit_Country_Code',
        :'invoice_remit_country_id' => :'invoice_Remit_Country_ID',
        :'invoice_remit_name' => :'invoice_Remit_Name',
        :'invoice_remit_phone_number' => :'invoice_Remit_Phone_Number',
        :'invoice_remit_state' => :'invoice_Remit_State',
        :'invoice_remit_zip_code' => :'invoice_Remit_Zip_Code',
        :'issue_state' => :'issue_State',
        :'mail_to_default' => :'mail_To_Default',
        :'medicare_tax_day_limit' => :'medicare_Tax_Day_Limit',
        :'medicare_wage_limit' => :'medicare_Wage_Limit',
        :'name' => :'name',
        :'notes' => :'notes',
        :'number_lives' => :'numberLives',
        :'original_date' => :'original_Date',
        :'other_insurance_ex_code' => :'other_Insurance_ExCode',
        :'paid_through' => :'paid_Through',
        :'participation_incentive_id' => :'participationIncentive_ID',
        :'pay_to_account' => :'pay_To_Account',
        :'payor_id' => :'payor_ID',
        :'pend_ex_code' => :'pend_Ex_Code',
        :'pend_flag' => :'pend_Flag',
        :'phone' => :'phone',
        :'phone_country_code' => :'phone_Country_Code',
        :'premium_location' => :'premium_Location',
        :'primary_contact' => :'primary_Contact',
        :'prorate_deduction' => :'prorate_Deduction',
        :'prorate_deduction_type' => :'prorate_Deduction_Type',
        :'reference_based_pricing' => :'reference_Based_Pricing',
        :'region_code' => :'region_Code',
        :'reinsurance_option' => :'reinsurance_Option',
        :'seer_data' => :'seerData',
        :'set_paid_through' => :'set_Paid_Through',
        :'soc_sec_tax_day_limit' => :'socSec_Tax_Day_Limit',
        :'soc_sec_wage_limit' => :'socSec_Wage_Limit',
        :'spec_deductible' => :'spec_Deductible',
        :'state' => :'state',
        :'state_tax_day_limit' => :'state_Tax_Day_Limit',
        :'state_wage_limit' => :'state_Wage_Limit',
        :'tax_day_limit_type' => :'tax_Day_Limit_Type',
        :'transplant_elite' => :'transplantElite',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_restricted_deductions' => :'use_Restricted_Deductions',
        :'zip_code' => :'zip_Code'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'ac_h_account_key' => :'Integer',
        :'account_key' => :'Integer',
        :'address' => :'String',
        :'address2' => :'String',
        :'adult_age' => :'Integer',
        :'agri_tax_return' => :'String',
        :'auth_not_reqd_override' => :'Boolean',
        :'brokerage' => :'String',
        :'cobr_a_auto_term_adj_reason' => :'Integer',
        :'cobr_a_auto_term_reason' => :'Integer',
        :'cobr_a_division' => :'Boolean',
        :'co_e_network' => :'Boolean',
        :'case_rate' => :'Float',
        :'city' => :'String',
        :'claim_days_allowed' => :'Integer',
        :'class_description' => :'String',
        :'class_id' => :'String',
        :'contact_country_code' => :'String',
        :'contact_email_address' => :'String',
        :'contact_extension' => :'String',
        :'contact_phone' => :'String',
        :'contact_title' => :'String',
        :'country_id' => :'String',
        :'county_code' => :'String',
        :'cutoff_age' => :'Integer',
        :'default_cobra_reason' => :'Integer',
        :'default_invoice_report_definition_key' => :'Integer',
        :'disability_pay_through_day' => :'Integer',
        :'disenroll_date' => :'Time',
        :'distribution_account_key' => :'Integer',
        :'distribution_payor_id' => :'String',
        :'duplicate_claim_override' => :'Boolean',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'exempt_federal' => :'Boolean',
        :'exempt_medicare' => :'Boolean',
        :'exempt_soc_sec' => :'Boolean',
        :'exempt_state' => :'Boolean',
        :'fic_a_employer_match' => :'Boolean',
        :'fax' => :'String',
        :'fax_country_code' => :'String',
        :'federal_id' => :'String',
        :'federal_tax_day_limit' => :'Integer',
        :'federal_wage_limit' => :'Float',
        :'generate_w2' => :'Boolean',
        :'group_division_captive' => :'String',
        :'invoice_grace_period' => :'Integer',
        :'invoice_grace_period_ex_code' => :'String',
        :'invoice_grace_period_type' => :'String',
        :'invoice_level' => :'String',
        :'invoice_remit_address1' => :'String',
        :'invoice_remit_address2' => :'String',
        :'invoice_remit_city' => :'String',
        :'invoice_remit_country_code' => :'String',
        :'invoice_remit_country_id' => :'String',
        :'invoice_remit_name' => :'String',
        :'invoice_remit_phone_number' => :'String',
        :'invoice_remit_state' => :'String',
        :'invoice_remit_zip_code' => :'String',
        :'issue_state' => :'String',
        :'mail_to_default' => :'Boolean',
        :'medicare_tax_day_limit' => :'Integer',
        :'medicare_wage_limit' => :'Float',
        :'name' => :'String',
        :'notes' => :'String',
        :'number_lives' => :'Integer',
        :'original_date' => :'Time',
        :'other_insurance_ex_code' => :'String',
        :'paid_through' => :'Time',
        :'participation_incentive_id' => :'String',
        :'pay_to_account' => :'Integer',
        :'payor_id' => :'String',
        :'pend_ex_code' => :'String',
        :'pend_flag' => :'String',
        :'phone' => :'String',
        :'phone_country_code' => :'String',
        :'premium_location' => :'String',
        :'primary_contact' => :'String',
        :'prorate_deduction' => :'Boolean',
        :'prorate_deduction_type' => :'String',
        :'reference_based_pricing' => :'String',
        :'region_code' => :'String',
        :'reinsurance_option' => :'String',
        :'seer_data' => :'Integer',
        :'set_paid_through' => :'Boolean',
        :'soc_sec_tax_day_limit' => :'Integer',
        :'soc_sec_wage_limit' => :'Float',
        :'spec_deductible' => :'String',
        :'state' => :'String',
        :'state_tax_day_limit' => :'Integer',
        :'state_wage_limit' => :'Float',
        :'tax_day_limit_type' => :'Integer',
        :'transplant_elite' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_restricted_deductions' => :'Boolean',
        :'zip_code' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ac_h_account_key',
        :'account_key',
        :'address',
        :'address2',
        :'adult_age',
        :'agri_tax_return',
        :'brokerage',
        :'cobr_a_auto_term_adj_reason',
        :'cobr_a_auto_term_reason',
        :'case_rate',
        :'city',
        :'claim_days_allowed',
        :'class_description',
        :'class_id',
        :'contact_country_code',
        :'contact_email_address',
        :'contact_extension',
        :'contact_phone',
        :'contact_title',
        :'country_id',
        :'county_code',
        :'cutoff_age',
        :'default_cobra_reason',
        :'default_invoice_report_definition_key',
        :'disability_pay_through_day',
        :'disenroll_date',
        :'distribution_account_key',
        :'distribution_payor_id',
        :'entry_user',
        :'fax',
        :'fax_country_code',
        :'federal_id',
        :'federal_tax_day_limit',
        :'federal_wage_limit',
        :'group_division_captive',
        :'invoice_grace_period',
        :'invoice_grace_period_ex_code',
        :'invoice_grace_period_type',
        :'invoice_level',
        :'invoice_remit_address1',
        :'invoice_remit_address2',
        :'invoice_remit_city',
        :'invoice_remit_country_code',
        :'invoice_remit_country_id',
        :'invoice_remit_name',
        :'invoice_remit_phone_number',
        :'invoice_remit_state',
        :'invoice_remit_zip_code',
        :'issue_state',
        :'medicare_tax_day_limit',
        :'medicare_wage_limit',
        :'name',
        :'notes',
        :'number_lives',
        :'original_date',
        :'other_insurance_ex_code',
        :'paid_through',
        :'participation_incentive_id',
        :'pay_to_account',
        :'payor_id',
        :'pend_ex_code',
        :'pend_flag',
        :'phone',
        :'phone_country_code',
        :'premium_location',
        :'primary_contact',
        :'prorate_deduction_type',
        :'reference_based_pricing',
        :'region_code',
        :'reinsurance_option',
        :'seer_data',
        :'soc_sec_tax_day_limit',
        :'soc_sec_wage_limit',
        :'spec_deductible',
        :'state',
        :'state_tax_day_limit',
        :'state_wage_limit',
        :'transplant_elite',
        :'update_user',
        :'zip_code'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupDivision` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupDivision`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      else
        self.division_id = nil
      end

      if attributes.key?(:'ac_h_account_key')
        self.ac_h_account_key = attributes[:'ac_h_account_key']
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'adult_age')
        self.adult_age = attributes[:'adult_age']
      end

      if attributes.key?(:'agri_tax_return')
        self.agri_tax_return = attributes[:'agri_tax_return']
      end

      if attributes.key?(:'auth_not_reqd_override')
        self.auth_not_reqd_override = attributes[:'auth_not_reqd_override']
      else
        self.auth_not_reqd_override = nil
      end

      if attributes.key?(:'brokerage')
        self.brokerage = attributes[:'brokerage']
      end

      if attributes.key?(:'cobr_a_auto_term_adj_reason')
        self.cobr_a_auto_term_adj_reason = attributes[:'cobr_a_auto_term_adj_reason']
      end

      if attributes.key?(:'cobr_a_auto_term_reason')
        self.cobr_a_auto_term_reason = attributes[:'cobr_a_auto_term_reason']
      end

      if attributes.key?(:'cobr_a_division')
        self.cobr_a_division = attributes[:'cobr_a_division']
      else
        self.cobr_a_division = nil
      end

      if attributes.key?(:'co_e_network')
        self.co_e_network = attributes[:'co_e_network']
      else
        self.co_e_network = nil
      end

      if attributes.key?(:'case_rate')
        self.case_rate = attributes[:'case_rate']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'claim_days_allowed')
        self.claim_days_allowed = attributes[:'claim_days_allowed']
      end

      if attributes.key?(:'class_description')
        self.class_description = attributes[:'class_description']
      end

      if attributes.key?(:'class_id')
        self.class_id = attributes[:'class_id']
      end

      if attributes.key?(:'contact_country_code')
        self.contact_country_code = attributes[:'contact_country_code']
      end

      if attributes.key?(:'contact_email_address')
        self.contact_email_address = attributes[:'contact_email_address']
      end

      if attributes.key?(:'contact_extension')
        self.contact_extension = attributes[:'contact_extension']
      end

      if attributes.key?(:'contact_phone')
        self.contact_phone = attributes[:'contact_phone']
      end

      if attributes.key?(:'contact_title')
        self.contact_title = attributes[:'contact_title']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'cutoff_age')
        self.cutoff_age = attributes[:'cutoff_age']
      end

      if attributes.key?(:'default_cobra_reason')
        self.default_cobra_reason = attributes[:'default_cobra_reason']
      end

      if attributes.key?(:'default_invoice_report_definition_key')
        self.default_invoice_report_definition_key = attributes[:'default_invoice_report_definition_key']
      end

      if attributes.key?(:'disability_pay_through_day')
        self.disability_pay_through_day = attributes[:'disability_pay_through_day']
      end

      if attributes.key?(:'disenroll_date')
        self.disenroll_date = attributes[:'disenroll_date']
      end

      if attributes.key?(:'distribution_account_key')
        self.distribution_account_key = attributes[:'distribution_account_key']
      end

      if attributes.key?(:'distribution_payor_id')
        self.distribution_payor_id = attributes[:'distribution_payor_id']
      end

      if attributes.key?(:'duplicate_claim_override')
        self.duplicate_claim_override = attributes[:'duplicate_claim_override']
      else
        self.duplicate_claim_override = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'exempt_federal')
        self.exempt_federal = attributes[:'exempt_federal']
      else
        self.exempt_federal = nil
      end

      if attributes.key?(:'exempt_medicare')
        self.exempt_medicare = attributes[:'exempt_medicare']
      else
        self.exempt_medicare = nil
      end

      if attributes.key?(:'exempt_soc_sec')
        self.exempt_soc_sec = attributes[:'exempt_soc_sec']
      else
        self.exempt_soc_sec = nil
      end

      if attributes.key?(:'exempt_state')
        self.exempt_state = attributes[:'exempt_state']
      else
        self.exempt_state = nil
      end

      if attributes.key?(:'fic_a_employer_match')
        self.fic_a_employer_match = attributes[:'fic_a_employer_match']
      else
        self.fic_a_employer_match = nil
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'fax_country_code')
        self.fax_country_code = attributes[:'fax_country_code']
      end

      if attributes.key?(:'federal_id')
        self.federal_id = attributes[:'federal_id']
      end

      if attributes.key?(:'federal_tax_day_limit')
        self.federal_tax_day_limit = attributes[:'federal_tax_day_limit']
      end

      if attributes.key?(:'federal_wage_limit')
        self.federal_wage_limit = attributes[:'federal_wage_limit']
      end

      if attributes.key?(:'generate_w2')
        self.generate_w2 = attributes[:'generate_w2']
      else
        self.generate_w2 = nil
      end

      if attributes.key?(:'group_division_captive')
        self.group_division_captive = attributes[:'group_division_captive']
      end

      if attributes.key?(:'invoice_grace_period')
        self.invoice_grace_period = attributes[:'invoice_grace_period']
      end

      if attributes.key?(:'invoice_grace_period_ex_code')
        self.invoice_grace_period_ex_code = attributes[:'invoice_grace_period_ex_code']
      end

      if attributes.key?(:'invoice_grace_period_type')
        self.invoice_grace_period_type = attributes[:'invoice_grace_period_type']
      end

      if attributes.key?(:'invoice_level')
        self.invoice_level = attributes[:'invoice_level']
      end

      if attributes.key?(:'invoice_remit_address1')
        self.invoice_remit_address1 = attributes[:'invoice_remit_address1']
      end

      if attributes.key?(:'invoice_remit_address2')
        self.invoice_remit_address2 = attributes[:'invoice_remit_address2']
      end

      if attributes.key?(:'invoice_remit_city')
        self.invoice_remit_city = attributes[:'invoice_remit_city']
      end

      if attributes.key?(:'invoice_remit_country_code')
        self.invoice_remit_country_code = attributes[:'invoice_remit_country_code']
      end

      if attributes.key?(:'invoice_remit_country_id')
        self.invoice_remit_country_id = attributes[:'invoice_remit_country_id']
      end

      if attributes.key?(:'invoice_remit_name')
        self.invoice_remit_name = attributes[:'invoice_remit_name']
      end

      if attributes.key?(:'invoice_remit_phone_number')
        self.invoice_remit_phone_number = attributes[:'invoice_remit_phone_number']
      end

      if attributes.key?(:'invoice_remit_state')
        self.invoice_remit_state = attributes[:'invoice_remit_state']
      end

      if attributes.key?(:'invoice_remit_zip_code')
        self.invoice_remit_zip_code = attributes[:'invoice_remit_zip_code']
      end

      if attributes.key?(:'issue_state')
        self.issue_state = attributes[:'issue_state']
      end

      if attributes.key?(:'mail_to_default')
        self.mail_to_default = attributes[:'mail_to_default']
      else
        self.mail_to_default = nil
      end

      if attributes.key?(:'medicare_tax_day_limit')
        self.medicare_tax_day_limit = attributes[:'medicare_tax_day_limit']
      end

      if attributes.key?(:'medicare_wage_limit')
        self.medicare_wage_limit = attributes[:'medicare_wage_limit']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'number_lives')
        self.number_lives = attributes[:'number_lives']
      end

      if attributes.key?(:'original_date')
        self.original_date = attributes[:'original_date']
      end

      if attributes.key?(:'other_insurance_ex_code')
        self.other_insurance_ex_code = attributes[:'other_insurance_ex_code']
      end

      if attributes.key?(:'paid_through')
        self.paid_through = attributes[:'paid_through']
      end

      if attributes.key?(:'participation_incentive_id')
        self.participation_incentive_id = attributes[:'participation_incentive_id']
      end

      if attributes.key?(:'pay_to_account')
        self.pay_to_account = attributes[:'pay_to_account']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'pend_ex_code')
        self.pend_ex_code = attributes[:'pend_ex_code']
      end

      if attributes.key?(:'pend_flag')
        self.pend_flag = attributes[:'pend_flag']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'phone_country_code')
        self.phone_country_code = attributes[:'phone_country_code']
      end

      if attributes.key?(:'premium_location')
        self.premium_location = attributes[:'premium_location']
      end

      if attributes.key?(:'primary_contact')
        self.primary_contact = attributes[:'primary_contact']
      end

      if attributes.key?(:'prorate_deduction')
        self.prorate_deduction = attributes[:'prorate_deduction']
      else
        self.prorate_deduction = nil
      end

      if attributes.key?(:'prorate_deduction_type')
        self.prorate_deduction_type = attributes[:'prorate_deduction_type']
      end

      if attributes.key?(:'reference_based_pricing')
        self.reference_based_pricing = attributes[:'reference_based_pricing']
      end

      if attributes.key?(:'region_code')
        self.region_code = attributes[:'region_code']
      end

      if attributes.key?(:'reinsurance_option')
        self.reinsurance_option = attributes[:'reinsurance_option']
      end

      if attributes.key?(:'seer_data')
        self.seer_data = attributes[:'seer_data']
      end

      if attributes.key?(:'set_paid_through')
        self.set_paid_through = attributes[:'set_paid_through']
      else
        self.set_paid_through = nil
      end

      if attributes.key?(:'soc_sec_tax_day_limit')
        self.soc_sec_tax_day_limit = attributes[:'soc_sec_tax_day_limit']
      end

      if attributes.key?(:'soc_sec_wage_limit')
        self.soc_sec_wage_limit = attributes[:'soc_sec_wage_limit']
      end

      if attributes.key?(:'spec_deductible')
        self.spec_deductible = attributes[:'spec_deductible']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'state_tax_day_limit')
        self.state_tax_day_limit = attributes[:'state_tax_day_limit']
      end

      if attributes.key?(:'state_wage_limit')
        self.state_wage_limit = attributes[:'state_wage_limit']
      end

      if attributes.key?(:'tax_day_limit_type')
        self.tax_day_limit_type = attributes[:'tax_day_limit_type']
      else
        self.tax_day_limit_type = nil
      end

      if attributes.key?(:'transplant_elite')
        self.transplant_elite = attributes[:'transplant_elite']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_restricted_deductions')
        self.use_restricted_deductions = attributes[:'use_restricted_deductions']
      else
        self.use_restricted_deductions = nil
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @division_id.nil?
        invalid_properties.push('invalid value for "division_id", division_id cannot be nil.')
      end

      if @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @division_id.to_s.length < 1
        invalid_properties.push('invalid value for "division_id", the character length must be great than or equal to 1.')
      end

      if !@address.nil? && @address.to_s.length > 255
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 255.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if !@agri_tax_return.nil? && @agri_tax_return.to_s.length > 3
        invalid_properties.push('invalid value for "agri_tax_return", the character length must be smaller than or equal to 3.')
      end

      if @auth_not_reqd_override.nil?
        invalid_properties.push('invalid value for "auth_not_reqd_override", auth_not_reqd_override cannot be nil.')
      end

      if !@brokerage.nil? && @brokerage.to_s.length > 256
        invalid_properties.push('invalid value for "brokerage", the character length must be smaller than or equal to 256.')
      end

      if @cobr_a_division.nil?
        invalid_properties.push('invalid value for "cobr_a_division", cobr_a_division cannot be nil.')
      end

      if @co_e_network.nil?
        invalid_properties.push('invalid value for "co_e_network", co_e_network cannot be nil.')
      end

      if !@city.nil? && @city.to_s.length > 25
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 25.')
      end

      if !@class_description.nil? && @class_description.to_s.length > 128
        invalid_properties.push('invalid value for "class_description", the character length must be smaller than or equal to 128.')
      end

      if !@class_id.nil? && @class_id.to_s.length > 20
        invalid_properties.push('invalid value for "class_id", the character length must be smaller than or equal to 20.')
      end

      if !@contact_country_code.nil? && @contact_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "contact_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@contact_email_address.nil? && @contact_email_address.to_s.length > 128
        invalid_properties.push('invalid value for "contact_email_address", the character length must be smaller than or equal to 128.')
      end

      if !@contact_extension.nil? && @contact_extension.to_s.length > 6
        invalid_properties.push('invalid value for "contact_extension", the character length must be smaller than or equal to 6.')
      end

      if !@contact_phone.nil? && @contact_phone.to_s.length > 20
        invalid_properties.push('invalid value for "contact_phone", the character length must be smaller than or equal to 20.')
      end

      if !@contact_title.nil? && @contact_title.to_s.length > 20
        invalid_properties.push('invalid value for "contact_title", the character length must be smaller than or equal to 20.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@county_code.nil? && @county_code.to_s.length > 8
        invalid_properties.push('invalid value for "county_code", the character length must be smaller than or equal to 8.')
      end

      if !@distribution_payor_id.nil? && @distribution_payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "distribution_payor_id", the character length must be smaller than or equal to 20.')
      end

      if @duplicate_claim_override.nil?
        invalid_properties.push('invalid value for "duplicate_claim_override", duplicate_claim_override cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @exempt_federal.nil?
        invalid_properties.push('invalid value for "exempt_federal", exempt_federal cannot be nil.')
      end

      if @exempt_medicare.nil?
        invalid_properties.push('invalid value for "exempt_medicare", exempt_medicare cannot be nil.')
      end

      if @exempt_soc_sec.nil?
        invalid_properties.push('invalid value for "exempt_soc_sec", exempt_soc_sec cannot be nil.')
      end

      if @exempt_state.nil?
        invalid_properties.push('invalid value for "exempt_state", exempt_state cannot be nil.')
      end

      if @fic_a_employer_match.nil?
        invalid_properties.push('invalid value for "fic_a_employer_match", fic_a_employer_match cannot be nil.')
      end

      if !@fax.nil? && @fax.to_s.length > 20
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 20.')
      end

      if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "fax_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@federal_id.nil? && @federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "federal_id", the character length must be smaller than or equal to 20.')
      end

      if @generate_w2.nil?
        invalid_properties.push('invalid value for "generate_w2", generate_w2 cannot be nil.')
      end

      if !@group_division_captive.nil? && @group_division_captive.to_s.length > 256
        invalid_properties.push('invalid value for "group_division_captive", the character length must be smaller than or equal to 256.')
      end

      if !@invoice_grace_period_ex_code.nil? && @invoice_grace_period_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "invoice_grace_period_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@invoice_grace_period_type.nil? && @invoice_grace_period_type.to_s.length > 16
        invalid_properties.push('invalid value for "invoice_grace_period_type", the character length must be smaller than or equal to 16.')
      end

      if !@invoice_level.nil? && @invoice_level.to_s.length > 1
        invalid_properties.push('invalid value for "invoice_level", the character length must be smaller than or equal to 1.')
      end

      if !@invoice_remit_address1.nil? && @invoice_remit_address1.to_s.length > 128
        invalid_properties.push('invalid value for "invoice_remit_address1", the character length must be smaller than or equal to 128.')
      end

      if !@invoice_remit_address2.nil? && @invoice_remit_address2.to_s.length > 128
        invalid_properties.push('invalid value for "invoice_remit_address2", the character length must be smaller than or equal to 128.')
      end

      if !@invoice_remit_city.nil? && @invoice_remit_city.to_s.length > 32
        invalid_properties.push('invalid value for "invoice_remit_city", the character length must be smaller than or equal to 32.')
      end

      if !@invoice_remit_country_code.nil? && @invoice_remit_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "invoice_remit_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@invoice_remit_country_id.nil? && @invoice_remit_country_id.to_s.length > 8
        invalid_properties.push('invalid value for "invoice_remit_country_id", the character length must be smaller than or equal to 8.')
      end

      if !@invoice_remit_name.nil? && @invoice_remit_name.to_s.length > 128
        invalid_properties.push('invalid value for "invoice_remit_name", the character length must be smaller than or equal to 128.')
      end

      if !@invoice_remit_phone_number.nil? && @invoice_remit_phone_number.to_s.length > 32
        invalid_properties.push('invalid value for "invoice_remit_phone_number", the character length must be smaller than or equal to 32.')
      end

      if !@invoice_remit_state.nil? && @invoice_remit_state.to_s.length > 2
        invalid_properties.push('invalid value for "invoice_remit_state", the character length must be smaller than or equal to 2.')
      end

      if !@invoice_remit_zip_code.nil? && @invoice_remit_zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "invoice_remit_zip_code", the character length must be smaller than or equal to 32.')
      end

      if !@issue_state.nil? && @issue_state.to_s.length > 2
        invalid_properties.push('invalid value for "issue_state", the character length must be smaller than or equal to 2.')
      end

      if @mail_to_default.nil?
        invalid_properties.push('invalid value for "mail_to_default", mail_to_default cannot be nil.')
      end

      if !@name.nil? && @name.to_s.length > 50
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 50.')
      end

      if !@other_insurance_ex_code.nil? && @other_insurance_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "other_insurance_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@participation_incentive_id.nil? && @participation_incentive_id.to_s.length > 32
        invalid_properties.push('invalid value for "participation_incentive_id", the character length must be smaller than or equal to 32.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.')
      end

      if !@pend_flag.nil? && @pend_flag.to_s.length > 1
        invalid_properties.push('invalid value for "pend_flag", the character length must be smaller than or equal to 1.')
      end

      if !@phone.nil? && @phone.to_s.length > 20
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 20.')
      end

      if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
        invalid_properties.push('invalid value for "phone_country_code", the character length must be smaller than or equal to 8.')
      end

      if !@premium_location.nil? && @premium_location.to_s.length > 50
        invalid_properties.push('invalid value for "premium_location", the character length must be smaller than or equal to 50.')
      end

      if !@primary_contact.nil? && @primary_contact.to_s.length > 25
        invalid_properties.push('invalid value for "primary_contact", the character length must be smaller than or equal to 25.')
      end

      if @prorate_deduction.nil?
        invalid_properties.push('invalid value for "prorate_deduction", prorate_deduction cannot be nil.')
      end

      if !@prorate_deduction_type.nil? && @prorate_deduction_type.to_s.length > 10
        invalid_properties.push('invalid value for "prorate_deduction_type", the character length must be smaller than or equal to 10.')
      end

      if !@reference_based_pricing.nil? && @reference_based_pricing.to_s.length > 1
        invalid_properties.push('invalid value for "reference_based_pricing", the character length must be smaller than or equal to 1.')
      end

      if !@region_code.nil? && @region_code.to_s.length > 32
        invalid_properties.push('invalid value for "region_code", the character length must be smaller than or equal to 32.')
      end

      if !@reinsurance_option.nil? && @reinsurance_option.to_s.length > 256
        invalid_properties.push('invalid value for "reinsurance_option", the character length must be smaller than or equal to 256.')
      end

      if @set_paid_through.nil?
        invalid_properties.push('invalid value for "set_paid_through", set_paid_through cannot be nil.')
      end

      if !@spec_deductible.nil? && @spec_deductible.to_s.length > 256
        invalid_properties.push('invalid value for "spec_deductible", the character length must be smaller than or equal to 256.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if @tax_day_limit_type.nil?
        invalid_properties.push('invalid value for "tax_day_limit_type", tax_day_limit_type cannot be nil.')
      end

      if !@transplant_elite.nil? && @transplant_elite.to_s.length > 256
        invalid_properties.push('invalid value for "transplant_elite", the character length must be smaller than or equal to 256.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_restricted_deductions.nil?
        invalid_properties.push('invalid value for "use_restricted_deductions", use_restricted_deductions cannot be nil.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @division_id.nil?
      return false if @division_id.to_s.length > 20
      return false if @division_id.to_s.length < 1
      return false if !@address.nil? && @address.to_s.length > 255
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if !@agri_tax_return.nil? && @agri_tax_return.to_s.length > 3
      return false if @auth_not_reqd_override.nil?
      return false if !@brokerage.nil? && @brokerage.to_s.length > 256
      return false if @cobr_a_division.nil?
      return false if @co_e_network.nil?
      return false if !@city.nil? && @city.to_s.length > 25
      return false if !@class_description.nil? && @class_description.to_s.length > 128
      return false if !@class_id.nil? && @class_id.to_s.length > 20
      return false if !@contact_country_code.nil? && @contact_country_code.to_s.length > 8
      return false if !@contact_email_address.nil? && @contact_email_address.to_s.length > 128
      return false if !@contact_extension.nil? && @contact_extension.to_s.length > 6
      return false if !@contact_phone.nil? && @contact_phone.to_s.length > 20
      return false if !@contact_title.nil? && @contact_title.to_s.length > 20
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@county_code.nil? && @county_code.to_s.length > 8
      return false if !@distribution_payor_id.nil? && @distribution_payor_id.to_s.length > 20
      return false if @duplicate_claim_override.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @exempt_federal.nil?
      return false if @exempt_medicare.nil?
      return false if @exempt_soc_sec.nil?
      return false if @exempt_state.nil?
      return false if @fic_a_employer_match.nil?
      return false if !@fax.nil? && @fax.to_s.length > 20
      return false if !@fax_country_code.nil? && @fax_country_code.to_s.length > 8
      return false if !@federal_id.nil? && @federal_id.to_s.length > 20
      return false if @generate_w2.nil?
      return false if !@group_division_captive.nil? && @group_division_captive.to_s.length > 256
      return false if !@invoice_grace_period_ex_code.nil? && @invoice_grace_period_ex_code.to_s.length > 6
      return false if !@invoice_grace_period_type.nil? && @invoice_grace_period_type.to_s.length > 16
      return false if !@invoice_level.nil? && @invoice_level.to_s.length > 1
      return false if !@invoice_remit_address1.nil? && @invoice_remit_address1.to_s.length > 128
      return false if !@invoice_remit_address2.nil? && @invoice_remit_address2.to_s.length > 128
      return false if !@invoice_remit_city.nil? && @invoice_remit_city.to_s.length > 32
      return false if !@invoice_remit_country_code.nil? && @invoice_remit_country_code.to_s.length > 8
      return false if !@invoice_remit_country_id.nil? && @invoice_remit_country_id.to_s.length > 8
      return false if !@invoice_remit_name.nil? && @invoice_remit_name.to_s.length > 128
      return false if !@invoice_remit_phone_number.nil? && @invoice_remit_phone_number.to_s.length > 32
      return false if !@invoice_remit_state.nil? && @invoice_remit_state.to_s.length > 2
      return false if !@invoice_remit_zip_code.nil? && @invoice_remit_zip_code.to_s.length > 32
      return false if !@issue_state.nil? && @issue_state.to_s.length > 2
      return false if @mail_to_default.nil?
      return false if !@name.nil? && @name.to_s.length > 50
      return false if !@other_insurance_ex_code.nil? && @other_insurance_ex_code.to_s.length > 6
      return false if !@participation_incentive_id.nil? && @participation_incentive_id.to_s.length > 32
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@pend_ex_code.nil? && @pend_ex_code.to_s.length > 6
      return false if !@pend_flag.nil? && @pend_flag.to_s.length > 1
      return false if !@phone.nil? && @phone.to_s.length > 20
      return false if !@phone_country_code.nil? && @phone_country_code.to_s.length > 8
      return false if !@premium_location.nil? && @premium_location.to_s.length > 50
      return false if !@primary_contact.nil? && @primary_contact.to_s.length > 25
      return false if @prorate_deduction.nil?
      return false if !@prorate_deduction_type.nil? && @prorate_deduction_type.to_s.length > 10
      return false if !@reference_based_pricing.nil? && @reference_based_pricing.to_s.length > 1
      return false if !@region_code.nil? && @region_code.to_s.length > 32
      return false if !@reinsurance_option.nil? && @reinsurance_option.to_s.length > 256
      return false if @set_paid_through.nil?
      return false if !@spec_deductible.nil? && @spec_deductible.to_s.length > 256
      return false if !@state.nil? && @state.to_s.length > 2
      return false if @tax_day_limit_type.nil?
      return false if !@transplant_elite.nil? && @transplant_elite.to_s.length > 256
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_restricted_deductions.nil?
      return false if !@zip_code.nil? && @zip_code.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if division_id.nil?
        fail ArgumentError, 'division_id cannot be nil'
      end

      if division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      if division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "division_id", the character length must be great than or equal to 1.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 255
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 255.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] agri_tax_return Value to be assigned
    def agri_tax_return=(agri_tax_return)
      if !agri_tax_return.nil? && agri_tax_return.to_s.length > 3
        fail ArgumentError, 'invalid value for "agri_tax_return", the character length must be smaller than or equal to 3.'
      end

      @agri_tax_return = agri_tax_return
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_not_reqd_override Value to be assigned
    def auth_not_reqd_override=(auth_not_reqd_override)
      if auth_not_reqd_override.nil?
        fail ArgumentError, 'auth_not_reqd_override cannot be nil'
      end

      @auth_not_reqd_override = auth_not_reqd_override
    end

    # Custom attribute writer method with validation
    # @param [Object] brokerage Value to be assigned
    def brokerage=(brokerage)
      if !brokerage.nil? && brokerage.to_s.length > 256
        fail ArgumentError, 'invalid value for "brokerage", the character length must be smaller than or equal to 256.'
      end

      @brokerage = brokerage
    end

    # Custom attribute writer method with validation
    # @param [Object] cobr_a_division Value to be assigned
    def cobr_a_division=(cobr_a_division)
      if cobr_a_division.nil?
        fail ArgumentError, 'cobr_a_division cannot be nil'
      end

      @cobr_a_division = cobr_a_division
    end

    # Custom attribute writer method with validation
    # @param [Object] co_e_network Value to be assigned
    def co_e_network=(co_e_network)
      if co_e_network.nil?
        fail ArgumentError, 'co_e_network cannot be nil'
      end

      @co_e_network = co_e_network
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 25
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 25.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] class_description Value to be assigned
    def class_description=(class_description)
      if !class_description.nil? && class_description.to_s.length > 128
        fail ArgumentError, 'invalid value for "class_description", the character length must be smaller than or equal to 128.'
      end

      @class_description = class_description
    end

    # Custom attribute writer method with validation
    # @param [Object] class_id Value to be assigned
    def class_id=(class_id)
      if !class_id.nil? && class_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "class_id", the character length must be smaller than or equal to 20.'
      end

      @class_id = class_id
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_country_code Value to be assigned
    def contact_country_code=(contact_country_code)
      if !contact_country_code.nil? && contact_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "contact_country_code", the character length must be smaller than or equal to 8.'
      end

      @contact_country_code = contact_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_email_address Value to be assigned
    def contact_email_address=(contact_email_address)
      if !contact_email_address.nil? && contact_email_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "contact_email_address", the character length must be smaller than or equal to 128.'
      end

      @contact_email_address = contact_email_address
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_extension Value to be assigned
    def contact_extension=(contact_extension)
      if !contact_extension.nil? && contact_extension.to_s.length > 6
        fail ArgumentError, 'invalid value for "contact_extension", the character length must be smaller than or equal to 6.'
      end

      @contact_extension = contact_extension
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_phone Value to be assigned
    def contact_phone=(contact_phone)
      if !contact_phone.nil? && contact_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "contact_phone", the character length must be smaller than or equal to 20.'
      end

      @contact_phone = contact_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_title Value to be assigned
    def contact_title=(contact_title)
      if !contact_title.nil? && contact_title.to_s.length > 20
        fail ArgumentError, 'invalid value for "contact_title", the character length must be smaller than or equal to 20.'
      end

      @contact_title = contact_title
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] county_code Value to be assigned
    def county_code=(county_code)
      if !county_code.nil? && county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "county_code", the character length must be smaller than or equal to 8.'
      end

      @county_code = county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] distribution_payor_id Value to be assigned
    def distribution_payor_id=(distribution_payor_id)
      if !distribution_payor_id.nil? && distribution_payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "distribution_payor_id", the character length must be smaller than or equal to 20.'
      end

      @distribution_payor_id = distribution_payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] duplicate_claim_override Value to be assigned
    def duplicate_claim_override=(duplicate_claim_override)
      if duplicate_claim_override.nil?
        fail ArgumentError, 'duplicate_claim_override cannot be nil'
      end

      @duplicate_claim_override = duplicate_claim_override
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_federal Value to be assigned
    def exempt_federal=(exempt_federal)
      if exempt_federal.nil?
        fail ArgumentError, 'exempt_federal cannot be nil'
      end

      @exempt_federal = exempt_federal
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_medicare Value to be assigned
    def exempt_medicare=(exempt_medicare)
      if exempt_medicare.nil?
        fail ArgumentError, 'exempt_medicare cannot be nil'
      end

      @exempt_medicare = exempt_medicare
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_soc_sec Value to be assigned
    def exempt_soc_sec=(exempt_soc_sec)
      if exempt_soc_sec.nil?
        fail ArgumentError, 'exempt_soc_sec cannot be nil'
      end

      @exempt_soc_sec = exempt_soc_sec
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_state Value to be assigned
    def exempt_state=(exempt_state)
      if exempt_state.nil?
        fail ArgumentError, 'exempt_state cannot be nil'
      end

      @exempt_state = exempt_state
    end

    # Custom attribute writer method with validation
    # @param [Object] fic_a_employer_match Value to be assigned
    def fic_a_employer_match=(fic_a_employer_match)
      if fic_a_employer_match.nil?
        fail ArgumentError, 'fic_a_employer_match cannot be nil'
      end

      @fic_a_employer_match = fic_a_employer_match
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 20.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_country_code Value to be assigned
    def fax_country_code=(fax_country_code)
      if !fax_country_code.nil? && fax_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "fax_country_code", the character length must be smaller than or equal to 8.'
      end

      @fax_country_code = fax_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_id Value to be assigned
    def federal_id=(federal_id)
      if !federal_id.nil? && federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "federal_id", the character length must be smaller than or equal to 20.'
      end

      @federal_id = federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] generate_w2 Value to be assigned
    def generate_w2=(generate_w2)
      if generate_w2.nil?
        fail ArgumentError, 'generate_w2 cannot be nil'
      end

      @generate_w2 = generate_w2
    end

    # Custom attribute writer method with validation
    # @param [Object] group_division_captive Value to be assigned
    def group_division_captive=(group_division_captive)
      if !group_division_captive.nil? && group_division_captive.to_s.length > 256
        fail ArgumentError, 'invalid value for "group_division_captive", the character length must be smaller than or equal to 256.'
      end

      @group_division_captive = group_division_captive
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_grace_period_ex_code Value to be assigned
    def invoice_grace_period_ex_code=(invoice_grace_period_ex_code)
      if !invoice_grace_period_ex_code.nil? && invoice_grace_period_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "invoice_grace_period_ex_code", the character length must be smaller than or equal to 6.'
      end

      @invoice_grace_period_ex_code = invoice_grace_period_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_grace_period_type Value to be assigned
    def invoice_grace_period_type=(invoice_grace_period_type)
      if !invoice_grace_period_type.nil? && invoice_grace_period_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "invoice_grace_period_type", the character length must be smaller than or equal to 16.'
      end

      @invoice_grace_period_type = invoice_grace_period_type
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_level Value to be assigned
    def invoice_level=(invoice_level)
      if !invoice_level.nil? && invoice_level.to_s.length > 1
        fail ArgumentError, 'invalid value for "invoice_level", the character length must be smaller than or equal to 1.'
      end

      @invoice_level = invoice_level
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_address1 Value to be assigned
    def invoice_remit_address1=(invoice_remit_address1)
      if !invoice_remit_address1.nil? && invoice_remit_address1.to_s.length > 128
        fail ArgumentError, 'invalid value for "invoice_remit_address1", the character length must be smaller than or equal to 128.'
      end

      @invoice_remit_address1 = invoice_remit_address1
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_address2 Value to be assigned
    def invoice_remit_address2=(invoice_remit_address2)
      if !invoice_remit_address2.nil? && invoice_remit_address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "invoice_remit_address2", the character length must be smaller than or equal to 128.'
      end

      @invoice_remit_address2 = invoice_remit_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_city Value to be assigned
    def invoice_remit_city=(invoice_remit_city)
      if !invoice_remit_city.nil? && invoice_remit_city.to_s.length > 32
        fail ArgumentError, 'invalid value for "invoice_remit_city", the character length must be smaller than or equal to 32.'
      end

      @invoice_remit_city = invoice_remit_city
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_country_code Value to be assigned
    def invoice_remit_country_code=(invoice_remit_country_code)
      if !invoice_remit_country_code.nil? && invoice_remit_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "invoice_remit_country_code", the character length must be smaller than or equal to 8.'
      end

      @invoice_remit_country_code = invoice_remit_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_country_id Value to be assigned
    def invoice_remit_country_id=(invoice_remit_country_id)
      if !invoice_remit_country_id.nil? && invoice_remit_country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "invoice_remit_country_id", the character length must be smaller than or equal to 8.'
      end

      @invoice_remit_country_id = invoice_remit_country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_name Value to be assigned
    def invoice_remit_name=(invoice_remit_name)
      if !invoice_remit_name.nil? && invoice_remit_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "invoice_remit_name", the character length must be smaller than or equal to 128.'
      end

      @invoice_remit_name = invoice_remit_name
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_phone_number Value to be assigned
    def invoice_remit_phone_number=(invoice_remit_phone_number)
      if !invoice_remit_phone_number.nil? && invoice_remit_phone_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "invoice_remit_phone_number", the character length must be smaller than or equal to 32.'
      end

      @invoice_remit_phone_number = invoice_remit_phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_state Value to be assigned
    def invoice_remit_state=(invoice_remit_state)
      if !invoice_remit_state.nil? && invoice_remit_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "invoice_remit_state", the character length must be smaller than or equal to 2.'
      end

      @invoice_remit_state = invoice_remit_state
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remit_zip_code Value to be assigned
    def invoice_remit_zip_code=(invoice_remit_zip_code)
      if !invoice_remit_zip_code.nil? && invoice_remit_zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "invoice_remit_zip_code", the character length must be smaller than or equal to 32.'
      end

      @invoice_remit_zip_code = invoice_remit_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_state Value to be assigned
    def issue_state=(issue_state)
      if !issue_state.nil? && issue_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "issue_state", the character length must be smaller than or equal to 2.'
      end

      @issue_state = issue_state
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_to_default Value to be assigned
    def mail_to_default=(mail_to_default)
      if mail_to_default.nil?
        fail ArgumentError, 'mail_to_default cannot be nil'
      end

      @mail_to_default = mail_to_default
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 50
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 50.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] other_insurance_ex_code Value to be assigned
    def other_insurance_ex_code=(other_insurance_ex_code)
      if !other_insurance_ex_code.nil? && other_insurance_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "other_insurance_ex_code", the character length must be smaller than or equal to 6.'
      end

      @other_insurance_ex_code = other_insurance_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] participation_incentive_id Value to be assigned
    def participation_incentive_id=(participation_incentive_id)
      if !participation_incentive_id.nil? && participation_incentive_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "participation_incentive_id", the character length must be smaller than or equal to 32.'
      end

      @participation_incentive_id = participation_incentive_id
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_ex_code Value to be assigned
    def pend_ex_code=(pend_ex_code)
      if !pend_ex_code.nil? && pend_ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "pend_ex_code", the character length must be smaller than or equal to 6.'
      end

      @pend_ex_code = pend_ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] pend_flag Value to be assigned
    def pend_flag=(pend_flag)
      if !pend_flag.nil? && pend_flag.to_s.length > 1
        fail ArgumentError, 'invalid value for "pend_flag", the character length must be smaller than or equal to 1.'
      end

      @pend_flag = pend_flag
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 20.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_country_code Value to be assigned
    def phone_country_code=(phone_country_code)
      if !phone_country_code.nil? && phone_country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "phone_country_code", the character length must be smaller than or equal to 8.'
      end

      @phone_country_code = phone_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] premium_location Value to be assigned
    def premium_location=(premium_location)
      if !premium_location.nil? && premium_location.to_s.length > 50
        fail ArgumentError, 'invalid value for "premium_location", the character length must be smaller than or equal to 50.'
      end

      @premium_location = premium_location
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_contact Value to be assigned
    def primary_contact=(primary_contact)
      if !primary_contact.nil? && primary_contact.to_s.length > 25
        fail ArgumentError, 'invalid value for "primary_contact", the character length must be smaller than or equal to 25.'
      end

      @primary_contact = primary_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] prorate_deduction Value to be assigned
    def prorate_deduction=(prorate_deduction)
      if prorate_deduction.nil?
        fail ArgumentError, 'prorate_deduction cannot be nil'
      end

      @prorate_deduction = prorate_deduction
    end

    # Custom attribute writer method with validation
    # @param [Object] prorate_deduction_type Value to be assigned
    def prorate_deduction_type=(prorate_deduction_type)
      if !prorate_deduction_type.nil? && prorate_deduction_type.to_s.length > 10
        fail ArgumentError, 'invalid value for "prorate_deduction_type", the character length must be smaller than or equal to 10.'
      end

      @prorate_deduction_type = prorate_deduction_type
    end

    # Custom attribute writer method with validation
    # @param [Object] reference_based_pricing Value to be assigned
    def reference_based_pricing=(reference_based_pricing)
      if !reference_based_pricing.nil? && reference_based_pricing.to_s.length > 1
        fail ArgumentError, 'invalid value for "reference_based_pricing", the character length must be smaller than or equal to 1.'
      end

      @reference_based_pricing = reference_based_pricing
    end

    # Custom attribute writer method with validation
    # @param [Object] region_code Value to be assigned
    def region_code=(region_code)
      if !region_code.nil? && region_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "region_code", the character length must be smaller than or equal to 32.'
      end

      @region_code = region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] reinsurance_option Value to be assigned
    def reinsurance_option=(reinsurance_option)
      if !reinsurance_option.nil? && reinsurance_option.to_s.length > 256
        fail ArgumentError, 'invalid value for "reinsurance_option", the character length must be smaller than or equal to 256.'
      end

      @reinsurance_option = reinsurance_option
    end

    # Custom attribute writer method with validation
    # @param [Object] set_paid_through Value to be assigned
    def set_paid_through=(set_paid_through)
      if set_paid_through.nil?
        fail ArgumentError, 'set_paid_through cannot be nil'
      end

      @set_paid_through = set_paid_through
    end

    # Custom attribute writer method with validation
    # @param [Object] spec_deductible Value to be assigned
    def spec_deductible=(spec_deductible)
      if !spec_deductible.nil? && spec_deductible.to_s.length > 256
        fail ArgumentError, 'invalid value for "spec_deductible", the character length must be smaller than or equal to 256.'
      end

      @spec_deductible = spec_deductible
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_day_limit_type Value to be assigned
    def tax_day_limit_type=(tax_day_limit_type)
      if tax_day_limit_type.nil?
        fail ArgumentError, 'tax_day_limit_type cannot be nil'
      end

      @tax_day_limit_type = tax_day_limit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] transplant_elite Value to be assigned
    def transplant_elite=(transplant_elite)
      if !transplant_elite.nil? && transplant_elite.to_s.length > 256
        fail ArgumentError, 'invalid value for "transplant_elite", the character length must be smaller than or equal to 256.'
      end

      @transplant_elite = transplant_elite
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_restricted_deductions Value to be assigned
    def use_restricted_deductions=(use_restricted_deductions)
      if use_restricted_deductions.nil?
        fail ArgumentError, 'use_restricted_deductions cannot be nil'
      end

      @use_restricted_deductions = use_restricted_deductions
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 32.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          ac_h_account_key == o.ac_h_account_key &&
          account_key == o.account_key &&
          address == o.address &&
          address2 == o.address2 &&
          adult_age == o.adult_age &&
          agri_tax_return == o.agri_tax_return &&
          auth_not_reqd_override == o.auth_not_reqd_override &&
          brokerage == o.brokerage &&
          cobr_a_auto_term_adj_reason == o.cobr_a_auto_term_adj_reason &&
          cobr_a_auto_term_reason == o.cobr_a_auto_term_reason &&
          cobr_a_division == o.cobr_a_division &&
          co_e_network == o.co_e_network &&
          case_rate == o.case_rate &&
          city == o.city &&
          claim_days_allowed == o.claim_days_allowed &&
          class_description == o.class_description &&
          class_id == o.class_id &&
          contact_country_code == o.contact_country_code &&
          contact_email_address == o.contact_email_address &&
          contact_extension == o.contact_extension &&
          contact_phone == o.contact_phone &&
          contact_title == o.contact_title &&
          country_id == o.country_id &&
          county_code == o.county_code &&
          cutoff_age == o.cutoff_age &&
          default_cobra_reason == o.default_cobra_reason &&
          default_invoice_report_definition_key == o.default_invoice_report_definition_key &&
          disability_pay_through_day == o.disability_pay_through_day &&
          disenroll_date == o.disenroll_date &&
          distribution_account_key == o.distribution_account_key &&
          distribution_payor_id == o.distribution_payor_id &&
          duplicate_claim_override == o.duplicate_claim_override &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          exempt_federal == o.exempt_federal &&
          exempt_medicare == o.exempt_medicare &&
          exempt_soc_sec == o.exempt_soc_sec &&
          exempt_state == o.exempt_state &&
          fic_a_employer_match == o.fic_a_employer_match &&
          fax == o.fax &&
          fax_country_code == o.fax_country_code &&
          federal_id == o.federal_id &&
          federal_tax_day_limit == o.federal_tax_day_limit &&
          federal_wage_limit == o.federal_wage_limit &&
          generate_w2 == o.generate_w2 &&
          group_division_captive == o.group_division_captive &&
          invoice_grace_period == o.invoice_grace_period &&
          invoice_grace_period_ex_code == o.invoice_grace_period_ex_code &&
          invoice_grace_period_type == o.invoice_grace_period_type &&
          invoice_level == o.invoice_level &&
          invoice_remit_address1 == o.invoice_remit_address1 &&
          invoice_remit_address2 == o.invoice_remit_address2 &&
          invoice_remit_city == o.invoice_remit_city &&
          invoice_remit_country_code == o.invoice_remit_country_code &&
          invoice_remit_country_id == o.invoice_remit_country_id &&
          invoice_remit_name == o.invoice_remit_name &&
          invoice_remit_phone_number == o.invoice_remit_phone_number &&
          invoice_remit_state == o.invoice_remit_state &&
          invoice_remit_zip_code == o.invoice_remit_zip_code &&
          issue_state == o.issue_state &&
          mail_to_default == o.mail_to_default &&
          medicare_tax_day_limit == o.medicare_tax_day_limit &&
          medicare_wage_limit == o.medicare_wage_limit &&
          name == o.name &&
          notes == o.notes &&
          number_lives == o.number_lives &&
          original_date == o.original_date &&
          other_insurance_ex_code == o.other_insurance_ex_code &&
          paid_through == o.paid_through &&
          participation_incentive_id == o.participation_incentive_id &&
          pay_to_account == o.pay_to_account &&
          payor_id == o.payor_id &&
          pend_ex_code == o.pend_ex_code &&
          pend_flag == o.pend_flag &&
          phone == o.phone &&
          phone_country_code == o.phone_country_code &&
          premium_location == o.premium_location &&
          primary_contact == o.primary_contact &&
          prorate_deduction == o.prorate_deduction &&
          prorate_deduction_type == o.prorate_deduction_type &&
          reference_based_pricing == o.reference_based_pricing &&
          region_code == o.region_code &&
          reinsurance_option == o.reinsurance_option &&
          seer_data == o.seer_data &&
          set_paid_through == o.set_paid_through &&
          soc_sec_tax_day_limit == o.soc_sec_tax_day_limit &&
          soc_sec_wage_limit == o.soc_sec_wage_limit &&
          spec_deductible == o.spec_deductible &&
          state == o.state &&
          state_tax_day_limit == o.state_tax_day_limit &&
          state_wage_limit == o.state_wage_limit &&
          tax_day_limit_type == o.tax_day_limit_type &&
          transplant_elite == o.transplant_elite &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_restricted_deductions == o.use_restricted_deductions &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, division_id, ac_h_account_key, account_key, address, address2, adult_age, agri_tax_return, auth_not_reqd_override, brokerage, cobr_a_auto_term_adj_reason, cobr_a_auto_term_reason, cobr_a_division, co_e_network, case_rate, city, claim_days_allowed, class_description, class_id, contact_country_code, contact_email_address, contact_extension, contact_phone, contact_title, country_id, county_code, cutoff_age, default_cobra_reason, default_invoice_report_definition_key, disability_pay_through_day, disenroll_date, distribution_account_key, distribution_payor_id, duplicate_claim_override, entry_date, entry_user, exempt_federal, exempt_medicare, exempt_soc_sec, exempt_state, fic_a_employer_match, fax, fax_country_code, federal_id, federal_tax_day_limit, federal_wage_limit, generate_w2, group_division_captive, invoice_grace_period, invoice_grace_period_ex_code, invoice_grace_period_type, invoice_level, invoice_remit_address1, invoice_remit_address2, invoice_remit_city, invoice_remit_country_code, invoice_remit_country_id, invoice_remit_name, invoice_remit_phone_number, invoice_remit_state, invoice_remit_zip_code, issue_state, mail_to_default, medicare_tax_day_limit, medicare_wage_limit, name, notes, number_lives, original_date, other_insurance_ex_code, paid_through, participation_incentive_id, pay_to_account, payor_id, pend_ex_code, pend_flag, phone, phone_country_code, premium_location, primary_contact, prorate_deduction, prorate_deduction_type, reference_based_pricing, region_code, reinsurance_option, seer_data, set_paid_through, soc_sec_tax_day_limit, soc_sec_wage_limit, spec_deductible, state, state_tax_day_limit, state_wage_limit, tax_day_limit_type, transplant_elite, update_date, update_user, use_restricted_deductions, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
