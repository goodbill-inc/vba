=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class MemberBeneficiary
    # References Members.Subscriber_ID value on the parent record.
    attr_accessor :subscriber_id

    # References Members.Member_Seq value on the parent record.
    attr_accessor :member_seq

    # Unique identifier for this beneficiary on this member.
    attr_accessor :beneficiary_id

    # Primary address of the Beneficiary.
    attr_accessor :address

    # Address line 2 of the Beneficiary's primary address.
    attr_accessor :address2

    # A set amount paid to a beneficiary.
    attr_accessor :assignment

    # City of the Beneficiary's primary address.
    attr_accessor :city

    # Identifier of the country of the Beneficiary's primary address.
    attr_accessor :country_id

    # Date of birth of the Beneficiary.
    attr_accessor :date_of_birth

    # End date of the Beneficiary's status.
    attr_accessor :end_date

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Indicates if interest should be excluded when adjudicating Life claims paid to this beneficiary.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :exclude_interest

    # First name of the Beneficiary.
    attr_accessor :first_name

    # Last name of the Beneficiary.
    attr_accessor :last_name

    # Full name of the Beneficiary.
    attr_accessor :long_name

    # Middle name of the Beneficiary.
    attr_accessor :middle_name

    # Percentage of the benefit that is allotted to the associated Beneficiary.
    attr_accessor :percentage

    # Indicates whether the associated Beneficiary is the primary Beneficiary.
    attr_accessor :primary_beneficiary

    # Relationship of the Beneficiary to the Member.
    attr_accessor :relationship

    # Social security number of the Beneficiary.
    attr_accessor :ssn

    # This flag indicates if this beneficiary is secondary.
    attr_accessor :secondary_beneficiary

    # Start date of the Beneficiary's status.
    attr_accessor :start_date

    # State of the Beneficiary's primary address.
    attr_accessor :state

    # This flag indicates if this tertiary is secondary.
    attr_accessor :tertiary_beneficiary

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Zip code of the Beneficiary's primary address.
    attr_accessor :zip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'member_seq' => :'member_Seq',
        :'beneficiary_id' => :'beneficiary_ID',
        :'address' => :'address',
        :'address2' => :'address2',
        :'assignment' => :'assignment',
        :'city' => :'city',
        :'country_id' => :'country_ID',
        :'date_of_birth' => :'date_Of_Birth',
        :'end_date' => :'end_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'exclude_interest' => :'exclude_Interest',
        :'first_name' => :'first_Name',
        :'last_name' => :'last_Name',
        :'long_name' => :'long_Name',
        :'middle_name' => :'middle_Name',
        :'percentage' => :'percentage',
        :'primary_beneficiary' => :'primary_Beneficiary',
        :'relationship' => :'relationship',
        :'ssn' => :'ssn',
        :'secondary_beneficiary' => :'secondary_Beneficiary',
        :'start_date' => :'start_Date',
        :'state' => :'state',
        :'tertiary_beneficiary' => :'tertiary_Beneficiary',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'zip' => :'zip'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'member_seq' => :'String',
        :'beneficiary_id' => :'String',
        :'address' => :'String',
        :'address2' => :'String',
        :'assignment' => :'Float',
        :'city' => :'String',
        :'country_id' => :'String',
        :'date_of_birth' => :'Time',
        :'end_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'exclude_interest' => :'Boolean',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'long_name' => :'String',
        :'middle_name' => :'String',
        :'percentage' => :'Float',
        :'primary_beneficiary' => :'Boolean',
        :'relationship' => :'String',
        :'ssn' => :'String',
        :'secondary_beneficiary' => :'Boolean',
        :'start_date' => :'Time',
        :'state' => :'String',
        :'tertiary_beneficiary' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'zip' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address',
        :'address2',
        :'assignment',
        :'city',
        :'country_id',
        :'date_of_birth',
        :'end_date',
        :'entry_user',
        :'first_name',
        :'last_name',
        :'long_name',
        :'middle_name',
        :'percentage',
        :'primary_beneficiary',
        :'relationship',
        :'ssn',
        :'secondary_beneficiary',
        :'start_date',
        :'state',
        :'tertiary_beneficiary',
        :'update_user',
        :'zip'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::MemberBeneficiary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::MemberBeneficiary`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      else
        self.member_seq = nil
      end

      if attributes.key?(:'beneficiary_id')
        self.beneficiary_id = attributes[:'beneficiary_id']
      else
        self.beneficiary_id = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'assignment')
        self.assignment = attributes[:'assignment']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'country_id')
        self.country_id = attributes[:'country_id']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'exclude_interest')
        self.exclude_interest = attributes[:'exclude_interest']
      else
        self.exclude_interest = nil
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'long_name')
        self.long_name = attributes[:'long_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'percentage')
        self.percentage = attributes[:'percentage']
      end

      if attributes.key?(:'primary_beneficiary')
        self.primary_beneficiary = attributes[:'primary_beneficiary']
      end

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.key?(:'ssn')
        self.ssn = attributes[:'ssn']
      end

      if attributes.key?(:'secondary_beneficiary')
        self.secondary_beneficiary = attributes[:'secondary_beneficiary']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'tertiary_beneficiary')
        self.tertiary_beneficiary = attributes[:'tertiary_beneficiary']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if @member_seq.nil?
        invalid_properties.push('invalid value for "member_seq", member_seq cannot be nil.')
      end

      if @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @member_seq.to_s.length < 1
        invalid_properties.push('invalid value for "member_seq", the character length must be great than or equal to 1.')
      end

      if @beneficiary_id.nil?
        invalid_properties.push('invalid value for "beneficiary_id", beneficiary_id cannot be nil.')
      end

      if @beneficiary_id.to_s.length > 20
        invalid_properties.push('invalid value for "beneficiary_id", the character length must be smaller than or equal to 20.')
      end

      if @beneficiary_id.to_s.length < 1
        invalid_properties.push('invalid value for "beneficiary_id", the character length must be great than or equal to 1.')
      end

      if !@address.nil? && @address.to_s.length > 512
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 512.')
      end

      if !@address2.nil? && @address2.to_s.length > 128
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 128.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@country_id.nil? && @country_id.to_s.length > 8
        invalid_properties.push('invalid value for "country_id", the character length must be smaller than or equal to 8.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @exclude_interest.nil?
        invalid_properties.push('invalid value for "exclude_interest", exclude_interest cannot be nil.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 25
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 25.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 25
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 25.')
      end

      if !@long_name.nil? && @long_name.to_s.length > 512
        invalid_properties.push('invalid value for "long_name", the character length must be smaller than or equal to 512.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 25
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 25.')
      end

      if !@relationship.nil? && @relationship.to_s.length > 12
        invalid_properties.push('invalid value for "relationship", the character length must be smaller than or equal to 12.')
      end

      if !@ssn.nil? && @ssn.to_s.length > 32
        invalid_properties.push('invalid value for "ssn", the character length must be smaller than or equal to 32.')
      end

      if !@state.nil? && @state.to_s.length > 2
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@zip.nil? && @zip.to_s.length > 32
        invalid_properties.push('invalid value for "zip", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if @member_seq.nil?
      return false if @member_seq.to_s.length > 2
      return false if @member_seq.to_s.length < 1
      return false if @beneficiary_id.nil?
      return false if @beneficiary_id.to_s.length > 20
      return false if @beneficiary_id.to_s.length < 1
      return false if !@address.nil? && @address.to_s.length > 512
      return false if !@address2.nil? && @address2.to_s.length > 128
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@country_id.nil? && @country_id.to_s.length > 8
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @exclude_interest.nil?
      return false if !@first_name.nil? && @first_name.to_s.length > 25
      return false if !@last_name.nil? && @last_name.to_s.length > 25
      return false if !@long_name.nil? && @long_name.to_s.length > 512
      return false if !@middle_name.nil? && @middle_name.to_s.length > 25
      return false if !@relationship.nil? && @relationship.to_s.length > 12
      return false if !@ssn.nil? && @ssn.to_s.length > 32
      return false if !@state.nil? && @state.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@zip.nil? && @zip.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if member_seq.nil?
        fail ArgumentError, 'member_seq cannot be nil'
      end

      if member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      if member_seq.to_s.length < 1
        fail ArgumentError, 'invalid value for "member_seq", the character length must be great than or equal to 1.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] beneficiary_id Value to be assigned
    def beneficiary_id=(beneficiary_id)
      if beneficiary_id.nil?
        fail ArgumentError, 'beneficiary_id cannot be nil'
      end

      if beneficiary_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "beneficiary_id", the character length must be smaller than or equal to 20.'
      end

      if beneficiary_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "beneficiary_id", the character length must be great than or equal to 1.'
      end

      @beneficiary_id = beneficiary_id
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 512
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 512.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 128.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country_id Value to be assigned
    def country_id=(country_id)
      if !country_id.nil? && country_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_id", the character length must be smaller than or equal to 8.'
      end

      @country_id = country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_interest Value to be assigned
    def exclude_interest=(exclude_interest)
      if exclude_interest.nil?
        fail ArgumentError, 'exclude_interest cannot be nil'
      end

      @exclude_interest = exclude_interest
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 25.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 25.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] long_name Value to be assigned
    def long_name=(long_name)
      if !long_name.nil? && long_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "long_name", the character length must be smaller than or equal to 512.'
      end

      @long_name = long_name
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 25.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method with validation
    # @param [Object] relationship Value to be assigned
    def relationship=(relationship)
      if !relationship.nil? && relationship.to_s.length > 12
        fail ArgumentError, 'invalid value for "relationship", the character length must be smaller than or equal to 12.'
      end

      @relationship = relationship
    end

    # Custom attribute writer method with validation
    # @param [Object] ssn Value to be assigned
    def ssn=(ssn)
      if !ssn.nil? && ssn.to_s.length > 32
        fail ArgumentError, 'invalid value for "ssn", the character length must be smaller than or equal to 32.'
      end

      @ssn = ssn
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 2.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] zip Value to be assigned
    def zip=(zip)
      if !zip.nil? && zip.to_s.length > 32
        fail ArgumentError, 'invalid value for "zip", the character length must be smaller than or equal to 32.'
      end

      @zip = zip
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          member_seq == o.member_seq &&
          beneficiary_id == o.beneficiary_id &&
          address == o.address &&
          address2 == o.address2 &&
          assignment == o.assignment &&
          city == o.city &&
          country_id == o.country_id &&
          date_of_birth == o.date_of_birth &&
          end_date == o.end_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          exclude_interest == o.exclude_interest &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          long_name == o.long_name &&
          middle_name == o.middle_name &&
          percentage == o.percentage &&
          primary_beneficiary == o.primary_beneficiary &&
          relationship == o.relationship &&
          ssn == o.ssn &&
          secondary_beneficiary == o.secondary_beneficiary &&
          start_date == o.start_date &&
          state == o.state &&
          tertiary_beneficiary == o.tertiary_beneficiary &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          zip == o.zip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, member_seq, beneficiary_id, address, address2, assignment, city, country_id, date_of_birth, end_date, entry_date, entry_user, exclude_interest, first_name, last_name, long_name, middle_name, percentage, primary_beneficiary, relationship, ssn, secondary_beneficiary, start_date, state, tertiary_beneficiary, update_date, update_user, zip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
