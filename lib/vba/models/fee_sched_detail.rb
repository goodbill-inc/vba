=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class FeeSchedDetail
    # Unique identifier for each Detail record on this Fee Schedule.  Note: The database will apply a default value of `0` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `0` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :fee_sched_detail_key

    # This option allows the ‘Fee Schedule’ to price above the billed amount.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :allowed_over_billed

    # This field is currently informational only.  Note: The database will apply a default value of `False` for this field if a value is not provided.  This field is also marked as NOT NULL in the database and therefore required by the API.  If you do not have a value for this field, supply the database default value of `False` to meet the API requirements and ensure that the functionality occurs as expected.
    attr_accessor :always_use_rate

    # Price based upon a percentage of the billed amount that will be applied to the matching claim detail record through the ‘Fee Schedule’.
    attr_accessor :billed_pct

    # Requires a matching diagnosis code on the claim for adjudication matching. Start of a range of diagnosis codes when combined with 'Diag Thru'.
    attr_accessor :diag_code

    # End of the diagnosis range when combined with ‘Diag.’.
    attr_accessor :diag_code_thru

    # Indicates the ICD version associated with the selected Diagnosis Codes.
    attr_accessor :diagnostic_code_type

    # This will require a matching ‘Drug Code’ within a claim line during adjudication.
    attr_accessor :drug_code

    # Date when the schedule should begin applying to claims. This date will be compared to the date of service on the claim.
    attr_accessor :effective_date

    # User that first added the record to the system.
    attr_accessor :entry_date

    # Date when the record was first added to the system.
    attr_accessor :entry_user

    # Applies the provided Ex Code to any claim that has been repriced by this ‘Fee Schedule Fee’.
    attr_accessor :ex_code

    # Unique name given to the Fee Scheudle.
    attr_accessor :fee_sched

    # Starting point for the range of acceptable ages for the Fee Schedule.
    attr_accessor :from_age

    # Starting point for the range of acceptable number of units within a claim for matching during adjudication.
    attr_accessor :from_units

    # Modifiers applicable to codes can be entered. Each of the modifiers can be applied to a single code or multiple codes in the line. Modifier payment reductions can be set up in ‘Fee Schedule Configuration’ and can be applied each time the modifier is included on a claim.
    attr_accessor :modifier

    # Modifiers applicable to codes can be entered. Each of the modifiers can be applied to a single code or multiple codes in the line. Modifier payment reductions can be set up in ‘Fee Schedule Configuration’ and can be applied each time the modifier is included on a claim.
    attr_accessor :modifier2

    # Modifiers applicable to codes can be entered. Each of the modifiers can be applied to a single code or multiple codes in the line. Modifier payment reductions can be set up in ‘Fee Schedule Configuration’ and can be applied each time the modifier is included on a claim.
    attr_accessor :modifier3

    # Modifiers applicable to codes can be entered. Each of the modifiers can be applied to a single code or multiple codes in the line. Modifier payment reductions can be set up in ‘Fee Schedule Configuration’ and can be applied each time the modifier is included on a claim.
    attr_accessor :modifier4

    # Price based upon a percentage of the billed amount that is used for Out of Network claims that could not be matched with a usual and customary rate.
    attr_accessor :no_uc_percent

    # Requires a matching place of service on the claim for adjudication matching. Start of a range of PoS when combined with 'PoS Thru'.
    attr_accessor :place_of_service

    # End of the PoS range when combined with ‘PoS’.
    attr_accessor :place_of_service_thru

    # Price that will be applied to the matching claim detail record through the ‘Fee Schedule’. This will be multiplied by the number of units within the claim.
    attr_accessor :price

    # This allows the price to be applied to all procedures within a selected procedure cluster.
    attr_accessor :procedure_cluster

    # This section can contain CPT, HCPC, or revenue codes. Every line requires the first procedure code field to be completed, even when using a procedure cluster. Note: If entering a range of codes, the fee entered on that line will apply to all codes in the range.
    attr_accessor :procedure_code

    # This section can contain CPT, HCPC, or revenue codes. This field is compared to the 'Procedure Code 2' field on the claim's detail line.
    attr_accessor :procedure_code2

    # This section can contain CPT, HCPC, or Revenue codes. Every line requires the first procedure code field to be completed, even when using a procedure cluster. Note: If entering a range of codes, the fee entered on that line will apply to all codes in the range.
    attr_accessor :procedure_code_thru

    # Requires a matching Provider type on the claim for adjudication matching.
    attr_accessor :provider_type

    # This field is currently informational only.
    attr_accessor :rv_s_units

    # Requires a matching specialty code on the claim for adjudication matching.
    attr_accessor :specialty_code

    # Ending point for the range of acceptable ages for the Fee Schedule.
    attr_accessor :thru_age

    # Ending point for the range of acceptable number of units within a claim for matching during adjudication.
    attr_accessor :thru_units

    # No longer in use.
    attr_accessor :type_of_service

    # Allows the User to select an existing rate group to base their pricing upon. For instance, if you are building a ‘Fee Schedule’ that uses a percentage of Medicare rates. These rate groups need to be provided by the User and uploaded by VBA.
    attr_accessor :u_c_claim_type

    # The desired percentage applied from the selected rate group to the matching claim.
    attr_accessor :u_c_percent

    # User that last updated the record in the system.
    attr_accessor :update_date

    # Date when the record was last updated in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fee_sched_detail_key' => :'feeSchedDetail_Key',
        :'allowed_over_billed' => :'allowed_Over_Billed',
        :'always_use_rate' => :'always_Use_Rate',
        :'billed_pct' => :'billed_Pct',
        :'diag_code' => :'diag_Code',
        :'diag_code_thru' => :'diag_Code_Thru',
        :'diagnostic_code_type' => :'diagnostic_Code_Type',
        :'drug_code' => :'drug_Code',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'fee_sched' => :'fee_Sched',
        :'from_age' => :'from_Age',
        :'from_units' => :'from_Units',
        :'modifier' => :'modifier',
        :'modifier2' => :'modifier2',
        :'modifier3' => :'modifier3',
        :'modifier4' => :'modifier4',
        :'no_uc_percent' => :'no_UC_Percent',
        :'place_of_service' => :'place_Of_Service',
        :'place_of_service_thru' => :'place_Of_Service_Thru',
        :'price' => :'price',
        :'procedure_cluster' => :'procedure_Cluster',
        :'procedure_code' => :'procedure_Code',
        :'procedure_code2' => :'procedure_Code2',
        :'procedure_code_thru' => :'procedure_Code_Thru',
        :'provider_type' => :'provider_Type',
        :'rv_s_units' => :'rvS_Units',
        :'specialty_code' => :'specialty_Code',
        :'thru_age' => :'thru_Age',
        :'thru_units' => :'thru_Units',
        :'type_of_service' => :'type_Of_Service',
        :'u_c_claim_type' => :'uC_Claim_Type',
        :'u_c_percent' => :'uC_Percent',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fee_sched_detail_key' => :'Integer',
        :'allowed_over_billed' => :'Boolean',
        :'always_use_rate' => :'Boolean',
        :'billed_pct' => :'Float',
        :'diag_code' => :'String',
        :'diag_code_thru' => :'String',
        :'diagnostic_code_type' => :'String',
        :'drug_code' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'fee_sched' => :'String',
        :'from_age' => :'Integer',
        :'from_units' => :'Integer',
        :'modifier' => :'String',
        :'modifier2' => :'String',
        :'modifier3' => :'String',
        :'modifier4' => :'String',
        :'no_uc_percent' => :'Float',
        :'place_of_service' => :'String',
        :'place_of_service_thru' => :'String',
        :'price' => :'Float',
        :'procedure_cluster' => :'String',
        :'procedure_code' => :'String',
        :'procedure_code2' => :'String',
        :'procedure_code_thru' => :'String',
        :'provider_type' => :'String',
        :'rv_s_units' => :'Float',
        :'specialty_code' => :'String',
        :'thru_age' => :'Integer',
        :'thru_units' => :'Integer',
        :'type_of_service' => :'String',
        :'u_c_claim_type' => :'String',
        :'u_c_percent' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'billed_pct',
        :'diag_code',
        :'diag_code_thru',
        :'drug_code',
        :'entry_user',
        :'ex_code',
        :'from_age',
        :'from_units',
        :'modifier',
        :'modifier2',
        :'modifier3',
        :'modifier4',
        :'no_uc_percent',
        :'place_of_service',
        :'place_of_service_thru',
        :'price',
        :'procedure_cluster',
        :'procedure_code2',
        :'procedure_code_thru',
        :'provider_type',
        :'rv_s_units',
        :'specialty_code',
        :'thru_age',
        :'thru_units',
        :'type_of_service',
        :'u_c_claim_type',
        :'u_c_percent',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::FeeSchedDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::FeeSchedDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fee_sched_detail_key')
        self.fee_sched_detail_key = attributes[:'fee_sched_detail_key']
      else
        self.fee_sched_detail_key = nil
      end

      if attributes.key?(:'allowed_over_billed')
        self.allowed_over_billed = attributes[:'allowed_over_billed']
      else
        self.allowed_over_billed = nil
      end

      if attributes.key?(:'always_use_rate')
        self.always_use_rate = attributes[:'always_use_rate']
      else
        self.always_use_rate = nil
      end

      if attributes.key?(:'billed_pct')
        self.billed_pct = attributes[:'billed_pct']
      end

      if attributes.key?(:'diag_code')
        self.diag_code = attributes[:'diag_code']
      end

      if attributes.key?(:'diag_code_thru')
        self.diag_code_thru = attributes[:'diag_code_thru']
      end

      if attributes.key?(:'diagnostic_code_type')
        self.diagnostic_code_type = attributes[:'diagnostic_code_type']
      else
        self.diagnostic_code_type = nil
      end

      if attributes.key?(:'drug_code')
        self.drug_code = attributes[:'drug_code']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'fee_sched')
        self.fee_sched = attributes[:'fee_sched']
      else
        self.fee_sched = nil
      end

      if attributes.key?(:'from_age')
        self.from_age = attributes[:'from_age']
      end

      if attributes.key?(:'from_units')
        self.from_units = attributes[:'from_units']
      end

      if attributes.key?(:'modifier')
        self.modifier = attributes[:'modifier']
      end

      if attributes.key?(:'modifier2')
        self.modifier2 = attributes[:'modifier2']
      end

      if attributes.key?(:'modifier3')
        self.modifier3 = attributes[:'modifier3']
      end

      if attributes.key?(:'modifier4')
        self.modifier4 = attributes[:'modifier4']
      end

      if attributes.key?(:'no_uc_percent')
        self.no_uc_percent = attributes[:'no_uc_percent']
      end

      if attributes.key?(:'place_of_service')
        self.place_of_service = attributes[:'place_of_service']
      end

      if attributes.key?(:'place_of_service_thru')
        self.place_of_service_thru = attributes[:'place_of_service_thru']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'procedure_cluster')
        self.procedure_cluster = attributes[:'procedure_cluster']
      end

      if attributes.key?(:'procedure_code')
        self.procedure_code = attributes[:'procedure_code']
      else
        self.procedure_code = nil
      end

      if attributes.key?(:'procedure_code2')
        self.procedure_code2 = attributes[:'procedure_code2']
      end

      if attributes.key?(:'procedure_code_thru')
        self.procedure_code_thru = attributes[:'procedure_code_thru']
      end

      if attributes.key?(:'provider_type')
        self.provider_type = attributes[:'provider_type']
      end

      if attributes.key?(:'rv_s_units')
        self.rv_s_units = attributes[:'rv_s_units']
      end

      if attributes.key?(:'specialty_code')
        self.specialty_code = attributes[:'specialty_code']
      end

      if attributes.key?(:'thru_age')
        self.thru_age = attributes[:'thru_age']
      end

      if attributes.key?(:'thru_units')
        self.thru_units = attributes[:'thru_units']
      end

      if attributes.key?(:'type_of_service')
        self.type_of_service = attributes[:'type_of_service']
      end

      if attributes.key?(:'u_c_claim_type')
        self.u_c_claim_type = attributes[:'u_c_claim_type']
      end

      if attributes.key?(:'u_c_percent')
        self.u_c_percent = attributes[:'u_c_percent']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @fee_sched_detail_key.nil?
        invalid_properties.push('invalid value for "fee_sched_detail_key", fee_sched_detail_key cannot be nil.')
      end

      if @allowed_over_billed.nil?
        invalid_properties.push('invalid value for "allowed_over_billed", allowed_over_billed cannot be nil.')
      end

      if @always_use_rate.nil?
        invalid_properties.push('invalid value for "always_use_rate", always_use_rate cannot be nil.')
      end

      if !@diag_code.nil? && @diag_code.to_s.length > 8
        invalid_properties.push('invalid value for "diag_code", the character length must be smaller than or equal to 8.')
      end

      if !@diag_code_thru.nil? && @diag_code_thru.to_s.length > 8
        invalid_properties.push('invalid value for "diag_code_thru", the character length must be smaller than or equal to 8.')
      end

      if @diagnostic_code_type.nil?
        invalid_properties.push('invalid value for "diagnostic_code_type", diagnostic_code_type cannot be nil.')
      end

      if @diagnostic_code_type.to_s.length > 16
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.')
      end

      if @diagnostic_code_type.to_s.length < 1
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.')
      end

      if !@drug_code.nil? && @drug_code.to_s.length > 32
        invalid_properties.push('invalid value for "drug_code", the character length must be smaller than or equal to 32.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if @fee_sched.nil?
        invalid_properties.push('invalid value for "fee_sched", fee_sched cannot be nil.')
      end

      if @fee_sched.to_s.length > 8
        invalid_properties.push('invalid value for "fee_sched", the character length must be smaller than or equal to 8.')
      end

      if @fee_sched.to_s.length < 1
        invalid_properties.push('invalid value for "fee_sched", the character length must be great than or equal to 1.')
      end

      if !@modifier.nil? && @modifier.to_s.length > 8
        invalid_properties.push('invalid value for "modifier", the character length must be smaller than or equal to 8.')
      end

      if !@modifier2.nil? && @modifier2.to_s.length > 8
        invalid_properties.push('invalid value for "modifier2", the character length must be smaller than or equal to 8.')
      end

      if !@modifier3.nil? && @modifier3.to_s.length > 8
        invalid_properties.push('invalid value for "modifier3", the character length must be smaller than or equal to 8.')
      end

      if !@modifier4.nil? && @modifier4.to_s.length > 8
        invalid_properties.push('invalid value for "modifier4", the character length must be smaller than or equal to 8.')
      end

      if !@place_of_service.nil? && @place_of_service.to_s.length > 5
        invalid_properties.push('invalid value for "place_of_service", the character length must be smaller than or equal to 5.')
      end

      if !@place_of_service_thru.nil? && @place_of_service_thru.to_s.length > 5
        invalid_properties.push('invalid value for "place_of_service_thru", the character length must be smaller than or equal to 5.')
      end

      if !@procedure_cluster.nil? && @procedure_cluster.to_s.length > 32
        invalid_properties.push('invalid value for "procedure_cluster", the character length must be smaller than or equal to 32.')
      end

      if @procedure_code.nil?
        invalid_properties.push('invalid value for "procedure_code", procedure_code cannot be nil.')
      end

      if @procedure_code.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code", the character length must be smaller than or equal to 8.')
      end

      if @procedure_code.to_s.length < 1
        invalid_properties.push('invalid value for "procedure_code", the character length must be great than or equal to 1.')
      end

      if !@procedure_code2.nil? && @procedure_code2.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code2", the character length must be smaller than or equal to 8.')
      end

      if !@procedure_code_thru.nil? && @procedure_code_thru.to_s.length > 8
        invalid_properties.push('invalid value for "procedure_code_thru", the character length must be smaller than or equal to 8.')
      end

      if !@provider_type.nil? && @provider_type.to_s.length > 10
        invalid_properties.push('invalid value for "provider_type", the character length must be smaller than or equal to 10.')
      end

      if !@specialty_code.nil? && @specialty_code.to_s.length > 10
        invalid_properties.push('invalid value for "specialty_code", the character length must be smaller than or equal to 10.')
      end

      if !@type_of_service.nil? && @type_of_service.to_s.length > 5
        invalid_properties.push('invalid value for "type_of_service", the character length must be smaller than or equal to 5.')
      end

      if !@u_c_claim_type.nil? && @u_c_claim_type.to_s.length > 20
        invalid_properties.push('invalid value for "u_c_claim_type", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @fee_sched_detail_key.nil?
      return false if @allowed_over_billed.nil?
      return false if @always_use_rate.nil?
      return false if !@diag_code.nil? && @diag_code.to_s.length > 8
      return false if !@diag_code_thru.nil? && @diag_code_thru.to_s.length > 8
      return false if @diagnostic_code_type.nil?
      return false if @diagnostic_code_type.to_s.length > 16
      return false if @diagnostic_code_type.to_s.length < 1
      return false if !@drug_code.nil? && @drug_code.to_s.length > 32
      return false if @effective_date.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if @fee_sched.nil?
      return false if @fee_sched.to_s.length > 8
      return false if @fee_sched.to_s.length < 1
      return false if !@modifier.nil? && @modifier.to_s.length > 8
      return false if !@modifier2.nil? && @modifier2.to_s.length > 8
      return false if !@modifier3.nil? && @modifier3.to_s.length > 8
      return false if !@modifier4.nil? && @modifier4.to_s.length > 8
      return false if !@place_of_service.nil? && @place_of_service.to_s.length > 5
      return false if !@place_of_service_thru.nil? && @place_of_service_thru.to_s.length > 5
      return false if !@procedure_cluster.nil? && @procedure_cluster.to_s.length > 32
      return false if @procedure_code.nil?
      return false if @procedure_code.to_s.length > 8
      return false if @procedure_code.to_s.length < 1
      return false if !@procedure_code2.nil? && @procedure_code2.to_s.length > 8
      return false if !@procedure_code_thru.nil? && @procedure_code_thru.to_s.length > 8
      return false if !@provider_type.nil? && @provider_type.to_s.length > 10
      return false if !@specialty_code.nil? && @specialty_code.to_s.length > 10
      return false if !@type_of_service.nil? && @type_of_service.to_s.length > 5
      return false if !@u_c_claim_type.nil? && @u_c_claim_type.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] fee_sched_detail_key Value to be assigned
    def fee_sched_detail_key=(fee_sched_detail_key)
      if fee_sched_detail_key.nil?
        fail ArgumentError, 'fee_sched_detail_key cannot be nil'
      end

      @fee_sched_detail_key = fee_sched_detail_key
    end

    # Custom attribute writer method with validation
    # @param [Object] allowed_over_billed Value to be assigned
    def allowed_over_billed=(allowed_over_billed)
      if allowed_over_billed.nil?
        fail ArgumentError, 'allowed_over_billed cannot be nil'
      end

      @allowed_over_billed = allowed_over_billed
    end

    # Custom attribute writer method with validation
    # @param [Object] always_use_rate Value to be assigned
    def always_use_rate=(always_use_rate)
      if always_use_rate.nil?
        fail ArgumentError, 'always_use_rate cannot be nil'
      end

      @always_use_rate = always_use_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] diag_code Value to be assigned
    def diag_code=(diag_code)
      if !diag_code.nil? && diag_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "diag_code", the character length must be smaller than or equal to 8.'
      end

      @diag_code = diag_code
    end

    # Custom attribute writer method with validation
    # @param [Object] diag_code_thru Value to be assigned
    def diag_code_thru=(diag_code_thru)
      if !diag_code_thru.nil? && diag_code_thru.to_s.length > 8
        fail ArgumentError, 'invalid value for "diag_code_thru", the character length must be smaller than or equal to 8.'
      end

      @diag_code_thru = diag_code_thru
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code_type Value to be assigned
    def diagnostic_code_type=(diagnostic_code_type)
      if diagnostic_code_type.nil?
        fail ArgumentError, 'diagnostic_code_type cannot be nil'
      end

      if diagnostic_code_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.'
      end

      if diagnostic_code_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.'
      end

      @diagnostic_code_type = diagnostic_code_type
    end

    # Custom attribute writer method with validation
    # @param [Object] drug_code Value to be assigned
    def drug_code=(drug_code)
      if !drug_code.nil? && drug_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "drug_code", the character length must be smaller than or equal to 32.'
      end

      @drug_code = drug_code
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      if effective_date.nil?
        fail ArgumentError, 'effective_date cannot be nil'
      end

      @effective_date = effective_date
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] fee_sched Value to be assigned
    def fee_sched=(fee_sched)
      if fee_sched.nil?
        fail ArgumentError, 'fee_sched cannot be nil'
      end

      if fee_sched.to_s.length > 8
        fail ArgumentError, 'invalid value for "fee_sched", the character length must be smaller than or equal to 8.'
      end

      if fee_sched.to_s.length < 1
        fail ArgumentError, 'invalid value for "fee_sched", the character length must be great than or equal to 1.'
      end

      @fee_sched = fee_sched
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier Value to be assigned
    def modifier=(modifier)
      if !modifier.nil? && modifier.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier", the character length must be smaller than or equal to 8.'
      end

      @modifier = modifier
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier2 Value to be assigned
    def modifier2=(modifier2)
      if !modifier2.nil? && modifier2.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier2", the character length must be smaller than or equal to 8.'
      end

      @modifier2 = modifier2
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier3 Value to be assigned
    def modifier3=(modifier3)
      if !modifier3.nil? && modifier3.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier3", the character length must be smaller than or equal to 8.'
      end

      @modifier3 = modifier3
    end

    # Custom attribute writer method with validation
    # @param [Object] modifier4 Value to be assigned
    def modifier4=(modifier4)
      if !modifier4.nil? && modifier4.to_s.length > 8
        fail ArgumentError, 'invalid value for "modifier4", the character length must be smaller than or equal to 8.'
      end

      @modifier4 = modifier4
    end

    # Custom attribute writer method with validation
    # @param [Object] place_of_service Value to be assigned
    def place_of_service=(place_of_service)
      if !place_of_service.nil? && place_of_service.to_s.length > 5
        fail ArgumentError, 'invalid value for "place_of_service", the character length must be smaller than or equal to 5.'
      end

      @place_of_service = place_of_service
    end

    # Custom attribute writer method with validation
    # @param [Object] place_of_service_thru Value to be assigned
    def place_of_service_thru=(place_of_service_thru)
      if !place_of_service_thru.nil? && place_of_service_thru.to_s.length > 5
        fail ArgumentError, 'invalid value for "place_of_service_thru", the character length must be smaller than or equal to 5.'
      end

      @place_of_service_thru = place_of_service_thru
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_cluster Value to be assigned
    def procedure_cluster=(procedure_cluster)
      if !procedure_cluster.nil? && procedure_cluster.to_s.length > 32
        fail ArgumentError, 'invalid value for "procedure_cluster", the character length must be smaller than or equal to 32.'
      end

      @procedure_cluster = procedure_cluster
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code Value to be assigned
    def procedure_code=(procedure_code)
      if procedure_code.nil?
        fail ArgumentError, 'procedure_code cannot be nil'
      end

      if procedure_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be smaller than or equal to 8.'
      end

      if procedure_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "procedure_code", the character length must be great than or equal to 1.'
      end

      @procedure_code = procedure_code
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code2 Value to be assigned
    def procedure_code2=(procedure_code2)
      if !procedure_code2.nil? && procedure_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code2", the character length must be smaller than or equal to 8.'
      end

      @procedure_code2 = procedure_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] procedure_code_thru Value to be assigned
    def procedure_code_thru=(procedure_code_thru)
      if !procedure_code_thru.nil? && procedure_code_thru.to_s.length > 8
        fail ArgumentError, 'invalid value for "procedure_code_thru", the character length must be smaller than or equal to 8.'
      end

      @procedure_code_thru = procedure_code_thru
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_type Value to be assigned
    def provider_type=(provider_type)
      if !provider_type.nil? && provider_type.to_s.length > 10
        fail ArgumentError, 'invalid value for "provider_type", the character length must be smaller than or equal to 10.'
      end

      @provider_type = provider_type
    end

    # Custom attribute writer method with validation
    # @param [Object] specialty_code Value to be assigned
    def specialty_code=(specialty_code)
      if !specialty_code.nil? && specialty_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "specialty_code", the character length must be smaller than or equal to 10.'
      end

      @specialty_code = specialty_code
    end

    # Custom attribute writer method with validation
    # @param [Object] type_of_service Value to be assigned
    def type_of_service=(type_of_service)
      if !type_of_service.nil? && type_of_service.to_s.length > 5
        fail ArgumentError, 'invalid value for "type_of_service", the character length must be smaller than or equal to 5.'
      end

      @type_of_service = type_of_service
    end

    # Custom attribute writer method with validation
    # @param [Object] u_c_claim_type Value to be assigned
    def u_c_claim_type=(u_c_claim_type)
      if !u_c_claim_type.nil? && u_c_claim_type.to_s.length > 20
        fail ArgumentError, 'invalid value for "u_c_claim_type", the character length must be smaller than or equal to 20.'
      end

      @u_c_claim_type = u_c_claim_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fee_sched_detail_key == o.fee_sched_detail_key &&
          allowed_over_billed == o.allowed_over_billed &&
          always_use_rate == o.always_use_rate &&
          billed_pct == o.billed_pct &&
          diag_code == o.diag_code &&
          diag_code_thru == o.diag_code_thru &&
          diagnostic_code_type == o.diagnostic_code_type &&
          drug_code == o.drug_code &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          fee_sched == o.fee_sched &&
          from_age == o.from_age &&
          from_units == o.from_units &&
          modifier == o.modifier &&
          modifier2 == o.modifier2 &&
          modifier3 == o.modifier3 &&
          modifier4 == o.modifier4 &&
          no_uc_percent == o.no_uc_percent &&
          place_of_service == o.place_of_service &&
          place_of_service_thru == o.place_of_service_thru &&
          price == o.price &&
          procedure_cluster == o.procedure_cluster &&
          procedure_code == o.procedure_code &&
          procedure_code2 == o.procedure_code2 &&
          procedure_code_thru == o.procedure_code_thru &&
          provider_type == o.provider_type &&
          rv_s_units == o.rv_s_units &&
          specialty_code == o.specialty_code &&
          thru_age == o.thru_age &&
          thru_units == o.thru_units &&
          type_of_service == o.type_of_service &&
          u_c_claim_type == o.u_c_claim_type &&
          u_c_percent == o.u_c_percent &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fee_sched_detail_key, allowed_over_billed, always_use_rate, billed_pct, diag_code, diag_code_thru, diagnostic_code_type, drug_code, effective_date, entry_date, entry_user, ex_code, fee_sched, from_age, from_units, modifier, modifier2, modifier3, modifier4, no_uc_percent, place_of_service, place_of_service_thru, price, procedure_cluster, procedure_code, procedure_code2, procedure_code_thru, provider_type, rv_s_units, specialty_code, thru_age, thru_units, type_of_service, u_c_claim_type, u_c_percent, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
