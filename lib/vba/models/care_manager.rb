=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CareManager
    attr_accessor :care_manager_key

    attr_accessor :accepting_cases

    attr_accessor :access_co_worker

    attr_accessor :access_i_report_to

    attr_accessor :access_report_to_me

    attr_accessor :access_same_care_unit

    attr_accessor :care_manager_type

    attr_accessor :care_plan_all_fg

    attr_accessor :care_type_all_fg

    attr_accessor :case_threshold

    attr_accessor :case_weight_threshold

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :user_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'care_manager_key' => :'careManager_Key',
        :'accepting_cases' => :'accepting_Cases',
        :'access_co_worker' => :'access_Co_Worker',
        :'access_i_report_to' => :'access_I_Report_To',
        :'access_report_to_me' => :'access_Report_To_Me',
        :'access_same_care_unit' => :'access_Same_Care_Unit',
        :'care_manager_type' => :'careManager_Type',
        :'care_plan_all_fg' => :'carePlanAllFg',
        :'care_type_all_fg' => :'careTypeAllFg',
        :'case_threshold' => :'case_Threshold',
        :'case_weight_threshold' => :'case_Weight_Threshold',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'user_id' => :'user_ID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'care_manager_key' => :'Integer',
        :'accepting_cases' => :'Boolean',
        :'access_co_worker' => :'Integer',
        :'access_i_report_to' => :'Integer',
        :'access_report_to_me' => :'Integer',
        :'access_same_care_unit' => :'Integer',
        :'care_manager_type' => :'String',
        :'care_plan_all_fg' => :'Boolean',
        :'care_type_all_fg' => :'Boolean',
        :'case_threshold' => :'Integer',
        :'case_weight_threshold' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'user_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'access_co_worker',
        :'access_i_report_to',
        :'access_report_to_me',
        :'access_same_care_unit',
        :'care_manager_type',
        :'case_threshold',
        :'case_weight_threshold',
        :'entry_user',
        :'update_user',
        :'user_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CareManager` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CareManager`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'care_manager_key')
        self.care_manager_key = attributes[:'care_manager_key']
      else
        self.care_manager_key = nil
      end

      if attributes.key?(:'accepting_cases')
        self.accepting_cases = attributes[:'accepting_cases']
      else
        self.accepting_cases = nil
      end

      if attributes.key?(:'access_co_worker')
        self.access_co_worker = attributes[:'access_co_worker']
      end

      if attributes.key?(:'access_i_report_to')
        self.access_i_report_to = attributes[:'access_i_report_to']
      end

      if attributes.key?(:'access_report_to_me')
        self.access_report_to_me = attributes[:'access_report_to_me']
      end

      if attributes.key?(:'access_same_care_unit')
        self.access_same_care_unit = attributes[:'access_same_care_unit']
      end

      if attributes.key?(:'care_manager_type')
        self.care_manager_type = attributes[:'care_manager_type']
      end

      if attributes.key?(:'care_plan_all_fg')
        self.care_plan_all_fg = attributes[:'care_plan_all_fg']
      else
        self.care_plan_all_fg = nil
      end

      if attributes.key?(:'care_type_all_fg')
        self.care_type_all_fg = attributes[:'care_type_all_fg']
      else
        self.care_type_all_fg = nil
      end

      if attributes.key?(:'case_threshold')
        self.case_threshold = attributes[:'case_threshold']
      end

      if attributes.key?(:'case_weight_threshold')
        self.case_weight_threshold = attributes[:'case_weight_threshold']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @care_manager_key.nil?
        invalid_properties.push('invalid value for "care_manager_key", care_manager_key cannot be nil.')
      end

      if @accepting_cases.nil?
        invalid_properties.push('invalid value for "accepting_cases", accepting_cases cannot be nil.')
      end

      if !@care_manager_type.nil? && @care_manager_type.to_s.length > 32
        invalid_properties.push('invalid value for "care_manager_type", the character length must be smaller than or equal to 32.')
      end

      if @care_plan_all_fg.nil?
        invalid_properties.push('invalid value for "care_plan_all_fg", care_plan_all_fg cannot be nil.')
      end

      if @care_type_all_fg.nil?
        invalid_properties.push('invalid value for "care_type_all_fg", care_type_all_fg cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@user_id.nil? && @user_id.to_s.length > 20
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @care_manager_key.nil?
      return false if @accepting_cases.nil?
      return false if !@care_manager_type.nil? && @care_manager_type.to_s.length > 32
      return false if @care_plan_all_fg.nil?
      return false if @care_type_all_fg.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@user_id.nil? && @user_id.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] care_manager_key Value to be assigned
    def care_manager_key=(care_manager_key)
      if care_manager_key.nil?
        fail ArgumentError, 'care_manager_key cannot be nil'
      end

      @care_manager_key = care_manager_key
    end

    # Custom attribute writer method with validation
    # @param [Object] accepting_cases Value to be assigned
    def accepting_cases=(accepting_cases)
      if accepting_cases.nil?
        fail ArgumentError, 'accepting_cases cannot be nil'
      end

      @accepting_cases = accepting_cases
    end

    # Custom attribute writer method with validation
    # @param [Object] care_manager_type Value to be assigned
    def care_manager_type=(care_manager_type)
      if !care_manager_type.nil? && care_manager_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "care_manager_type", the character length must be smaller than or equal to 32.'
      end

      @care_manager_type = care_manager_type
    end

    # Custom attribute writer method with validation
    # @param [Object] care_plan_all_fg Value to be assigned
    def care_plan_all_fg=(care_plan_all_fg)
      if care_plan_all_fg.nil?
        fail ArgumentError, 'care_plan_all_fg cannot be nil'
      end

      @care_plan_all_fg = care_plan_all_fg
    end

    # Custom attribute writer method with validation
    # @param [Object] care_type_all_fg Value to be assigned
    def care_type_all_fg=(care_type_all_fg)
      if care_type_all_fg.nil?
        fail ArgumentError, 'care_type_all_fg cannot be nil'
      end

      @care_type_all_fg = care_type_all_fg
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 20.'
      end

      @user_id = user_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          care_manager_key == o.care_manager_key &&
          accepting_cases == o.accepting_cases &&
          access_co_worker == o.access_co_worker &&
          access_i_report_to == o.access_i_report_to &&
          access_report_to_me == o.access_report_to_me &&
          access_same_care_unit == o.access_same_care_unit &&
          care_manager_type == o.care_manager_type &&
          care_plan_all_fg == o.care_plan_all_fg &&
          care_type_all_fg == o.care_type_all_fg &&
          case_threshold == o.case_threshold &&
          case_weight_threshold == o.case_weight_threshold &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [care_manager_key, accepting_cases, access_co_worker, access_i_report_to, access_report_to_me, access_same_care_unit, care_manager_type, care_plan_all_fg, care_type_all_fg, case_threshold, case_weight_threshold, entry_date, entry_user, update_date, update_user, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
