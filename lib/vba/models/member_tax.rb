=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class MemberTax
    # Unique identier for each Tax configuration on this Member. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :member_tax_key

    # Member's state annual withholding allowance as listed on the Member's tax documents.
    attr_accessor :annual_withholding_allowance

    # Member's auxilary amounts as listed on the Member's tax documents.
    attr_accessor :auxiliary

    # Member's deductions amount as listed on the Member's tax documents.
    attr_accessor :deductions_amt

    # Member's dependant withholding amount as listed on the Member's tax documents.
    attr_accessor :dependant_withholding_amt

    # Date when the Member's tax record becomes/became effective.
    attr_accessor :effective_from

    # Date when the Member's tax record expires/expired.
    attr_accessor :effective_thru

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Member's exemptions as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exemptions

    # State of the Member's exemptions as listed on the Member's tax documents.
    attr_accessor :exemptions_state

    # Member's extra withholding amount as listed on the Member's tax documents.
    attr_accessor :extra_withholding_amt

    # Member's federal exemption status as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :federal_tax_exempt

    # Member's filing status as listed on the Member's tax documents.
    attr_accessor :filing_status

    # Member's filing status for state taxes as listed on the Member's tax documents.
    attr_accessor :filing_status_state

    # Member's federal flat tax amount as listed on the Member's tax documents.
    attr_accessor :flat_tax

    # Member's state flat tax amount as listed on the Member's tax documents.
    attr_accessor :flat_tax_state

    # Member's gross salary as listed on the Member's tax documents.
    attr_accessor :gross_salary

    # Number of hours the Member worked at the specified frequency as listed on the Member's tax documents.
    attr_accessor :hours_worked

    # Frequency at which the Member worked the specified number of hours as listed on the Member's tax documents.
    attr_accessor :hours_worked_frequency

    # Member's local tax code as listed on the Member's tax documents.
    attr_accessor :local_tax_code

    # Member's medicare exemption status as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :medicare_tax_exempt

    # References Members.Member_Seq value on the parent record.
    attr_accessor :member_seq

    # Member's miscellaneous amounts as listed on the Member's tax documents.
    attr_accessor :miscellaneous

    # Member's net salary as listed on the Member's tax documents.
    attr_accessor :net_salary

    # Member's other income amount as listed on the Member's tax documents.
    attr_accessor :other_income_amt

    # Member's election percentage at the federal level as listed on the Member's tax documents.
    attr_accessor :percentage_election

    # Member's social security exemption status as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :soc_sec_tax_exempt

    # Member's election percentage at the state level as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :state_percentage_election

    # Member's tax exemption status as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :state_tax_exempt

    # Holds a numeric value listed as withholding, used in conjunction with Tax Control.
    attr_accessor :state_withholding

    # References Members.Subscriber_ID value on the parent record.
    attr_accessor :subscriber_id

    # Member's exemption status as listed on the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :tax_exempt

    # Member's amount of tips as listed on the Member's tax documents.
    attr_accessor :tips

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Specifies that the associated W4 is from 2020. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :w4_2020

    # Specifies whether Box C was checked according to the Member's tax documents. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :w4_box_c

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'member_tax_key' => :'memberTax_Key',
        :'annual_withholding_allowance' => :'annual_Withholding_Allowance',
        :'auxiliary' => :'auxiliary',
        :'deductions_amt' => :'deductions_Amt',
        :'dependant_withholding_amt' => :'dependant_Withholding_Amt',
        :'effective_from' => :'effective_From',
        :'effective_thru' => :'effective_Thru',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'exemptions' => :'exemptions',
        :'exemptions_state' => :'exemptions_State',
        :'extra_withholding_amt' => :'extra_Withholding_Amt',
        :'federal_tax_exempt' => :'federal_Tax_Exempt',
        :'filing_status' => :'filing_Status',
        :'filing_status_state' => :'filing_Status_State',
        :'flat_tax' => :'flat_Tax',
        :'flat_tax_state' => :'flat_Tax_State',
        :'gross_salary' => :'gross_Salary',
        :'hours_worked' => :'hours_Worked',
        :'hours_worked_frequency' => :'hours_Worked_Frequency',
        :'local_tax_code' => :'local_Tax_Code',
        :'medicare_tax_exempt' => :'medicare_Tax_Exempt',
        :'member_seq' => :'member_Seq',
        :'miscellaneous' => :'miscellaneous',
        :'net_salary' => :'net_Salary',
        :'other_income_amt' => :'other_Income_Amt',
        :'percentage_election' => :'percentage_Election',
        :'soc_sec_tax_exempt' => :'socSec_Tax_Exempt',
        :'state_percentage_election' => :'state_Percentage_Election',
        :'state_tax_exempt' => :'state_Tax_Exempt',
        :'state_withholding' => :'state_Withholding',
        :'subscriber_id' => :'subscriber_ID',
        :'tax_exempt' => :'tax_Exempt',
        :'tips' => :'tips',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'w4_2020' => :'w4_2020',
        :'w4_box_c' => :'w4_Box_C'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'member_tax_key' => :'Integer',
        :'annual_withholding_allowance' => :'Float',
        :'auxiliary' => :'Float',
        :'deductions_amt' => :'Float',
        :'dependant_withholding_amt' => :'Float',
        :'effective_from' => :'Time',
        :'effective_thru' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'exemptions' => :'Integer',
        :'exemptions_state' => :'Integer',
        :'extra_withholding_amt' => :'Float',
        :'federal_tax_exempt' => :'Boolean',
        :'filing_status' => :'Integer',
        :'filing_status_state' => :'Integer',
        :'flat_tax' => :'Float',
        :'flat_tax_state' => :'Float',
        :'gross_salary' => :'Float',
        :'hours_worked' => :'Float',
        :'hours_worked_frequency' => :'String',
        :'local_tax_code' => :'String',
        :'medicare_tax_exempt' => :'Boolean',
        :'member_seq' => :'String',
        :'miscellaneous' => :'Float',
        :'net_salary' => :'Float',
        :'other_income_amt' => :'Float',
        :'percentage_election' => :'Float',
        :'soc_sec_tax_exempt' => :'Boolean',
        :'state_percentage_election' => :'Boolean',
        :'state_tax_exempt' => :'Boolean',
        :'state_withholding' => :'Float',
        :'subscriber_id' => :'String',
        :'tax_exempt' => :'Boolean',
        :'tips' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'w4_2020' => :'Boolean',
        :'w4_box_c' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'annual_withholding_allowance',
        :'auxiliary',
        :'deductions_amt',
        :'dependant_withholding_amt',
        :'effective_from',
        :'effective_thru',
        :'entry_user',
        :'exemptions_state',
        :'extra_withholding_amt',
        :'filing_status',
        :'filing_status_state',
        :'flat_tax',
        :'flat_tax_state',
        :'gross_salary',
        :'hours_worked',
        :'hours_worked_frequency',
        :'local_tax_code',
        :'member_seq',
        :'miscellaneous',
        :'net_salary',
        :'other_income_amt',
        :'percentage_election',
        :'state_withholding',
        :'subscriber_id',
        :'tips',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::MemberTax` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::MemberTax`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'member_tax_key')
        self.member_tax_key = attributes[:'member_tax_key']
      else
        self.member_tax_key = nil
      end

      if attributes.key?(:'annual_withholding_allowance')
        self.annual_withholding_allowance = attributes[:'annual_withholding_allowance']
      end

      if attributes.key?(:'auxiliary')
        self.auxiliary = attributes[:'auxiliary']
      end

      if attributes.key?(:'deductions_amt')
        self.deductions_amt = attributes[:'deductions_amt']
      end

      if attributes.key?(:'dependant_withholding_amt')
        self.dependant_withholding_amt = attributes[:'dependant_withholding_amt']
      end

      if attributes.key?(:'effective_from')
        self.effective_from = attributes[:'effective_from']
      end

      if attributes.key?(:'effective_thru')
        self.effective_thru = attributes[:'effective_thru']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'exemptions')
        self.exemptions = attributes[:'exemptions']
      else
        self.exemptions = nil
      end

      if attributes.key?(:'exemptions_state')
        self.exemptions_state = attributes[:'exemptions_state']
      end

      if attributes.key?(:'extra_withholding_amt')
        self.extra_withholding_amt = attributes[:'extra_withholding_amt']
      end

      if attributes.key?(:'federal_tax_exempt')
        self.federal_tax_exempt = attributes[:'federal_tax_exempt']
      else
        self.federal_tax_exempt = nil
      end

      if attributes.key?(:'filing_status')
        self.filing_status = attributes[:'filing_status']
      end

      if attributes.key?(:'filing_status_state')
        self.filing_status_state = attributes[:'filing_status_state']
      end

      if attributes.key?(:'flat_tax')
        self.flat_tax = attributes[:'flat_tax']
      end

      if attributes.key?(:'flat_tax_state')
        self.flat_tax_state = attributes[:'flat_tax_state']
      end

      if attributes.key?(:'gross_salary')
        self.gross_salary = attributes[:'gross_salary']
      end

      if attributes.key?(:'hours_worked')
        self.hours_worked = attributes[:'hours_worked']
      end

      if attributes.key?(:'hours_worked_frequency')
        self.hours_worked_frequency = attributes[:'hours_worked_frequency']
      end

      if attributes.key?(:'local_tax_code')
        self.local_tax_code = attributes[:'local_tax_code']
      end

      if attributes.key?(:'medicare_tax_exempt')
        self.medicare_tax_exempt = attributes[:'medicare_tax_exempt']
      else
        self.medicare_tax_exempt = nil
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'miscellaneous')
        self.miscellaneous = attributes[:'miscellaneous']
      end

      if attributes.key?(:'net_salary')
        self.net_salary = attributes[:'net_salary']
      end

      if attributes.key?(:'other_income_amt')
        self.other_income_amt = attributes[:'other_income_amt']
      end

      if attributes.key?(:'percentage_election')
        self.percentage_election = attributes[:'percentage_election']
      end

      if attributes.key?(:'soc_sec_tax_exempt')
        self.soc_sec_tax_exempt = attributes[:'soc_sec_tax_exempt']
      else
        self.soc_sec_tax_exempt = nil
      end

      if attributes.key?(:'state_percentage_election')
        self.state_percentage_election = attributes[:'state_percentage_election']
      else
        self.state_percentage_election = nil
      end

      if attributes.key?(:'state_tax_exempt')
        self.state_tax_exempt = attributes[:'state_tax_exempt']
      else
        self.state_tax_exempt = nil
      end

      if attributes.key?(:'state_withholding')
        self.state_withholding = attributes[:'state_withholding']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'tax_exempt')
        self.tax_exempt = attributes[:'tax_exempt']
      else
        self.tax_exempt = nil
      end

      if attributes.key?(:'tips')
        self.tips = attributes[:'tips']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'w4_2020')
        self.w4_2020 = attributes[:'w4_2020']
      else
        self.w4_2020 = nil
      end

      if attributes.key?(:'w4_box_c')
        self.w4_box_c = attributes[:'w4_box_c']
      else
        self.w4_box_c = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @member_tax_key.nil?
        invalid_properties.push('invalid value for "member_tax_key", member_tax_key cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @exemptions.nil?
        invalid_properties.push('invalid value for "exemptions", exemptions cannot be nil.')
      end

      if @federal_tax_exempt.nil?
        invalid_properties.push('invalid value for "federal_tax_exempt", federal_tax_exempt cannot be nil.')
      end

      if !@hours_worked_frequency.nil? && @hours_worked_frequency.to_s.length > 1
        invalid_properties.push('invalid value for "hours_worked_frequency", the character length must be smaller than or equal to 1.')
      end

      if !@local_tax_code.nil? && @local_tax_code.to_s.length > 128
        invalid_properties.push('invalid value for "local_tax_code", the character length must be smaller than or equal to 128.')
      end

      if @medicare_tax_exempt.nil?
        invalid_properties.push('invalid value for "medicare_tax_exempt", medicare_tax_exempt cannot be nil.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @soc_sec_tax_exempt.nil?
        invalid_properties.push('invalid value for "soc_sec_tax_exempt", soc_sec_tax_exempt cannot be nil.')
      end

      if @state_percentage_election.nil?
        invalid_properties.push('invalid value for "state_percentage_election", state_percentage_election cannot be nil.')
      end

      if @state_tax_exempt.nil?
        invalid_properties.push('invalid value for "state_tax_exempt", state_tax_exempt cannot be nil.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @tax_exempt.nil?
        invalid_properties.push('invalid value for "tax_exempt", tax_exempt cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @w4_2020.nil?
        invalid_properties.push('invalid value for "w4_2020", w4_2020 cannot be nil.')
      end

      if @w4_box_c.nil?
        invalid_properties.push('invalid value for "w4_box_c", w4_box_c cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @member_tax_key.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @exemptions.nil?
      return false if @federal_tax_exempt.nil?
      return false if !@hours_worked_frequency.nil? && @hours_worked_frequency.to_s.length > 1
      return false if !@local_tax_code.nil? && @local_tax_code.to_s.length > 128
      return false if @medicare_tax_exempt.nil?
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if @soc_sec_tax_exempt.nil?
      return false if @state_percentage_election.nil?
      return false if @state_tax_exempt.nil?
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if @tax_exempt.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @w4_2020.nil?
      return false if @w4_box_c.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] member_tax_key Value to be assigned
    def member_tax_key=(member_tax_key)
      if member_tax_key.nil?
        fail ArgumentError, 'member_tax_key cannot be nil'
      end

      @member_tax_key = member_tax_key
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] exemptions Value to be assigned
    def exemptions=(exemptions)
      if exemptions.nil?
        fail ArgumentError, 'exemptions cannot be nil'
      end

      @exemptions = exemptions
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_tax_exempt Value to be assigned
    def federal_tax_exempt=(federal_tax_exempt)
      if federal_tax_exempt.nil?
        fail ArgumentError, 'federal_tax_exempt cannot be nil'
      end

      @federal_tax_exempt = federal_tax_exempt
    end

    # Custom attribute writer method with validation
    # @param [Object] hours_worked_frequency Value to be assigned
    def hours_worked_frequency=(hours_worked_frequency)
      if !hours_worked_frequency.nil? && hours_worked_frequency.to_s.length > 1
        fail ArgumentError, 'invalid value for "hours_worked_frequency", the character length must be smaller than or equal to 1.'
      end

      @hours_worked_frequency = hours_worked_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] local_tax_code Value to be assigned
    def local_tax_code=(local_tax_code)
      if !local_tax_code.nil? && local_tax_code.to_s.length > 128
        fail ArgumentError, 'invalid value for "local_tax_code", the character length must be smaller than or equal to 128.'
      end

      @local_tax_code = local_tax_code
    end

    # Custom attribute writer method with validation
    # @param [Object] medicare_tax_exempt Value to be assigned
    def medicare_tax_exempt=(medicare_tax_exempt)
      if medicare_tax_exempt.nil?
        fail ArgumentError, 'medicare_tax_exempt cannot be nil'
      end

      @medicare_tax_exempt = medicare_tax_exempt
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] soc_sec_tax_exempt Value to be assigned
    def soc_sec_tax_exempt=(soc_sec_tax_exempt)
      if soc_sec_tax_exempt.nil?
        fail ArgumentError, 'soc_sec_tax_exempt cannot be nil'
      end

      @soc_sec_tax_exempt = soc_sec_tax_exempt
    end

    # Custom attribute writer method with validation
    # @param [Object] state_percentage_election Value to be assigned
    def state_percentage_election=(state_percentage_election)
      if state_percentage_election.nil?
        fail ArgumentError, 'state_percentage_election cannot be nil'
      end

      @state_percentage_election = state_percentage_election
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax_exempt Value to be assigned
    def state_tax_exempt=(state_tax_exempt)
      if state_tax_exempt.nil?
        fail ArgumentError, 'state_tax_exempt cannot be nil'
      end

      @state_tax_exempt = state_tax_exempt
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_exempt Value to be assigned
    def tax_exempt=(tax_exempt)
      if tax_exempt.nil?
        fail ArgumentError, 'tax_exempt cannot be nil'
      end

      @tax_exempt = tax_exempt
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] w4_2020 Value to be assigned
    def w4_2020=(w4_2020)
      if w4_2020.nil?
        fail ArgumentError, 'w4_2020 cannot be nil'
      end

      @w4_2020 = w4_2020
    end

    # Custom attribute writer method with validation
    # @param [Object] w4_box_c Value to be assigned
    def w4_box_c=(w4_box_c)
      if w4_box_c.nil?
        fail ArgumentError, 'w4_box_c cannot be nil'
      end

      @w4_box_c = w4_box_c
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          member_tax_key == o.member_tax_key &&
          annual_withholding_allowance == o.annual_withholding_allowance &&
          auxiliary == o.auxiliary &&
          deductions_amt == o.deductions_amt &&
          dependant_withholding_amt == o.dependant_withholding_amt &&
          effective_from == o.effective_from &&
          effective_thru == o.effective_thru &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          exemptions == o.exemptions &&
          exemptions_state == o.exemptions_state &&
          extra_withholding_amt == o.extra_withholding_amt &&
          federal_tax_exempt == o.federal_tax_exempt &&
          filing_status == o.filing_status &&
          filing_status_state == o.filing_status_state &&
          flat_tax == o.flat_tax &&
          flat_tax_state == o.flat_tax_state &&
          gross_salary == o.gross_salary &&
          hours_worked == o.hours_worked &&
          hours_worked_frequency == o.hours_worked_frequency &&
          local_tax_code == o.local_tax_code &&
          medicare_tax_exempt == o.medicare_tax_exempt &&
          member_seq == o.member_seq &&
          miscellaneous == o.miscellaneous &&
          net_salary == o.net_salary &&
          other_income_amt == o.other_income_amt &&
          percentage_election == o.percentage_election &&
          soc_sec_tax_exempt == o.soc_sec_tax_exempt &&
          state_percentage_election == o.state_percentage_election &&
          state_tax_exempt == o.state_tax_exempt &&
          state_withholding == o.state_withholding &&
          subscriber_id == o.subscriber_id &&
          tax_exempt == o.tax_exempt &&
          tips == o.tips &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          w4_2020 == o.w4_2020 &&
          w4_box_c == o.w4_box_c
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [member_tax_key, annual_withholding_allowance, auxiliary, deductions_amt, dependant_withholding_amt, effective_from, effective_thru, entry_date, entry_user, exemptions, exemptions_state, extra_withholding_amt, federal_tax_exempt, filing_status, filing_status_state, flat_tax, flat_tax_state, gross_salary, hours_worked, hours_worked_frequency, local_tax_code, medicare_tax_exempt, member_seq, miscellaneous, net_salary, other_income_amt, percentage_election, soc_sec_tax_exempt, state_percentage_election, state_tax_exempt, state_withholding, subscriber_id, tax_exempt, tips, update_date, update_user, w4_2020, w4_box_c].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
