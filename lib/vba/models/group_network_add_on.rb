=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupNetworkAddOn
    # Used in custom client processing with no functional impact on existing processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_network_add_on_key

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :description

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :discount_payment

    # Used in custom client processing with no functional impact on existing processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :discount_payment_pct

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :discount_threshold

    # Used in custom client processing with no functional impact on existing processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :discount_threshold_pct

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :group_id

    # Used in custom client processing with no functional impact on existing processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :incurred_from

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :incurred_thru

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :member_seq

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :network_id

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :paid_from

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :paid_thru

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :payment_limit

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :payment_limit_type

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :provider_id

    # Used in custom client processing with no functional impact on existing processing.
    attr_accessor :subscriber_id

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_network_add_on_key' => :'groupNetworkAddOn_Key',
        :'description' => :'description',
        :'discount_payment' => :'discount_Payment',
        :'discount_payment_pct' => :'discount_Payment_Pct',
        :'discount_threshold' => :'discount_Threshold',
        :'discount_threshold_pct' => :'discount_Threshold_Pct',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'incurred_from' => :'incurred_From',
        :'incurred_thru' => :'incurred_Thru',
        :'member_seq' => :'member_Seq',
        :'network_id' => :'network_ID',
        :'paid_from' => :'paid_From',
        :'paid_thru' => :'paid_Thru',
        :'payment_limit' => :'payment_Limit',
        :'payment_limit_type' => :'payment_Limit_Type',
        :'provider_id' => :'provider_ID',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_network_add_on_key' => :'Integer',
        :'description' => :'String',
        :'discount_payment' => :'Float',
        :'discount_payment_pct' => :'Boolean',
        :'discount_threshold' => :'Float',
        :'discount_threshold_pct' => :'Boolean',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'incurred_from' => :'Time',
        :'incurred_thru' => :'Time',
        :'member_seq' => :'String',
        :'network_id' => :'String',
        :'paid_from' => :'Time',
        :'paid_thru' => :'Time',
        :'payment_limit' => :'Float',
        :'payment_limit_type' => :'String',
        :'provider_id' => :'String',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
        :'discount_payment',
        :'discount_threshold',
        :'entry_user',
        :'incurred_thru',
        :'member_seq',
        :'paid_from',
        :'paid_thru',
        :'payment_limit',
        :'payment_limit_type',
        :'provider_id',
        :'subscriber_id',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupNetworkAddOn` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupNetworkAddOn`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_network_add_on_key')
        self.group_network_add_on_key = attributes[:'group_network_add_on_key']
      else
        self.group_network_add_on_key = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'discount_payment')
        self.discount_payment = attributes[:'discount_payment']
      end

      if attributes.key?(:'discount_payment_pct')
        self.discount_payment_pct = attributes[:'discount_payment_pct']
      else
        self.discount_payment_pct = nil
      end

      if attributes.key?(:'discount_threshold')
        self.discount_threshold = attributes[:'discount_threshold']
      end

      if attributes.key?(:'discount_threshold_pct')
        self.discount_threshold_pct = attributes[:'discount_threshold_pct']
      else
        self.discount_threshold_pct = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'incurred_from')
        self.incurred_from = attributes[:'incurred_from']
      else
        self.incurred_from = nil
      end

      if attributes.key?(:'incurred_thru')
        self.incurred_thru = attributes[:'incurred_thru']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'network_id')
        self.network_id = attributes[:'network_id']
      else
        self.network_id = nil
      end

      if attributes.key?(:'paid_from')
        self.paid_from = attributes[:'paid_from']
      end

      if attributes.key?(:'paid_thru')
        self.paid_thru = attributes[:'paid_thru']
      end

      if attributes.key?(:'payment_limit')
        self.payment_limit = attributes[:'payment_limit']
      end

      if attributes.key?(:'payment_limit_type')
        self.payment_limit_type = attributes[:'payment_limit_type']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_network_add_on_key.nil?
        invalid_properties.push('invalid value for "group_network_add_on_key", group_network_add_on_key cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 512
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 512.')
      end

      if @discount_payment_pct.nil?
        invalid_properties.push('invalid value for "discount_payment_pct", discount_payment_pct cannot be nil.')
      end

      if @discount_threshold_pct.nil?
        invalid_properties.push('invalid value for "discount_threshold_pct", discount_threshold_pct cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @incurred_from.nil?
        invalid_properties.push('invalid value for "incurred_from", incurred_from cannot be nil.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if @network_id.nil?
        invalid_properties.push('invalid value for "network_id", network_id cannot be nil.')
      end

      if @network_id.to_s.length > 20
        invalid_properties.push('invalid value for "network_id", the character length must be smaller than or equal to 20.')
      end

      if @network_id.to_s.length < 1
        invalid_properties.push('invalid value for "network_id", the character length must be great than or equal to 1.')
      end

      if !@payment_limit_type.nil? && @payment_limit_type.to_s.length > 32
        invalid_properties.push('invalid value for "payment_limit_type", the character length must be smaller than or equal to 32.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_network_add_on_key.nil?
      return false if !@description.nil? && @description.to_s.length > 512
      return false if @discount_payment_pct.nil?
      return false if @discount_threshold_pct.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @incurred_from.nil?
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if @network_id.nil?
      return false if @network_id.to_s.length > 20
      return false if @network_id.to_s.length < 1
      return false if !@payment_limit_type.nil? && @payment_limit_type.to_s.length > 32
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_network_add_on_key Value to be assigned
    def group_network_add_on_key=(group_network_add_on_key)
      if group_network_add_on_key.nil?
        fail ArgumentError, 'group_network_add_on_key cannot be nil'
      end

      @group_network_add_on_key = group_network_add_on_key
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 512
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 512.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_payment_pct Value to be assigned
    def discount_payment_pct=(discount_payment_pct)
      if discount_payment_pct.nil?
        fail ArgumentError, 'discount_payment_pct cannot be nil'
      end

      @discount_payment_pct = discount_payment_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_threshold_pct Value to be assigned
    def discount_threshold_pct=(discount_threshold_pct)
      if discount_threshold_pct.nil?
        fail ArgumentError, 'discount_threshold_pct cannot be nil'
      end

      @discount_threshold_pct = discount_threshold_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] incurred_from Value to be assigned
    def incurred_from=(incurred_from)
      if incurred_from.nil?
        fail ArgumentError, 'incurred_from cannot be nil'
      end

      @incurred_from = incurred_from
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] network_id Value to be assigned
    def network_id=(network_id)
      if network_id.nil?
        fail ArgumentError, 'network_id cannot be nil'
      end

      if network_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "network_id", the character length must be smaller than or equal to 20.'
      end

      if network_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "network_id", the character length must be great than or equal to 1.'
      end

      @network_id = network_id
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_limit_type Value to be assigned
    def payment_limit_type=(payment_limit_type)
      if !payment_limit_type.nil? && payment_limit_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "payment_limit_type", the character length must be smaller than or equal to 32.'
      end

      @payment_limit_type = payment_limit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_network_add_on_key == o.group_network_add_on_key &&
          description == o.description &&
          discount_payment == o.discount_payment &&
          discount_payment_pct == o.discount_payment_pct &&
          discount_threshold == o.discount_threshold &&
          discount_threshold_pct == o.discount_threshold_pct &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          incurred_from == o.incurred_from &&
          incurred_thru == o.incurred_thru &&
          member_seq == o.member_seq &&
          network_id == o.network_id &&
          paid_from == o.paid_from &&
          paid_thru == o.paid_thru &&
          payment_limit == o.payment_limit &&
          payment_limit_type == o.payment_limit_type &&
          provider_id == o.provider_id &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_network_add_on_key, description, discount_payment, discount_payment_pct, discount_threshold, discount_threshold_pct, entry_date, entry_user, group_id, incurred_from, incurred_thru, member_seq, network_id, paid_from, paid_thru, payment_limit, payment_limit_type, provider_id, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
