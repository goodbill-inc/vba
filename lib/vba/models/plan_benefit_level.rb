=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PlanBenefitLevel
    # Unique idenfitier assigned to the Plan Benefit Level. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :plan_benefit_level_key

    # References the PlanBenefits.Benefit_Code value in parent table.
    attr_accessor :benefit_code

    # Unique identifier assigned to the Plan Benefit Level: Age by Service Date - age of the Member by the service date of the claim. Age by Received Date - age of the Member by the received date of the claim. Relationship Code - relationship of the Member to the Subscriber. Months Enrolled in Plan - range of months the Member has been enrolled in the plan. Days Enrolled in Plan - range of days the Member has been enrolled in the plan. Network - network of the claim. Out of Network - claim is out of network. Billed Amount - range of billed amount of the service line. Modifier - modifier exists on the service line. Exact Modifier - modifier exists in the exact location on the service line. No Modifier - no modifier exists on the service line. Exclude Modifier - modifier does not exist on the service line. Exclude Exact Modifier - modifier does not exist in the exact location on the service line. Gender - biological sex of the Member. Billing Taxonomy - taxonomy of the billing Provider must be included in the taxonomy group. Rendering Taxonomy - taxonomy of the rendering Provider must be included in the taxonomy group. Service Facility Taxonomy - taxonomy of the facility Provider must be included in the taxonomy group. Procedure Category - procedure code on the service line must fall into the indicated procedure category. Procedure Cluster - procedure code on the service line must fall into the indicated procedure cluster. Provider Federal ID - federal ID of the claim's Provider.
    attr_accessor :benefit_level

    # Date when the record was added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Indicates whether the specified code is included or excluded. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exclude

    # Additional value that may be associated with the Benefit Level.
    attr_accessor :extra_value1

    # Additional value that may be associated with the Benefit Level.
    attr_accessor :extra_value2

    # Initial value in the range of values.
    attr_accessor :from_value

    # References the PlanBenefits.Plan_ID value in parent table.
    attr_accessor :plan_id

    # Final value in the range of values.
    attr_accessor :thru_value

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Specifies the type or measure of the associated Benefit Level values.
    attr_accessor :value_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'plan_benefit_level_key' => :'planBenefitLevel_Key',
        :'benefit_code' => :'benefit_Code',
        :'benefit_level' => :'benefit_Level',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'exclude' => :'exclude',
        :'extra_value1' => :'extra_Value1',
        :'extra_value2' => :'extra_Value2',
        :'from_value' => :'from_Value',
        :'plan_id' => :'plan_ID',
        :'thru_value' => :'thru_Value',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'value_type' => :'value_Type'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'plan_benefit_level_key' => :'Integer',
        :'benefit_code' => :'String',
        :'benefit_level' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'exclude' => :'Boolean',
        :'extra_value1' => :'String',
        :'extra_value2' => :'String',
        :'from_value' => :'String',
        :'plan_id' => :'String',
        :'thru_value' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'value_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'entry_user',
        :'extra_value1',
        :'extra_value2',
        :'from_value',
        :'plan_id',
        :'thru_value',
        :'update_user',
        :'value_type'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PlanBenefitLevel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PlanBenefitLevel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'plan_benefit_level_key')
        self.plan_benefit_level_key = attributes[:'plan_benefit_level_key']
      else
        self.plan_benefit_level_key = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      else
        self.benefit_code = nil
      end

      if attributes.key?(:'benefit_level')
        self.benefit_level = attributes[:'benefit_level']
      else
        self.benefit_level = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'exclude')
        self.exclude = attributes[:'exclude']
      else
        self.exclude = nil
      end

      if attributes.key?(:'extra_value1')
        self.extra_value1 = attributes[:'extra_value1']
      end

      if attributes.key?(:'extra_value2')
        self.extra_value2 = attributes[:'extra_value2']
      end

      if attributes.key?(:'from_value')
        self.from_value = attributes[:'from_value']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'thru_value')
        self.thru_value = attributes[:'thru_value']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'value_type')
        self.value_type = attributes[:'value_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @plan_benefit_level_key.nil?
        invalid_properties.push('invalid value for "plan_benefit_level_key", plan_benefit_level_key cannot be nil.')
      end

      if @benefit_code.nil?
        invalid_properties.push('invalid value for "benefit_code", benefit_code cannot be nil.')
      end

      if @benefit_code.to_s.length > 50
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 50.')
      end

      if @benefit_code.to_s.length < 1
        invalid_properties.push('invalid value for "benefit_code", the character length must be great than or equal to 1.')
      end

      if @benefit_level.nil?
        invalid_properties.push('invalid value for "benefit_level", benefit_level cannot be nil.')
      end

      if @benefit_level.to_s.length > 32
        invalid_properties.push('invalid value for "benefit_level", the character length must be smaller than or equal to 32.')
      end

      if @benefit_level.to_s.length < 1
        invalid_properties.push('invalid value for "benefit_level", the character length must be great than or equal to 1.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @exclude.nil?
        invalid_properties.push('invalid value for "exclude", exclude cannot be nil.')
      end

      if !@extra_value1.nil? && @extra_value1.to_s.length > 128
        invalid_properties.push('invalid value for "extra_value1", the character length must be smaller than or equal to 128.')
      end

      if !@extra_value2.nil? && @extra_value2.to_s.length > 128
        invalid_properties.push('invalid value for "extra_value2", the character length must be smaller than or equal to 128.')
      end

      if !@from_value.nil? && @from_value.to_s.length > 128
        invalid_properties.push('invalid value for "from_value", the character length must be smaller than or equal to 128.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@thru_value.nil? && @thru_value.to_s.length > 128
        invalid_properties.push('invalid value for "thru_value", the character length must be smaller than or equal to 128.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@value_type.nil? && @value_type.to_s.length > 32
        invalid_properties.push('invalid value for "value_type", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @plan_benefit_level_key.nil?
      return false if @benefit_code.nil?
      return false if @benefit_code.to_s.length > 50
      return false if @benefit_code.to_s.length < 1
      return false if @benefit_level.nil?
      return false if @benefit_level.to_s.length > 32
      return false if @benefit_level.to_s.length < 1
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @exclude.nil?
      return false if !@extra_value1.nil? && @extra_value1.to_s.length > 128
      return false if !@extra_value2.nil? && @extra_value2.to_s.length > 128
      return false if !@from_value.nil? && @from_value.to_s.length > 128
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@thru_value.nil? && @thru_value.to_s.length > 128
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@value_type.nil? && @value_type.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_benefit_level_key Value to be assigned
    def plan_benefit_level_key=(plan_benefit_level_key)
      if plan_benefit_level_key.nil?
        fail ArgumentError, 'plan_benefit_level_key cannot be nil'
      end

      @plan_benefit_level_key = plan_benefit_level_key
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if benefit_code.nil?
        fail ArgumentError, 'benefit_code cannot be nil'
      end

      if benefit_code.to_s.length > 50
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 50.'
      end

      if benefit_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be great than or equal to 1.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_level Value to be assigned
    def benefit_level=(benefit_level)
      if benefit_level.nil?
        fail ArgumentError, 'benefit_level cannot be nil'
      end

      if benefit_level.to_s.length > 32
        fail ArgumentError, 'invalid value for "benefit_level", the character length must be smaller than or equal to 32.'
      end

      if benefit_level.to_s.length < 1
        fail ArgumentError, 'invalid value for "benefit_level", the character length must be great than or equal to 1.'
      end

      @benefit_level = benefit_level
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude Value to be assigned
    def exclude=(exclude)
      if exclude.nil?
        fail ArgumentError, 'exclude cannot be nil'
      end

      @exclude = exclude
    end

    # Custom attribute writer method with validation
    # @param [Object] extra_value1 Value to be assigned
    def extra_value1=(extra_value1)
      if !extra_value1.nil? && extra_value1.to_s.length > 128
        fail ArgumentError, 'invalid value for "extra_value1", the character length must be smaller than or equal to 128.'
      end

      @extra_value1 = extra_value1
    end

    # Custom attribute writer method with validation
    # @param [Object] extra_value2 Value to be assigned
    def extra_value2=(extra_value2)
      if !extra_value2.nil? && extra_value2.to_s.length > 128
        fail ArgumentError, 'invalid value for "extra_value2", the character length must be smaller than or equal to 128.'
      end

      @extra_value2 = extra_value2
    end

    # Custom attribute writer method with validation
    # @param [Object] from_value Value to be assigned
    def from_value=(from_value)
      if !from_value.nil? && from_value.to_s.length > 128
        fail ArgumentError, 'invalid value for "from_value", the character length must be smaller than or equal to 128.'
      end

      @from_value = from_value
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] thru_value Value to be assigned
    def thru_value=(thru_value)
      if !thru_value.nil? && thru_value.to_s.length > 128
        fail ArgumentError, 'invalid value for "thru_value", the character length must be smaller than or equal to 128.'
      end

      @thru_value = thru_value
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] value_type Value to be assigned
    def value_type=(value_type)
      if !value_type.nil? && value_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "value_type", the character length must be smaller than or equal to 32.'
      end

      @value_type = value_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          plan_benefit_level_key == o.plan_benefit_level_key &&
          benefit_code == o.benefit_code &&
          benefit_level == o.benefit_level &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          exclude == o.exclude &&
          extra_value1 == o.extra_value1 &&
          extra_value2 == o.extra_value2 &&
          from_value == o.from_value &&
          plan_id == o.plan_id &&
          thru_value == o.thru_value &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          value_type == o.value_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [plan_benefit_level_key, benefit_code, benefit_level, entry_date, entry_user, exclude, extra_value1, extra_value2, from_value, plan_id, thru_value, update_date, update_user, value_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
