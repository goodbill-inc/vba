=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupContractPlan
    # References GroupContract.Group_ID value on the parent record.
    attr_accessor :group_id

    # References GroupContract.Division_ID value on the parent record.
    attr_accessor :division_id

    # References GroupContract.Coverage_Start value on the parent record. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :coverage_start

    # References Plans.Plan_ID on the parent record.
    attr_accessor :plan_id

    # Identifies the banking account associated with the selected contract.
    attr_accessor :account_key

    # When this option is selected, adjudication to mark every claim as 'Advice to Pay' (ATP). Advice to Pay claims do not produce check records when processed. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :advice_to_pay

    # No longer in use.
    attr_accessor :bpl

    # No longer in use.
    attr_accessor :billing_basis

    # Indicates if interest is to be calculated for this contract plan during check processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :calc_interest

    # For ACH payments, Indicates if interest is to be calculated for this contract plan during check processing. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :calc_interest_ach

    # For ACH payments, If interest is to be calculated, this value determines the minimum interest that can be applied. Any interst calculated below this number is ignored.
    attr_accessor :calc_interest_ach_min

    # For ACH payments, Indicates if interest is to be calculated by: N - In Network or O - Out of Network. Leave this blank if interest applies to both.
    attr_accessor :calc_interest_ach_network_option

    # For ACH payments, Flag indicating if interest should be calculated on adjustment claims. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :calc_interest_ach_on_adj

    # For ACH payments, Indicates what field will be used for interest calculation: B - Billed Amount, A - Allowed Amount or P - Paid Amount.
    attr_accessor :calc_interest_ach_option

    # For ACH payments, Indicates the interest percentage to be applied during interest calculations.
    attr_accessor :calc_interest_ach_pct

    # For ACH payments, This is the frequency of \"Calc_Interest_Prompt_Pay_Type\" for determining if interest is applicable.
    attr_accessor :calc_interest_ach_prompt_pay_freq

    # For ACH payments, This is the \"Calc_Interest_Prompt_Pay_Freq\" in number of: D - Days, M - Months or Y - Years.
    attr_accessor :calc_interest_ach_prompt_pay_type

    # If interest is to be calculated, this value determines the minimum interest that can be applied. Any interst calculated below this number is ignored.
    attr_accessor :calc_interest_min

    # Indicates if interest is to be calculated by: N - In Network or O - Out of Network. Leave this blank if interest applies to both.
    attr_accessor :calc_interest_network_option

    # Flag indicating if interest should be calculated on adjustment claims. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :calc_interest_on_adj

    # Indicates what field will be used for interest calculation: B - Billed Amount, A - Allowed Amount or P - Paid Amount.
    attr_accessor :calc_interest_option

    # Indicates the interest percentage to be applied during interest calculations.
    attr_accessor :calc_interest_pct

    # This is the frequency of \"Calc_Interest_Prompt_Pay_Type\" for determining if interest is applicable.
    attr_accessor :calc_interest_prompt_pay_freq

    # This is the \"Calc_Interest_Prompt_Pay_Freq\" in number of: D - Days, M - Months or Y - Years.
    attr_accessor :calc_interest_prompt_pay_type

    # For flex, determines the Dependent Contribution amount (or Pct if \"Dependent_Contribution_Pct\" is flagged)
    attr_accessor :dependent_contribution

    # For flex, notes if the amount entered into \"Dependent_Contribution\" is a percent or flat amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :dependent_contribution_pct

    # This is the day number of the week that disability claims created through the disability advisor will run through. This allows a disability claim with an ETD that ends in the middle of a week to be pushed through the end of that week if needed.
    attr_accessor :disability_pay_through_day

    # For flex, determines the Employee Contribution amount (or Pct if \"Employee_Contribution_Pct\" is flagged)
    attr_accessor :employee_contribution

    # For flex, notes if the amount entered into \"Employee_Contribution\" is a percent or flat amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :employee_contribution_pct

    # This is the age of the subscribers on the day based on \"End_Coverage_Age_Type\" before benefits are no longer eligible.
    attr_accessor :end_coverage_age

    # The type of age in years entered in \"End_Coverage_Age\" by type: EXACTDATE - Age Exact Date, BEGINMONTH - Age at Beginning of month, ENDMONTH - Age at End of month, BEGINYEAR - Age at the beginning of the year, or ENDYEAR - Age at the End of the year.
    attr_accessor :end_coverage_age_type

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Indicates a federal exemption as part of the selected contract. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_federal

    # indicates a medicare exemption as part of the selected contract. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_medicare

    # Indicates a social security exemption as part of the selected contract. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_soc_sec

    # Indicates a state exemption as part of the selected contract. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exempt_state

    # Limit of days for the federal tax exemption.
    attr_accessor :federal_tax_day_limit

    # Wage limit for the federal tax exemption.
    attr_accessor :federal_wage_limit

    # No longer in use.
    attr_accessor :locator

    # Limit of days for the medicare tax exemption.
    attr_accessor :medicare_tax_day_limit

    # Wage liimit for the medicare tax exemption.
    attr_accessor :medicare_wage_limit

    # For disability claims, this indicates the minimum benefit (weekly for STD plans or monthly for LTD plans).
    attr_accessor :minimum_benefit

    # Premium Billing setting that holds the premiums paid through for a selection of contracted subscribers.
    attr_accessor :paid_through

    # References PayorAccount.Payor_ID value on parent record.
    attr_accessor :payor_id

    # Notes if Disability Claims should Prorate the FICA tax based on the disability payment duration. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :prorate_fica

    # Information fields used to hold RX information on this Contract Plan for reporting and interfaces.
    attr_accessor :r_x_bin

    # Information fields used to hold RX information on this Contract Plan for reporting and interfaces.
    attr_accessor :r_x_cs_contact

    # Information fields used to hold RX information on this Contract Plan for reporting and interfaces.
    attr_accessor :r_x_cs_phone

    # Information fields used to hold RX information on this Contract Plan for reporting and interfaces.
    attr_accessor :r_x_grp

    # Information fields used to hold RX information on this Contract Plan for reporting and interfaces.
    attr_accessor :r_x_name

    # Information fields used to hold RX information on this Contract Plan for reporting and interfaces.
    attr_accessor :r_x_pcn

    # Flag to indicate if this plan on this contract is a retirement plan. This is information only. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :retirement_plan

    # If \"Use_Salary_Pct\" option is enabled, this indicatres the percent of salary.
    attr_accessor :salary_pct

    # Limit of days for the social security tax exemption.
    attr_accessor :soc_sec_tax_day_limit

    # Wage limite for Social Security tax exemption.
    attr_accessor :soc_sec_wage_limit

    # Limit of days for the state tax exemption.
    attr_accessor :state_tax_day_limit

    # Wage limit for the state tax exemption.
    attr_accessor :state_wage_limit

    # Indicates if the tax day limitations are by day or calendar months.  The database default for this field is '1'.  Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :tax_day_limit_type

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Used on the front end to indicate if the plan options should be shown to the user, has not backend functional impact. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_plan_options

    # Indicates that disability should be based upon salary percentage. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_salary_pct

    # No longer in use.
    attr_accessor :volume

    # Indicates the benefit maximum of the disabiltiy plan.
    attr_accessor :volume_max

    # Indicates the benefit minimum of the disability plan.
    attr_accessor :volume_min

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'coverage_start' => :'coverage_Start',
        :'plan_id' => :'plan_ID',
        :'account_key' => :'account_Key',
        :'advice_to_pay' => :'advice_To_Pay',
        :'bpl' => :'bpl',
        :'billing_basis' => :'billing_Basis',
        :'calc_interest' => :'calc_Interest',
        :'calc_interest_ach' => :'calc_Interest_ACH',
        :'calc_interest_ach_min' => :'calc_Interest_ACH_Min',
        :'calc_interest_ach_network_option' => :'calc_Interest_ACH_Network_Option',
        :'calc_interest_ach_on_adj' => :'calc_Interest_ACH_On_Adj',
        :'calc_interest_ach_option' => :'calc_Interest_ACH_Option',
        :'calc_interest_ach_pct' => :'calc_Interest_ACH_Pct',
        :'calc_interest_ach_prompt_pay_freq' => :'calc_Interest_ACH_Prompt_Pay_Freq',
        :'calc_interest_ach_prompt_pay_type' => :'calc_Interest_ACH_Prompt_Pay_Type',
        :'calc_interest_min' => :'calc_Interest_Min',
        :'calc_interest_network_option' => :'calc_Interest_Network_Option',
        :'calc_interest_on_adj' => :'calc_Interest_On_Adj',
        :'calc_interest_option' => :'calc_Interest_Option',
        :'calc_interest_pct' => :'calc_Interest_Pct',
        :'calc_interest_prompt_pay_freq' => :'calc_Interest_Prompt_Pay_Freq',
        :'calc_interest_prompt_pay_type' => :'calc_Interest_Prompt_Pay_Type',
        :'dependent_contribution' => :'dependent_Contribution',
        :'dependent_contribution_pct' => :'dependent_Contribution_Pct',
        :'disability_pay_through_day' => :'disability_Pay_Through_Day',
        :'employee_contribution' => :'employee_Contribution',
        :'employee_contribution_pct' => :'employee_Contribution_Pct',
        :'end_coverage_age' => :'end_Coverage_Age',
        :'end_coverage_age_type' => :'end_Coverage_Age_Type',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'exempt_federal' => :'exempt_Federal',
        :'exempt_medicare' => :'exempt_Medicare',
        :'exempt_soc_sec' => :'exempt_SocSec',
        :'exempt_state' => :'exempt_State',
        :'federal_tax_day_limit' => :'federal_Tax_Day_Limit',
        :'federal_wage_limit' => :'federal_Wage_Limit',
        :'locator' => :'locator',
        :'medicare_tax_day_limit' => :'medicare_Tax_Day_Limit',
        :'medicare_wage_limit' => :'medicare_Wage_Limit',
        :'minimum_benefit' => :'minimum_Benefit',
        :'paid_through' => :'paid_Through',
        :'payor_id' => :'payor_ID',
        :'prorate_fica' => :'prorate_FICA',
        :'r_x_bin' => :'rX_BIN',
        :'r_x_cs_contact' => :'rX_CS_Contact',
        :'r_x_cs_phone' => :'rX_CS_Phone',
        :'r_x_grp' => :'rX_GRP',
        :'r_x_name' => :'rX_Name',
        :'r_x_pcn' => :'rX_PCN',
        :'retirement_plan' => :'retirement_Plan',
        :'salary_pct' => :'salary_Pct',
        :'soc_sec_tax_day_limit' => :'socSec_Tax_Day_Limit',
        :'soc_sec_wage_limit' => :'socSec_Wage_Limit',
        :'state_tax_day_limit' => :'state_Tax_Day_Limit',
        :'state_wage_limit' => :'state_Wage_Limit',
        :'tax_day_limit_type' => :'tax_Day_Limit_Type',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_plan_options' => :'use_Plan_Options',
        :'use_salary_pct' => :'use_Salary_Pct',
        :'volume' => :'volume',
        :'volume_max' => :'volume_Max',
        :'volume_min' => :'volume_Min'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'coverage_start' => :'Time',
        :'plan_id' => :'String',
        :'account_key' => :'Integer',
        :'advice_to_pay' => :'Boolean',
        :'bpl' => :'String',
        :'billing_basis' => :'String',
        :'calc_interest' => :'Boolean',
        :'calc_interest_ach' => :'Boolean',
        :'calc_interest_ach_min' => :'Float',
        :'calc_interest_ach_network_option' => :'String',
        :'calc_interest_ach_on_adj' => :'Boolean',
        :'calc_interest_ach_option' => :'String',
        :'calc_interest_ach_pct' => :'Float',
        :'calc_interest_ach_prompt_pay_freq' => :'Integer',
        :'calc_interest_ach_prompt_pay_type' => :'String',
        :'calc_interest_min' => :'Float',
        :'calc_interest_network_option' => :'String',
        :'calc_interest_on_adj' => :'Boolean',
        :'calc_interest_option' => :'String',
        :'calc_interest_pct' => :'Float',
        :'calc_interest_prompt_pay_freq' => :'Integer',
        :'calc_interest_prompt_pay_type' => :'String',
        :'dependent_contribution' => :'Float',
        :'dependent_contribution_pct' => :'Boolean',
        :'disability_pay_through_day' => :'Integer',
        :'employee_contribution' => :'Float',
        :'employee_contribution_pct' => :'Boolean',
        :'end_coverage_age' => :'Integer',
        :'end_coverage_age_type' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'exempt_federal' => :'Boolean',
        :'exempt_medicare' => :'Boolean',
        :'exempt_soc_sec' => :'Boolean',
        :'exempt_state' => :'Boolean',
        :'federal_tax_day_limit' => :'Integer',
        :'federal_wage_limit' => :'Float',
        :'locator' => :'String',
        :'medicare_tax_day_limit' => :'Integer',
        :'medicare_wage_limit' => :'Float',
        :'minimum_benefit' => :'Float',
        :'paid_through' => :'Time',
        :'payor_id' => :'String',
        :'prorate_fica' => :'Boolean',
        :'r_x_bin' => :'String',
        :'r_x_cs_contact' => :'String',
        :'r_x_cs_phone' => :'String',
        :'r_x_grp' => :'String',
        :'r_x_name' => :'String',
        :'r_x_pcn' => :'String',
        :'retirement_plan' => :'Boolean',
        :'salary_pct' => :'Float',
        :'soc_sec_tax_day_limit' => :'Integer',
        :'soc_sec_wage_limit' => :'Float',
        :'state_tax_day_limit' => :'Integer',
        :'state_wage_limit' => :'Float',
        :'tax_day_limit_type' => :'Integer',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_plan_options' => :'Boolean',
        :'use_salary_pct' => :'Boolean',
        :'volume' => :'Float',
        :'volume_max' => :'Float',
        :'volume_min' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'account_key',
        :'bpl',
        :'billing_basis',
        :'calc_interest_ach_min',
        :'calc_interest_ach_network_option',
        :'calc_interest_ach_option',
        :'calc_interest_ach_pct',
        :'calc_interest_ach_prompt_pay_freq',
        :'calc_interest_ach_prompt_pay_type',
        :'calc_interest_min',
        :'calc_interest_network_option',
        :'calc_interest_option',
        :'calc_interest_pct',
        :'calc_interest_prompt_pay_freq',
        :'calc_interest_prompt_pay_type',
        :'dependent_contribution',
        :'disability_pay_through_day',
        :'employee_contribution',
        :'end_coverage_age',
        :'end_coverage_age_type',
        :'entry_user',
        :'federal_tax_day_limit',
        :'federal_wage_limit',
        :'locator',
        :'medicare_tax_day_limit',
        :'medicare_wage_limit',
        :'minimum_benefit',
        :'paid_through',
        :'payor_id',
        :'r_x_bin',
        :'r_x_cs_contact',
        :'r_x_cs_phone',
        :'r_x_grp',
        :'r_x_name',
        :'r_x_pcn',
        :'salary_pct',
        :'soc_sec_tax_day_limit',
        :'soc_sec_wage_limit',
        :'state_tax_day_limit',
        :'state_wage_limit',
        :'update_user',
        :'volume',
        :'volume_max',
        :'volume_min'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupContractPlan` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupContractPlan`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      else
        self.division_id = nil
      end

      if attributes.key?(:'coverage_start')
        self.coverage_start = attributes[:'coverage_start']
      else
        self.coverage_start = nil
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'advice_to_pay')
        self.advice_to_pay = attributes[:'advice_to_pay']
      else
        self.advice_to_pay = nil
      end

      if attributes.key?(:'bpl')
        self.bpl = attributes[:'bpl']
      end

      if attributes.key?(:'billing_basis')
        self.billing_basis = attributes[:'billing_basis']
      end

      if attributes.key?(:'calc_interest')
        self.calc_interest = attributes[:'calc_interest']
      else
        self.calc_interest = nil
      end

      if attributes.key?(:'calc_interest_ach')
        self.calc_interest_ach = attributes[:'calc_interest_ach']
      else
        self.calc_interest_ach = nil
      end

      if attributes.key?(:'calc_interest_ach_min')
        self.calc_interest_ach_min = attributes[:'calc_interest_ach_min']
      end

      if attributes.key?(:'calc_interest_ach_network_option')
        self.calc_interest_ach_network_option = attributes[:'calc_interest_ach_network_option']
      end

      if attributes.key?(:'calc_interest_ach_on_adj')
        self.calc_interest_ach_on_adj = attributes[:'calc_interest_ach_on_adj']
      else
        self.calc_interest_ach_on_adj = nil
      end

      if attributes.key?(:'calc_interest_ach_option')
        self.calc_interest_ach_option = attributes[:'calc_interest_ach_option']
      end

      if attributes.key?(:'calc_interest_ach_pct')
        self.calc_interest_ach_pct = attributes[:'calc_interest_ach_pct']
      end

      if attributes.key?(:'calc_interest_ach_prompt_pay_freq')
        self.calc_interest_ach_prompt_pay_freq = attributes[:'calc_interest_ach_prompt_pay_freq']
      end

      if attributes.key?(:'calc_interest_ach_prompt_pay_type')
        self.calc_interest_ach_prompt_pay_type = attributes[:'calc_interest_ach_prompt_pay_type']
      end

      if attributes.key?(:'calc_interest_min')
        self.calc_interest_min = attributes[:'calc_interest_min']
      end

      if attributes.key?(:'calc_interest_network_option')
        self.calc_interest_network_option = attributes[:'calc_interest_network_option']
      end

      if attributes.key?(:'calc_interest_on_adj')
        self.calc_interest_on_adj = attributes[:'calc_interest_on_adj']
      else
        self.calc_interest_on_adj = nil
      end

      if attributes.key?(:'calc_interest_option')
        self.calc_interest_option = attributes[:'calc_interest_option']
      end

      if attributes.key?(:'calc_interest_pct')
        self.calc_interest_pct = attributes[:'calc_interest_pct']
      end

      if attributes.key?(:'calc_interest_prompt_pay_freq')
        self.calc_interest_prompt_pay_freq = attributes[:'calc_interest_prompt_pay_freq']
      end

      if attributes.key?(:'calc_interest_prompt_pay_type')
        self.calc_interest_prompt_pay_type = attributes[:'calc_interest_prompt_pay_type']
      end

      if attributes.key?(:'dependent_contribution')
        self.dependent_contribution = attributes[:'dependent_contribution']
      end

      if attributes.key?(:'dependent_contribution_pct')
        self.dependent_contribution_pct = attributes[:'dependent_contribution_pct']
      else
        self.dependent_contribution_pct = nil
      end

      if attributes.key?(:'disability_pay_through_day')
        self.disability_pay_through_day = attributes[:'disability_pay_through_day']
      end

      if attributes.key?(:'employee_contribution')
        self.employee_contribution = attributes[:'employee_contribution']
      end

      if attributes.key?(:'employee_contribution_pct')
        self.employee_contribution_pct = attributes[:'employee_contribution_pct']
      else
        self.employee_contribution_pct = nil
      end

      if attributes.key?(:'end_coverage_age')
        self.end_coverage_age = attributes[:'end_coverage_age']
      end

      if attributes.key?(:'end_coverage_age_type')
        self.end_coverage_age_type = attributes[:'end_coverage_age_type']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'exempt_federal')
        self.exempt_federal = attributes[:'exempt_federal']
      else
        self.exempt_federal = nil
      end

      if attributes.key?(:'exempt_medicare')
        self.exempt_medicare = attributes[:'exempt_medicare']
      else
        self.exempt_medicare = nil
      end

      if attributes.key?(:'exempt_soc_sec')
        self.exempt_soc_sec = attributes[:'exempt_soc_sec']
      else
        self.exempt_soc_sec = nil
      end

      if attributes.key?(:'exempt_state')
        self.exempt_state = attributes[:'exempt_state']
      else
        self.exempt_state = nil
      end

      if attributes.key?(:'federal_tax_day_limit')
        self.federal_tax_day_limit = attributes[:'federal_tax_day_limit']
      end

      if attributes.key?(:'federal_wage_limit')
        self.federal_wage_limit = attributes[:'federal_wage_limit']
      end

      if attributes.key?(:'locator')
        self.locator = attributes[:'locator']
      end

      if attributes.key?(:'medicare_tax_day_limit')
        self.medicare_tax_day_limit = attributes[:'medicare_tax_day_limit']
      end

      if attributes.key?(:'medicare_wage_limit')
        self.medicare_wage_limit = attributes[:'medicare_wage_limit']
      end

      if attributes.key?(:'minimum_benefit')
        self.minimum_benefit = attributes[:'minimum_benefit']
      end

      if attributes.key?(:'paid_through')
        self.paid_through = attributes[:'paid_through']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'prorate_fica')
        self.prorate_fica = attributes[:'prorate_fica']
      else
        self.prorate_fica = nil
      end

      if attributes.key?(:'r_x_bin')
        self.r_x_bin = attributes[:'r_x_bin']
      end

      if attributes.key?(:'r_x_cs_contact')
        self.r_x_cs_contact = attributes[:'r_x_cs_contact']
      end

      if attributes.key?(:'r_x_cs_phone')
        self.r_x_cs_phone = attributes[:'r_x_cs_phone']
      end

      if attributes.key?(:'r_x_grp')
        self.r_x_grp = attributes[:'r_x_grp']
      end

      if attributes.key?(:'r_x_name')
        self.r_x_name = attributes[:'r_x_name']
      end

      if attributes.key?(:'r_x_pcn')
        self.r_x_pcn = attributes[:'r_x_pcn']
      end

      if attributes.key?(:'retirement_plan')
        self.retirement_plan = attributes[:'retirement_plan']
      else
        self.retirement_plan = nil
      end

      if attributes.key?(:'salary_pct')
        self.salary_pct = attributes[:'salary_pct']
      end

      if attributes.key?(:'soc_sec_tax_day_limit')
        self.soc_sec_tax_day_limit = attributes[:'soc_sec_tax_day_limit']
      end

      if attributes.key?(:'soc_sec_wage_limit')
        self.soc_sec_wage_limit = attributes[:'soc_sec_wage_limit']
      end

      if attributes.key?(:'state_tax_day_limit')
        self.state_tax_day_limit = attributes[:'state_tax_day_limit']
      end

      if attributes.key?(:'state_wage_limit')
        self.state_wage_limit = attributes[:'state_wage_limit']
      end

      if attributes.key?(:'tax_day_limit_type')
        self.tax_day_limit_type = attributes[:'tax_day_limit_type']
      else
        self.tax_day_limit_type = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_plan_options')
        self.use_plan_options = attributes[:'use_plan_options']
      else
        self.use_plan_options = nil
      end

      if attributes.key?(:'use_salary_pct')
        self.use_salary_pct = attributes[:'use_salary_pct']
      else
        self.use_salary_pct = nil
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'volume_max')
        self.volume_max = attributes[:'volume_max']
      end

      if attributes.key?(:'volume_min')
        self.volume_min = attributes[:'volume_min']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @division_id.nil?
        invalid_properties.push('invalid value for "division_id", division_id cannot be nil.')
      end

      if @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @division_id.to_s.length < 1
        invalid_properties.push('invalid value for "division_id", the character length must be great than or equal to 1.')
      end

      if @coverage_start.nil?
        invalid_properties.push('invalid value for "coverage_start", coverage_start cannot be nil.')
      end

      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if @advice_to_pay.nil?
        invalid_properties.push('invalid value for "advice_to_pay", advice_to_pay cannot be nil.')
      end

      if !@bpl.nil? && @bpl.to_s.length > 16
        invalid_properties.push('invalid value for "bpl", the character length must be smaller than or equal to 16.')
      end

      if !@billing_basis.nil? && @billing_basis.to_s.length > 1
        invalid_properties.push('invalid value for "billing_basis", the character length must be smaller than or equal to 1.')
      end

      if @calc_interest.nil?
        invalid_properties.push('invalid value for "calc_interest", calc_interest cannot be nil.')
      end

      if @calc_interest_ach.nil?
        invalid_properties.push('invalid value for "calc_interest_ach", calc_interest_ach cannot be nil.')
      end

      if !@calc_interest_ach_network_option.nil? && @calc_interest_ach_network_option.to_s.length > 16
        invalid_properties.push('invalid value for "calc_interest_ach_network_option", the character length must be smaller than or equal to 16.')
      end

      if @calc_interest_ach_on_adj.nil?
        invalid_properties.push('invalid value for "calc_interest_ach_on_adj", calc_interest_ach_on_adj cannot be nil.')
      end

      if !@calc_interest_ach_option.nil? && @calc_interest_ach_option.to_s.length > 16
        invalid_properties.push('invalid value for "calc_interest_ach_option", the character length must be smaller than or equal to 16.')
      end

      if !@calc_interest_ach_prompt_pay_type.nil? && @calc_interest_ach_prompt_pay_type.to_s.length > 1
        invalid_properties.push('invalid value for "calc_interest_ach_prompt_pay_type", the character length must be smaller than or equal to 1.')
      end

      if !@calc_interest_network_option.nil? && @calc_interest_network_option.to_s.length > 16
        invalid_properties.push('invalid value for "calc_interest_network_option", the character length must be smaller than or equal to 16.')
      end

      if @calc_interest_on_adj.nil?
        invalid_properties.push('invalid value for "calc_interest_on_adj", calc_interest_on_adj cannot be nil.')
      end

      if !@calc_interest_option.nil? && @calc_interest_option.to_s.length > 16
        invalid_properties.push('invalid value for "calc_interest_option", the character length must be smaller than or equal to 16.')
      end

      if !@calc_interest_prompt_pay_type.nil? && @calc_interest_prompt_pay_type.to_s.length > 1
        invalid_properties.push('invalid value for "calc_interest_prompt_pay_type", the character length must be smaller than or equal to 1.')
      end

      if @dependent_contribution_pct.nil?
        invalid_properties.push('invalid value for "dependent_contribution_pct", dependent_contribution_pct cannot be nil.')
      end

      if @employee_contribution_pct.nil?
        invalid_properties.push('invalid value for "employee_contribution_pct", employee_contribution_pct cannot be nil.')
      end

      if !@end_coverage_age_type.nil? && @end_coverage_age_type.to_s.length > 16
        invalid_properties.push('invalid value for "end_coverage_age_type", the character length must be smaller than or equal to 16.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @exempt_federal.nil?
        invalid_properties.push('invalid value for "exempt_federal", exempt_federal cannot be nil.')
      end

      if @exempt_medicare.nil?
        invalid_properties.push('invalid value for "exempt_medicare", exempt_medicare cannot be nil.')
      end

      if @exempt_soc_sec.nil?
        invalid_properties.push('invalid value for "exempt_soc_sec", exempt_soc_sec cannot be nil.')
      end

      if @exempt_state.nil?
        invalid_properties.push('invalid value for "exempt_state", exempt_state cannot be nil.')
      end

      if !@locator.nil? && @locator.to_s.length > 16
        invalid_properties.push('invalid value for "locator", the character length must be smaller than or equal to 16.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if @prorate_fica.nil?
        invalid_properties.push('invalid value for "prorate_fica", prorate_fica cannot be nil.')
      end

      if !@r_x_bin.nil? && @r_x_bin.to_s.length > 64
        invalid_properties.push('invalid value for "r_x_bin", the character length must be smaller than or equal to 64.')
      end

      if !@r_x_cs_contact.nil? && @r_x_cs_contact.to_s.length > 128
        invalid_properties.push('invalid value for "r_x_cs_contact", the character length must be smaller than or equal to 128.')
      end

      if !@r_x_cs_phone.nil? && @r_x_cs_phone.to_s.length > 32
        invalid_properties.push('invalid value for "r_x_cs_phone", the character length must be smaller than or equal to 32.')
      end

      if !@r_x_grp.nil? && @r_x_grp.to_s.length > 64
        invalid_properties.push('invalid value for "r_x_grp", the character length must be smaller than or equal to 64.')
      end

      if !@r_x_name.nil? && @r_x_name.to_s.length > 512
        invalid_properties.push('invalid value for "r_x_name", the character length must be smaller than or equal to 512.')
      end

      if !@r_x_pcn.nil? && @r_x_pcn.to_s.length > 64
        invalid_properties.push('invalid value for "r_x_pcn", the character length must be smaller than or equal to 64.')
      end

      if @retirement_plan.nil?
        invalid_properties.push('invalid value for "retirement_plan", retirement_plan cannot be nil.')
      end

      if @tax_day_limit_type.nil?
        invalid_properties.push('invalid value for "tax_day_limit_type", tax_day_limit_type cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_plan_options.nil?
        invalid_properties.push('invalid value for "use_plan_options", use_plan_options cannot be nil.')
      end

      if @use_salary_pct.nil?
        invalid_properties.push('invalid value for "use_salary_pct", use_salary_pct cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @division_id.nil?
      return false if @division_id.to_s.length > 20
      return false if @division_id.to_s.length < 1
      return false if @coverage_start.nil?
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if @advice_to_pay.nil?
      return false if !@bpl.nil? && @bpl.to_s.length > 16
      return false if !@billing_basis.nil? && @billing_basis.to_s.length > 1
      return false if @calc_interest.nil?
      return false if @calc_interest_ach.nil?
      return false if !@calc_interest_ach_network_option.nil? && @calc_interest_ach_network_option.to_s.length > 16
      return false if @calc_interest_ach_on_adj.nil?
      return false if !@calc_interest_ach_option.nil? && @calc_interest_ach_option.to_s.length > 16
      return false if !@calc_interest_ach_prompt_pay_type.nil? && @calc_interest_ach_prompt_pay_type.to_s.length > 1
      return false if !@calc_interest_network_option.nil? && @calc_interest_network_option.to_s.length > 16
      return false if @calc_interest_on_adj.nil?
      return false if !@calc_interest_option.nil? && @calc_interest_option.to_s.length > 16
      return false if !@calc_interest_prompt_pay_type.nil? && @calc_interest_prompt_pay_type.to_s.length > 1
      return false if @dependent_contribution_pct.nil?
      return false if @employee_contribution_pct.nil?
      return false if !@end_coverage_age_type.nil? && @end_coverage_age_type.to_s.length > 16
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @exempt_federal.nil?
      return false if @exempt_medicare.nil?
      return false if @exempt_soc_sec.nil?
      return false if @exempt_state.nil?
      return false if !@locator.nil? && @locator.to_s.length > 16
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if @prorate_fica.nil?
      return false if !@r_x_bin.nil? && @r_x_bin.to_s.length > 64
      return false if !@r_x_cs_contact.nil? && @r_x_cs_contact.to_s.length > 128
      return false if !@r_x_cs_phone.nil? && @r_x_cs_phone.to_s.length > 32
      return false if !@r_x_grp.nil? && @r_x_grp.to_s.length > 64
      return false if !@r_x_name.nil? && @r_x_name.to_s.length > 512
      return false if !@r_x_pcn.nil? && @r_x_pcn.to_s.length > 64
      return false if @retirement_plan.nil?
      return false if @tax_day_limit_type.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_plan_options.nil?
      return false if @use_salary_pct.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if division_id.nil?
        fail ArgumentError, 'division_id cannot be nil'
      end

      if division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      if division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "division_id", the character length must be great than or equal to 1.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] coverage_start Value to be assigned
    def coverage_start=(coverage_start)
      if coverage_start.nil?
        fail ArgumentError, 'coverage_start cannot be nil'
      end

      @coverage_start = coverage_start
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] advice_to_pay Value to be assigned
    def advice_to_pay=(advice_to_pay)
      if advice_to_pay.nil?
        fail ArgumentError, 'advice_to_pay cannot be nil'
      end

      @advice_to_pay = advice_to_pay
    end

    # Custom attribute writer method with validation
    # @param [Object] bpl Value to be assigned
    def bpl=(bpl)
      if !bpl.nil? && bpl.to_s.length > 16
        fail ArgumentError, 'invalid value for "bpl", the character length must be smaller than or equal to 16.'
      end

      @bpl = bpl
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_basis Value to be assigned
    def billing_basis=(billing_basis)
      if !billing_basis.nil? && billing_basis.to_s.length > 1
        fail ArgumentError, 'invalid value for "billing_basis", the character length must be smaller than or equal to 1.'
      end

      @billing_basis = billing_basis
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest Value to be assigned
    def calc_interest=(calc_interest)
      if calc_interest.nil?
        fail ArgumentError, 'calc_interest cannot be nil'
      end

      @calc_interest = calc_interest
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach Value to be assigned
    def calc_interest_ach=(calc_interest_ach)
      if calc_interest_ach.nil?
        fail ArgumentError, 'calc_interest_ach cannot be nil'
      end

      @calc_interest_ach = calc_interest_ach
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach_network_option Value to be assigned
    def calc_interest_ach_network_option=(calc_interest_ach_network_option)
      if !calc_interest_ach_network_option.nil? && calc_interest_ach_network_option.to_s.length > 16
        fail ArgumentError, 'invalid value for "calc_interest_ach_network_option", the character length must be smaller than or equal to 16.'
      end

      @calc_interest_ach_network_option = calc_interest_ach_network_option
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach_on_adj Value to be assigned
    def calc_interest_ach_on_adj=(calc_interest_ach_on_adj)
      if calc_interest_ach_on_adj.nil?
        fail ArgumentError, 'calc_interest_ach_on_adj cannot be nil'
      end

      @calc_interest_ach_on_adj = calc_interest_ach_on_adj
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach_option Value to be assigned
    def calc_interest_ach_option=(calc_interest_ach_option)
      if !calc_interest_ach_option.nil? && calc_interest_ach_option.to_s.length > 16
        fail ArgumentError, 'invalid value for "calc_interest_ach_option", the character length must be smaller than or equal to 16.'
      end

      @calc_interest_ach_option = calc_interest_ach_option
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_ach_prompt_pay_type Value to be assigned
    def calc_interest_ach_prompt_pay_type=(calc_interest_ach_prompt_pay_type)
      if !calc_interest_ach_prompt_pay_type.nil? && calc_interest_ach_prompt_pay_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "calc_interest_ach_prompt_pay_type", the character length must be smaller than or equal to 1.'
      end

      @calc_interest_ach_prompt_pay_type = calc_interest_ach_prompt_pay_type
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_network_option Value to be assigned
    def calc_interest_network_option=(calc_interest_network_option)
      if !calc_interest_network_option.nil? && calc_interest_network_option.to_s.length > 16
        fail ArgumentError, 'invalid value for "calc_interest_network_option", the character length must be smaller than or equal to 16.'
      end

      @calc_interest_network_option = calc_interest_network_option
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_on_adj Value to be assigned
    def calc_interest_on_adj=(calc_interest_on_adj)
      if calc_interest_on_adj.nil?
        fail ArgumentError, 'calc_interest_on_adj cannot be nil'
      end

      @calc_interest_on_adj = calc_interest_on_adj
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_option Value to be assigned
    def calc_interest_option=(calc_interest_option)
      if !calc_interest_option.nil? && calc_interest_option.to_s.length > 16
        fail ArgumentError, 'invalid value for "calc_interest_option", the character length must be smaller than or equal to 16.'
      end

      @calc_interest_option = calc_interest_option
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_interest_prompt_pay_type Value to be assigned
    def calc_interest_prompt_pay_type=(calc_interest_prompt_pay_type)
      if !calc_interest_prompt_pay_type.nil? && calc_interest_prompt_pay_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "calc_interest_prompt_pay_type", the character length must be smaller than or equal to 1.'
      end

      @calc_interest_prompt_pay_type = calc_interest_prompt_pay_type
    end

    # Custom attribute writer method with validation
    # @param [Object] dependent_contribution_pct Value to be assigned
    def dependent_contribution_pct=(dependent_contribution_pct)
      if dependent_contribution_pct.nil?
        fail ArgumentError, 'dependent_contribution_pct cannot be nil'
      end

      @dependent_contribution_pct = dependent_contribution_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] employee_contribution_pct Value to be assigned
    def employee_contribution_pct=(employee_contribution_pct)
      if employee_contribution_pct.nil?
        fail ArgumentError, 'employee_contribution_pct cannot be nil'
      end

      @employee_contribution_pct = employee_contribution_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] end_coverage_age_type Value to be assigned
    def end_coverage_age_type=(end_coverage_age_type)
      if !end_coverage_age_type.nil? && end_coverage_age_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "end_coverage_age_type", the character length must be smaller than or equal to 16.'
      end

      @end_coverage_age_type = end_coverage_age_type
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_federal Value to be assigned
    def exempt_federal=(exempt_federal)
      if exempt_federal.nil?
        fail ArgumentError, 'exempt_federal cannot be nil'
      end

      @exempt_federal = exempt_federal
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_medicare Value to be assigned
    def exempt_medicare=(exempt_medicare)
      if exempt_medicare.nil?
        fail ArgumentError, 'exempt_medicare cannot be nil'
      end

      @exempt_medicare = exempt_medicare
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_soc_sec Value to be assigned
    def exempt_soc_sec=(exempt_soc_sec)
      if exempt_soc_sec.nil?
        fail ArgumentError, 'exempt_soc_sec cannot be nil'
      end

      @exempt_soc_sec = exempt_soc_sec
    end

    # Custom attribute writer method with validation
    # @param [Object] exempt_state Value to be assigned
    def exempt_state=(exempt_state)
      if exempt_state.nil?
        fail ArgumentError, 'exempt_state cannot be nil'
      end

      @exempt_state = exempt_state
    end

    # Custom attribute writer method with validation
    # @param [Object] locator Value to be assigned
    def locator=(locator)
      if !locator.nil? && locator.to_s.length > 16
        fail ArgumentError, 'invalid value for "locator", the character length must be smaller than or equal to 16.'
      end

      @locator = locator
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] prorate_fica Value to be assigned
    def prorate_fica=(prorate_fica)
      if prorate_fica.nil?
        fail ArgumentError, 'prorate_fica cannot be nil'
      end

      @prorate_fica = prorate_fica
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_bin Value to be assigned
    def r_x_bin=(r_x_bin)
      if !r_x_bin.nil? && r_x_bin.to_s.length > 64
        fail ArgumentError, 'invalid value for "r_x_bin", the character length must be smaller than or equal to 64.'
      end

      @r_x_bin = r_x_bin
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_cs_contact Value to be assigned
    def r_x_cs_contact=(r_x_cs_contact)
      if !r_x_cs_contact.nil? && r_x_cs_contact.to_s.length > 128
        fail ArgumentError, 'invalid value for "r_x_cs_contact", the character length must be smaller than or equal to 128.'
      end

      @r_x_cs_contact = r_x_cs_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_cs_phone Value to be assigned
    def r_x_cs_phone=(r_x_cs_phone)
      if !r_x_cs_phone.nil? && r_x_cs_phone.to_s.length > 32
        fail ArgumentError, 'invalid value for "r_x_cs_phone", the character length must be smaller than or equal to 32.'
      end

      @r_x_cs_phone = r_x_cs_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_grp Value to be assigned
    def r_x_grp=(r_x_grp)
      if !r_x_grp.nil? && r_x_grp.to_s.length > 64
        fail ArgumentError, 'invalid value for "r_x_grp", the character length must be smaller than or equal to 64.'
      end

      @r_x_grp = r_x_grp
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_name Value to be assigned
    def r_x_name=(r_x_name)
      if !r_x_name.nil? && r_x_name.to_s.length > 512
        fail ArgumentError, 'invalid value for "r_x_name", the character length must be smaller than or equal to 512.'
      end

      @r_x_name = r_x_name
    end

    # Custom attribute writer method with validation
    # @param [Object] r_x_pcn Value to be assigned
    def r_x_pcn=(r_x_pcn)
      if !r_x_pcn.nil? && r_x_pcn.to_s.length > 64
        fail ArgumentError, 'invalid value for "r_x_pcn", the character length must be smaller than or equal to 64.'
      end

      @r_x_pcn = r_x_pcn
    end

    # Custom attribute writer method with validation
    # @param [Object] retirement_plan Value to be assigned
    def retirement_plan=(retirement_plan)
      if retirement_plan.nil?
        fail ArgumentError, 'retirement_plan cannot be nil'
      end

      @retirement_plan = retirement_plan
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_day_limit_type Value to be assigned
    def tax_day_limit_type=(tax_day_limit_type)
      if tax_day_limit_type.nil?
        fail ArgumentError, 'tax_day_limit_type cannot be nil'
      end

      @tax_day_limit_type = tax_day_limit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_plan_options Value to be assigned
    def use_plan_options=(use_plan_options)
      if use_plan_options.nil?
        fail ArgumentError, 'use_plan_options cannot be nil'
      end

      @use_plan_options = use_plan_options
    end

    # Custom attribute writer method with validation
    # @param [Object] use_salary_pct Value to be assigned
    def use_salary_pct=(use_salary_pct)
      if use_salary_pct.nil?
        fail ArgumentError, 'use_salary_pct cannot be nil'
      end

      @use_salary_pct = use_salary_pct
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          coverage_start == o.coverage_start &&
          plan_id == o.plan_id &&
          account_key == o.account_key &&
          advice_to_pay == o.advice_to_pay &&
          bpl == o.bpl &&
          billing_basis == o.billing_basis &&
          calc_interest == o.calc_interest &&
          calc_interest_ach == o.calc_interest_ach &&
          calc_interest_ach_min == o.calc_interest_ach_min &&
          calc_interest_ach_network_option == o.calc_interest_ach_network_option &&
          calc_interest_ach_on_adj == o.calc_interest_ach_on_adj &&
          calc_interest_ach_option == o.calc_interest_ach_option &&
          calc_interest_ach_pct == o.calc_interest_ach_pct &&
          calc_interest_ach_prompt_pay_freq == o.calc_interest_ach_prompt_pay_freq &&
          calc_interest_ach_prompt_pay_type == o.calc_interest_ach_prompt_pay_type &&
          calc_interest_min == o.calc_interest_min &&
          calc_interest_network_option == o.calc_interest_network_option &&
          calc_interest_on_adj == o.calc_interest_on_adj &&
          calc_interest_option == o.calc_interest_option &&
          calc_interest_pct == o.calc_interest_pct &&
          calc_interest_prompt_pay_freq == o.calc_interest_prompt_pay_freq &&
          calc_interest_prompt_pay_type == o.calc_interest_prompt_pay_type &&
          dependent_contribution == o.dependent_contribution &&
          dependent_contribution_pct == o.dependent_contribution_pct &&
          disability_pay_through_day == o.disability_pay_through_day &&
          employee_contribution == o.employee_contribution &&
          employee_contribution_pct == o.employee_contribution_pct &&
          end_coverage_age == o.end_coverage_age &&
          end_coverage_age_type == o.end_coverage_age_type &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          exempt_federal == o.exempt_federal &&
          exempt_medicare == o.exempt_medicare &&
          exempt_soc_sec == o.exempt_soc_sec &&
          exempt_state == o.exempt_state &&
          federal_tax_day_limit == o.federal_tax_day_limit &&
          federal_wage_limit == o.federal_wage_limit &&
          locator == o.locator &&
          medicare_tax_day_limit == o.medicare_tax_day_limit &&
          medicare_wage_limit == o.medicare_wage_limit &&
          minimum_benefit == o.minimum_benefit &&
          paid_through == o.paid_through &&
          payor_id == o.payor_id &&
          prorate_fica == o.prorate_fica &&
          r_x_bin == o.r_x_bin &&
          r_x_cs_contact == o.r_x_cs_contact &&
          r_x_cs_phone == o.r_x_cs_phone &&
          r_x_grp == o.r_x_grp &&
          r_x_name == o.r_x_name &&
          r_x_pcn == o.r_x_pcn &&
          retirement_plan == o.retirement_plan &&
          salary_pct == o.salary_pct &&
          soc_sec_tax_day_limit == o.soc_sec_tax_day_limit &&
          soc_sec_wage_limit == o.soc_sec_wage_limit &&
          state_tax_day_limit == o.state_tax_day_limit &&
          state_wage_limit == o.state_wage_limit &&
          tax_day_limit_type == o.tax_day_limit_type &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_plan_options == o.use_plan_options &&
          use_salary_pct == o.use_salary_pct &&
          volume == o.volume &&
          volume_max == o.volume_max &&
          volume_min == o.volume_min
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, division_id, coverage_start, plan_id, account_key, advice_to_pay, bpl, billing_basis, calc_interest, calc_interest_ach, calc_interest_ach_min, calc_interest_ach_network_option, calc_interest_ach_on_adj, calc_interest_ach_option, calc_interest_ach_pct, calc_interest_ach_prompt_pay_freq, calc_interest_ach_prompt_pay_type, calc_interest_min, calc_interest_network_option, calc_interest_on_adj, calc_interest_option, calc_interest_pct, calc_interest_prompt_pay_freq, calc_interest_prompt_pay_type, dependent_contribution, dependent_contribution_pct, disability_pay_through_day, employee_contribution, employee_contribution_pct, end_coverage_age, end_coverage_age_type, entry_date, entry_user, exempt_federal, exempt_medicare, exempt_soc_sec, exempt_state, federal_tax_day_limit, federal_wage_limit, locator, medicare_tax_day_limit, medicare_wage_limit, minimum_benefit, paid_through, payor_id, prorate_fica, r_x_bin, r_x_cs_contact, r_x_cs_phone, r_x_grp, r_x_name, r_x_pcn, retirement_plan, salary_pct, soc_sec_tax_day_limit, soc_sec_wage_limit, state_tax_day_limit, state_wage_limit, tax_day_limit_type, update_date, update_user, use_plan_options, use_salary_pct, volume, volume_max, volume_min].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
