=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupContractPlanRider
    # References GroupContractPlan.Group_ID value on the parent record.
    attr_accessor :group_id

    # References GroupContractPlan.Division_ID value on the parent record.
    attr_accessor :division_id

    # References GroupContractPlan.Coverage_Start value on the parent record. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :coverage_start

    # References GroupContractPlan.Plan_ID value on the parent record.
    attr_accessor :plan_id

    # This is the rider being offered for this plan on this contract. The rider is pulled from the list of PlanBenefits with a Rider value = 1.
    attr_accessor :benefit_code

    # For disability claims this will work with the individual volume max for each payment and set a total max for all payments. The rest are not covered.
    attr_accessor :combined_volume_max

    # For flex, determines the Employee Contribution amount (or Pct if \"Employee_Contribution_Pct\" is flagged)
    attr_accessor :employee_contribution

    # For flex, notes if the amount entered into \"Employee_Contribution\" is a percent or flat amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :employee_contribution_pct

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system.
    attr_accessor :entry_user

    # Information only, used in custom client reporting.
    attr_accessor :funding_indicator

    # This is the minimum benefit assigned to each disability payment in all benefit calculations (working with volume minimum).
    attr_accessor :minimum_benefit

    # No longer in use.
    attr_accessor :premium

    # If \"Use_Salary_Pct\" is selected, this is the percentage.
    attr_accessor :salary_pct

    # Date when the record was last updated in the system.
    attr_accessor :update_date

    # User that last updated the record in the system.
    attr_accessor :update_user

    # Indicates if a percent of salary should be used when determing this benefit amount. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_salary_pct

    # For disability enrollment, this shows the weekly (for STD) or monthly (for LTD) benefit amount.
    attr_accessor :volume

    # When using a salary based benefit, this indicates the max volume (benefit amount) for that calculation.
    attr_accessor :volume_max

    # When using a salary based benefit, this indicates the minimum volume (benefit amount) for that calculation.
    attr_accessor :volume_min

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'coverage_start' => :'coverage_Start',
        :'plan_id' => :'plan_ID',
        :'benefit_code' => :'benefit_Code',
        :'combined_volume_max' => :'combined_Volume_Max',
        :'employee_contribution' => :'employee_Contribution',
        :'employee_contribution_pct' => :'employee_Contribution_Pct',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'funding_indicator' => :'funding_Indicator',
        :'minimum_benefit' => :'minimum_Benefit',
        :'premium' => :'premium',
        :'salary_pct' => :'salary_Pct',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_salary_pct' => :'use_Salary_Pct',
        :'volume' => :'volume',
        :'volume_max' => :'volume_Max',
        :'volume_min' => :'volume_Min'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'coverage_start' => :'Time',
        :'plan_id' => :'String',
        :'benefit_code' => :'String',
        :'combined_volume_max' => :'Float',
        :'employee_contribution' => :'Float',
        :'employee_contribution_pct' => :'Boolean',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'funding_indicator' => :'String',
        :'minimum_benefit' => :'Float',
        :'premium' => :'Float',
        :'salary_pct' => :'Float',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_salary_pct' => :'Boolean',
        :'volume' => :'Float',
        :'volume_max' => :'Float',
        :'volume_min' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'combined_volume_max',
        :'employee_contribution',
        :'entry_user',
        :'funding_indicator',
        :'minimum_benefit',
        :'premium',
        :'salary_pct',
        :'update_user',
        :'volume',
        :'volume_max',
        :'volume_min'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupContractPlanRider` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupContractPlanRider`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      else
        self.division_id = nil
      end

      if attributes.key?(:'coverage_start')
        self.coverage_start = attributes[:'coverage_start']
      else
        self.coverage_start = nil
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      else
        self.benefit_code = nil
      end

      if attributes.key?(:'combined_volume_max')
        self.combined_volume_max = attributes[:'combined_volume_max']
      end

      if attributes.key?(:'employee_contribution')
        self.employee_contribution = attributes[:'employee_contribution']
      end

      if attributes.key?(:'employee_contribution_pct')
        self.employee_contribution_pct = attributes[:'employee_contribution_pct']
      else
        self.employee_contribution_pct = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'funding_indicator')
        self.funding_indicator = attributes[:'funding_indicator']
      end

      if attributes.key?(:'minimum_benefit')
        self.minimum_benefit = attributes[:'minimum_benefit']
      end

      if attributes.key?(:'premium')
        self.premium = attributes[:'premium']
      end

      if attributes.key?(:'salary_pct')
        self.salary_pct = attributes[:'salary_pct']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_salary_pct')
        self.use_salary_pct = attributes[:'use_salary_pct']
      else
        self.use_salary_pct = nil
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'volume_max')
        self.volume_max = attributes[:'volume_max']
      end

      if attributes.key?(:'volume_min')
        self.volume_min = attributes[:'volume_min']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @division_id.nil?
        invalid_properties.push('invalid value for "division_id", division_id cannot be nil.')
      end

      if @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @division_id.to_s.length < 1
        invalid_properties.push('invalid value for "division_id", the character length must be great than or equal to 1.')
      end

      if @coverage_start.nil?
        invalid_properties.push('invalid value for "coverage_start", coverage_start cannot be nil.')
      end

      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if @benefit_code.nil?
        invalid_properties.push('invalid value for "benefit_code", benefit_code cannot be nil.')
      end

      if @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if @benefit_code.to_s.length < 1
        invalid_properties.push('invalid value for "benefit_code", the character length must be great than or equal to 1.')
      end

      if @employee_contribution_pct.nil?
        invalid_properties.push('invalid value for "employee_contribution_pct", employee_contribution_pct cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@funding_indicator.nil? && @funding_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "funding_indicator", the character length must be smaller than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_salary_pct.nil?
        invalid_properties.push('invalid value for "use_salary_pct", use_salary_pct cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @division_id.nil?
      return false if @division_id.to_s.length > 20
      return false if @division_id.to_s.length < 1
      return false if @coverage_start.nil?
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if @benefit_code.nil?
      return false if @benefit_code.to_s.length > 10
      return false if @benefit_code.to_s.length < 1
      return false if @employee_contribution_pct.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@funding_indicator.nil? && @funding_indicator.to_s.length > 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_salary_pct.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if division_id.nil?
        fail ArgumentError, 'division_id cannot be nil'
      end

      if division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      if division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "division_id", the character length must be great than or equal to 1.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] coverage_start Value to be assigned
    def coverage_start=(coverage_start)
      if coverage_start.nil?
        fail ArgumentError, 'coverage_start cannot be nil'
      end

      @coverage_start = coverage_start
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if benefit_code.nil?
        fail ArgumentError, 'benefit_code cannot be nil'
      end

      if benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      if benefit_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be great than or equal to 1.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] employee_contribution_pct Value to be assigned
    def employee_contribution_pct=(employee_contribution_pct)
      if employee_contribution_pct.nil?
        fail ArgumentError, 'employee_contribution_pct cannot be nil'
      end

      @employee_contribution_pct = employee_contribution_pct
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] funding_indicator Value to be assigned
    def funding_indicator=(funding_indicator)
      if !funding_indicator.nil? && funding_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "funding_indicator", the character length must be smaller than or equal to 1.'
      end

      @funding_indicator = funding_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_salary_pct Value to be assigned
    def use_salary_pct=(use_salary_pct)
      if use_salary_pct.nil?
        fail ArgumentError, 'use_salary_pct cannot be nil'
      end

      @use_salary_pct = use_salary_pct
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          coverage_start == o.coverage_start &&
          plan_id == o.plan_id &&
          benefit_code == o.benefit_code &&
          combined_volume_max == o.combined_volume_max &&
          employee_contribution == o.employee_contribution &&
          employee_contribution_pct == o.employee_contribution_pct &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          funding_indicator == o.funding_indicator &&
          minimum_benefit == o.minimum_benefit &&
          premium == o.premium &&
          salary_pct == o.salary_pct &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_salary_pct == o.use_salary_pct &&
          volume == o.volume &&
          volume_max == o.volume_max &&
          volume_min == o.volume_min
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, division_id, coverage_start, plan_id, benefit_code, combined_volume_max, employee_contribution, employee_contribution_pct, entry_date, entry_user, funding_indicator, minimum_benefit, premium, salary_pct, update_date, update_user, use_salary_pct, volume, volume_max, volume_min].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
