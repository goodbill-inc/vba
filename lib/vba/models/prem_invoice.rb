=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class PremInvoice
    # Unique identifier for the Invoice Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :invoice_key

    # Specifies invoice level of additional invoices defined on the prem rate.
    attr_accessor :additional_invoice_level

    # Address of the group or individual the Invoice is for
    attr_accessor :bill_address

    # Second line for the Address of the group or individual the Invoice is for
    attr_accessor :bill_address2

    # City of the group or individual the Invoice is for
    attr_accessor :bill_city

    # County of the group or individual the Invoice is for.
    attr_accessor :bill_county_code

    # Name of the group or individual the Invoice is for
    attr_accessor :bill_name

    # State of the group or individual the Invoice is for
    attr_accessor :bill_state

    # Zip Code of the group or individual the Invoice is for
    attr_accessor :bill_zip_code

    # This is the Billing Cycle the invoice was gerenated for.
    attr_accessor :billing_cycle_id

    # First day of the Invoice period
    attr_accessor :billing_from

    # Last day of the Invoice period
    attr_accessor :billing_thru

    # Due Date of the Invoice
    attr_accessor :due_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Finalized invoices cannot be changed Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :finalized

    # Date the Invoice was Finalized
    attr_accessor :finalized_date

    # User that Finalized the Invoice
    attr_accessor :finalized_user

    # Date of the Invoice
    attr_accessor :invoice_date

    # Level of the Invoice: Group, Division, or Subscriber
    attr_accessor :invoice_level

    # Number assigned to this Invoice
    attr_accessor :invoice_number

    # Status of the Invoice: Open or Closed
    attr_accessor :invoice_status

    # Identifies the Invoice that this Invoice was created from
    attr_accessor :original_invoice_key

    # This number represents sequence of the payroll from the beginning of the payroll year.
    attr_accessor :pay_period

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invoice_key' => :'invoice_Key',
        :'additional_invoice_level' => :'additional_Invoice_Level',
        :'bill_address' => :'bill_Address',
        :'bill_address2' => :'bill_Address2',
        :'bill_city' => :'bill_City',
        :'bill_county_code' => :'bill_County_Code',
        :'bill_name' => :'bill_Name',
        :'bill_state' => :'bill_State',
        :'bill_zip_code' => :'bill_Zip_Code',
        :'billing_cycle_id' => :'billing_Cycle_ID',
        :'billing_from' => :'billing_From',
        :'billing_thru' => :'billing_Thru',
        :'due_date' => :'due_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'finalized' => :'finalized',
        :'finalized_date' => :'finalized_Date',
        :'finalized_user' => :'finalized_User',
        :'invoice_date' => :'invoice_Date',
        :'invoice_level' => :'invoice_Level',
        :'invoice_number' => :'invoice_Number',
        :'invoice_status' => :'invoice_Status',
        :'original_invoice_key' => :'original_Invoice_Key',
        :'pay_period' => :'pay_Period',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'invoice_key' => :'Integer',
        :'additional_invoice_level' => :'String',
        :'bill_address' => :'String',
        :'bill_address2' => :'String',
        :'bill_city' => :'String',
        :'bill_county_code' => :'String',
        :'bill_name' => :'String',
        :'bill_state' => :'String',
        :'bill_zip_code' => :'String',
        :'billing_cycle_id' => :'String',
        :'billing_from' => :'Time',
        :'billing_thru' => :'Time',
        :'due_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'finalized' => :'Boolean',
        :'finalized_date' => :'Time',
        :'finalized_user' => :'String',
        :'invoice_date' => :'Time',
        :'invoice_level' => :'String',
        :'invoice_number' => :'String',
        :'invoice_status' => :'String',
        :'original_invoice_key' => :'Integer',
        :'pay_period' => :'Integer',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'additional_invoice_level',
        :'bill_address',
        :'bill_address2',
        :'bill_city',
        :'bill_county_code',
        :'bill_name',
        :'bill_state',
        :'bill_zip_code',
        :'billing_cycle_id',
        :'billing_from',
        :'billing_thru',
        :'due_date',
        :'entry_user',
        :'finalized_date',
        :'finalized_user',
        :'invoice_date',
        :'invoice_level',
        :'invoice_number',
        :'invoice_status',
        :'original_invoice_key',
        :'pay_period',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::PremInvoice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::PremInvoice`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'invoice_key')
        self.invoice_key = attributes[:'invoice_key']
      else
        self.invoice_key = nil
      end

      if attributes.key?(:'additional_invoice_level')
        self.additional_invoice_level = attributes[:'additional_invoice_level']
      end

      if attributes.key?(:'bill_address')
        self.bill_address = attributes[:'bill_address']
      end

      if attributes.key?(:'bill_address2')
        self.bill_address2 = attributes[:'bill_address2']
      end

      if attributes.key?(:'bill_city')
        self.bill_city = attributes[:'bill_city']
      end

      if attributes.key?(:'bill_county_code')
        self.bill_county_code = attributes[:'bill_county_code']
      end

      if attributes.key?(:'bill_name')
        self.bill_name = attributes[:'bill_name']
      end

      if attributes.key?(:'bill_state')
        self.bill_state = attributes[:'bill_state']
      end

      if attributes.key?(:'bill_zip_code')
        self.bill_zip_code = attributes[:'bill_zip_code']
      end

      if attributes.key?(:'billing_cycle_id')
        self.billing_cycle_id = attributes[:'billing_cycle_id']
      end

      if attributes.key?(:'billing_from')
        self.billing_from = attributes[:'billing_from']
      end

      if attributes.key?(:'billing_thru')
        self.billing_thru = attributes[:'billing_thru']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'finalized')
        self.finalized = attributes[:'finalized']
      else
        self.finalized = nil
      end

      if attributes.key?(:'finalized_date')
        self.finalized_date = attributes[:'finalized_date']
      end

      if attributes.key?(:'finalized_user')
        self.finalized_user = attributes[:'finalized_user']
      end

      if attributes.key?(:'invoice_date')
        self.invoice_date = attributes[:'invoice_date']
      end

      if attributes.key?(:'invoice_level')
        self.invoice_level = attributes[:'invoice_level']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'invoice_status')
        self.invoice_status = attributes[:'invoice_status']
      end

      if attributes.key?(:'original_invoice_key')
        self.original_invoice_key = attributes[:'original_invoice_key']
      end

      if attributes.key?(:'pay_period')
        self.pay_period = attributes[:'pay_period']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @invoice_key.nil?
        invalid_properties.push('invalid value for "invoice_key", invoice_key cannot be nil.')
      end

      if !@additional_invoice_level.nil? && @additional_invoice_level.to_s.length > 16
        invalid_properties.push('invalid value for "additional_invoice_level", the character length must be smaller than or equal to 16.')
      end

      if !@bill_address.nil? && @bill_address.to_s.length > 128
        invalid_properties.push('invalid value for "bill_address", the character length must be smaller than or equal to 128.')
      end

      if !@bill_address2.nil? && @bill_address2.to_s.length > 128
        invalid_properties.push('invalid value for "bill_address2", the character length must be smaller than or equal to 128.')
      end

      if !@bill_city.nil? && @bill_city.to_s.length > 32
        invalid_properties.push('invalid value for "bill_city", the character length must be smaller than or equal to 32.')
      end

      if !@bill_county_code.nil? && @bill_county_code.to_s.length > 8
        invalid_properties.push('invalid value for "bill_county_code", the character length must be smaller than or equal to 8.')
      end

      if !@bill_name.nil? && @bill_name.to_s.length > 256
        invalid_properties.push('invalid value for "bill_name", the character length must be smaller than or equal to 256.')
      end

      if !@bill_state.nil? && @bill_state.to_s.length > 2
        invalid_properties.push('invalid value for "bill_state", the character length must be smaller than or equal to 2.')
      end

      if !@bill_zip_code.nil? && @bill_zip_code.to_s.length > 32
        invalid_properties.push('invalid value for "bill_zip_code", the character length must be smaller than or equal to 32.')
      end

      if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
        invalid_properties.push('invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @finalized.nil?
        invalid_properties.push('invalid value for "finalized", finalized cannot be nil.')
      end

      if !@finalized_user.nil? && @finalized_user.to_s.length > 20
        invalid_properties.push('invalid value for "finalized_user", the character length must be smaller than or equal to 20.')
      end

      if !@invoice_level.nil? && @invoice_level.to_s.length > 1
        invalid_properties.push('invalid value for "invoice_level", the character length must be smaller than or equal to 1.')
      end

      if !@invoice_number.nil? && @invoice_number.to_s.length > 32
        invalid_properties.push('invalid value for "invoice_number", the character length must be smaller than or equal to 32.')
      end

      if !@invoice_status.nil? && @invoice_status.to_s.length > 16
        invalid_properties.push('invalid value for "invoice_status", the character length must be smaller than or equal to 16.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @invoice_key.nil?
      return false if !@additional_invoice_level.nil? && @additional_invoice_level.to_s.length > 16
      return false if !@bill_address.nil? && @bill_address.to_s.length > 128
      return false if !@bill_address2.nil? && @bill_address2.to_s.length > 128
      return false if !@bill_city.nil? && @bill_city.to_s.length > 32
      return false if !@bill_county_code.nil? && @bill_county_code.to_s.length > 8
      return false if !@bill_name.nil? && @bill_name.to_s.length > 256
      return false if !@bill_state.nil? && @bill_state.to_s.length > 2
      return false if !@bill_zip_code.nil? && @bill_zip_code.to_s.length > 32
      return false if !@billing_cycle_id.nil? && @billing_cycle_id.to_s.length > 2
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @finalized.nil?
      return false if !@finalized_user.nil? && @finalized_user.to_s.length > 20
      return false if !@invoice_level.nil? && @invoice_level.to_s.length > 1
      return false if !@invoice_number.nil? && @invoice_number.to_s.length > 32
      return false if !@invoice_status.nil? && @invoice_status.to_s.length > 16
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_key Value to be assigned
    def invoice_key=(invoice_key)
      if invoice_key.nil?
        fail ArgumentError, 'invoice_key cannot be nil'
      end

      @invoice_key = invoice_key
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_invoice_level Value to be assigned
    def additional_invoice_level=(additional_invoice_level)
      if !additional_invoice_level.nil? && additional_invoice_level.to_s.length > 16
        fail ArgumentError, 'invalid value for "additional_invoice_level", the character length must be smaller than or equal to 16.'
      end

      @additional_invoice_level = additional_invoice_level
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_address Value to be assigned
    def bill_address=(bill_address)
      if !bill_address.nil? && bill_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "bill_address", the character length must be smaller than or equal to 128.'
      end

      @bill_address = bill_address
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_address2 Value to be assigned
    def bill_address2=(bill_address2)
      if !bill_address2.nil? && bill_address2.to_s.length > 128
        fail ArgumentError, 'invalid value for "bill_address2", the character length must be smaller than or equal to 128.'
      end

      @bill_address2 = bill_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_city Value to be assigned
    def bill_city=(bill_city)
      if !bill_city.nil? && bill_city.to_s.length > 32
        fail ArgumentError, 'invalid value for "bill_city", the character length must be smaller than or equal to 32.'
      end

      @bill_city = bill_city
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_county_code Value to be assigned
    def bill_county_code=(bill_county_code)
      if !bill_county_code.nil? && bill_county_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "bill_county_code", the character length must be smaller than or equal to 8.'
      end

      @bill_county_code = bill_county_code
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_name Value to be assigned
    def bill_name=(bill_name)
      if !bill_name.nil? && bill_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "bill_name", the character length must be smaller than or equal to 256.'
      end

      @bill_name = bill_name
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_state Value to be assigned
    def bill_state=(bill_state)
      if !bill_state.nil? && bill_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "bill_state", the character length must be smaller than or equal to 2.'
      end

      @bill_state = bill_state
    end

    # Custom attribute writer method with validation
    # @param [Object] bill_zip_code Value to be assigned
    def bill_zip_code=(bill_zip_code)
      if !bill_zip_code.nil? && bill_zip_code.to_s.length > 32
        fail ArgumentError, 'invalid value for "bill_zip_code", the character length must be smaller than or equal to 32.'
      end

      @bill_zip_code = bill_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_cycle_id Value to be assigned
    def billing_cycle_id=(billing_cycle_id)
      if !billing_cycle_id.nil? && billing_cycle_id.to_s.length > 2
        fail ArgumentError, 'invalid value for "billing_cycle_id", the character length must be smaller than or equal to 2.'
      end

      @billing_cycle_id = billing_cycle_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] finalized Value to be assigned
    def finalized=(finalized)
      if finalized.nil?
        fail ArgumentError, 'finalized cannot be nil'
      end

      @finalized = finalized
    end

    # Custom attribute writer method with validation
    # @param [Object] finalized_user Value to be assigned
    def finalized_user=(finalized_user)
      if !finalized_user.nil? && finalized_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "finalized_user", the character length must be smaller than or equal to 20.'
      end

      @finalized_user = finalized_user
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_level Value to be assigned
    def invoice_level=(invoice_level)
      if !invoice_level.nil? && invoice_level.to_s.length > 1
        fail ArgumentError, 'invalid value for "invoice_level", the character length must be smaller than or equal to 1.'
      end

      @invoice_level = invoice_level
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_number Value to be assigned
    def invoice_number=(invoice_number)
      if !invoice_number.nil? && invoice_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be smaller than or equal to 32.'
      end

      @invoice_number = invoice_number
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_status Value to be assigned
    def invoice_status=(invoice_status)
      if !invoice_status.nil? && invoice_status.to_s.length > 16
        fail ArgumentError, 'invalid value for "invoice_status", the character length must be smaller than or equal to 16.'
      end

      @invoice_status = invoice_status
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invoice_key == o.invoice_key &&
          additional_invoice_level == o.additional_invoice_level &&
          bill_address == o.bill_address &&
          bill_address2 == o.bill_address2 &&
          bill_city == o.bill_city &&
          bill_county_code == o.bill_county_code &&
          bill_name == o.bill_name &&
          bill_state == o.bill_state &&
          bill_zip_code == o.bill_zip_code &&
          billing_cycle_id == o.billing_cycle_id &&
          billing_from == o.billing_from &&
          billing_thru == o.billing_thru &&
          due_date == o.due_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          finalized == o.finalized &&
          finalized_date == o.finalized_date &&
          finalized_user == o.finalized_user &&
          invoice_date == o.invoice_date &&
          invoice_level == o.invoice_level &&
          invoice_number == o.invoice_number &&
          invoice_status == o.invoice_status &&
          original_invoice_key == o.original_invoice_key &&
          pay_period == o.pay_period &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [invoice_key, additional_invoice_level, bill_address, bill_address2, bill_city, bill_county_code, bill_name, bill_state, bill_zip_code, billing_cycle_id, billing_from, billing_thru, due_date, entry_date, entry_user, finalized, finalized_date, finalized_user, invoice_date, invoice_level, invoice_number, invoice_status, original_invoice_key, pay_period, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
