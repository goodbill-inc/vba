=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAPremInvoiceSubscriberDetail
    # The key of the invoice associated with this subscriber detail.
    attr_accessor :invoice_key

    # The group ID of the subscriber.
    attr_accessor :group_id

    # The division ID of the subscriber.
    attr_accessor :division_id

    # The ID of the subscriber.
    attr_accessor :subscriber_id

    # The key of the premium rate associated with this subscriber detail.
    attr_accessor :prem_rate_key

    # The premium amount.
    attr_accessor :premium

    # The total premium received.
    attr_accessor :total_premium_received

    # The payee ID.
    attr_accessor :payee_id

    # The type of rate (e.g., Member Rate).
    attr_accessor :rate_type

    # The display of the rate.
    attr_accessor :rate_display

    # The description of the rate basis.
    attr_accessor :prem_rate_basis_description

    # The category of the premium rate.
    attr_accessor :prem_rate_category

    # The volume associated with this subscriber detail.
    attr_accessor :volume

    # The distributed volume.
    attr_accessor :dist_volume

    # The date when premium was received.
    attr_accessor :premium_received_date

    # The premium received amount.
    attr_accessor :premium_received

    # The amount of payment posted.
    attr_accessor :payment_posted

    # The date when payment was posted.
    attr_accessor :payment_posted_date

    # The date of payment.
    attr_accessor :payment_date

    # The amount of payment.
    attr_accessor :payment_amount

    # The ID of the payment.
    attr_accessor :payment_id

    # The name of the payment.
    attr_accessor :payment_name

    # The date of the last update.
    attr_accessor :update_date

    # The user who made the last update.
    attr_accessor :update_user

    # The key of the premium invoice received.
    attr_accessor :prem_invoice_received_key

    # Indicates if premium is waived for this subscriber.
    attr_accessor :premium_waived

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invoice_key' => :'invoice_Key',
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'subscriber_id' => :'subscriber_ID',
        :'prem_rate_key' => :'premRate_Key',
        :'premium' => :'premium',
        :'total_premium_received' => :'total_Premium_Received',
        :'payee_id' => :'payee_ID',
        :'rate_type' => :'rate_Type',
        :'rate_display' => :'rate_Display',
        :'prem_rate_basis_description' => :'premRateBasis_Description',
        :'prem_rate_category' => :'premRate_Category',
        :'volume' => :'volume',
        :'dist_volume' => :'dist_Volume',
        :'premium_received_date' => :'premium_Received_Date',
        :'premium_received' => :'premium_Received',
        :'payment_posted' => :'payment_Posted',
        :'payment_posted_date' => :'payment_Posted_Date',
        :'payment_date' => :'payment_Date',
        :'payment_amount' => :'payment_Amount',
        :'payment_id' => :'payment_ID',
        :'payment_name' => :'payment_Name',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'prem_invoice_received_key' => :'premInvoiceReceived_Key',
        :'premium_waived' => :'premium_Waived'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'invoice_key' => :'Integer',
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'subscriber_id' => :'String',
        :'prem_rate_key' => :'Integer',
        :'premium' => :'Float',
        :'total_premium_received' => :'Float',
        :'payee_id' => :'String',
        :'rate_type' => :'String',
        :'rate_display' => :'String',
        :'prem_rate_basis_description' => :'String',
        :'prem_rate_category' => :'String',
        :'volume' => :'Float',
        :'dist_volume' => :'Float',
        :'premium_received_date' => :'Time',
        :'premium_received' => :'Float',
        :'payment_posted' => :'Float',
        :'payment_posted_date' => :'Time',
        :'payment_date' => :'Time',
        :'payment_amount' => :'Float',
        :'payment_id' => :'String',
        :'payment_name' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'prem_invoice_received_key' => :'Integer',
        :'premium_waived' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'group_id',
        :'division_id',
        :'subscriber_id',
        :'payee_id',
        :'rate_type',
        :'rate_display',
        :'prem_rate_basis_description',
        :'prem_rate_category',
        :'premium_received_date',
        :'payment_posted_date',
        :'payment_date',
        :'payment_id',
        :'payment_name',
        :'update_date',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAPremInvoiceSubscriberDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAPremInvoiceSubscriberDetail`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'invoice_key')
        self.invoice_key = attributes[:'invoice_key']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      end

      if attributes.key?(:'premium')
        self.premium = attributes[:'premium']
      end

      if attributes.key?(:'total_premium_received')
        self.total_premium_received = attributes[:'total_premium_received']
      end

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'rate_type')
        self.rate_type = attributes[:'rate_type']
      end

      if attributes.key?(:'rate_display')
        self.rate_display = attributes[:'rate_display']
      end

      if attributes.key?(:'prem_rate_basis_description')
        self.prem_rate_basis_description = attributes[:'prem_rate_basis_description']
      end

      if attributes.key?(:'prem_rate_category')
        self.prem_rate_category = attributes[:'prem_rate_category']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'dist_volume')
        self.dist_volume = attributes[:'dist_volume']
      end

      if attributes.key?(:'premium_received_date')
        self.premium_received_date = attributes[:'premium_received_date']
      end

      if attributes.key?(:'premium_received')
        self.premium_received = attributes[:'premium_received']
      end

      if attributes.key?(:'payment_posted')
        self.payment_posted = attributes[:'payment_posted']
      end

      if attributes.key?(:'payment_posted_date')
        self.payment_posted_date = attributes[:'payment_posted_date']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'payment_amount')
        self.payment_amount = attributes[:'payment_amount']
      end

      if attributes.key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.key?(:'payment_name')
        self.payment_name = attributes[:'payment_name']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'prem_invoice_received_key')
        self.prem_invoice_received_key = attributes[:'prem_invoice_received_key']
      end

      if attributes.key?(:'premium_waived')
        self.premium_waived = attributes[:'premium_waived']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invoice_key == o.invoice_key &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          subscriber_id == o.subscriber_id &&
          prem_rate_key == o.prem_rate_key &&
          premium == o.premium &&
          total_premium_received == o.total_premium_received &&
          payee_id == o.payee_id &&
          rate_type == o.rate_type &&
          rate_display == o.rate_display &&
          prem_rate_basis_description == o.prem_rate_basis_description &&
          prem_rate_category == o.prem_rate_category &&
          volume == o.volume &&
          dist_volume == o.dist_volume &&
          premium_received_date == o.premium_received_date &&
          premium_received == o.premium_received &&
          payment_posted == o.payment_posted &&
          payment_posted_date == o.payment_posted_date &&
          payment_date == o.payment_date &&
          payment_amount == o.payment_amount &&
          payment_id == o.payment_id &&
          payment_name == o.payment_name &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          prem_invoice_received_key == o.prem_invoice_received_key &&
          premium_waived == o.premium_waived
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [invoice_key, group_id, division_id, subscriber_id, prem_rate_key, premium, total_premium_received, payee_id, rate_type, rate_display, prem_rate_basis_description, prem_rate_category, volume, dist_volume, premium_received_date, premium_received, payment_posted, payment_posted_date, payment_date, payment_amount, payment_id, payment_name, update_date, update_user, prem_invoice_received_key, premium_waived].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
