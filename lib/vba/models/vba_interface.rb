=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAInterface
    # ID of the VBA interface. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :vba_interface_key

    # References the EDM (VBADataManagement) Interface value to create a hook into VBASoftware.
    attr_accessor :ed_m_client_id

    # References the EDM (VBADataManagement) Interface value to create a hook into VBASoftware.
    attr_accessor :ed_m_interface_id

    # References the EDM (VBADataManagement) Interface value to create a hook into VBASoftware.
    attr_accessor :ed_m_vendor_id

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Name for the automation job.
    attr_accessor :vba_interface_automate_job_name

    # Description of the VBA interface.
    attr_accessor :vba_interface_description

    # Indicates whether the interface is outbound, inbound, or a web service.
    attr_accessor :vba_interface_direction

    # Free text area where the interface execution details may be described.
    attr_accessor :vba_interface_execute_details

    # Free text area where any naming conventions may be described.
    attr_accessor :vba_interface_file_naming_convention

    # Name for the VBA interface.
    attr_accessor :vba_interface_name

    # Indicates the owner who is associated with the interface.
    attr_accessor :vba_interface_owner

    # Free text area where the interface schedule may be described.
    attr_accessor :vba_interface_schedule

    # Indicates the current status of the interface.
    attr_accessor :vba_interface_status

    # Indicates the type of interface being configured.
    attr_accessor :vba_interface_type

    # Indicates the vendor who is associated with the interface.
    attr_accessor :vba_interface_vendor

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vba_interface_key' => :'vbaInterface_Key',
        :'ed_m_client_id' => :'edM_Client_ID',
        :'ed_m_interface_id' => :'edM_Interface_ID',
        :'ed_m_vendor_id' => :'edM_Vendor_ID',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'vba_interface_automate_job_name' => :'vbaInterface_Automate_Job_Name',
        :'vba_interface_description' => :'vbaInterface_Description',
        :'vba_interface_direction' => :'vbaInterface_Direction',
        :'vba_interface_execute_details' => :'vbaInterface_Execute_Details',
        :'vba_interface_file_naming_convention' => :'vbaInterface_File_Naming_Convention',
        :'vba_interface_name' => :'vbaInterface_Name',
        :'vba_interface_owner' => :'vbaInterface_Owner',
        :'vba_interface_schedule' => :'vbaInterface_Schedule',
        :'vba_interface_status' => :'vbaInterface_Status',
        :'vba_interface_type' => :'vbaInterface_Type',
        :'vba_interface_vendor' => :'vbaInterface_Vendor'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'vba_interface_key' => :'Integer',
        :'ed_m_client_id' => :'String',
        :'ed_m_interface_id' => :'String',
        :'ed_m_vendor_id' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'vba_interface_automate_job_name' => :'String',
        :'vba_interface_description' => :'String',
        :'vba_interface_direction' => :'String',
        :'vba_interface_execute_details' => :'String',
        :'vba_interface_file_naming_convention' => :'String',
        :'vba_interface_name' => :'String',
        :'vba_interface_owner' => :'String',
        :'vba_interface_schedule' => :'String',
        :'vba_interface_status' => :'String',
        :'vba_interface_type' => :'String',
        :'vba_interface_vendor' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ed_m_client_id',
        :'ed_m_interface_id',
        :'ed_m_vendor_id',
        :'entry_user',
        :'update_user',
        :'vba_interface_automate_job_name',
        :'vba_interface_description',
        :'vba_interface_direction',
        :'vba_interface_execute_details',
        :'vba_interface_file_naming_convention',
        :'vba_interface_name',
        :'vba_interface_owner',
        :'vba_interface_schedule',
        :'vba_interface_status',
        :'vba_interface_type',
        :'vba_interface_vendor'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAInterface` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAInterface`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'vba_interface_key')
        self.vba_interface_key = attributes[:'vba_interface_key']
      else
        self.vba_interface_key = nil
      end

      if attributes.key?(:'ed_m_client_id')
        self.ed_m_client_id = attributes[:'ed_m_client_id']
      end

      if attributes.key?(:'ed_m_interface_id')
        self.ed_m_interface_id = attributes[:'ed_m_interface_id']
      end

      if attributes.key?(:'ed_m_vendor_id')
        self.ed_m_vendor_id = attributes[:'ed_m_vendor_id']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'vba_interface_automate_job_name')
        self.vba_interface_automate_job_name = attributes[:'vba_interface_automate_job_name']
      end

      if attributes.key?(:'vba_interface_description')
        self.vba_interface_description = attributes[:'vba_interface_description']
      end

      if attributes.key?(:'vba_interface_direction')
        self.vba_interface_direction = attributes[:'vba_interface_direction']
      end

      if attributes.key?(:'vba_interface_execute_details')
        self.vba_interface_execute_details = attributes[:'vba_interface_execute_details']
      end

      if attributes.key?(:'vba_interface_file_naming_convention')
        self.vba_interface_file_naming_convention = attributes[:'vba_interface_file_naming_convention']
      end

      if attributes.key?(:'vba_interface_name')
        self.vba_interface_name = attributes[:'vba_interface_name']
      end

      if attributes.key?(:'vba_interface_owner')
        self.vba_interface_owner = attributes[:'vba_interface_owner']
      end

      if attributes.key?(:'vba_interface_schedule')
        self.vba_interface_schedule = attributes[:'vba_interface_schedule']
      end

      if attributes.key?(:'vba_interface_status')
        self.vba_interface_status = attributes[:'vba_interface_status']
      end

      if attributes.key?(:'vba_interface_type')
        self.vba_interface_type = attributes[:'vba_interface_type']
      end

      if attributes.key?(:'vba_interface_vendor')
        self.vba_interface_vendor = attributes[:'vba_interface_vendor']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @vba_interface_key.nil?
        invalid_properties.push('invalid value for "vba_interface_key", vba_interface_key cannot be nil.')
      end

      if !@ed_m_client_id.nil? && @ed_m_client_id.to_s.length > 32
        invalid_properties.push('invalid value for "ed_m_client_id", the character length must be smaller than or equal to 32.')
      end

      if !@ed_m_interface_id.nil? && @ed_m_interface_id.to_s.length > 32
        invalid_properties.push('invalid value for "ed_m_interface_id", the character length must be smaller than or equal to 32.')
      end

      if !@ed_m_vendor_id.nil? && @ed_m_vendor_id.to_s.length > 32
        invalid_properties.push('invalid value for "ed_m_vendor_id", the character length must be smaller than or equal to 32.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if !@vba_interface_automate_job_name.nil? && @vba_interface_automate_job_name.to_s.length > 256
        invalid_properties.push('invalid value for "vba_interface_automate_job_name", the character length must be smaller than or equal to 256.')
      end

      if !@vba_interface_direction.nil? && @vba_interface_direction.to_s.length > 32
        invalid_properties.push('invalid value for "vba_interface_direction", the character length must be smaller than or equal to 32.')
      end

      if !@vba_interface_execute_details.nil? && @vba_interface_execute_details.to_s.length > 2048
        invalid_properties.push('invalid value for "vba_interface_execute_details", the character length must be smaller than or equal to 2048.')
      end

      if !@vba_interface_file_naming_convention.nil? && @vba_interface_file_naming_convention.to_s.length > 2048
        invalid_properties.push('invalid value for "vba_interface_file_naming_convention", the character length must be smaller than or equal to 2048.')
      end

      if !@vba_interface_name.nil? && @vba_interface_name.to_s.length > 256
        invalid_properties.push('invalid value for "vba_interface_name", the character length must be smaller than or equal to 256.')
      end

      if !@vba_interface_owner.nil? && @vba_interface_owner.to_s.length > 128
        invalid_properties.push('invalid value for "vba_interface_owner", the character length must be smaller than or equal to 128.')
      end

      if !@vba_interface_schedule.nil? && @vba_interface_schedule.to_s.length > 2048
        invalid_properties.push('invalid value for "vba_interface_schedule", the character length must be smaller than or equal to 2048.')
      end

      if !@vba_interface_status.nil? && @vba_interface_status.to_s.length > 32
        invalid_properties.push('invalid value for "vba_interface_status", the character length must be smaller than or equal to 32.')
      end

      if !@vba_interface_type.nil? && @vba_interface_type.to_s.length > 32
        invalid_properties.push('invalid value for "vba_interface_type", the character length must be smaller than or equal to 32.')
      end

      if !@vba_interface_vendor.nil? && @vba_interface_vendor.to_s.length > 32
        invalid_properties.push('invalid value for "vba_interface_vendor", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @vba_interface_key.nil?
      return false if !@ed_m_client_id.nil? && @ed_m_client_id.to_s.length > 32
      return false if !@ed_m_interface_id.nil? && @ed_m_interface_id.to_s.length > 32
      return false if !@ed_m_vendor_id.nil? && @ed_m_vendor_id.to_s.length > 32
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if !@vba_interface_automate_job_name.nil? && @vba_interface_automate_job_name.to_s.length > 256
      return false if !@vba_interface_direction.nil? && @vba_interface_direction.to_s.length > 32
      return false if !@vba_interface_execute_details.nil? && @vba_interface_execute_details.to_s.length > 2048
      return false if !@vba_interface_file_naming_convention.nil? && @vba_interface_file_naming_convention.to_s.length > 2048
      return false if !@vba_interface_name.nil? && @vba_interface_name.to_s.length > 256
      return false if !@vba_interface_owner.nil? && @vba_interface_owner.to_s.length > 128
      return false if !@vba_interface_schedule.nil? && @vba_interface_schedule.to_s.length > 2048
      return false if !@vba_interface_status.nil? && @vba_interface_status.to_s.length > 32
      return false if !@vba_interface_type.nil? && @vba_interface_type.to_s.length > 32
      return false if !@vba_interface_vendor.nil? && @vba_interface_vendor.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_key Value to be assigned
    def vba_interface_key=(vba_interface_key)
      if vba_interface_key.nil?
        fail ArgumentError, 'vba_interface_key cannot be nil'
      end

      @vba_interface_key = vba_interface_key
    end

    # Custom attribute writer method with validation
    # @param [Object] ed_m_client_id Value to be assigned
    def ed_m_client_id=(ed_m_client_id)
      if !ed_m_client_id.nil? && ed_m_client_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "ed_m_client_id", the character length must be smaller than or equal to 32.'
      end

      @ed_m_client_id = ed_m_client_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ed_m_interface_id Value to be assigned
    def ed_m_interface_id=(ed_m_interface_id)
      if !ed_m_interface_id.nil? && ed_m_interface_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "ed_m_interface_id", the character length must be smaller than or equal to 32.'
      end

      @ed_m_interface_id = ed_m_interface_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ed_m_vendor_id Value to be assigned
    def ed_m_vendor_id=(ed_m_vendor_id)
      if !ed_m_vendor_id.nil? && ed_m_vendor_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "ed_m_vendor_id", the character length must be smaller than or equal to 32.'
      end

      @ed_m_vendor_id = ed_m_vendor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_automate_job_name Value to be assigned
    def vba_interface_automate_job_name=(vba_interface_automate_job_name)
      if !vba_interface_automate_job_name.nil? && vba_interface_automate_job_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "vba_interface_automate_job_name", the character length must be smaller than or equal to 256.'
      end

      @vba_interface_automate_job_name = vba_interface_automate_job_name
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_direction Value to be assigned
    def vba_interface_direction=(vba_interface_direction)
      if !vba_interface_direction.nil? && vba_interface_direction.to_s.length > 32
        fail ArgumentError, 'invalid value for "vba_interface_direction", the character length must be smaller than or equal to 32.'
      end

      @vba_interface_direction = vba_interface_direction
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_execute_details Value to be assigned
    def vba_interface_execute_details=(vba_interface_execute_details)
      if !vba_interface_execute_details.nil? && vba_interface_execute_details.to_s.length > 2048
        fail ArgumentError, 'invalid value for "vba_interface_execute_details", the character length must be smaller than or equal to 2048.'
      end

      @vba_interface_execute_details = vba_interface_execute_details
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_file_naming_convention Value to be assigned
    def vba_interface_file_naming_convention=(vba_interface_file_naming_convention)
      if !vba_interface_file_naming_convention.nil? && vba_interface_file_naming_convention.to_s.length > 2048
        fail ArgumentError, 'invalid value for "vba_interface_file_naming_convention", the character length must be smaller than or equal to 2048.'
      end

      @vba_interface_file_naming_convention = vba_interface_file_naming_convention
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_name Value to be assigned
    def vba_interface_name=(vba_interface_name)
      if !vba_interface_name.nil? && vba_interface_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "vba_interface_name", the character length must be smaller than or equal to 256.'
      end

      @vba_interface_name = vba_interface_name
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_owner Value to be assigned
    def vba_interface_owner=(vba_interface_owner)
      if !vba_interface_owner.nil? && vba_interface_owner.to_s.length > 128
        fail ArgumentError, 'invalid value for "vba_interface_owner", the character length must be smaller than or equal to 128.'
      end

      @vba_interface_owner = vba_interface_owner
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_schedule Value to be assigned
    def vba_interface_schedule=(vba_interface_schedule)
      if !vba_interface_schedule.nil? && vba_interface_schedule.to_s.length > 2048
        fail ArgumentError, 'invalid value for "vba_interface_schedule", the character length must be smaller than or equal to 2048.'
      end

      @vba_interface_schedule = vba_interface_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_status Value to be assigned
    def vba_interface_status=(vba_interface_status)
      if !vba_interface_status.nil? && vba_interface_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "vba_interface_status", the character length must be smaller than or equal to 32.'
      end

      @vba_interface_status = vba_interface_status
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_type Value to be assigned
    def vba_interface_type=(vba_interface_type)
      if !vba_interface_type.nil? && vba_interface_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "vba_interface_type", the character length must be smaller than or equal to 32.'
      end

      @vba_interface_type = vba_interface_type
    end

    # Custom attribute writer method with validation
    # @param [Object] vba_interface_vendor Value to be assigned
    def vba_interface_vendor=(vba_interface_vendor)
      if !vba_interface_vendor.nil? && vba_interface_vendor.to_s.length > 32
        fail ArgumentError, 'invalid value for "vba_interface_vendor", the character length must be smaller than or equal to 32.'
      end

      @vba_interface_vendor = vba_interface_vendor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vba_interface_key == o.vba_interface_key &&
          ed_m_client_id == o.ed_m_client_id &&
          ed_m_interface_id == o.ed_m_interface_id &&
          ed_m_vendor_id == o.ed_m_vendor_id &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          vba_interface_automate_job_name == o.vba_interface_automate_job_name &&
          vba_interface_description == o.vba_interface_description &&
          vba_interface_direction == o.vba_interface_direction &&
          vba_interface_execute_details == o.vba_interface_execute_details &&
          vba_interface_file_naming_convention == o.vba_interface_file_naming_convention &&
          vba_interface_name == o.vba_interface_name &&
          vba_interface_owner == o.vba_interface_owner &&
          vba_interface_schedule == o.vba_interface_schedule &&
          vba_interface_status == o.vba_interface_status &&
          vba_interface_type == o.vba_interface_type &&
          vba_interface_vendor == o.vba_interface_vendor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [vba_interface_key, ed_m_client_id, ed_m_interface_id, ed_m_vendor_id, entry_date, entry_user, update_date, update_user, vba_interface_automate_job_name, vba_interface_description, vba_interface_direction, vba_interface_execute_details, vba_interface_file_naming_convention, vba_interface_name, vba_interface_owner, vba_interface_schedule, vba_interface_status, vba_interface_type, vba_interface_vendor].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
