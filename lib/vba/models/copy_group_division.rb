=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CopyGroupDivision
    # The owning Group
    attr_accessor :group_id

    # The division from which values will be copied.
    attr_accessor :source_division_id

    # The Destination Group ID
    attr_accessor :destination_group_id

    # Name of the new divion
    attr_accessor :destination_division_id

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_contracts

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_plans

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_riders

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_additional

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_class_options

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_commissions

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_disability_options

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_networks_tiers

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_plan_years

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_premiums

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_self_admin

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_student_age

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_volume_details

    # Flag indicating to copy this field or not. Default is false.
    attr_accessor :copy_id_codes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'groupID',
        :'source_division_id' => :'sourceDivisionID',
        :'destination_group_id' => :'destinationGroupID',
        :'destination_division_id' => :'destinationDivisionID',
        :'copy_contracts' => :'copyContracts',
        :'copy_plans' => :'copyPlans',
        :'copy_riders' => :'copyRiders',
        :'copy_additional' => :'copyAdditional',
        :'copy_class_options' => :'copyClassOptions',
        :'copy_commissions' => :'copyCommissions',
        :'copy_disability_options' => :'copyDisabilityOptions',
        :'copy_networks_tiers' => :'copyNetworksTiers',
        :'copy_plan_years' => :'copyPlanYears',
        :'copy_premiums' => :'copyPremiums',
        :'copy_self_admin' => :'copySelfAdmin',
        :'copy_student_age' => :'copyStudentAge',
        :'copy_volume_details' => :'copyVolumeDetails',
        :'copy_id_codes' => :'copyIDCodes'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'source_division_id' => :'String',
        :'destination_group_id' => :'String',
        :'destination_division_id' => :'String',
        :'copy_contracts' => :'String',
        :'copy_plans' => :'String',
        :'copy_riders' => :'String',
        :'copy_additional' => :'String',
        :'copy_class_options' => :'String',
        :'copy_commissions' => :'String',
        :'copy_disability_options' => :'String',
        :'copy_networks_tiers' => :'String',
        :'copy_plan_years' => :'String',
        :'copy_premiums' => :'String',
        :'copy_self_admin' => :'String',
        :'copy_student_age' => :'String',
        :'copy_volume_details' => :'String',
        :'copy_id_codes' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'copy_contracts',
        :'copy_plans',
        :'copy_riders',
        :'copy_additional',
        :'copy_class_options',
        :'copy_commissions',
        :'copy_disability_options',
        :'copy_networks_tiers',
        :'copy_plan_years',
        :'copy_premiums',
        :'copy_self_admin',
        :'copy_student_age',
        :'copy_volume_details',
        :'copy_id_codes'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CopyGroupDivision` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CopyGroupDivision`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'source_division_id')
        self.source_division_id = attributes[:'source_division_id']
      else
        self.source_division_id = nil
      end

      if attributes.key?(:'destination_group_id')
        self.destination_group_id = attributes[:'destination_group_id']
      else
        self.destination_group_id = nil
      end

      if attributes.key?(:'destination_division_id')
        self.destination_division_id = attributes[:'destination_division_id']
      else
        self.destination_division_id = nil
      end

      if attributes.key?(:'copy_contracts')
        self.copy_contracts = attributes[:'copy_contracts']
      end

      if attributes.key?(:'copy_plans')
        self.copy_plans = attributes[:'copy_plans']
      end

      if attributes.key?(:'copy_riders')
        self.copy_riders = attributes[:'copy_riders']
      end

      if attributes.key?(:'copy_additional')
        self.copy_additional = attributes[:'copy_additional']
      end

      if attributes.key?(:'copy_class_options')
        self.copy_class_options = attributes[:'copy_class_options']
      end

      if attributes.key?(:'copy_commissions')
        self.copy_commissions = attributes[:'copy_commissions']
      end

      if attributes.key?(:'copy_disability_options')
        self.copy_disability_options = attributes[:'copy_disability_options']
      end

      if attributes.key?(:'copy_networks_tiers')
        self.copy_networks_tiers = attributes[:'copy_networks_tiers']
      end

      if attributes.key?(:'copy_plan_years')
        self.copy_plan_years = attributes[:'copy_plan_years']
      end

      if attributes.key?(:'copy_premiums')
        self.copy_premiums = attributes[:'copy_premiums']
      end

      if attributes.key?(:'copy_self_admin')
        self.copy_self_admin = attributes[:'copy_self_admin']
      end

      if attributes.key?(:'copy_student_age')
        self.copy_student_age = attributes[:'copy_student_age']
      end

      if attributes.key?(:'copy_volume_details')
        self.copy_volume_details = attributes[:'copy_volume_details']
      end

      if attributes.key?(:'copy_id_codes')
        self.copy_id_codes = attributes[:'copy_id_codes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @source_division_id.nil?
        invalid_properties.push('invalid value for "source_division_id", source_division_id cannot be nil.')
      end

      if @source_division_id.to_s.length < 1
        invalid_properties.push('invalid value for "source_division_id", the character length must be great than or equal to 1.')
      end

      if @destination_group_id.nil?
        invalid_properties.push('invalid value for "destination_group_id", destination_group_id cannot be nil.')
      end

      if @destination_group_id.to_s.length < 1
        invalid_properties.push('invalid value for "destination_group_id", the character length must be great than or equal to 1.')
      end

      if @destination_division_id.nil?
        invalid_properties.push('invalid value for "destination_division_id", destination_division_id cannot be nil.')
      end

      if @destination_division_id.to_s.length < 1
        invalid_properties.push('invalid value for "destination_division_id", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length < 1
      return false if @source_division_id.nil?
      return false if @source_division_id.to_s.length < 1
      return false if @destination_group_id.nil?
      return false if @destination_group_id.to_s.length < 1
      return false if @destination_division_id.nil?
      return false if @destination_division_id.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] source_division_id Value to be assigned
    def source_division_id=(source_division_id)
      if source_division_id.nil?
        fail ArgumentError, 'source_division_id cannot be nil'
      end

      if source_division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "source_division_id", the character length must be great than or equal to 1.'
      end

      @source_division_id = source_division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] destination_group_id Value to be assigned
    def destination_group_id=(destination_group_id)
      if destination_group_id.nil?
        fail ArgumentError, 'destination_group_id cannot be nil'
      end

      if destination_group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "destination_group_id", the character length must be great than or equal to 1.'
      end

      @destination_group_id = destination_group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] destination_division_id Value to be assigned
    def destination_division_id=(destination_division_id)
      if destination_division_id.nil?
        fail ArgumentError, 'destination_division_id cannot be nil'
      end

      if destination_division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "destination_division_id", the character length must be great than or equal to 1.'
      end

      @destination_division_id = destination_division_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          source_division_id == o.source_division_id &&
          destination_group_id == o.destination_group_id &&
          destination_division_id == o.destination_division_id &&
          copy_contracts == o.copy_contracts &&
          copy_plans == o.copy_plans &&
          copy_riders == o.copy_riders &&
          copy_additional == o.copy_additional &&
          copy_class_options == o.copy_class_options &&
          copy_commissions == o.copy_commissions &&
          copy_disability_options == o.copy_disability_options &&
          copy_networks_tiers == o.copy_networks_tiers &&
          copy_plan_years == o.copy_plan_years &&
          copy_premiums == o.copy_premiums &&
          copy_self_admin == o.copy_self_admin &&
          copy_student_age == o.copy_student_age &&
          copy_volume_details == o.copy_volume_details &&
          copy_id_codes == o.copy_id_codes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, source_division_id, destination_group_id, destination_division_id, copy_contracts, copy_plans, copy_riders, copy_additional, copy_class_options, copy_commissions, copy_disability_options, copy_networks_tiers, copy_plan_years, copy_premiums, copy_self_admin, copy_student_age, copy_volume_details, copy_id_codes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
