=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ClaimFlex
    attr_accessor :claim_flex_key

    attr_accessor :adjudicate_action

    attr_accessor :amount

    attr_accessor :auto_created

    attr_accessor :auto_created_claim_number

    attr_accessor :auto_created_date

    attr_accessor :batch_number

    attr_accessor :calendar_year

    attr_accessor :diagnostic_code1

    attr_accessor :diagnostic_code2

    attr_accessor :diagnostic_code3

    attr_accessor :diagnostic_code4

    attr_accessor :diagnostic_code_type

    attr_accessor :effective_date

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :ex_code

    attr_accessor :flex_claim_number

    attr_accessor :flex_claim_status

    attr_accessor :group_id

    attr_accessor :member_birth_date

    attr_accessor :member_first_name

    attr_accessor :member_last_name

    attr_accessor :plan_id

    attr_accessor :provider_federal_id

    attr_accessor :provider_id

    attr_accessor :provider_name

    attr_accessor :received_date

    attr_accessor :send_check_to

    attr_accessor :service_date

    attr_accessor :service_thru

    attr_accessor :subscriber_id

    attr_accessor :update_date

    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'claim_flex_key' => :'claimFlex_Key',
        :'adjudicate_action' => :'adjudicate_Action',
        :'amount' => :'amount',
        :'auto_created' => :'auto_Created',
        :'auto_created_claim_number' => :'auto_Created_Claim_Number',
        :'auto_created_date' => :'auto_Created_Date',
        :'batch_number' => :'batch_Number',
        :'calendar_year' => :'calendar_Year',
        :'diagnostic_code1' => :'diagnostic_Code1',
        :'diagnostic_code2' => :'diagnostic_Code2',
        :'diagnostic_code3' => :'diagnostic_Code3',
        :'diagnostic_code4' => :'diagnostic_Code4',
        :'diagnostic_code_type' => :'diagnostic_Code_Type',
        :'effective_date' => :'effective_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'ex_code' => :'ex_Code',
        :'flex_claim_number' => :'flex_Claim_Number',
        :'flex_claim_status' => :'flex_Claim_Status',
        :'group_id' => :'group_ID',
        :'member_birth_date' => :'member_Birth_Date',
        :'member_first_name' => :'member_First_Name',
        :'member_last_name' => :'member_Last_Name',
        :'plan_id' => :'plan_ID',
        :'provider_federal_id' => :'provider_Federal_ID',
        :'provider_id' => :'provider_ID',
        :'provider_name' => :'provider_Name',
        :'received_date' => :'received_Date',
        :'send_check_to' => :'send_Check_To',
        :'service_date' => :'service_Date',
        :'service_thru' => :'service_Thru',
        :'subscriber_id' => :'subscriber_ID',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'claim_flex_key' => :'Integer',
        :'adjudicate_action' => :'String',
        :'amount' => :'Float',
        :'auto_created' => :'Boolean',
        :'auto_created_claim_number' => :'Integer',
        :'auto_created_date' => :'Time',
        :'batch_number' => :'Integer',
        :'calendar_year' => :'String',
        :'diagnostic_code1' => :'String',
        :'diagnostic_code2' => :'String',
        :'diagnostic_code3' => :'String',
        :'diagnostic_code4' => :'String',
        :'diagnostic_code_type' => :'String',
        :'effective_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'ex_code' => :'String',
        :'flex_claim_number' => :'String',
        :'flex_claim_status' => :'String',
        :'group_id' => :'String',
        :'member_birth_date' => :'Time',
        :'member_first_name' => :'String',
        :'member_last_name' => :'String',
        :'plan_id' => :'String',
        :'provider_federal_id' => :'String',
        :'provider_id' => :'String',
        :'provider_name' => :'String',
        :'received_date' => :'Time',
        :'send_check_to' => :'String',
        :'service_date' => :'Time',
        :'service_thru' => :'Time',
        :'subscriber_id' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'adjudicate_action',
        :'amount',
        :'auto_created_claim_number',
        :'auto_created_date',
        :'diagnostic_code1',
        :'diagnostic_code2',
        :'diagnostic_code3',
        :'diagnostic_code4',
        :'entry_user',
        :'ex_code',
        :'flex_claim_status',
        :'member_birth_date',
        :'member_first_name',
        :'member_last_name',
        :'provider_federal_id',
        :'provider_id',
        :'provider_name',
        :'received_date',
        :'send_check_to',
        :'service_date',
        :'service_thru',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ClaimFlex` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ClaimFlex`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'claim_flex_key')
        self.claim_flex_key = attributes[:'claim_flex_key']
      else
        self.claim_flex_key = nil
      end

      if attributes.key?(:'adjudicate_action')
        self.adjudicate_action = attributes[:'adjudicate_action']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'auto_created')
        self.auto_created = attributes[:'auto_created']
      else
        self.auto_created = nil
      end

      if attributes.key?(:'auto_created_claim_number')
        self.auto_created_claim_number = attributes[:'auto_created_claim_number']
      end

      if attributes.key?(:'auto_created_date')
        self.auto_created_date = attributes[:'auto_created_date']
      end

      if attributes.key?(:'batch_number')
        self.batch_number = attributes[:'batch_number']
      else
        self.batch_number = nil
      end

      if attributes.key?(:'calendar_year')
        self.calendar_year = attributes[:'calendar_year']
      else
        self.calendar_year = nil
      end

      if attributes.key?(:'diagnostic_code1')
        self.diagnostic_code1 = attributes[:'diagnostic_code1']
      end

      if attributes.key?(:'diagnostic_code2')
        self.diagnostic_code2 = attributes[:'diagnostic_code2']
      end

      if attributes.key?(:'diagnostic_code3')
        self.diagnostic_code3 = attributes[:'diagnostic_code3']
      end

      if attributes.key?(:'diagnostic_code4')
        self.diagnostic_code4 = attributes[:'diagnostic_code4']
      end

      if attributes.key?(:'diagnostic_code_type')
        self.diagnostic_code_type = attributes[:'diagnostic_code_type']
      else
        self.diagnostic_code_type = nil
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      else
        self.effective_date = nil
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'ex_code')
        self.ex_code = attributes[:'ex_code']
      end

      if attributes.key?(:'flex_claim_number')
        self.flex_claim_number = attributes[:'flex_claim_number']
      else
        self.flex_claim_number = nil
      end

      if attributes.key?(:'flex_claim_status')
        self.flex_claim_status = attributes[:'flex_claim_status']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'member_birth_date')
        self.member_birth_date = attributes[:'member_birth_date']
      end

      if attributes.key?(:'member_first_name')
        self.member_first_name = attributes[:'member_first_name']
      end

      if attributes.key?(:'member_last_name')
        self.member_last_name = attributes[:'member_last_name']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'provider_federal_id')
        self.provider_federal_id = attributes[:'provider_federal_id']
      end

      if attributes.key?(:'provider_id')
        self.provider_id = attributes[:'provider_id']
      end

      if attributes.key?(:'provider_name')
        self.provider_name = attributes[:'provider_name']
      end

      if attributes.key?(:'received_date')
        self.received_date = attributes[:'received_date']
      end

      if attributes.key?(:'send_check_to')
        self.send_check_to = attributes[:'send_check_to']
      end

      if attributes.key?(:'service_date')
        self.service_date = attributes[:'service_date']
      end

      if attributes.key?(:'service_thru')
        self.service_thru = attributes[:'service_thru']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @claim_flex_key.nil?
        invalid_properties.push('invalid value for "claim_flex_key", claim_flex_key cannot be nil.')
      end

      if !@adjudicate_action.nil? && @adjudicate_action.to_s.length > 8
        invalid_properties.push('invalid value for "adjudicate_action", the character length must be smaller than or equal to 8.')
      end

      if @auto_created.nil?
        invalid_properties.push('invalid value for "auto_created", auto_created cannot be nil.')
      end

      if @batch_number.nil?
        invalid_properties.push('invalid value for "batch_number", batch_number cannot be nil.')
      end

      if @calendar_year.nil?
        invalid_properties.push('invalid value for "calendar_year", calendar_year cannot be nil.')
      end

      if @calendar_year.to_s.length > 4
        invalid_properties.push('invalid value for "calendar_year", the character length must be smaller than or equal to 4.')
      end

      if @calendar_year.to_s.length < 1
        invalid_properties.push('invalid value for "calendar_year", the character length must be great than or equal to 1.')
      end

      if !@diagnostic_code1.nil? && @diagnostic_code1.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code1", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code2.nil? && @diagnostic_code2.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code2", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code3.nil? && @diagnostic_code3.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code3", the character length must be smaller than or equal to 8.')
      end

      if !@diagnostic_code4.nil? && @diagnostic_code4.to_s.length > 8
        invalid_properties.push('invalid value for "diagnostic_code4", the character length must be smaller than or equal to 8.')
      end

      if @diagnostic_code_type.nil?
        invalid_properties.push('invalid value for "diagnostic_code_type", diagnostic_code_type cannot be nil.')
      end

      if @diagnostic_code_type.to_s.length > 16
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.')
      end

      if @diagnostic_code_type.to_s.length < 1
        invalid_properties.push('invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.')
      end

      if @effective_date.nil?
        invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@ex_code.nil? && @ex_code.to_s.length > 6
        invalid_properties.push('invalid value for "ex_code", the character length must be smaller than or equal to 6.')
      end

      if @flex_claim_number.nil?
        invalid_properties.push('invalid value for "flex_claim_number", flex_claim_number cannot be nil.')
      end

      if @flex_claim_number.to_s.length > 64
        invalid_properties.push('invalid value for "flex_claim_number", the character length must be smaller than or equal to 64.')
      end

      if @flex_claim_number.to_s.length < 1
        invalid_properties.push('invalid value for "flex_claim_number", the character length must be great than or equal to 1.')
      end

      if !@flex_claim_status.nil? && @flex_claim_status.to_s.length > 16
        invalid_properties.push('invalid value for "flex_claim_status", the character length must be smaller than or equal to 16.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if !@member_first_name.nil? && @member_first_name.to_s.length > 32
        invalid_properties.push('invalid value for "member_first_name", the character length must be smaller than or equal to 32.')
      end

      if !@member_last_name.nil? && @member_last_name.to_s.length > 32
        invalid_properties.push('invalid value for "member_last_name", the character length must be smaller than or equal to 32.')
      end

      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if !@provider_federal_id.nil? && @provider_federal_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_federal_id", the character length must be smaller than or equal to 20.')
      end

      if !@provider_id.nil? && @provider_id.to_s.length > 20
        invalid_properties.push('invalid value for "provider_id", the character length must be smaller than or equal to 20.')
      end

      if !@provider_name.nil? && @provider_name.to_s.length > 128
        invalid_properties.push('invalid value for "provider_name", the character length must be smaller than or equal to 128.')
      end

      if !@send_check_to.nil? && @send_check_to.to_s.length > 1
        invalid_properties.push('invalid value for "send_check_to", the character length must be smaller than or equal to 1.')
      end

      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @claim_flex_key.nil?
      return false if !@adjudicate_action.nil? && @adjudicate_action.to_s.length > 8
      return false if @auto_created.nil?
      return false if @batch_number.nil?
      return false if @calendar_year.nil?
      return false if @calendar_year.to_s.length > 4
      return false if @calendar_year.to_s.length < 1
      return false if !@diagnostic_code1.nil? && @diagnostic_code1.to_s.length > 8
      return false if !@diagnostic_code2.nil? && @diagnostic_code2.to_s.length > 8
      return false if !@diagnostic_code3.nil? && @diagnostic_code3.to_s.length > 8
      return false if !@diagnostic_code4.nil? && @diagnostic_code4.to_s.length > 8
      return false if @diagnostic_code_type.nil?
      return false if @diagnostic_code_type.to_s.length > 16
      return false if @diagnostic_code_type.to_s.length < 1
      return false if @effective_date.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@ex_code.nil? && @ex_code.to_s.length > 6
      return false if @flex_claim_number.nil?
      return false if @flex_claim_number.to_s.length > 64
      return false if @flex_claim_number.to_s.length < 1
      return false if !@flex_claim_status.nil? && @flex_claim_status.to_s.length > 16
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if !@member_first_name.nil? && @member_first_name.to_s.length > 32
      return false if !@member_last_name.nil? && @member_last_name.to_s.length > 32
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if !@provider_federal_id.nil? && @provider_federal_id.to_s.length > 20
      return false if !@provider_id.nil? && @provider_id.to_s.length > 20
      return false if !@provider_name.nil? && @provider_name.to_s.length > 128
      return false if !@send_check_to.nil? && @send_check_to.to_s.length > 1
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] claim_flex_key Value to be assigned
    def claim_flex_key=(claim_flex_key)
      if claim_flex_key.nil?
        fail ArgumentError, 'claim_flex_key cannot be nil'
      end

      @claim_flex_key = claim_flex_key
    end

    # Custom attribute writer method with validation
    # @param [Object] adjudicate_action Value to be assigned
    def adjudicate_action=(adjudicate_action)
      if !adjudicate_action.nil? && adjudicate_action.to_s.length > 8
        fail ArgumentError, 'invalid value for "adjudicate_action", the character length must be smaller than or equal to 8.'
      end

      @adjudicate_action = adjudicate_action
    end

    # Custom attribute writer method with validation
    # @param [Object] auto_created Value to be assigned
    def auto_created=(auto_created)
      if auto_created.nil?
        fail ArgumentError, 'auto_created cannot be nil'
      end

      @auto_created = auto_created
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_number Value to be assigned
    def batch_number=(batch_number)
      if batch_number.nil?
        fail ArgumentError, 'batch_number cannot be nil'
      end

      @batch_number = batch_number
    end

    # Custom attribute writer method with validation
    # @param [Object] calendar_year Value to be assigned
    def calendar_year=(calendar_year)
      if calendar_year.nil?
        fail ArgumentError, 'calendar_year cannot be nil'
      end

      if calendar_year.to_s.length > 4
        fail ArgumentError, 'invalid value for "calendar_year", the character length must be smaller than or equal to 4.'
      end

      if calendar_year.to_s.length < 1
        fail ArgumentError, 'invalid value for "calendar_year", the character length must be great than or equal to 1.'
      end

      @calendar_year = calendar_year
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code1 Value to be assigned
    def diagnostic_code1=(diagnostic_code1)
      if !diagnostic_code1.nil? && diagnostic_code1.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code1", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code1 = diagnostic_code1
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code2 Value to be assigned
    def diagnostic_code2=(diagnostic_code2)
      if !diagnostic_code2.nil? && diagnostic_code2.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code2", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code2 = diagnostic_code2
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code3 Value to be assigned
    def diagnostic_code3=(diagnostic_code3)
      if !diagnostic_code3.nil? && diagnostic_code3.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code3", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code3 = diagnostic_code3
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code4 Value to be assigned
    def diagnostic_code4=(diagnostic_code4)
      if !diagnostic_code4.nil? && diagnostic_code4.to_s.length > 8
        fail ArgumentError, 'invalid value for "diagnostic_code4", the character length must be smaller than or equal to 8.'
      end

      @diagnostic_code4 = diagnostic_code4
    end

    # Custom attribute writer method with validation
    # @param [Object] diagnostic_code_type Value to be assigned
    def diagnostic_code_type=(diagnostic_code_type)
      if diagnostic_code_type.nil?
        fail ArgumentError, 'diagnostic_code_type cannot be nil'
      end

      if diagnostic_code_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be smaller than or equal to 16.'
      end

      if diagnostic_code_type.to_s.length < 1
        fail ArgumentError, 'invalid value for "diagnostic_code_type", the character length must be great than or equal to 1.'
      end

      @diagnostic_code_type = diagnostic_code_type
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      if effective_date.nil?
        fail ArgumentError, 'effective_date cannot be nil'
      end

      @effective_date = effective_date
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] ex_code Value to be assigned
    def ex_code=(ex_code)
      if !ex_code.nil? && ex_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "ex_code", the character length must be smaller than or equal to 6.'
      end

      @ex_code = ex_code
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_claim_number Value to be assigned
    def flex_claim_number=(flex_claim_number)
      if flex_claim_number.nil?
        fail ArgumentError, 'flex_claim_number cannot be nil'
      end

      if flex_claim_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "flex_claim_number", the character length must be smaller than or equal to 64.'
      end

      if flex_claim_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "flex_claim_number", the character length must be great than or equal to 1.'
      end

      @flex_claim_number = flex_claim_number
    end

    # Custom attribute writer method with validation
    # @param [Object] flex_claim_status Value to be assigned
    def flex_claim_status=(flex_claim_status)
      if !flex_claim_status.nil? && flex_claim_status.to_s.length > 16
        fail ArgumentError, 'invalid value for "flex_claim_status", the character length must be smaller than or equal to 16.'
      end

      @flex_claim_status = flex_claim_status
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] member_first_name Value to be assigned
    def member_first_name=(member_first_name)
      if !member_first_name.nil? && member_first_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "member_first_name", the character length must be smaller than or equal to 32.'
      end

      @member_first_name = member_first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] member_last_name Value to be assigned
    def member_last_name=(member_last_name)
      if !member_last_name.nil? && member_last_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "member_last_name", the character length must be smaller than or equal to 32.'
      end

      @member_last_name = member_last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_federal_id Value to be assigned
    def provider_federal_id=(provider_federal_id)
      if !provider_federal_id.nil? && provider_federal_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_federal_id", the character length must be smaller than or equal to 20.'
      end

      @provider_federal_id = provider_federal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_id Value to be assigned
    def provider_id=(provider_id)
      if !provider_id.nil? && provider_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "provider_id", the character length must be smaller than or equal to 20.'
      end

      @provider_id = provider_id
    end

    # Custom attribute writer method with validation
    # @param [Object] provider_name Value to be assigned
    def provider_name=(provider_name)
      if !provider_name.nil? && provider_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "provider_name", the character length must be smaller than or equal to 128.'
      end

      @provider_name = provider_name
    end

    # Custom attribute writer method with validation
    # @param [Object] send_check_to Value to be assigned
    def send_check_to=(send_check_to)
      if !send_check_to.nil? && send_check_to.to_s.length > 1
        fail ArgumentError, 'invalid value for "send_check_to", the character length must be smaller than or equal to 1.'
      end

      @send_check_to = send_check_to
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          claim_flex_key == o.claim_flex_key &&
          adjudicate_action == o.adjudicate_action &&
          amount == o.amount &&
          auto_created == o.auto_created &&
          auto_created_claim_number == o.auto_created_claim_number &&
          auto_created_date == o.auto_created_date &&
          batch_number == o.batch_number &&
          calendar_year == o.calendar_year &&
          diagnostic_code1 == o.diagnostic_code1 &&
          diagnostic_code2 == o.diagnostic_code2 &&
          diagnostic_code3 == o.diagnostic_code3 &&
          diagnostic_code4 == o.diagnostic_code4 &&
          diagnostic_code_type == o.diagnostic_code_type &&
          effective_date == o.effective_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          ex_code == o.ex_code &&
          flex_claim_number == o.flex_claim_number &&
          flex_claim_status == o.flex_claim_status &&
          group_id == o.group_id &&
          member_birth_date == o.member_birth_date &&
          member_first_name == o.member_first_name &&
          member_last_name == o.member_last_name &&
          plan_id == o.plan_id &&
          provider_federal_id == o.provider_federal_id &&
          provider_id == o.provider_id &&
          provider_name == o.provider_name &&
          received_date == o.received_date &&
          send_check_to == o.send_check_to &&
          service_date == o.service_date &&
          service_thru == o.service_thru &&
          subscriber_id == o.subscriber_id &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [claim_flex_key, adjudicate_action, amount, auto_created, auto_created_claim_number, auto_created_date, batch_number, calendar_year, diagnostic_code1, diagnostic_code2, diagnostic_code3, diagnostic_code4, diagnostic_code_type, effective_date, entry_date, entry_user, ex_code, flex_claim_number, flex_claim_status, group_id, member_birth_date, member_first_name, member_last_name, plan_id, provider_federal_id, provider_id, provider_name, received_date, send_check_to, service_date, service_thru, subscriber_id, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
