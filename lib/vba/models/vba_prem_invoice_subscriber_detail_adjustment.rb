=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAPremInvoiceSubscriberDetailAdjustment
    attr_accessor :invoice_adjustment_key

    attr_accessor :invoice_key

    attr_accessor :group_id

    attr_accessor :division_id

    attr_accessor :subscriber_id

    attr_accessor :prem_rate_key

    attr_accessor :adjustment_amount

    attr_accessor :total_adjustment_received

    attr_accessor :adjustment_reason

    attr_accessor :volume

    attr_accessor :entry_date

    attr_accessor :entry_user

    attr_accessor :update_date

    attr_accessor :update_user

    attr_accessor :prem_rate_category

    attr_accessor :adjustment_received_date

    attr_accessor :adjustment_received

    attr_accessor :payment_posted

    attr_accessor :payment_posted_date

    attr_accessor :payment_date

    attr_accessor :payment_amount

    attr_accessor :payment_id

    attr_accessor :payment_name

    attr_accessor :prem_invoice_adj_received_key

    attr_accessor :description

    attr_accessor :effective_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'invoice_adjustment_key' => :'invoiceAdjustment_Key',
        :'invoice_key' => :'invoice_Key',
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'subscriber_id' => :'subscriber_ID',
        :'prem_rate_key' => :'premRate_Key',
        :'adjustment_amount' => :'adjustment_Amount',
        :'total_adjustment_received' => :'total_Adjustment_Received',
        :'adjustment_reason' => :'adjustment_Reason',
        :'volume' => :'volume',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'prem_rate_category' => :'premRate_Category',
        :'adjustment_received_date' => :'adjustment_Received_Date',
        :'adjustment_received' => :'adjustment_Received',
        :'payment_posted' => :'payment_Posted',
        :'payment_posted_date' => :'payment_Posted_Date',
        :'payment_date' => :'payment_Date',
        :'payment_amount' => :'payment_Amount',
        :'payment_id' => :'payment_ID',
        :'payment_name' => :'payment_Name',
        :'prem_invoice_adj_received_key' => :'premInvoiceAdjReceived_Key',
        :'description' => :'description',
        :'effective_date' => :'effective_Date'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'invoice_adjustment_key' => :'Integer',
        :'invoice_key' => :'Integer',
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'subscriber_id' => :'String',
        :'prem_rate_key' => :'Integer',
        :'adjustment_amount' => :'Float',
        :'total_adjustment_received' => :'Float',
        :'adjustment_reason' => :'Integer',
        :'volume' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'prem_rate_category' => :'String',
        :'adjustment_received_date' => :'Time',
        :'adjustment_received' => :'Float',
        :'payment_posted' => :'Float',
        :'payment_posted_date' => :'Time',
        :'payment_date' => :'Time',
        :'payment_amount' => :'Float',
        :'payment_id' => :'String',
        :'payment_name' => :'String',
        :'prem_invoice_adj_received_key' => :'Integer',
        :'description' => :'String',
        :'effective_date' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'invoice_adjustment_key',
        :'invoice_key',
        :'group_id',
        :'division_id',
        :'subscriber_id',
        :'prem_rate_key',
        :'adjustment_amount',
        :'total_adjustment_received',
        :'adjustment_reason',
        :'volume',
        :'entry_date',
        :'entry_user',
        :'update_date',
        :'update_user',
        :'prem_rate_category',
        :'adjustment_received_date',
        :'adjustment_received',
        :'payment_posted',
        :'payment_posted_date',
        :'payment_date',
        :'payment_amount',
        :'payment_id',
        :'payment_name',
        :'prem_invoice_adj_received_key',
        :'description',
        :'effective_date'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAPremInvoiceSubscriberDetailAdjustment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAPremInvoiceSubscriberDetailAdjustment`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'invoice_adjustment_key')
        self.invoice_adjustment_key = attributes[:'invoice_adjustment_key']
      end

      if attributes.key?(:'invoice_key')
        self.invoice_key = attributes[:'invoice_key']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      end

      if attributes.key?(:'adjustment_amount')
        self.adjustment_amount = attributes[:'adjustment_amount']
      end

      if attributes.key?(:'total_adjustment_received')
        self.total_adjustment_received = attributes[:'total_adjustment_received']
      end

      if attributes.key?(:'adjustment_reason')
        self.adjustment_reason = attributes[:'adjustment_reason']
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'prem_rate_category')
        self.prem_rate_category = attributes[:'prem_rate_category']
      end

      if attributes.key?(:'adjustment_received_date')
        self.adjustment_received_date = attributes[:'adjustment_received_date']
      end

      if attributes.key?(:'adjustment_received')
        self.adjustment_received = attributes[:'adjustment_received']
      end

      if attributes.key?(:'payment_posted')
        self.payment_posted = attributes[:'payment_posted']
      end

      if attributes.key?(:'payment_posted_date')
        self.payment_posted_date = attributes[:'payment_posted_date']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'payment_amount')
        self.payment_amount = attributes[:'payment_amount']
      end

      if attributes.key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.key?(:'payment_name')
        self.payment_name = attributes[:'payment_name']
      end

      if attributes.key?(:'prem_invoice_adj_received_key')
        self.prem_invoice_adj_received_key = attributes[:'prem_invoice_adj_received_key']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          invoice_adjustment_key == o.invoice_adjustment_key &&
          invoice_key == o.invoice_key &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          subscriber_id == o.subscriber_id &&
          prem_rate_key == o.prem_rate_key &&
          adjustment_amount == o.adjustment_amount &&
          total_adjustment_received == o.total_adjustment_received &&
          adjustment_reason == o.adjustment_reason &&
          volume == o.volume &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          prem_rate_category == o.prem_rate_category &&
          adjustment_received_date == o.adjustment_received_date &&
          adjustment_received == o.adjustment_received &&
          payment_posted == o.payment_posted &&
          payment_posted_date == o.payment_posted_date &&
          payment_date == o.payment_date &&
          payment_amount == o.payment_amount &&
          payment_id == o.payment_id &&
          payment_name == o.payment_name &&
          prem_invoice_adj_received_key == o.prem_invoice_adj_received_key &&
          description == o.description &&
          effective_date == o.effective_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [invoice_adjustment_key, invoice_key, group_id, division_id, subscriber_id, prem_rate_key, adjustment_amount, total_adjustment_received, adjustment_reason, volume, entry_date, entry_user, update_date, update_user, prem_rate_category, adjustment_received_date, adjustment_received, payment_posted, payment_posted_date, payment_date, payment_amount, payment_id, payment_name, prem_invoice_adj_received_key, description, effective_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
