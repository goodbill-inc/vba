=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class SubEnrollmentPlan
    # References the Subenrollment.Subscriber_ID value in the parent table.
    attr_accessor :subscriber_id

    # References the Subenrollment.Group_ID value in the parent table.
    attr_accessor :group_id

    # References the Subenrollment.Division_ID value in the parent table.
    attr_accessor :division_id

    # References the Subenrollment.Group_Coverage_Start value in the parent table. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_coverage_start

    # References the Subenrollment.Start_Date value in the parent table. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :start_date

    # References the GroupContractPlan.Plan_ID value indicating which Plan this member is enrolling that is being offered.
    attr_accessor :plan_id

    # Start date of Plan coverage. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :plan_start

    # Holds the date for the subscriber's application to disclose pre-existing conditions.
    attr_accessor :application_received_date

    # The Subscriber's 'Volume' within the selected plan on the enrollment. This will impact invoicing.
    attr_accessor :dollar_amount

    # Date when the record was first added to the system.
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Member elected Daily Benefit Amount
    attr_accessor :lt_c_daily_benefit_amount

    # Lifetime Max Amount elected
    attr_accessor :lt_c_lifetime_max_amount

    # Lifetime Max Days elected
    attr_accessor :lt_c_lifetime_max_days

    # Lifetime Max Years elected
    attr_accessor :lt_c_lifetime_max_years

    # Member elected Monthly Benefit Amount
    attr_accessor :lt_c_monthly_benefit_amount

    # Date that the premiums have been paid through for this plan. The 'Paid Thru Exceeded' Ex Code will be applied to Claims adjudicated with a service date beyond this date.
    attr_accessor :paid_through

    # End date of Plan coverage.
    attr_accessor :plan_end

    # This identifier the reason the plan was termed.
    attr_accessor :reason_id

    # The Subscriber's 'Tier' within the selected plan on the enrollment. This will impact adjudication and invoicing.
    attr_accessor :tier

    # Date when the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # This option tells the system to calculate the 'Volume' using the Group volume rules. Checking this box will display an elipsis that when clicked will explain the volume calculation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_volume_scale

    # Unique identifier for the CommissionAgencyRep table
    attr_accessor :writing_commission_agency_rep_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriber_id' => :'subscriber_ID',
        :'group_id' => :'group_ID',
        :'division_id' => :'division_ID',
        :'group_coverage_start' => :'group_Coverage_Start',
        :'start_date' => :'start_Date',
        :'plan_id' => :'plan_ID',
        :'plan_start' => :'plan_Start',
        :'application_received_date' => :'application_Received_Date',
        :'dollar_amount' => :'dollar_Amount',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'lt_c_daily_benefit_amount' => :'ltC_Daily_Benefit_Amount',
        :'lt_c_lifetime_max_amount' => :'ltC_Lifetime_Max_Amount',
        :'lt_c_lifetime_max_days' => :'ltC_Lifetime_Max_Days',
        :'lt_c_lifetime_max_years' => :'ltC_Lifetime_Max_Years',
        :'lt_c_monthly_benefit_amount' => :'ltC_Monthly_Benefit_Amount',
        :'paid_through' => :'paid_Through',
        :'plan_end' => :'plan_End',
        :'reason_id' => :'reason_ID',
        :'tier' => :'tier',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_volume_scale' => :'use_Volume_Scale',
        :'writing_commission_agency_rep_key' => :'writing_CommissionAgencyRep_Key'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriber_id' => :'String',
        :'group_id' => :'String',
        :'division_id' => :'String',
        :'group_coverage_start' => :'Time',
        :'start_date' => :'Time',
        :'plan_id' => :'String',
        :'plan_start' => :'Time',
        :'application_received_date' => :'Time',
        :'dollar_amount' => :'Float',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'lt_c_daily_benefit_amount' => :'Float',
        :'lt_c_lifetime_max_amount' => :'Float',
        :'lt_c_lifetime_max_days' => :'Integer',
        :'lt_c_lifetime_max_years' => :'Integer',
        :'lt_c_monthly_benefit_amount' => :'Float',
        :'paid_through' => :'Time',
        :'plan_end' => :'Time',
        :'reason_id' => :'Integer',
        :'tier' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_volume_scale' => :'Boolean',
        :'writing_commission_agency_rep_key' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'application_received_date',
        :'dollar_amount',
        :'entry_user',
        :'lt_c_daily_benefit_amount',
        :'lt_c_lifetime_max_amount',
        :'lt_c_lifetime_max_days',
        :'lt_c_lifetime_max_years',
        :'lt_c_monthly_benefit_amount',
        :'paid_through',
        :'plan_end',
        :'reason_id',
        :'tier',
        :'update_user',
        :'writing_commission_agency_rep_key'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::SubEnrollmentPlan` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::SubEnrollmentPlan`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      else
        self.subscriber_id = nil
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      else
        self.division_id = nil
      end

      if attributes.key?(:'group_coverage_start')
        self.group_coverage_start = attributes[:'group_coverage_start']
      else
        self.group_coverage_start = nil
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      else
        self.start_date = nil
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      else
        self.plan_id = nil
      end

      if attributes.key?(:'plan_start')
        self.plan_start = attributes[:'plan_start']
      else
        self.plan_start = nil
      end

      if attributes.key?(:'application_received_date')
        self.application_received_date = attributes[:'application_received_date']
      end

      if attributes.key?(:'dollar_amount')
        self.dollar_amount = attributes[:'dollar_amount']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'lt_c_daily_benefit_amount')
        self.lt_c_daily_benefit_amount = attributes[:'lt_c_daily_benefit_amount']
      end

      if attributes.key?(:'lt_c_lifetime_max_amount')
        self.lt_c_lifetime_max_amount = attributes[:'lt_c_lifetime_max_amount']
      end

      if attributes.key?(:'lt_c_lifetime_max_days')
        self.lt_c_lifetime_max_days = attributes[:'lt_c_lifetime_max_days']
      end

      if attributes.key?(:'lt_c_lifetime_max_years')
        self.lt_c_lifetime_max_years = attributes[:'lt_c_lifetime_max_years']
      end

      if attributes.key?(:'lt_c_monthly_benefit_amount')
        self.lt_c_monthly_benefit_amount = attributes[:'lt_c_monthly_benefit_amount']
      end

      if attributes.key?(:'paid_through')
        self.paid_through = attributes[:'paid_through']
      end

      if attributes.key?(:'plan_end')
        self.plan_end = attributes[:'plan_end']
      end

      if attributes.key?(:'reason_id')
        self.reason_id = attributes[:'reason_id']
      end

      if attributes.key?(:'tier')
        self.tier = attributes[:'tier']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_volume_scale')
        self.use_volume_scale = attributes[:'use_volume_scale']
      else
        self.use_volume_scale = nil
      end

      if attributes.key?(:'writing_commission_agency_rep_key')
        self.writing_commission_agency_rep_key = attributes[:'writing_commission_agency_rep_key']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscriber_id.nil?
        invalid_properties.push('invalid value for "subscriber_id", subscriber_id cannot be nil.')
      end

      if @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if @subscriber_id.to_s.length < 1
        invalid_properties.push('invalid value for "subscriber_id", the character length must be great than or equal to 1.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @division_id.nil?
        invalid_properties.push('invalid value for "division_id", division_id cannot be nil.')
      end

      if @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if @division_id.to_s.length < 1
        invalid_properties.push('invalid value for "division_id", the character length must be great than or equal to 1.')
      end

      if @group_coverage_start.nil?
        invalid_properties.push('invalid value for "group_coverage_start", group_coverage_start cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @plan_id.nil?
        invalid_properties.push('invalid value for "plan_id", plan_id cannot be nil.')
      end

      if @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if @plan_id.to_s.length < 1
        invalid_properties.push('invalid value for "plan_id", the character length must be great than or equal to 1.')
      end

      if @plan_start.nil?
        invalid_properties.push('invalid value for "plan_start", plan_start cannot be nil.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@tier.nil? && @tier.to_s.length > 2
        invalid_properties.push('invalid value for "tier", the character length must be smaller than or equal to 2.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_volume_scale.nil?
        invalid_properties.push('invalid value for "use_volume_scale", use_volume_scale cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscriber_id.nil?
      return false if @subscriber_id.to_s.length > 9
      return false if @subscriber_id.to_s.length < 1
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @division_id.nil?
      return false if @division_id.to_s.length > 20
      return false if @division_id.to_s.length < 1
      return false if @group_coverage_start.nil?
      return false if @start_date.nil?
      return false if @plan_id.nil?
      return false if @plan_id.to_s.length > 20
      return false if @plan_id.to_s.length < 1
      return false if @plan_start.nil?
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@tier.nil? && @tier.to_s.length > 2
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_volume_scale.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if subscriber_id.nil?
        fail ArgumentError, 'subscriber_id cannot be nil'
      end

      if subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      if subscriber_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be great than or equal to 1.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if division_id.nil?
        fail ArgumentError, 'division_id cannot be nil'
      end

      if division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      if division_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "division_id", the character length must be great than or equal to 1.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] group_coverage_start Value to be assigned
    def group_coverage_start=(group_coverage_start)
      if group_coverage_start.nil?
        fail ArgumentError, 'group_coverage_start cannot be nil'
      end

      @group_coverage_start = group_coverage_start
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      if start_date.nil?
        fail ArgumentError, 'start_date cannot be nil'
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if plan_id.nil?
        fail ArgumentError, 'plan_id cannot be nil'
      end

      if plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      if plan_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "plan_id", the character length must be great than or equal to 1.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_start Value to be assigned
    def plan_start=(plan_start)
      if plan_start.nil?
        fail ArgumentError, 'plan_start cannot be nil'
      end

      @plan_start = plan_start
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] tier Value to be assigned
    def tier=(tier)
      if !tier.nil? && tier.to_s.length > 2
        fail ArgumentError, 'invalid value for "tier", the character length must be smaller than or equal to 2.'
      end

      @tier = tier
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_volume_scale Value to be assigned
    def use_volume_scale=(use_volume_scale)
      if use_volume_scale.nil?
        fail ArgumentError, 'use_volume_scale cannot be nil'
      end

      @use_volume_scale = use_volume_scale
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriber_id == o.subscriber_id &&
          group_id == o.group_id &&
          division_id == o.division_id &&
          group_coverage_start == o.group_coverage_start &&
          start_date == o.start_date &&
          plan_id == o.plan_id &&
          plan_start == o.plan_start &&
          application_received_date == o.application_received_date &&
          dollar_amount == o.dollar_amount &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          lt_c_daily_benefit_amount == o.lt_c_daily_benefit_amount &&
          lt_c_lifetime_max_amount == o.lt_c_lifetime_max_amount &&
          lt_c_lifetime_max_days == o.lt_c_lifetime_max_days &&
          lt_c_lifetime_max_years == o.lt_c_lifetime_max_years &&
          lt_c_monthly_benefit_amount == o.lt_c_monthly_benefit_amount &&
          paid_through == o.paid_through &&
          plan_end == o.plan_end &&
          reason_id == o.reason_id &&
          tier == o.tier &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_volume_scale == o.use_volume_scale &&
          writing_commission_agency_rep_key == o.writing_commission_agency_rep_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriber_id, group_id, division_id, group_coverage_start, start_date, plan_id, plan_start, application_received_date, dollar_amount, entry_date, entry_user, lt_c_daily_benefit_amount, lt_c_lifetime_max_amount, lt_c_lifetime_max_days, lt_c_lifetime_max_years, lt_c_monthly_benefit_amount, paid_through, plan_end, reason_id, tier, update_date, update_user, use_volume_scale, writing_commission_agency_rep_key].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
