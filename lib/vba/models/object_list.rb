=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ObjectList
    # Name of the object or window used by the application code
    attr_accessor :object_name

    # Computed column used for Advanced Search with the object or window
    attr_accessor :advanced_search_calculated_column

    # Table used for Advanced Search with the object or window
    attr_accessor :advanced_search_table

    # Type of Advanced Search used with the object or window
    attr_accessor :advanced_search_type

    # Description of the object or window in the application
    attr_accessor :description

    # Identifier of the functional area in the application where the object or window is found
    attr_accessor :functional_area

    # Help file that is associated with the object or window
    attr_accessor :help_file

    # ID of the help topic within the file
    attr_accessor :help_topic_id

    # Library in the application where the object or window is stored
    attr_accessor :object_library

    # Title of the object or window displayed in the application
    attr_accessor :object_title

    # Identifier of the object or windows purpose
    attr_accessor :purpose

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'object_name' => :'object_Name',
        :'advanced_search_calculated_column' => :'advanced_Search_Calculated_Column',
        :'advanced_search_table' => :'advanced_Search_Table',
        :'advanced_search_type' => :'advanced_Search_Type',
        :'description' => :'description',
        :'functional_area' => :'functional_Area',
        :'help_file' => :'help_File',
        :'help_topic_id' => :'help_Topic_ID',
        :'object_library' => :'object_Library',
        :'object_title' => :'object_Title',
        :'purpose' => :'purpose'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'object_name' => :'String',
        :'advanced_search_calculated_column' => :'String',
        :'advanced_search_table' => :'String',
        :'advanced_search_type' => :'String',
        :'description' => :'String',
        :'functional_area' => :'String',
        :'help_file' => :'String',
        :'help_topic_id' => :'Integer',
        :'object_library' => :'String',
        :'object_title' => :'String',
        :'purpose' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'advanced_search_calculated_column',
        :'advanced_search_table',
        :'advanced_search_type',
        :'description',
        :'functional_area',
        :'help_file',
        :'help_topic_id',
        :'object_library',
        :'object_title',
        :'purpose'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ObjectList` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ObjectList`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'object_name')
        self.object_name = attributes[:'object_name']
      else
        self.object_name = nil
      end

      if attributes.key?(:'advanced_search_calculated_column')
        self.advanced_search_calculated_column = attributes[:'advanced_search_calculated_column']
      end

      if attributes.key?(:'advanced_search_table')
        self.advanced_search_table = attributes[:'advanced_search_table']
      end

      if attributes.key?(:'advanced_search_type')
        self.advanced_search_type = attributes[:'advanced_search_type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'functional_area')
        self.functional_area = attributes[:'functional_area']
      end

      if attributes.key?(:'help_file')
        self.help_file = attributes[:'help_file']
      end

      if attributes.key?(:'help_topic_id')
        self.help_topic_id = attributes[:'help_topic_id']
      end

      if attributes.key?(:'object_library')
        self.object_library = attributes[:'object_library']
      end

      if attributes.key?(:'object_title')
        self.object_title = attributes[:'object_title']
      end

      if attributes.key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @object_name.nil?
        invalid_properties.push('invalid value for "object_name", object_name cannot be nil.')
      end

      if @object_name.to_s.length > 128
        invalid_properties.push('invalid value for "object_name", the character length must be smaller than or equal to 128.')
      end

      if @object_name.to_s.length < 1
        invalid_properties.push('invalid value for "object_name", the character length must be great than or equal to 1.')
      end

      if !@advanced_search_calculated_column.nil? && @advanced_search_calculated_column.to_s.length > 1024
        invalid_properties.push('invalid value for "advanced_search_calculated_column", the character length must be smaller than or equal to 1024.')
      end

      if !@advanced_search_table.nil? && @advanced_search_table.to_s.length > 512
        invalid_properties.push('invalid value for "advanced_search_table", the character length must be smaller than or equal to 512.')
      end

      if !@advanced_search_type.nil? && @advanced_search_type.to_s.length > 64
        invalid_properties.push('invalid value for "advanced_search_type", the character length must be smaller than or equal to 64.')
      end

      if !@functional_area.nil? && @functional_area.to_s.length > 64
        invalid_properties.push('invalid value for "functional_area", the character length must be smaller than or equal to 64.')
      end

      if !@help_file.nil? && @help_file.to_s.length > 256
        invalid_properties.push('invalid value for "help_file", the character length must be smaller than or equal to 256.')
      end

      if !@object_library.nil? && @object_library.to_s.length > 256
        invalid_properties.push('invalid value for "object_library", the character length must be smaller than or equal to 256.')
      end

      if !@object_title.nil? && @object_title.to_s.length > 256
        invalid_properties.push('invalid value for "object_title", the character length must be smaller than or equal to 256.')
      end

      if !@purpose.nil? && @purpose.to_s.length > 32
        invalid_properties.push('invalid value for "purpose", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @object_name.nil?
      return false if @object_name.to_s.length > 128
      return false if @object_name.to_s.length < 1
      return false if !@advanced_search_calculated_column.nil? && @advanced_search_calculated_column.to_s.length > 1024
      return false if !@advanced_search_table.nil? && @advanced_search_table.to_s.length > 512
      return false if !@advanced_search_type.nil? && @advanced_search_type.to_s.length > 64
      return false if !@functional_area.nil? && @functional_area.to_s.length > 64
      return false if !@help_file.nil? && @help_file.to_s.length > 256
      return false if !@object_library.nil? && @object_library.to_s.length > 256
      return false if !@object_title.nil? && @object_title.to_s.length > 256
      return false if !@purpose.nil? && @purpose.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] object_name Value to be assigned
    def object_name=(object_name)
      if object_name.nil?
        fail ArgumentError, 'object_name cannot be nil'
      end

      if object_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "object_name", the character length must be smaller than or equal to 128.'
      end

      if object_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "object_name", the character length must be great than or equal to 1.'
      end

      @object_name = object_name
    end

    # Custom attribute writer method with validation
    # @param [Object] advanced_search_calculated_column Value to be assigned
    def advanced_search_calculated_column=(advanced_search_calculated_column)
      if !advanced_search_calculated_column.nil? && advanced_search_calculated_column.to_s.length > 1024
        fail ArgumentError, 'invalid value for "advanced_search_calculated_column", the character length must be smaller than or equal to 1024.'
      end

      @advanced_search_calculated_column = advanced_search_calculated_column
    end

    # Custom attribute writer method with validation
    # @param [Object] advanced_search_table Value to be assigned
    def advanced_search_table=(advanced_search_table)
      if !advanced_search_table.nil? && advanced_search_table.to_s.length > 512
        fail ArgumentError, 'invalid value for "advanced_search_table", the character length must be smaller than or equal to 512.'
      end

      @advanced_search_table = advanced_search_table
    end

    # Custom attribute writer method with validation
    # @param [Object] advanced_search_type Value to be assigned
    def advanced_search_type=(advanced_search_type)
      if !advanced_search_type.nil? && advanced_search_type.to_s.length > 64
        fail ArgumentError, 'invalid value for "advanced_search_type", the character length must be smaller than or equal to 64.'
      end

      @advanced_search_type = advanced_search_type
    end

    # Custom attribute writer method with validation
    # @param [Object] functional_area Value to be assigned
    def functional_area=(functional_area)
      if !functional_area.nil? && functional_area.to_s.length > 64
        fail ArgumentError, 'invalid value for "functional_area", the character length must be smaller than or equal to 64.'
      end

      @functional_area = functional_area
    end

    # Custom attribute writer method with validation
    # @param [Object] help_file Value to be assigned
    def help_file=(help_file)
      if !help_file.nil? && help_file.to_s.length > 256
        fail ArgumentError, 'invalid value for "help_file", the character length must be smaller than or equal to 256.'
      end

      @help_file = help_file
    end

    # Custom attribute writer method with validation
    # @param [Object] object_library Value to be assigned
    def object_library=(object_library)
      if !object_library.nil? && object_library.to_s.length > 256
        fail ArgumentError, 'invalid value for "object_library", the character length must be smaller than or equal to 256.'
      end

      @object_library = object_library
    end

    # Custom attribute writer method with validation
    # @param [Object] object_title Value to be assigned
    def object_title=(object_title)
      if !object_title.nil? && object_title.to_s.length > 256
        fail ArgumentError, 'invalid value for "object_title", the character length must be smaller than or equal to 256.'
      end

      @object_title = object_title
    end

    # Custom attribute writer method with validation
    # @param [Object] purpose Value to be assigned
    def purpose=(purpose)
      if !purpose.nil? && purpose.to_s.length > 32
        fail ArgumentError, 'invalid value for "purpose", the character length must be smaller than or equal to 32.'
      end

      @purpose = purpose
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          object_name == o.object_name &&
          advanced_search_calculated_column == o.advanced_search_calculated_column &&
          advanced_search_table == o.advanced_search_table &&
          advanced_search_type == o.advanced_search_type &&
          description == o.description &&
          functional_area == o.functional_area &&
          help_file == o.help_file &&
          help_topic_id == o.help_topic_id &&
          object_library == o.object_library &&
          object_title == o.object_title &&
          purpose == o.purpose
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [object_name, advanced_search_calculated_column, advanced_search_table, advanced_search_type, description, functional_area, help_file, help_topic_id, object_library, object_title, purpose].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
