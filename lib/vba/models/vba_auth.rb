=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class VBAAuth
    attr_accessor :provider_last_name

    attr_accessor :provider_first_name

    attr_accessor :provider_org_name

    attr_accessor :provider_entity_id

    attr_accessor :provider_type

    attr_accessor :payee_name

    attr_accessor :member_last_name

    attr_accessor :member_first_name

    attr_accessor :member_birth_date

    attr_accessor :member_vip_flag

    attr_accessor :auth_adjust_count

    attr_accessor :auth_ref_count

    attr_accessor :auth_detail

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'provider_last_name' => :'provider_Last_Name',
        :'provider_first_name' => :'provider_First_Name',
        :'provider_org_name' => :'provider_Org_Name',
        :'provider_entity_id' => :'provider_Entity_ID',
        :'provider_type' => :'provider_Type',
        :'payee_name' => :'payee_Name',
        :'member_last_name' => :'member_Last_Name',
        :'member_first_name' => :'member_First_Name',
        :'member_birth_date' => :'member_Birth_Date',
        :'member_vip_flag' => :'member_VIP_Flag',
        :'auth_adjust_count' => :'auth_Adjust_Count',
        :'auth_ref_count' => :'auth_Ref_Count',
        :'auth_detail' => :'authDetail'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'provider_last_name' => :'String',
        :'provider_first_name' => :'String',
        :'provider_org_name' => :'String',
        :'provider_entity_id' => :'String',
        :'provider_type' => :'String',
        :'payee_name' => :'String',
        :'member_last_name' => :'String',
        :'member_first_name' => :'String',
        :'member_birth_date' => :'Time',
        :'member_vip_flag' => :'Boolean',
        :'auth_adjust_count' => :'Integer',
        :'auth_ref_count' => :'Integer',
        :'auth_detail' => :'Auth'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'provider_last_name',
        :'provider_first_name',
        :'provider_org_name',
        :'provider_entity_id',
        :'provider_type',
        :'payee_name',
        :'member_last_name',
        :'member_first_name',
        :'member_birth_date',
        :'auth_adjust_count',
        :'auth_ref_count',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::VBAAuth` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::VBAAuth`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'provider_last_name')
        self.provider_last_name = attributes[:'provider_last_name']
      end

      if attributes.key?(:'provider_first_name')
        self.provider_first_name = attributes[:'provider_first_name']
      end

      if attributes.key?(:'provider_org_name')
        self.provider_org_name = attributes[:'provider_org_name']
      end

      if attributes.key?(:'provider_entity_id')
        self.provider_entity_id = attributes[:'provider_entity_id']
      end

      if attributes.key?(:'provider_type')
        self.provider_type = attributes[:'provider_type']
      end

      if attributes.key?(:'payee_name')
        self.payee_name = attributes[:'payee_name']
      end

      if attributes.key?(:'member_last_name')
        self.member_last_name = attributes[:'member_last_name']
      end

      if attributes.key?(:'member_first_name')
        self.member_first_name = attributes[:'member_first_name']
      end

      if attributes.key?(:'member_birth_date')
        self.member_birth_date = attributes[:'member_birth_date']
      end

      if attributes.key?(:'member_vip_flag')
        self.member_vip_flag = attributes[:'member_vip_flag']
      end

      if attributes.key?(:'auth_adjust_count')
        self.auth_adjust_count = attributes[:'auth_adjust_count']
      end

      if attributes.key?(:'auth_ref_count')
        self.auth_ref_count = attributes[:'auth_ref_count']
      end

      if attributes.key?(:'auth_detail')
        self.auth_detail = attributes[:'auth_detail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          provider_last_name == o.provider_last_name &&
          provider_first_name == o.provider_first_name &&
          provider_org_name == o.provider_org_name &&
          provider_entity_id == o.provider_entity_id &&
          provider_type == o.provider_type &&
          payee_name == o.payee_name &&
          member_last_name == o.member_last_name &&
          member_first_name == o.member_first_name &&
          member_birth_date == o.member_birth_date &&
          member_vip_flag == o.member_vip_flag &&
          auth_adjust_count == o.auth_adjust_count &&
          auth_ref_count == o.auth_ref_count &&
          auth_detail == o.auth_detail
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [provider_last_name, provider_first_name, provider_org_name, provider_entity_id, provider_type, payee_name, member_last_name, member_first_name, member_birth_date, member_vip_flag, auth_adjust_count, auth_ref_count, auth_detail].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
