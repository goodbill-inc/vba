=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class GroupSelfAdmin
    # Unique identifier for each Self Admin configuration. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_self_admin_key

    # Notes if this coniguration is active for calculation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :active

    # The age for this invoice calculation.
    attr_accessor :age

    # If there is Benefit level configuration, you would apply that here. If blank, this configuration applies to all benefits inside the group.
    attr_accessor :benefit_code

    # The dependent count for this invoice calculation.
    attr_accessor :dependents

    # If there is Division level configuration, you would apply that here. If blank, this confiruation applies to the entire group.
    attr_accessor :division_id

    # User that first added the record to the system.
    attr_accessor :entry_date

    # Date when the record was first added to the system.
    attr_accessor :entry_user

    # References Groups.Group_ID values on parent record.
    attr_accessor :group_id

    # Notes the invoice level for self-admin invoicing. Works smilar to GroupDivision setting in that it combines other self-admin confiration to the common level.
    attr_accessor :invoice_level

    # The member count for this invoice calculation.
    attr_accessor :members

    # If there is Plan level configuration, you would apply that here. If blank, this configuration applies to all plans inside the group.
    attr_accessor :plan_id

    # The gender for this invoice calculation.
    attr_accessor :sex

    # The subscriber count for this invoice calculation.
    attr_accessor :subscribers

    # User that last updated the record in the system.
    attr_accessor :update_date

    # Date when the record was last updated in the system.
    attr_accessor :update_user

    # Indicates if volume scale determines the volume for this invoice calculation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_volume_scale

    # The volume for this invoice calculation.
    attr_accessor :volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_self_admin_key' => :'groupSelfAdmin_Key',
        :'active' => :'active',
        :'age' => :'age',
        :'benefit_code' => :'benefit_Code',
        :'dependents' => :'dependents',
        :'division_id' => :'division_ID',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'invoice_level' => :'invoice_Level',
        :'members' => :'members',
        :'plan_id' => :'plan_ID',
        :'sex' => :'sex',
        :'subscribers' => :'subscribers',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_volume_scale' => :'use_Volume_Scale',
        :'volume' => :'volume'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_self_admin_key' => :'Integer',
        :'active' => :'Boolean',
        :'age' => :'Integer',
        :'benefit_code' => :'String',
        :'dependents' => :'Integer',
        :'division_id' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'invoice_level' => :'String',
        :'members' => :'Integer',
        :'plan_id' => :'String',
        :'sex' => :'String',
        :'subscribers' => :'Integer',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_volume_scale' => :'Boolean',
        :'volume' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'age',
        :'benefit_code',
        :'dependents',
        :'division_id',
        :'entry_user',
        :'invoice_level',
        :'members',
        :'plan_id',
        :'sex',
        :'subscribers',
        :'update_user',
        :'volume'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::GroupSelfAdmin` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::GroupSelfAdmin`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_self_admin_key')
        self.group_self_admin_key = attributes[:'group_self_admin_key']
      else
        self.group_self_admin_key = nil
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = nil
      end

      if attributes.key?(:'age')
        self.age = attributes[:'age']
      end

      if attributes.key?(:'benefit_code')
        self.benefit_code = attributes[:'benefit_code']
      end

      if attributes.key?(:'dependents')
        self.dependents = attributes[:'dependents']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'invoice_level')
        self.invoice_level = attributes[:'invoice_level']
      end

      if attributes.key?(:'members')
        self.members = attributes[:'members']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'subscribers')
        self.subscribers = attributes[:'subscribers']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_volume_scale')
        self.use_volume_scale = attributes[:'use_volume_scale']
      else
        self.use_volume_scale = nil
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_self_admin_key.nil?
        invalid_properties.push('invalid value for "group_self_admin_key", group_self_admin_key cannot be nil.')
      end

      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      if !@benefit_code.nil? && @benefit_code.to_s.length > 10
        invalid_properties.push('invalid value for "benefit_code", the character length must be smaller than or equal to 10.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if !@invoice_level.nil? && @invoice_level.to_s.length > 1
        invalid_properties.push('invalid value for "invoice_level", the character length must be smaller than or equal to 1.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@sex.nil? && @sex.to_s.length > 1
        invalid_properties.push('invalid value for "sex", the character length must be smaller than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_volume_scale.nil?
        invalid_properties.push('invalid value for "use_volume_scale", use_volume_scale cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_self_admin_key.nil?
      return false if @active.nil?
      return false if !@benefit_code.nil? && @benefit_code.to_s.length > 10
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if !@invoice_level.nil? && @invoice_level.to_s.length > 1
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@sex.nil? && @sex.to_s.length > 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_volume_scale.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_self_admin_key Value to be assigned
    def group_self_admin_key=(group_self_admin_key)
      if group_self_admin_key.nil?
        fail ArgumentError, 'group_self_admin_key cannot be nil'
      end

      @group_self_admin_key = group_self_admin_key
    end

    # Custom attribute writer method with validation
    # @param [Object] active Value to be assigned
    def active=(active)
      if active.nil?
        fail ArgumentError, 'active cannot be nil'
      end

      @active = active
    end

    # Custom attribute writer method with validation
    # @param [Object] benefit_code Value to be assigned
    def benefit_code=(benefit_code)
      if !benefit_code.nil? && benefit_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "benefit_code", the character length must be smaller than or equal to 10.'
      end

      @benefit_code = benefit_code
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_level Value to be assigned
    def invoice_level=(invoice_level)
      if !invoice_level.nil? && invoice_level.to_s.length > 1
        fail ArgumentError, 'invalid value for "invoice_level", the character length must be smaller than or equal to 1.'
      end

      @invoice_level = invoice_level
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] sex Value to be assigned
    def sex=(sex)
      if !sex.nil? && sex.to_s.length > 1
        fail ArgumentError, 'invalid value for "sex", the character length must be smaller than or equal to 1.'
      end

      @sex = sex
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_volume_scale Value to be assigned
    def use_volume_scale=(use_volume_scale)
      if use_volume_scale.nil?
        fail ArgumentError, 'use_volume_scale cannot be nil'
      end

      @use_volume_scale = use_volume_scale
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_self_admin_key == o.group_self_admin_key &&
          active == o.active &&
          age == o.age &&
          benefit_code == o.benefit_code &&
          dependents == o.dependents &&
          division_id == o.division_id &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          invoice_level == o.invoice_level &&
          members == o.members &&
          plan_id == o.plan_id &&
          sex == o.sex &&
          subscribers == o.subscribers &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_volume_scale == o.use_volume_scale &&
          volume == o.volume
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_self_admin_key, active, age, benefit_code, dependents, division_id, entry_date, entry_user, group_id, invoice_level, members, plan_id, sex, subscribers, update_date, update_user, use_volume_scale, volume].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
