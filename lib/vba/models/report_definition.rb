=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class ReportDefinition
    # ID of the report definition. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :report_definition_key

    # Contains the GUID for the corresponding Advanced Reporting ID in Bold Reports.
    attr_accessor :b_r_report_id

    # This will combine the results of a criteria window with multiple criteria. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :combine_navigation

    # The PowerBuilder object used to enter criteria.
    attr_accessor :criteria_object

    # Identifies a custom report to be used.
    attr_accessor :custom_report

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Flag indicating if the adjustment category should be excluded from the report Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exclude_adjustment_category

    # Flag indicating if the other category should be excluded from the report Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exclude_other_category

    # Flag indicating if the total category should be excluded from the report Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :exclude_total_category

    # Limits the report to only showing Rate Categories defined at the Group, not all Rate Categories on the Invoice. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :group_categories_only

    # Help file associated with the report object
    attr_accessor :help_file

    # Topic ID within the help file associated with the report object
    attr_accessor :help_topic_id

    # Identifies how many category columns are used within the report.
    attr_accessor :invoice_category_column_count

    # Indicates that the report has navigation. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :navigation_report

    # Identifies which category the report belongs to.
    attr_accessor :report_category

    # Full description of the report.
    attr_accessor :report_description

    # Specifies a secondary report that may be used in conjunction with the main report
    attr_accessor :report_detail_object

    # Utilize the file explorer to choose an example of the chosen report.
    attr_accessor :report_example

    # ID of the report being defined.
    attr_accessor :report_id

    # Identifies which report library the User wishes to choose from.
    attr_accessor :report_library

    # Name of the report.
    attr_accessor :report_name

    # Indicates which report will be used with the automation step.
    attr_accessor :report_object

    # Indicates that the report may be used with scheduling functionality. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :schedule_report

    # Indicates that the report may be added to a report series. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :series_report

    # Indicates that tracking functionality will be used for the report. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :trackable_report

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'report_definition_key' => :'reportDefinition_Key',
        :'b_r_report_id' => :'bR_Report_ID',
        :'combine_navigation' => :'combine_Navigation',
        :'criteria_object' => :'criteria_Object',
        :'custom_report' => :'custom_Report',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'exclude_adjustment_category' => :'exclude_Adjustment_Category',
        :'exclude_other_category' => :'exclude_Other_Category',
        :'exclude_total_category' => :'exclude_Total_Category',
        :'group_categories_only' => :'group_Categories_Only',
        :'help_file' => :'help_File',
        :'help_topic_id' => :'help_Topic_ID',
        :'invoice_category_column_count' => :'invoice_Category_Column_Count',
        :'navigation_report' => :'navigation_Report',
        :'report_category' => :'report_Category',
        :'report_description' => :'report_Description',
        :'report_detail_object' => :'report_Detail_Object',
        :'report_example' => :'report_Example',
        :'report_id' => :'report_ID',
        :'report_library' => :'report_Library',
        :'report_name' => :'report_Name',
        :'report_object' => :'report_Object',
        :'schedule_report' => :'schedule_Report',
        :'series_report' => :'series_Report',
        :'trackable_report' => :'trackable_Report',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'report_definition_key' => :'Integer',
        :'b_r_report_id' => :'String',
        :'combine_navigation' => :'Boolean',
        :'criteria_object' => :'String',
        :'custom_report' => :'String',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'exclude_adjustment_category' => :'Boolean',
        :'exclude_other_category' => :'Boolean',
        :'exclude_total_category' => :'Boolean',
        :'group_categories_only' => :'Boolean',
        :'help_file' => :'String',
        :'help_topic_id' => :'Integer',
        :'invoice_category_column_count' => :'Integer',
        :'navigation_report' => :'Boolean',
        :'report_category' => :'String',
        :'report_description' => :'String',
        :'report_detail_object' => :'String',
        :'report_example' => :'String',
        :'report_id' => :'String',
        :'report_library' => :'String',
        :'report_name' => :'String',
        :'report_object' => :'String',
        :'schedule_report' => :'Boolean',
        :'series_report' => :'Boolean',
        :'trackable_report' => :'Boolean',
        :'update_date' => :'Time',
        :'update_user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'b_r_report_id',
        :'criteria_object',
        :'custom_report',
        :'entry_user',
        :'help_file',
        :'help_topic_id',
        :'invoice_category_column_count',
        :'report_category',
        :'report_detail_object',
        :'report_example',
        :'report_library',
        :'report_object',
        :'update_user'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::ReportDefinition` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::ReportDefinition`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'report_definition_key')
        self.report_definition_key = attributes[:'report_definition_key']
      else
        self.report_definition_key = nil
      end

      if attributes.key?(:'b_r_report_id')
        self.b_r_report_id = attributes[:'b_r_report_id']
      end

      if attributes.key?(:'combine_navigation')
        self.combine_navigation = attributes[:'combine_navigation']
      else
        self.combine_navigation = nil
      end

      if attributes.key?(:'criteria_object')
        self.criteria_object = attributes[:'criteria_object']
      end

      if attributes.key?(:'custom_report')
        self.custom_report = attributes[:'custom_report']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'exclude_adjustment_category')
        self.exclude_adjustment_category = attributes[:'exclude_adjustment_category']
      else
        self.exclude_adjustment_category = nil
      end

      if attributes.key?(:'exclude_other_category')
        self.exclude_other_category = attributes[:'exclude_other_category']
      else
        self.exclude_other_category = nil
      end

      if attributes.key?(:'exclude_total_category')
        self.exclude_total_category = attributes[:'exclude_total_category']
      else
        self.exclude_total_category = nil
      end

      if attributes.key?(:'group_categories_only')
        self.group_categories_only = attributes[:'group_categories_only']
      else
        self.group_categories_only = nil
      end

      if attributes.key?(:'help_file')
        self.help_file = attributes[:'help_file']
      end

      if attributes.key?(:'help_topic_id')
        self.help_topic_id = attributes[:'help_topic_id']
      end

      if attributes.key?(:'invoice_category_column_count')
        self.invoice_category_column_count = attributes[:'invoice_category_column_count']
      end

      if attributes.key?(:'navigation_report')
        self.navigation_report = attributes[:'navigation_report']
      else
        self.navigation_report = nil
      end

      if attributes.key?(:'report_category')
        self.report_category = attributes[:'report_category']
      end

      if attributes.key?(:'report_description')
        self.report_description = attributes[:'report_description']
      else
        self.report_description = nil
      end

      if attributes.key?(:'report_detail_object')
        self.report_detail_object = attributes[:'report_detail_object']
      end

      if attributes.key?(:'report_example')
        self.report_example = attributes[:'report_example']
      end

      if attributes.key?(:'report_id')
        self.report_id = attributes[:'report_id']
      else
        self.report_id = nil
      end

      if attributes.key?(:'report_library')
        self.report_library = attributes[:'report_library']
      end

      if attributes.key?(:'report_name')
        self.report_name = attributes[:'report_name']
      else
        self.report_name = nil
      end

      if attributes.key?(:'report_object')
        self.report_object = attributes[:'report_object']
      end

      if attributes.key?(:'schedule_report')
        self.schedule_report = attributes[:'schedule_report']
      else
        self.schedule_report = nil
      end

      if attributes.key?(:'series_report')
        self.series_report = attributes[:'series_report']
      else
        self.series_report = nil
      end

      if attributes.key?(:'trackable_report')
        self.trackable_report = attributes[:'trackable_report']
      else
        self.trackable_report = nil
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @report_definition_key.nil?
        invalid_properties.push('invalid value for "report_definition_key", report_definition_key cannot be nil.')
      end

      if !@b_r_report_id.nil? && @b_r_report_id.to_s.length > 512
        invalid_properties.push('invalid value for "b_r_report_id", the character length must be smaller than or equal to 512.')
      end

      if @combine_navigation.nil?
        invalid_properties.push('invalid value for "combine_navigation", combine_navigation cannot be nil.')
      end

      if !@criteria_object.nil? && @criteria_object.to_s.length > 128
        invalid_properties.push('invalid value for "criteria_object", the character length must be smaller than or equal to 128.')
      end

      if !@custom_report.nil? && @custom_report.to_s.length > 2048
        invalid_properties.push('invalid value for "custom_report", the character length must be smaller than or equal to 2048.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if @exclude_adjustment_category.nil?
        invalid_properties.push('invalid value for "exclude_adjustment_category", exclude_adjustment_category cannot be nil.')
      end

      if @exclude_other_category.nil?
        invalid_properties.push('invalid value for "exclude_other_category", exclude_other_category cannot be nil.')
      end

      if @exclude_total_category.nil?
        invalid_properties.push('invalid value for "exclude_total_category", exclude_total_category cannot be nil.')
      end

      if @group_categories_only.nil?
        invalid_properties.push('invalid value for "group_categories_only", group_categories_only cannot be nil.')
      end

      if !@help_file.nil? && @help_file.to_s.length > 256
        invalid_properties.push('invalid value for "help_file", the character length must be smaller than or equal to 256.')
      end

      if @navigation_report.nil?
        invalid_properties.push('invalid value for "navigation_report", navigation_report cannot be nil.')
      end

      if !@report_category.nil? && @report_category.to_s.length > 16
        invalid_properties.push('invalid value for "report_category", the character length must be smaller than or equal to 16.')
      end

      if @report_description.nil?
        invalid_properties.push('invalid value for "report_description", report_description cannot be nil.')
      end

      if @report_description.to_s.length > 512
        invalid_properties.push('invalid value for "report_description", the character length must be smaller than or equal to 512.')
      end

      if @report_description.to_s.length < 1
        invalid_properties.push('invalid value for "report_description", the character length must be great than or equal to 1.')
      end

      if !@report_detail_object.nil? && @report_detail_object.to_s.length > 128
        invalid_properties.push('invalid value for "report_detail_object", the character length must be smaller than or equal to 128.')
      end

      if !@report_example.nil? && @report_example.to_s.length > 128
        invalid_properties.push('invalid value for "report_example", the character length must be smaller than or equal to 128.')
      end

      if @report_id.nil?
        invalid_properties.push('invalid value for "report_id", report_id cannot be nil.')
      end

      if @report_id.to_s.length > 32
        invalid_properties.push('invalid value for "report_id", the character length must be smaller than or equal to 32.')
      end

      if @report_id.to_s.length < 1
        invalid_properties.push('invalid value for "report_id", the character length must be great than or equal to 1.')
      end

      if !@report_library.nil? && @report_library.to_s.length > 128
        invalid_properties.push('invalid value for "report_library", the character length must be smaller than or equal to 128.')
      end

      if @report_name.nil?
        invalid_properties.push('invalid value for "report_name", report_name cannot be nil.')
      end

      if @report_name.to_s.length > 128
        invalid_properties.push('invalid value for "report_name", the character length must be smaller than or equal to 128.')
      end

      if @report_name.to_s.length < 1
        invalid_properties.push('invalid value for "report_name", the character length must be great than or equal to 1.')
      end

      if !@report_object.nil? && @report_object.to_s.length > 128
        invalid_properties.push('invalid value for "report_object", the character length must be smaller than or equal to 128.')
      end

      if @schedule_report.nil?
        invalid_properties.push('invalid value for "schedule_report", schedule_report cannot be nil.')
      end

      if @series_report.nil?
        invalid_properties.push('invalid value for "series_report", series_report cannot be nil.')
      end

      if @trackable_report.nil?
        invalid_properties.push('invalid value for "trackable_report", trackable_report cannot be nil.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @report_definition_key.nil?
      return false if !@b_r_report_id.nil? && @b_r_report_id.to_s.length > 512
      return false if @combine_navigation.nil?
      return false if !@criteria_object.nil? && @criteria_object.to_s.length > 128
      return false if !@custom_report.nil? && @custom_report.to_s.length > 2048
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if @exclude_adjustment_category.nil?
      return false if @exclude_other_category.nil?
      return false if @exclude_total_category.nil?
      return false if @group_categories_only.nil?
      return false if !@help_file.nil? && @help_file.to_s.length > 256
      return false if @navigation_report.nil?
      return false if !@report_category.nil? && @report_category.to_s.length > 16
      return false if @report_description.nil?
      return false if @report_description.to_s.length > 512
      return false if @report_description.to_s.length < 1
      return false if !@report_detail_object.nil? && @report_detail_object.to_s.length > 128
      return false if !@report_example.nil? && @report_example.to_s.length > 128
      return false if @report_id.nil?
      return false if @report_id.to_s.length > 32
      return false if @report_id.to_s.length < 1
      return false if !@report_library.nil? && @report_library.to_s.length > 128
      return false if @report_name.nil?
      return false if @report_name.to_s.length > 128
      return false if @report_name.to_s.length < 1
      return false if !@report_object.nil? && @report_object.to_s.length > 128
      return false if @schedule_report.nil?
      return false if @series_report.nil?
      return false if @trackable_report.nil?
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] report_definition_key Value to be assigned
    def report_definition_key=(report_definition_key)
      if report_definition_key.nil?
        fail ArgumentError, 'report_definition_key cannot be nil'
      end

      @report_definition_key = report_definition_key
    end

    # Custom attribute writer method with validation
    # @param [Object] b_r_report_id Value to be assigned
    def b_r_report_id=(b_r_report_id)
      if !b_r_report_id.nil? && b_r_report_id.to_s.length > 512
        fail ArgumentError, 'invalid value for "b_r_report_id", the character length must be smaller than or equal to 512.'
      end

      @b_r_report_id = b_r_report_id
    end

    # Custom attribute writer method with validation
    # @param [Object] combine_navigation Value to be assigned
    def combine_navigation=(combine_navigation)
      if combine_navigation.nil?
        fail ArgumentError, 'combine_navigation cannot be nil'
      end

      @combine_navigation = combine_navigation
    end

    # Custom attribute writer method with validation
    # @param [Object] criteria_object Value to be assigned
    def criteria_object=(criteria_object)
      if !criteria_object.nil? && criteria_object.to_s.length > 128
        fail ArgumentError, 'invalid value for "criteria_object", the character length must be smaller than or equal to 128.'
      end

      @criteria_object = criteria_object
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_report Value to be assigned
    def custom_report=(custom_report)
      if !custom_report.nil? && custom_report.to_s.length > 2048
        fail ArgumentError, 'invalid value for "custom_report", the character length must be smaller than or equal to 2048.'
      end

      @custom_report = custom_report
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_adjustment_category Value to be assigned
    def exclude_adjustment_category=(exclude_adjustment_category)
      if exclude_adjustment_category.nil?
        fail ArgumentError, 'exclude_adjustment_category cannot be nil'
      end

      @exclude_adjustment_category = exclude_adjustment_category
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_other_category Value to be assigned
    def exclude_other_category=(exclude_other_category)
      if exclude_other_category.nil?
        fail ArgumentError, 'exclude_other_category cannot be nil'
      end

      @exclude_other_category = exclude_other_category
    end

    # Custom attribute writer method with validation
    # @param [Object] exclude_total_category Value to be assigned
    def exclude_total_category=(exclude_total_category)
      if exclude_total_category.nil?
        fail ArgumentError, 'exclude_total_category cannot be nil'
      end

      @exclude_total_category = exclude_total_category
    end

    # Custom attribute writer method with validation
    # @param [Object] group_categories_only Value to be assigned
    def group_categories_only=(group_categories_only)
      if group_categories_only.nil?
        fail ArgumentError, 'group_categories_only cannot be nil'
      end

      @group_categories_only = group_categories_only
    end

    # Custom attribute writer method with validation
    # @param [Object] help_file Value to be assigned
    def help_file=(help_file)
      if !help_file.nil? && help_file.to_s.length > 256
        fail ArgumentError, 'invalid value for "help_file", the character length must be smaller than or equal to 256.'
      end

      @help_file = help_file
    end

    # Custom attribute writer method with validation
    # @param [Object] navigation_report Value to be assigned
    def navigation_report=(navigation_report)
      if navigation_report.nil?
        fail ArgumentError, 'navigation_report cannot be nil'
      end

      @navigation_report = navigation_report
    end

    # Custom attribute writer method with validation
    # @param [Object] report_category Value to be assigned
    def report_category=(report_category)
      if !report_category.nil? && report_category.to_s.length > 16
        fail ArgumentError, 'invalid value for "report_category", the character length must be smaller than or equal to 16.'
      end

      @report_category = report_category
    end

    # Custom attribute writer method with validation
    # @param [Object] report_description Value to be assigned
    def report_description=(report_description)
      if report_description.nil?
        fail ArgumentError, 'report_description cannot be nil'
      end

      if report_description.to_s.length > 512
        fail ArgumentError, 'invalid value for "report_description", the character length must be smaller than or equal to 512.'
      end

      if report_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "report_description", the character length must be great than or equal to 1.'
      end

      @report_description = report_description
    end

    # Custom attribute writer method with validation
    # @param [Object] report_detail_object Value to be assigned
    def report_detail_object=(report_detail_object)
      if !report_detail_object.nil? && report_detail_object.to_s.length > 128
        fail ArgumentError, 'invalid value for "report_detail_object", the character length must be smaller than or equal to 128.'
      end

      @report_detail_object = report_detail_object
    end

    # Custom attribute writer method with validation
    # @param [Object] report_example Value to be assigned
    def report_example=(report_example)
      if !report_example.nil? && report_example.to_s.length > 128
        fail ArgumentError, 'invalid value for "report_example", the character length must be smaller than or equal to 128.'
      end

      @report_example = report_example
    end

    # Custom attribute writer method with validation
    # @param [Object] report_id Value to be assigned
    def report_id=(report_id)
      if report_id.nil?
        fail ArgumentError, 'report_id cannot be nil'
      end

      if report_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "report_id", the character length must be smaller than or equal to 32.'
      end

      if report_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "report_id", the character length must be great than or equal to 1.'
      end

      @report_id = report_id
    end

    # Custom attribute writer method with validation
    # @param [Object] report_library Value to be assigned
    def report_library=(report_library)
      if !report_library.nil? && report_library.to_s.length > 128
        fail ArgumentError, 'invalid value for "report_library", the character length must be smaller than or equal to 128.'
      end

      @report_library = report_library
    end

    # Custom attribute writer method with validation
    # @param [Object] report_name Value to be assigned
    def report_name=(report_name)
      if report_name.nil?
        fail ArgumentError, 'report_name cannot be nil'
      end

      if report_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "report_name", the character length must be smaller than or equal to 128.'
      end

      if report_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "report_name", the character length must be great than or equal to 1.'
      end

      @report_name = report_name
    end

    # Custom attribute writer method with validation
    # @param [Object] report_object Value to be assigned
    def report_object=(report_object)
      if !report_object.nil? && report_object.to_s.length > 128
        fail ArgumentError, 'invalid value for "report_object", the character length must be smaller than or equal to 128.'
      end

      @report_object = report_object
    end

    # Custom attribute writer method with validation
    # @param [Object] schedule_report Value to be assigned
    def schedule_report=(schedule_report)
      if schedule_report.nil?
        fail ArgumentError, 'schedule_report cannot be nil'
      end

      @schedule_report = schedule_report
    end

    # Custom attribute writer method with validation
    # @param [Object] series_report Value to be assigned
    def series_report=(series_report)
      if series_report.nil?
        fail ArgumentError, 'series_report cannot be nil'
      end

      @series_report = series_report
    end

    # Custom attribute writer method with validation
    # @param [Object] trackable_report Value to be assigned
    def trackable_report=(trackable_report)
      if trackable_report.nil?
        fail ArgumentError, 'trackable_report cannot be nil'
      end

      @trackable_report = trackable_report
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          report_definition_key == o.report_definition_key &&
          b_r_report_id == o.b_r_report_id &&
          combine_navigation == o.combine_navigation &&
          criteria_object == o.criteria_object &&
          custom_report == o.custom_report &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          exclude_adjustment_category == o.exclude_adjustment_category &&
          exclude_other_category == o.exclude_other_category &&
          exclude_total_category == o.exclude_total_category &&
          group_categories_only == o.group_categories_only &&
          help_file == o.help_file &&
          help_topic_id == o.help_topic_id &&
          invoice_category_column_count == o.invoice_category_column_count &&
          navigation_report == o.navigation_report &&
          report_category == o.report_category &&
          report_description == o.report_description &&
          report_detail_object == o.report_detail_object &&
          report_example == o.report_example &&
          report_id == o.report_id &&
          report_library == o.report_library &&
          report_name == o.report_name &&
          report_object == o.report_object &&
          schedule_report == o.schedule_report &&
          series_report == o.series_report &&
          trackable_report == o.trackable_report &&
          update_date == o.update_date &&
          update_user == o.update_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [report_definition_key, b_r_report_id, combine_navigation, criteria_object, custom_report, entry_date, entry_user, exclude_adjustment_category, exclude_other_category, exclude_total_category, group_categories_only, help_file, help_topic_id, invoice_category_column_count, navigation_report, report_category, report_description, report_detail_object, report_example, report_id, report_library, report_name, report_object, schedule_report, series_report, trackable_report, update_date, update_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
