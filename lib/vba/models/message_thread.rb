=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class MessageThread
    # Unique identifier for the message thread.
    attr_accessor :message_thread_key

    # Date and time when the thread was created.
    attr_accessor :thread_create_date

    # Unique identifier (UUID) of the user who created the thread.  If null, this is considered an admin-level action or system-generated.
    attr_accessor :thread_create_user_id

    # Current status of the thread, limited to 32 characters.  Possible values:    \"CLOSED\"  - Closed Thread    \"NEW\"     - New Thread    \"NEWREC\"  - Active Thread
    attr_accessor :thread_status

    # Title or subject line for the thread, limited to 512 characters.
    attr_accessor :thread_title

    # Type or category of the thread, limited to 32 characters.
    attr_accessor :thread_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'message_thread_key' => :'messageThread_Key',
        :'thread_create_date' => :'thread_Create_Date',
        :'thread_create_user_id' => :'thread_Create_UserId',
        :'thread_status' => :'thread_Status',
        :'thread_title' => :'thread_Title',
        :'thread_type' => :'thread_Type'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'message_thread_key' => :'Integer',
        :'thread_create_date' => :'Time',
        :'thread_create_user_id' => :'String',
        :'thread_status' => :'String',
        :'thread_title' => :'String',
        :'thread_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'thread_create_date',
        :'thread_create_user_id',
        :'thread_status',
        :'thread_title',
        :'thread_type'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::MessageThread` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::MessageThread`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'message_thread_key')
        self.message_thread_key = attributes[:'message_thread_key']
      else
        self.message_thread_key = nil
      end

      if attributes.key?(:'thread_create_date')
        self.thread_create_date = attributes[:'thread_create_date']
      end

      if attributes.key?(:'thread_create_user_id')
        self.thread_create_user_id = attributes[:'thread_create_user_id']
      end

      if attributes.key?(:'thread_status')
        self.thread_status = attributes[:'thread_status']
      end

      if attributes.key?(:'thread_title')
        self.thread_title = attributes[:'thread_title']
      end

      if attributes.key?(:'thread_type')
        self.thread_type = attributes[:'thread_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @message_thread_key.nil?
        invalid_properties.push('invalid value for "message_thread_key", message_thread_key cannot be nil.')
      end

      if !@thread_status.nil? && @thread_status.to_s.length > 32
        invalid_properties.push('invalid value for "thread_status", the character length must be smaller than or equal to 32.')
      end

      if !@thread_title.nil? && @thread_title.to_s.length > 512
        invalid_properties.push('invalid value for "thread_title", the character length must be smaller than or equal to 512.')
      end

      if !@thread_type.nil? && @thread_type.to_s.length > 32
        invalid_properties.push('invalid value for "thread_type", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @message_thread_key.nil?
      return false if !@thread_status.nil? && @thread_status.to_s.length > 32
      return false if !@thread_title.nil? && @thread_title.to_s.length > 512
      return false if !@thread_type.nil? && @thread_type.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] message_thread_key Value to be assigned
    def message_thread_key=(message_thread_key)
      if message_thread_key.nil?
        fail ArgumentError, 'message_thread_key cannot be nil'
      end

      @message_thread_key = message_thread_key
    end

    # Custom attribute writer method with validation
    # @param [Object] thread_status Value to be assigned
    def thread_status=(thread_status)
      if !thread_status.nil? && thread_status.to_s.length > 32
        fail ArgumentError, 'invalid value for "thread_status", the character length must be smaller than or equal to 32.'
      end

      @thread_status = thread_status
    end

    # Custom attribute writer method with validation
    # @param [Object] thread_title Value to be assigned
    def thread_title=(thread_title)
      if !thread_title.nil? && thread_title.to_s.length > 512
        fail ArgumentError, 'invalid value for "thread_title", the character length must be smaller than or equal to 512.'
      end

      @thread_title = thread_title
    end

    # Custom attribute writer method with validation
    # @param [Object] thread_type Value to be assigned
    def thread_type=(thread_type)
      if !thread_type.nil? && thread_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "thread_type", the character length must be smaller than or equal to 32.'
      end

      @thread_type = thread_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          message_thread_key == o.message_thread_key &&
          thread_create_date == o.thread_create_date &&
          thread_create_user_id == o.thread_create_user_id &&
          thread_status == o.thread_status &&
          thread_title == o.thread_title &&
          thread_type == o.thread_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [message_thread_key, thread_create_date, thread_create_user_id, thread_status, thread_title, thread_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
