=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class CommissionRate
    # Unique identifier for the Commission Rate Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :commission_rate_key

    # Account of the Commission Rate
    attr_accessor :account_key

    # Category of the Commission Rate
    attr_accessor :commission_rate_category

    # User defind identifier for the Commission Rate
    attr_accessor :commission_rate_id

    # Type of the Commission Rate
    attr_accessor :commission_rate_type

    # Commission Basis used for the rate
    attr_accessor :commission_basis

    # Commission Cycle used for the rate
    attr_accessor :commission_cycle

    # Description of the Commission Rate
    attr_accessor :description

    # Division of the Commission Rate
    attr_accessor :division_id

    # Effective Date of the Commission Rate
    attr_accessor :effective_date

    # End Date of the Commission Rate
    attr_accessor :end_date

    # Date record was first added to the system
    attr_accessor :entry_date

    # User that first added the record to the system
    attr_accessor :entry_user

    # Group of the Commission Rate
    attr_accessor :group_id

    # Holds the lower bound of the applicable age range for the commission rate record.
    attr_accessor :issue_age_from

    # Holds the upper bound of the applicable age range for the commission rate record.
    attr_accessor :issue_age_thru

    # Holds the abbreviated state name for the commission rate record.
    attr_accessor :issue_state

    # Member Sequnce of the Commission Rate
    attr_accessor :member_seq

    # Commission Rate that this record is a child of
    attr_accessor :parent_commission_rate_key

    # Defines which CommissionRateCluster.Rate_Cluster is a parent to this commission rate record.
    attr_accessor :parent_rate_cluster

    # Payor of the Commission Rate
    attr_accessor :payor_id

    # Plan of the Commission Rate
    attr_accessor :plan_id

    # Holds the plan_type for which this commission rate record applies.
    attr_accessor :plan_type

    # TBD
    attr_accessor :pre_payment_adjustment_reason

    # TBD Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :pre_payment_rate

    # TBD
    attr_accessor :pre_payment_type

    # Not used
    attr_accessor :prem_rate_key

    # Decimal value that defines the base rate
    attr_accessor :rate

    # Maximum the rate will be regardless of the calculation
    attr_accessor :rate_max

    # Minimum the rate will be regardless of the calculation
    attr_accessor :rate_min

    # Precision that the rate is rounded to
    attr_accessor :rate_round_precision

    # Type that determine how the rate is rounded
    attr_accessor :rate_round_type

    # First variable used in calculating the rate based on the type
    attr_accessor :rate_variable1

    # Second variable used in calculating the rate based on the type
    attr_accessor :rate_variable2

    # Third variable used in calculating the rate based on the type
    attr_accessor :rate_variable3

    # Determines if Header Adjustments are included in the scaling Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :scale_exclude_header_adjustments

    # Beginning range of the amount used for scaling
    attr_accessor :scale_from

    # Ending range of the amount used for scaling
    attr_accessor :scale_thru

    # Used to detemine what date to begin the range for scaling
    attr_accessor :scale_timeframe

    # Determines what amount the scale is based off of
    attr_accessor :scale_type

    # Subscriber of the Commission Rate
    attr_accessor :subscriber_id

    # Used to detemine what date to begin the range for scaling
    attr_accessor :term_range_date_type

    # Beginning range of a number of Days, Months, or Years
    attr_accessor :term_range_from

    # Ending range of a number of Days, Months, or Years
    attr_accessor :term_range_thru

    # Determines if Term Range is Days, Months, or Years
    attr_accessor :term_range_type

    # Date the record was last updated in the system
    attr_accessor :update_date

    # User that last updated the record in the system
    attr_accessor :update_user

    # Flag to calculate commission based on the first calculated premium for this rate and then agent. Note: This field is marked as NOT NULL in the database and therefore required by the API.
    attr_accessor :use_initial_premium

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'commission_rate_key' => :'commissionRate_Key',
        :'account_key' => :'account_Key',
        :'commission_rate_category' => :'commissionRate_Category',
        :'commission_rate_id' => :'commissionRate_ID',
        :'commission_rate_type' => :'commissionRate_Type',
        :'commission_basis' => :'commission_Basis',
        :'commission_cycle' => :'commission_Cycle',
        :'description' => :'description',
        :'division_id' => :'division_ID',
        :'effective_date' => :'effective_Date',
        :'end_date' => :'end_Date',
        :'entry_date' => :'entry_Date',
        :'entry_user' => :'entry_User',
        :'group_id' => :'group_ID',
        :'issue_age_from' => :'issue_Age_From',
        :'issue_age_thru' => :'issue_Age_Thru',
        :'issue_state' => :'issue_State',
        :'member_seq' => :'member_Seq',
        :'parent_commission_rate_key' => :'parent_CommissionRate_Key',
        :'parent_rate_cluster' => :'parent_Rate_Cluster',
        :'payor_id' => :'payor_ID',
        :'plan_id' => :'plan_ID',
        :'plan_type' => :'plan_Type',
        :'pre_payment_adjustment_reason' => :'pre_Payment_Adjustment_Reason',
        :'pre_payment_rate' => :'pre_Payment_Rate',
        :'pre_payment_type' => :'pre_Payment_Type',
        :'prem_rate_key' => :'premRate_Key',
        :'rate' => :'rate',
        :'rate_max' => :'rate_Max',
        :'rate_min' => :'rate_Min',
        :'rate_round_precision' => :'rate_Round_Precision',
        :'rate_round_type' => :'rate_Round_Type',
        :'rate_variable1' => :'rate_Variable1',
        :'rate_variable2' => :'rate_Variable2',
        :'rate_variable3' => :'rate_Variable3',
        :'scale_exclude_header_adjustments' => :'scale_Exclude_Header_Adjustments',
        :'scale_from' => :'scale_From',
        :'scale_thru' => :'scale_Thru',
        :'scale_timeframe' => :'scale_Timeframe',
        :'scale_type' => :'scale_Type',
        :'subscriber_id' => :'subscriber_ID',
        :'term_range_date_type' => :'term_Range_Date_Type',
        :'term_range_from' => :'term_Range_From',
        :'term_range_thru' => :'term_Range_Thru',
        :'term_range_type' => :'term_Range_Type',
        :'update_date' => :'update_Date',
        :'update_user' => :'update_User',
        :'use_initial_premium' => :'use_Initial_Premium'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'commission_rate_key' => :'Integer',
        :'account_key' => :'Integer',
        :'commission_rate_category' => :'String',
        :'commission_rate_id' => :'String',
        :'commission_rate_type' => :'String',
        :'commission_basis' => :'String',
        :'commission_cycle' => :'String',
        :'description' => :'String',
        :'division_id' => :'String',
        :'effective_date' => :'Time',
        :'end_date' => :'Time',
        :'entry_date' => :'Time',
        :'entry_user' => :'String',
        :'group_id' => :'String',
        :'issue_age_from' => :'Integer',
        :'issue_age_thru' => :'Integer',
        :'issue_state' => :'String',
        :'member_seq' => :'String',
        :'parent_commission_rate_key' => :'Integer',
        :'parent_rate_cluster' => :'String',
        :'payor_id' => :'String',
        :'plan_id' => :'String',
        :'plan_type' => :'String',
        :'pre_payment_adjustment_reason' => :'String',
        :'pre_payment_rate' => :'Boolean',
        :'pre_payment_type' => :'String',
        :'prem_rate_key' => :'Integer',
        :'rate' => :'Float',
        :'rate_max' => :'Float',
        :'rate_min' => :'Float',
        :'rate_round_precision' => :'Integer',
        :'rate_round_type' => :'String',
        :'rate_variable1' => :'Float',
        :'rate_variable2' => :'Float',
        :'rate_variable3' => :'Float',
        :'scale_exclude_header_adjustments' => :'Boolean',
        :'scale_from' => :'Float',
        :'scale_thru' => :'Float',
        :'scale_timeframe' => :'String',
        :'scale_type' => :'String',
        :'subscriber_id' => :'String',
        :'term_range_date_type' => :'String',
        :'term_range_from' => :'Integer',
        :'term_range_thru' => :'Integer',
        :'term_range_type' => :'String',
        :'update_date' => :'Time',
        :'update_user' => :'String',
        :'use_initial_premium' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'account_key',
        :'commission_rate_category',
        :'commission_rate_id',
        :'commission_rate_type',
        :'commission_basis',
        :'commission_cycle',
        :'description',
        :'division_id',
        :'effective_date',
        :'end_date',
        :'entry_user',
        :'group_id',
        :'issue_age_from',
        :'issue_age_thru',
        :'issue_state',
        :'member_seq',
        :'parent_commission_rate_key',
        :'parent_rate_cluster',
        :'payor_id',
        :'plan_id',
        :'plan_type',
        :'pre_payment_adjustment_reason',
        :'pre_payment_type',
        :'prem_rate_key',
        :'rate',
        :'rate_max',
        :'rate_min',
        :'rate_round_precision',
        :'rate_round_type',
        :'rate_variable1',
        :'rate_variable2',
        :'rate_variable3',
        :'scale_from',
        :'scale_thru',
        :'scale_timeframe',
        :'scale_type',
        :'subscriber_id',
        :'term_range_date_type',
        :'term_range_from',
        :'term_range_thru',
        :'term_range_type',
        :'update_user',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::CommissionRate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::CommissionRate`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'commission_rate_key')
        self.commission_rate_key = attributes[:'commission_rate_key']
      else
        self.commission_rate_key = nil
      end

      if attributes.key?(:'account_key')
        self.account_key = attributes[:'account_key']
      end

      if attributes.key?(:'commission_rate_category')
        self.commission_rate_category = attributes[:'commission_rate_category']
      end

      if attributes.key?(:'commission_rate_id')
        self.commission_rate_id = attributes[:'commission_rate_id']
      end

      if attributes.key?(:'commission_rate_type')
        self.commission_rate_type = attributes[:'commission_rate_type']
      end

      if attributes.key?(:'commission_basis')
        self.commission_basis = attributes[:'commission_basis']
      end

      if attributes.key?(:'commission_cycle')
        self.commission_cycle = attributes[:'commission_cycle']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'division_id')
        self.division_id = attributes[:'division_id']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'entry_date')
        self.entry_date = attributes[:'entry_date']
      end

      if attributes.key?(:'entry_user')
        self.entry_user = attributes[:'entry_user']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'issue_age_from')
        self.issue_age_from = attributes[:'issue_age_from']
      end

      if attributes.key?(:'issue_age_thru')
        self.issue_age_thru = attributes[:'issue_age_thru']
      end

      if attributes.key?(:'issue_state')
        self.issue_state = attributes[:'issue_state']
      end

      if attributes.key?(:'member_seq')
        self.member_seq = attributes[:'member_seq']
      end

      if attributes.key?(:'parent_commission_rate_key')
        self.parent_commission_rate_key = attributes[:'parent_commission_rate_key']
      end

      if attributes.key?(:'parent_rate_cluster')
        self.parent_rate_cluster = attributes[:'parent_rate_cluster']
      end

      if attributes.key?(:'payor_id')
        self.payor_id = attributes[:'payor_id']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'pre_payment_adjustment_reason')
        self.pre_payment_adjustment_reason = attributes[:'pre_payment_adjustment_reason']
      end

      if attributes.key?(:'pre_payment_rate')
        self.pre_payment_rate = attributes[:'pre_payment_rate']
      else
        self.pre_payment_rate = nil
      end

      if attributes.key?(:'pre_payment_type')
        self.pre_payment_type = attributes[:'pre_payment_type']
      end

      if attributes.key?(:'prem_rate_key')
        self.prem_rate_key = attributes[:'prem_rate_key']
      end

      if attributes.key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.key?(:'rate_max')
        self.rate_max = attributes[:'rate_max']
      end

      if attributes.key?(:'rate_min')
        self.rate_min = attributes[:'rate_min']
      end

      if attributes.key?(:'rate_round_precision')
        self.rate_round_precision = attributes[:'rate_round_precision']
      end

      if attributes.key?(:'rate_round_type')
        self.rate_round_type = attributes[:'rate_round_type']
      end

      if attributes.key?(:'rate_variable1')
        self.rate_variable1 = attributes[:'rate_variable1']
      end

      if attributes.key?(:'rate_variable2')
        self.rate_variable2 = attributes[:'rate_variable2']
      end

      if attributes.key?(:'rate_variable3')
        self.rate_variable3 = attributes[:'rate_variable3']
      end

      if attributes.key?(:'scale_exclude_header_adjustments')
        self.scale_exclude_header_adjustments = attributes[:'scale_exclude_header_adjustments']
      else
        self.scale_exclude_header_adjustments = nil
      end

      if attributes.key?(:'scale_from')
        self.scale_from = attributes[:'scale_from']
      end

      if attributes.key?(:'scale_thru')
        self.scale_thru = attributes[:'scale_thru']
      end

      if attributes.key?(:'scale_timeframe')
        self.scale_timeframe = attributes[:'scale_timeframe']
      end

      if attributes.key?(:'scale_type')
        self.scale_type = attributes[:'scale_type']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'term_range_date_type')
        self.term_range_date_type = attributes[:'term_range_date_type']
      end

      if attributes.key?(:'term_range_from')
        self.term_range_from = attributes[:'term_range_from']
      end

      if attributes.key?(:'term_range_thru')
        self.term_range_thru = attributes[:'term_range_thru']
      end

      if attributes.key?(:'term_range_type')
        self.term_range_type = attributes[:'term_range_type']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'update_user')
        self.update_user = attributes[:'update_user']
      end

      if attributes.key?(:'use_initial_premium')
        self.use_initial_premium = attributes[:'use_initial_premium']
      else
        self.use_initial_premium = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @commission_rate_key.nil?
        invalid_properties.push('invalid value for "commission_rate_key", commission_rate_key cannot be nil.')
      end

      if !@commission_rate_category.nil? && @commission_rate_category.to_s.length > 32
        invalid_properties.push('invalid value for "commission_rate_category", the character length must be smaller than or equal to 32.')
      end

      if !@commission_rate_id.nil? && @commission_rate_id.to_s.length > 32
        invalid_properties.push('invalid value for "commission_rate_id", the character length must be smaller than or equal to 32.')
      end

      if !@commission_rate_type.nil? && @commission_rate_type.to_s.length > 16
        invalid_properties.push('invalid value for "commission_rate_type", the character length must be smaller than or equal to 16.')
      end

      if !@commission_basis.nil? && @commission_basis.to_s.length > 8
        invalid_properties.push('invalid value for "commission_basis", the character length must be smaller than or equal to 8.')
      end

      if !@commission_cycle.nil? && @commission_cycle.to_s.length > 8
        invalid_properties.push('invalid value for "commission_cycle", the character length must be smaller than or equal to 8.')
      end

      if !@description.nil? && @description.to_s.length > 128
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 128.')
      end

      if !@division_id.nil? && @division_id.to_s.length > 20
        invalid_properties.push('invalid value for "division_id", the character length must be smaller than or equal to 20.')
      end

      if !@entry_user.nil? && @entry_user.to_s.length > 20
        invalid_properties.push('invalid value for "entry_user", the character length must be smaller than or equal to 20.')
      end

      if !@group_id.nil? && @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if !@issue_state.nil? && @issue_state.to_s.length > 2
        invalid_properties.push('invalid value for "issue_state", the character length must be smaller than or equal to 2.')
      end

      if !@member_seq.nil? && @member_seq.to_s.length > 2
        invalid_properties.push('invalid value for "member_seq", the character length must be smaller than or equal to 2.')
      end

      if !@parent_rate_cluster.nil? && @parent_rate_cluster.to_s.length > 32
        invalid_properties.push('invalid value for "parent_rate_cluster", the character length must be smaller than or equal to 32.')
      end

      if !@payor_id.nil? && @payor_id.to_s.length > 20
        invalid_properties.push('invalid value for "payor_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_id.nil? && @plan_id.to_s.length > 20
        invalid_properties.push('invalid value for "plan_id", the character length must be smaller than or equal to 20.')
      end

      if !@plan_type.nil? && @plan_type.to_s.length > 6
        invalid_properties.push('invalid value for "plan_type", the character length must be smaller than or equal to 6.')
      end

      if !@pre_payment_adjustment_reason.nil? && @pre_payment_adjustment_reason.to_s.length > 8
        invalid_properties.push('invalid value for "pre_payment_adjustment_reason", the character length must be smaller than or equal to 8.')
      end

      if @pre_payment_rate.nil?
        invalid_properties.push('invalid value for "pre_payment_rate", pre_payment_rate cannot be nil.')
      end

      if !@pre_payment_type.nil? && @pre_payment_type.to_s.length > 32
        invalid_properties.push('invalid value for "pre_payment_type", the character length must be smaller than or equal to 32.')
      end

      if !@rate_round_type.nil? && @rate_round_type.to_s.length > 16
        invalid_properties.push('invalid value for "rate_round_type", the character length must be smaller than or equal to 16.')
      end

      if @scale_exclude_header_adjustments.nil?
        invalid_properties.push('invalid value for "scale_exclude_header_adjustments", scale_exclude_header_adjustments cannot be nil.')
      end

      if !@scale_timeframe.nil? && @scale_timeframe.to_s.length > 16
        invalid_properties.push('invalid value for "scale_timeframe", the character length must be smaller than or equal to 16.')
      end

      if !@scale_type.nil? && @scale_type.to_s.length > 16
        invalid_properties.push('invalid value for "scale_type", the character length must be smaller than or equal to 16.')
      end

      if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
        invalid_properties.push('invalid value for "subscriber_id", the character length must be smaller than or equal to 9.')
      end

      if !@term_range_date_type.nil? && @term_range_date_type.to_s.length > 16
        invalid_properties.push('invalid value for "term_range_date_type", the character length must be smaller than or equal to 16.')
      end

      if !@term_range_type.nil? && @term_range_type.to_s.length > 1
        invalid_properties.push('invalid value for "term_range_type", the character length must be smaller than or equal to 1.')
      end

      if !@update_user.nil? && @update_user.to_s.length > 20
        invalid_properties.push('invalid value for "update_user", the character length must be smaller than or equal to 20.')
      end

      if @use_initial_premium.nil?
        invalid_properties.push('invalid value for "use_initial_premium", use_initial_premium cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @commission_rate_key.nil?
      return false if !@commission_rate_category.nil? && @commission_rate_category.to_s.length > 32
      return false if !@commission_rate_id.nil? && @commission_rate_id.to_s.length > 32
      return false if !@commission_rate_type.nil? && @commission_rate_type.to_s.length > 16
      return false if !@commission_basis.nil? && @commission_basis.to_s.length > 8
      return false if !@commission_cycle.nil? && @commission_cycle.to_s.length > 8
      return false if !@description.nil? && @description.to_s.length > 128
      return false if !@division_id.nil? && @division_id.to_s.length > 20
      return false if !@entry_user.nil? && @entry_user.to_s.length > 20
      return false if !@group_id.nil? && @group_id.to_s.length > 20
      return false if !@issue_state.nil? && @issue_state.to_s.length > 2
      return false if !@member_seq.nil? && @member_seq.to_s.length > 2
      return false if !@parent_rate_cluster.nil? && @parent_rate_cluster.to_s.length > 32
      return false if !@payor_id.nil? && @payor_id.to_s.length > 20
      return false if !@plan_id.nil? && @plan_id.to_s.length > 20
      return false if !@plan_type.nil? && @plan_type.to_s.length > 6
      return false if !@pre_payment_adjustment_reason.nil? && @pre_payment_adjustment_reason.to_s.length > 8
      return false if @pre_payment_rate.nil?
      return false if !@pre_payment_type.nil? && @pre_payment_type.to_s.length > 32
      return false if !@rate_round_type.nil? && @rate_round_type.to_s.length > 16
      return false if @scale_exclude_header_adjustments.nil?
      return false if !@scale_timeframe.nil? && @scale_timeframe.to_s.length > 16
      return false if !@scale_type.nil? && @scale_type.to_s.length > 16
      return false if !@subscriber_id.nil? && @subscriber_id.to_s.length > 9
      return false if !@term_range_date_type.nil? && @term_range_date_type.to_s.length > 16
      return false if !@term_range_type.nil? && @term_range_type.to_s.length > 1
      return false if !@update_user.nil? && @update_user.to_s.length > 20
      return false if @use_initial_premium.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_rate_key Value to be assigned
    def commission_rate_key=(commission_rate_key)
      if commission_rate_key.nil?
        fail ArgumentError, 'commission_rate_key cannot be nil'
      end

      @commission_rate_key = commission_rate_key
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_rate_category Value to be assigned
    def commission_rate_category=(commission_rate_category)
      if !commission_rate_category.nil? && commission_rate_category.to_s.length > 32
        fail ArgumentError, 'invalid value for "commission_rate_category", the character length must be smaller than or equal to 32.'
      end

      @commission_rate_category = commission_rate_category
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_rate_id Value to be assigned
    def commission_rate_id=(commission_rate_id)
      if !commission_rate_id.nil? && commission_rate_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "commission_rate_id", the character length must be smaller than or equal to 32.'
      end

      @commission_rate_id = commission_rate_id
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_rate_type Value to be assigned
    def commission_rate_type=(commission_rate_type)
      if !commission_rate_type.nil? && commission_rate_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "commission_rate_type", the character length must be smaller than or equal to 16.'
      end

      @commission_rate_type = commission_rate_type
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_basis Value to be assigned
    def commission_basis=(commission_basis)
      if !commission_basis.nil? && commission_basis.to_s.length > 8
        fail ArgumentError, 'invalid value for "commission_basis", the character length must be smaller than or equal to 8.'
      end

      @commission_basis = commission_basis
    end

    # Custom attribute writer method with validation
    # @param [Object] commission_cycle Value to be assigned
    def commission_cycle=(commission_cycle)
      if !commission_cycle.nil? && commission_cycle.to_s.length > 8
        fail ArgumentError, 'invalid value for "commission_cycle", the character length must be smaller than or equal to 8.'
      end

      @commission_cycle = commission_cycle
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 128
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 128.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] division_id Value to be assigned
    def division_id=(division_id)
      if !division_id.nil? && division_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "division_id", the character length must be smaller than or equal to 20.'
      end

      @division_id = division_id
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_user Value to be assigned
    def entry_user=(entry_user)
      if !entry_user.nil? && entry_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "entry_user", the character length must be smaller than or equal to 20.'
      end

      @entry_user = entry_user
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if !group_id.nil? && group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] issue_state Value to be assigned
    def issue_state=(issue_state)
      if !issue_state.nil? && issue_state.to_s.length > 2
        fail ArgumentError, 'invalid value for "issue_state", the character length must be smaller than or equal to 2.'
      end

      @issue_state = issue_state
    end

    # Custom attribute writer method with validation
    # @param [Object] member_seq Value to be assigned
    def member_seq=(member_seq)
      if !member_seq.nil? && member_seq.to_s.length > 2
        fail ArgumentError, 'invalid value for "member_seq", the character length must be smaller than or equal to 2.'
      end

      @member_seq = member_seq
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_rate_cluster Value to be assigned
    def parent_rate_cluster=(parent_rate_cluster)
      if !parent_rate_cluster.nil? && parent_rate_cluster.to_s.length > 32
        fail ArgumentError, 'invalid value for "parent_rate_cluster", the character length must be smaller than or equal to 32.'
      end

      @parent_rate_cluster = parent_rate_cluster
    end

    # Custom attribute writer method with validation
    # @param [Object] payor_id Value to be assigned
    def payor_id=(payor_id)
      if !payor_id.nil? && payor_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "payor_id", the character length must be smaller than or equal to 20.'
      end

      @payor_id = payor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_id Value to be assigned
    def plan_id=(plan_id)
      if !plan_id.nil? && plan_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "plan_id", the character length must be smaller than or equal to 20.'
      end

      @plan_id = plan_id
    end

    # Custom attribute writer method with validation
    # @param [Object] plan_type Value to be assigned
    def plan_type=(plan_type)
      if !plan_type.nil? && plan_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "plan_type", the character length must be smaller than or equal to 6.'
      end

      @plan_type = plan_type
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_payment_adjustment_reason Value to be assigned
    def pre_payment_adjustment_reason=(pre_payment_adjustment_reason)
      if !pre_payment_adjustment_reason.nil? && pre_payment_adjustment_reason.to_s.length > 8
        fail ArgumentError, 'invalid value for "pre_payment_adjustment_reason", the character length must be smaller than or equal to 8.'
      end

      @pre_payment_adjustment_reason = pre_payment_adjustment_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_payment_rate Value to be assigned
    def pre_payment_rate=(pre_payment_rate)
      if pre_payment_rate.nil?
        fail ArgumentError, 'pre_payment_rate cannot be nil'
      end

      @pre_payment_rate = pre_payment_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] pre_payment_type Value to be assigned
    def pre_payment_type=(pre_payment_type)
      if !pre_payment_type.nil? && pre_payment_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "pre_payment_type", the character length must be smaller than or equal to 32.'
      end

      @pre_payment_type = pre_payment_type
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_round_type Value to be assigned
    def rate_round_type=(rate_round_type)
      if !rate_round_type.nil? && rate_round_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "rate_round_type", the character length must be smaller than or equal to 16.'
      end

      @rate_round_type = rate_round_type
    end

    # Custom attribute writer method with validation
    # @param [Object] scale_exclude_header_adjustments Value to be assigned
    def scale_exclude_header_adjustments=(scale_exclude_header_adjustments)
      if scale_exclude_header_adjustments.nil?
        fail ArgumentError, 'scale_exclude_header_adjustments cannot be nil'
      end

      @scale_exclude_header_adjustments = scale_exclude_header_adjustments
    end

    # Custom attribute writer method with validation
    # @param [Object] scale_timeframe Value to be assigned
    def scale_timeframe=(scale_timeframe)
      if !scale_timeframe.nil? && scale_timeframe.to_s.length > 16
        fail ArgumentError, 'invalid value for "scale_timeframe", the character length must be smaller than or equal to 16.'
      end

      @scale_timeframe = scale_timeframe
    end

    # Custom attribute writer method with validation
    # @param [Object] scale_type Value to be assigned
    def scale_type=(scale_type)
      if !scale_type.nil? && scale_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "scale_type", the character length must be smaller than or equal to 16.'
      end

      @scale_type = scale_type
    end

    # Custom attribute writer method with validation
    # @param [Object] subscriber_id Value to be assigned
    def subscriber_id=(subscriber_id)
      if !subscriber_id.nil? && subscriber_id.to_s.length > 9
        fail ArgumentError, 'invalid value for "subscriber_id", the character length must be smaller than or equal to 9.'
      end

      @subscriber_id = subscriber_id
    end

    # Custom attribute writer method with validation
    # @param [Object] term_range_date_type Value to be assigned
    def term_range_date_type=(term_range_date_type)
      if !term_range_date_type.nil? && term_range_date_type.to_s.length > 16
        fail ArgumentError, 'invalid value for "term_range_date_type", the character length must be smaller than or equal to 16.'
      end

      @term_range_date_type = term_range_date_type
    end

    # Custom attribute writer method with validation
    # @param [Object] term_range_type Value to be assigned
    def term_range_type=(term_range_type)
      if !term_range_type.nil? && term_range_type.to_s.length > 1
        fail ArgumentError, 'invalid value for "term_range_type", the character length must be smaller than or equal to 1.'
      end

      @term_range_type = term_range_type
    end

    # Custom attribute writer method with validation
    # @param [Object] update_user Value to be assigned
    def update_user=(update_user)
      if !update_user.nil? && update_user.to_s.length > 20
        fail ArgumentError, 'invalid value for "update_user", the character length must be smaller than or equal to 20.'
      end

      @update_user = update_user
    end

    # Custom attribute writer method with validation
    # @param [Object] use_initial_premium Value to be assigned
    def use_initial_premium=(use_initial_premium)
      if use_initial_premium.nil?
        fail ArgumentError, 'use_initial_premium cannot be nil'
      end

      @use_initial_premium = use_initial_premium
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          commission_rate_key == o.commission_rate_key &&
          account_key == o.account_key &&
          commission_rate_category == o.commission_rate_category &&
          commission_rate_id == o.commission_rate_id &&
          commission_rate_type == o.commission_rate_type &&
          commission_basis == o.commission_basis &&
          commission_cycle == o.commission_cycle &&
          description == o.description &&
          division_id == o.division_id &&
          effective_date == o.effective_date &&
          end_date == o.end_date &&
          entry_date == o.entry_date &&
          entry_user == o.entry_user &&
          group_id == o.group_id &&
          issue_age_from == o.issue_age_from &&
          issue_age_thru == o.issue_age_thru &&
          issue_state == o.issue_state &&
          member_seq == o.member_seq &&
          parent_commission_rate_key == o.parent_commission_rate_key &&
          parent_rate_cluster == o.parent_rate_cluster &&
          payor_id == o.payor_id &&
          plan_id == o.plan_id &&
          plan_type == o.plan_type &&
          pre_payment_adjustment_reason == o.pre_payment_adjustment_reason &&
          pre_payment_rate == o.pre_payment_rate &&
          pre_payment_type == o.pre_payment_type &&
          prem_rate_key == o.prem_rate_key &&
          rate == o.rate &&
          rate_max == o.rate_max &&
          rate_min == o.rate_min &&
          rate_round_precision == o.rate_round_precision &&
          rate_round_type == o.rate_round_type &&
          rate_variable1 == o.rate_variable1 &&
          rate_variable2 == o.rate_variable2 &&
          rate_variable3 == o.rate_variable3 &&
          scale_exclude_header_adjustments == o.scale_exclude_header_adjustments &&
          scale_from == o.scale_from &&
          scale_thru == o.scale_thru &&
          scale_timeframe == o.scale_timeframe &&
          scale_type == o.scale_type &&
          subscriber_id == o.subscriber_id &&
          term_range_date_type == o.term_range_date_type &&
          term_range_from == o.term_range_from &&
          term_range_thru == o.term_range_thru &&
          term_range_type == o.term_range_type &&
          update_date == o.update_date &&
          update_user == o.update_user &&
          use_initial_premium == o.use_initial_premium
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [commission_rate_key, account_key, commission_rate_category, commission_rate_id, commission_rate_type, commission_basis, commission_cycle, description, division_id, effective_date, end_date, entry_date, entry_user, group_id, issue_age_from, issue_age_thru, issue_state, member_seq, parent_commission_rate_key, parent_rate_cluster, payor_id, plan_id, plan_type, pre_payment_adjustment_reason, pre_payment_rate, pre_payment_type, prem_rate_key, rate, rate_max, rate_min, rate_round_precision, rate_round_type, rate_variable1, rate_variable2, rate_variable3, scale_exclude_header_adjustments, scale_from, scale_thru, scale_timeframe, scale_type, subscriber_id, term_range_date_type, term_range_from, term_range_thru, term_range_type, update_date, update_user, use_initial_premium].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
