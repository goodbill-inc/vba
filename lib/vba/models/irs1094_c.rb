=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Vba
  class IRS1094C
    # Unique ID for the Group
    attr_accessor :group_id

    # Year that is covered by the 1094-C reporting
    attr_accessor :tax_year

    # Code identifying an Aggregated Group Member
    attr_accessor :aggregated_group_member_cd

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :apr_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :apr_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :apr_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :apr_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :apr_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :aug_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :aug_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :aug_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :aug_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :aug_total_employee_cnt

    # Indicator for an Authoritative Transmittal
    attr_accessor :authoritative_transmittal_ind

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :dec_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :dec_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :dec_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :dec_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :dec_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :feb_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :feb_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :feb_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :feb_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :feb_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :jan_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :jan_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :jan_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :jan_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :jan_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :jul_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :jul_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :jul_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :jul_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :jul_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :jun_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :jun_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :jun_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :jun_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :jun_total_employee_cnt

    # Jurat Signature PIN
    attr_accessor :jurat_signature_pin

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :mar_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :mar_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :mar_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :mar_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :mar_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :may_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :may_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :may_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :may_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :may_total_employee_cnt

    # Indicator for the 98% Offer Method
    attr_accessor :ninety_eight_pct_offer_method_ind

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :nov_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :nov_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :nov_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :nov_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :nov_total_employee_cnt

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :oct_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :oct_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :oct_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :oct_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :oct_total_employee_cnt

    # Person Title Text
    attr_accessor :person_title_txt

    # Indicator for the Qulaifying Offer Method for Transmittal Relief
    attr_accessor :qlfy_offer_method_trnst_relief_ind

    # Indicator for the Qualifying Offer Method
    attr_accessor :qualifying_offer_method_ind

    # Indicator for Section 4980h Relief
    attr_accessor :section_4980_h_relief_ind

    # Applicable Large Employer full-time employee count for the specified month
    attr_accessor :sep_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the specified month
    attr_accessor :sep_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for the specified month
    attr_accessor :sep_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the specified month
    attr_accessor :sep_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the specified month
    attr_accessor :sep_total_employee_cnt

    # Date of the signature
    attr_accessor :signature_dt

    # Total count for Applicable Large Employer Member
    attr_accessor :total_form_1095_c_ale_member_cnt

    # Applicable Large Employer full-time employee count for the year
    attr_accessor :yearly_ale_member_fte_cnt

    # Indicator for ALE Section 4980h relief code for the year
    attr_accessor :yearly_ale_sect_4980_h_trnst_relief_cd

    # Flag indicating if the ALE member was an Aggregated ALE Group Member for any month of the year
    attr_accessor :yearly_aggregated_group_ind

    # Code indicating if the ALE Member offered minimum essential coverage for the year
    attr_accessor :yearly_min_essential_cvr_offr_cd

    # Total employee count (including full-time and non-full-time) for the year
    attr_accessor :yearly_total_employee_cnt

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'group_id' => :'group_ID',
        :'tax_year' => :'tax_Year',
        :'aggregated_group_member_cd' => :'aggregated_Group_Member_Cd',
        :'apr_ale_member_fte_cnt' => :'apr_ALE_Member_FTE_Cnt',
        :'apr_ale_sect_4980_h_trnst_relief_cd' => :'apr_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'apr_aggregated_group_ind' => :'apr_Aggregated_Group_Ind',
        :'apr_min_essential_cvr_offr_cd' => :'apr_Min_Essential_Cvr_Offr_Cd',
        :'apr_total_employee_cnt' => :'apr_Total_Employee_Cnt',
        :'aug_ale_member_fte_cnt' => :'aug_ALE_Member_FTE_Cnt',
        :'aug_ale_sect_4980_h_trnst_relief_cd' => :'aug_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'aug_aggregated_group_ind' => :'aug_Aggregated_Group_Ind',
        :'aug_min_essential_cvr_offr_cd' => :'aug_Min_Essential_Cvr_Offr_Cd',
        :'aug_total_employee_cnt' => :'aug_Total_Employee_Cnt',
        :'authoritative_transmittal_ind' => :'authoritative_Transmittal_Ind',
        :'dec_ale_member_fte_cnt' => :'dec_ALE_Member_FTE_Cnt',
        :'dec_ale_sect_4980_h_trnst_relief_cd' => :'dec_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'dec_aggregated_group_ind' => :'dec_Aggregated_Group_Ind',
        :'dec_min_essential_cvr_offr_cd' => :'dec_Min_Essential_Cvr_Offr_Cd',
        :'dec_total_employee_cnt' => :'dec_Total_Employee_Cnt',
        :'feb_ale_member_fte_cnt' => :'feb_ALE_Member_FTE_Cnt',
        :'feb_ale_sect_4980_h_trnst_relief_cd' => :'feb_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'feb_aggregated_group_ind' => :'feb_Aggregated_Group_Ind',
        :'feb_min_essential_cvr_offr_cd' => :'feb_Min_Essential_Cvr_Offr_Cd',
        :'feb_total_employee_cnt' => :'feb_Total_Employee_Cnt',
        :'jan_ale_member_fte_cnt' => :'jan_ALE_Member_FTE_Cnt',
        :'jan_ale_sect_4980_h_trnst_relief_cd' => :'jan_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'jan_aggregated_group_ind' => :'jan_Aggregated_Group_Ind',
        :'jan_min_essential_cvr_offr_cd' => :'jan_Min_Essential_Cvr_Offr_Cd',
        :'jan_total_employee_cnt' => :'jan_Total_Employee_Cnt',
        :'jul_ale_member_fte_cnt' => :'jul_ALE_Member_FTE_Cnt',
        :'jul_ale_sect_4980_h_trnst_relief_cd' => :'jul_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'jul_aggregated_group_ind' => :'jul_Aggregated_Group_Ind',
        :'jul_min_essential_cvr_offr_cd' => :'jul_Min_Essential_Cvr_Offr_Cd',
        :'jul_total_employee_cnt' => :'jul_Total_Employee_Cnt',
        :'jun_ale_member_fte_cnt' => :'jun_ALE_Member_FTE_Cnt',
        :'jun_ale_sect_4980_h_trnst_relief_cd' => :'jun_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'jun_aggregated_group_ind' => :'jun_Aggregated_Group_Ind',
        :'jun_min_essential_cvr_offr_cd' => :'jun_Min_Essential_Cvr_Offr_Cd',
        :'jun_total_employee_cnt' => :'jun_Total_Employee_Cnt',
        :'jurat_signature_pin' => :'jurat_Signature_PIN',
        :'mar_ale_member_fte_cnt' => :'mar_ALE_Member_FTE_Cnt',
        :'mar_ale_sect_4980_h_trnst_relief_cd' => :'mar_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'mar_aggregated_group_ind' => :'mar_Aggregated_Group_Ind',
        :'mar_min_essential_cvr_offr_cd' => :'mar_Min_Essential_Cvr_Offr_Cd',
        :'mar_total_employee_cnt' => :'mar_Total_Employee_Cnt',
        :'may_ale_member_fte_cnt' => :'may_ALE_Member_FTE_Cnt',
        :'may_ale_sect_4980_h_trnst_relief_cd' => :'may_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'may_aggregated_group_ind' => :'may_Aggregated_Group_Ind',
        :'may_min_essential_cvr_offr_cd' => :'may_Min_Essential_Cvr_Offr_Cd',
        :'may_total_employee_cnt' => :'may_Total_Employee_Cnt',
        :'ninety_eight_pct_offer_method_ind' => :'ninetyEight_Pct_Offer_Method_Ind',
        :'nov_ale_member_fte_cnt' => :'nov_ALE_Member_FTE_Cnt',
        :'nov_ale_sect_4980_h_trnst_relief_cd' => :'nov_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'nov_aggregated_group_ind' => :'nov_Aggregated_Group_Ind',
        :'nov_min_essential_cvr_offr_cd' => :'nov_Min_Essential_Cvr_Offr_Cd',
        :'nov_total_employee_cnt' => :'nov_Total_Employee_Cnt',
        :'oct_ale_member_fte_cnt' => :'oct_ALE_Member_FTE_Cnt',
        :'oct_ale_sect_4980_h_trnst_relief_cd' => :'oct_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'oct_aggregated_group_ind' => :'oct_Aggregated_Group_Ind',
        :'oct_min_essential_cvr_offr_cd' => :'oct_Min_Essential_Cvr_Offr_Cd',
        :'oct_total_employee_cnt' => :'oct_Total_Employee_Cnt',
        :'person_title_txt' => :'person_Title_Txt',
        :'qlfy_offer_method_trnst_relief_ind' => :'qlfy_Offer_Method_Trnst_Relief_Ind',
        :'qualifying_offer_method_ind' => :'qualifying_Offer_Method_Ind',
        :'section_4980_h_relief_ind' => :'section_4980H_Relief_Ind',
        :'sep_ale_member_fte_cnt' => :'sep_ALE_Member_FTE_Cnt',
        :'sep_ale_sect_4980_h_trnst_relief_cd' => :'sep_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'sep_aggregated_group_ind' => :'sep_Aggregated_Group_Ind',
        :'sep_min_essential_cvr_offr_cd' => :'sep_Min_Essential_Cvr_Offr_Cd',
        :'sep_total_employee_cnt' => :'sep_Total_Employee_Cnt',
        :'signature_dt' => :'signature_Dt',
        :'total_form_1095_c_ale_member_cnt' => :'total_Form_1095C_ALE_Member_Cnt',
        :'yearly_ale_member_fte_cnt' => :'yearly_ALE_Member_FTE_Cnt',
        :'yearly_ale_sect_4980_h_trnst_relief_cd' => :'yearly_ALE_Sect_4980H_Trnst_Relief_Cd',
        :'yearly_aggregated_group_ind' => :'yearly_Aggregated_Group_Ind',
        :'yearly_min_essential_cvr_offr_cd' => :'yearly_Min_Essential_Cvr_Offr_Cd',
        :'yearly_total_employee_cnt' => :'yearly_Total_Employee_Cnt'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'group_id' => :'String',
        :'tax_year' => :'String',
        :'aggregated_group_member_cd' => :'String',
        :'apr_ale_member_fte_cnt' => :'Integer',
        :'apr_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'apr_aggregated_group_ind' => :'String',
        :'apr_min_essential_cvr_offr_cd' => :'String',
        :'apr_total_employee_cnt' => :'Integer',
        :'aug_ale_member_fte_cnt' => :'Integer',
        :'aug_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'aug_aggregated_group_ind' => :'String',
        :'aug_min_essential_cvr_offr_cd' => :'String',
        :'aug_total_employee_cnt' => :'Integer',
        :'authoritative_transmittal_ind' => :'String',
        :'dec_ale_member_fte_cnt' => :'Integer',
        :'dec_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'dec_aggregated_group_ind' => :'String',
        :'dec_min_essential_cvr_offr_cd' => :'String',
        :'dec_total_employee_cnt' => :'Integer',
        :'feb_ale_member_fte_cnt' => :'Integer',
        :'feb_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'feb_aggregated_group_ind' => :'String',
        :'feb_min_essential_cvr_offr_cd' => :'String',
        :'feb_total_employee_cnt' => :'Integer',
        :'jan_ale_member_fte_cnt' => :'Integer',
        :'jan_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'jan_aggregated_group_ind' => :'String',
        :'jan_min_essential_cvr_offr_cd' => :'String',
        :'jan_total_employee_cnt' => :'Integer',
        :'jul_ale_member_fte_cnt' => :'Integer',
        :'jul_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'jul_aggregated_group_ind' => :'String',
        :'jul_min_essential_cvr_offr_cd' => :'String',
        :'jul_total_employee_cnt' => :'Integer',
        :'jun_ale_member_fte_cnt' => :'Integer',
        :'jun_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'jun_aggregated_group_ind' => :'String',
        :'jun_min_essential_cvr_offr_cd' => :'String',
        :'jun_total_employee_cnt' => :'Integer',
        :'jurat_signature_pin' => :'String',
        :'mar_ale_member_fte_cnt' => :'Integer',
        :'mar_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'mar_aggregated_group_ind' => :'String',
        :'mar_min_essential_cvr_offr_cd' => :'String',
        :'mar_total_employee_cnt' => :'Integer',
        :'may_ale_member_fte_cnt' => :'Integer',
        :'may_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'may_aggregated_group_ind' => :'String',
        :'may_min_essential_cvr_offr_cd' => :'String',
        :'may_total_employee_cnt' => :'Integer',
        :'ninety_eight_pct_offer_method_ind' => :'String',
        :'nov_ale_member_fte_cnt' => :'Integer',
        :'nov_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'nov_aggregated_group_ind' => :'String',
        :'nov_min_essential_cvr_offr_cd' => :'String',
        :'nov_total_employee_cnt' => :'Integer',
        :'oct_ale_member_fte_cnt' => :'Integer',
        :'oct_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'oct_aggregated_group_ind' => :'String',
        :'oct_min_essential_cvr_offr_cd' => :'String',
        :'oct_total_employee_cnt' => :'Integer',
        :'person_title_txt' => :'String',
        :'qlfy_offer_method_trnst_relief_ind' => :'String',
        :'qualifying_offer_method_ind' => :'String',
        :'section_4980_h_relief_ind' => :'String',
        :'sep_ale_member_fte_cnt' => :'Integer',
        :'sep_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'sep_aggregated_group_ind' => :'String',
        :'sep_min_essential_cvr_offr_cd' => :'String',
        :'sep_total_employee_cnt' => :'Integer',
        :'signature_dt' => :'Time',
        :'total_form_1095_c_ale_member_cnt' => :'Integer',
        :'yearly_ale_member_fte_cnt' => :'Integer',
        :'yearly_ale_sect_4980_h_trnst_relief_cd' => :'String',
        :'yearly_aggregated_group_ind' => :'String',
        :'yearly_min_essential_cvr_offr_cd' => :'String',
        :'yearly_total_employee_cnt' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'aggregated_group_member_cd',
        :'apr_ale_member_fte_cnt',
        :'apr_ale_sect_4980_h_trnst_relief_cd',
        :'apr_aggregated_group_ind',
        :'apr_min_essential_cvr_offr_cd',
        :'apr_total_employee_cnt',
        :'aug_ale_member_fte_cnt',
        :'aug_ale_sect_4980_h_trnst_relief_cd',
        :'aug_aggregated_group_ind',
        :'aug_min_essential_cvr_offr_cd',
        :'aug_total_employee_cnt',
        :'authoritative_transmittal_ind',
        :'dec_ale_member_fte_cnt',
        :'dec_ale_sect_4980_h_trnst_relief_cd',
        :'dec_aggregated_group_ind',
        :'dec_min_essential_cvr_offr_cd',
        :'dec_total_employee_cnt',
        :'feb_ale_member_fte_cnt',
        :'feb_ale_sect_4980_h_trnst_relief_cd',
        :'feb_aggregated_group_ind',
        :'feb_min_essential_cvr_offr_cd',
        :'feb_total_employee_cnt',
        :'jan_ale_member_fte_cnt',
        :'jan_ale_sect_4980_h_trnst_relief_cd',
        :'jan_aggregated_group_ind',
        :'jan_min_essential_cvr_offr_cd',
        :'jan_total_employee_cnt',
        :'jul_ale_member_fte_cnt',
        :'jul_ale_sect_4980_h_trnst_relief_cd',
        :'jul_aggregated_group_ind',
        :'jul_min_essential_cvr_offr_cd',
        :'jul_total_employee_cnt',
        :'jun_ale_member_fte_cnt',
        :'jun_ale_sect_4980_h_trnst_relief_cd',
        :'jun_aggregated_group_ind',
        :'jun_min_essential_cvr_offr_cd',
        :'jun_total_employee_cnt',
        :'jurat_signature_pin',
        :'mar_ale_member_fte_cnt',
        :'mar_ale_sect_4980_h_trnst_relief_cd',
        :'mar_aggregated_group_ind',
        :'mar_min_essential_cvr_offr_cd',
        :'mar_total_employee_cnt',
        :'may_ale_member_fte_cnt',
        :'may_ale_sect_4980_h_trnst_relief_cd',
        :'may_aggregated_group_ind',
        :'may_min_essential_cvr_offr_cd',
        :'may_total_employee_cnt',
        :'ninety_eight_pct_offer_method_ind',
        :'nov_ale_member_fte_cnt',
        :'nov_ale_sect_4980_h_trnst_relief_cd',
        :'nov_aggregated_group_ind',
        :'nov_min_essential_cvr_offr_cd',
        :'nov_total_employee_cnt',
        :'oct_ale_member_fte_cnt',
        :'oct_ale_sect_4980_h_trnst_relief_cd',
        :'oct_aggregated_group_ind',
        :'oct_min_essential_cvr_offr_cd',
        :'oct_total_employee_cnt',
        :'person_title_txt',
        :'qlfy_offer_method_trnst_relief_ind',
        :'qualifying_offer_method_ind',
        :'section_4980_h_relief_ind',
        :'sep_ale_member_fte_cnt',
        :'sep_ale_sect_4980_h_trnst_relief_cd',
        :'sep_aggregated_group_ind',
        :'sep_min_essential_cvr_offr_cd',
        :'sep_total_employee_cnt',
        :'signature_dt',
        :'total_form_1095_c_ale_member_cnt',
        :'yearly_ale_member_fte_cnt',
        :'yearly_ale_sect_4980_h_trnst_relief_cd',
        :'yearly_aggregated_group_ind',
        :'yearly_min_essential_cvr_offr_cd',
        :'yearly_total_employee_cnt'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vba::IRS1094C` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vba::IRS1094C`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'tax_year')
        self.tax_year = attributes[:'tax_year']
      else
        self.tax_year = nil
      end

      if attributes.key?(:'aggregated_group_member_cd')
        self.aggregated_group_member_cd = attributes[:'aggregated_group_member_cd']
      end

      if attributes.key?(:'apr_ale_member_fte_cnt')
        self.apr_ale_member_fte_cnt = attributes[:'apr_ale_member_fte_cnt']
      end

      if attributes.key?(:'apr_ale_sect_4980_h_trnst_relief_cd')
        self.apr_ale_sect_4980_h_trnst_relief_cd = attributes[:'apr_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'apr_aggregated_group_ind')
        self.apr_aggregated_group_ind = attributes[:'apr_aggregated_group_ind']
      end

      if attributes.key?(:'apr_min_essential_cvr_offr_cd')
        self.apr_min_essential_cvr_offr_cd = attributes[:'apr_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'apr_total_employee_cnt')
        self.apr_total_employee_cnt = attributes[:'apr_total_employee_cnt']
      end

      if attributes.key?(:'aug_ale_member_fte_cnt')
        self.aug_ale_member_fte_cnt = attributes[:'aug_ale_member_fte_cnt']
      end

      if attributes.key?(:'aug_ale_sect_4980_h_trnst_relief_cd')
        self.aug_ale_sect_4980_h_trnst_relief_cd = attributes[:'aug_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'aug_aggregated_group_ind')
        self.aug_aggregated_group_ind = attributes[:'aug_aggregated_group_ind']
      end

      if attributes.key?(:'aug_min_essential_cvr_offr_cd')
        self.aug_min_essential_cvr_offr_cd = attributes[:'aug_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'aug_total_employee_cnt')
        self.aug_total_employee_cnt = attributes[:'aug_total_employee_cnt']
      end

      if attributes.key?(:'authoritative_transmittal_ind')
        self.authoritative_transmittal_ind = attributes[:'authoritative_transmittal_ind']
      end

      if attributes.key?(:'dec_ale_member_fte_cnt')
        self.dec_ale_member_fte_cnt = attributes[:'dec_ale_member_fte_cnt']
      end

      if attributes.key?(:'dec_ale_sect_4980_h_trnst_relief_cd')
        self.dec_ale_sect_4980_h_trnst_relief_cd = attributes[:'dec_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'dec_aggregated_group_ind')
        self.dec_aggregated_group_ind = attributes[:'dec_aggregated_group_ind']
      end

      if attributes.key?(:'dec_min_essential_cvr_offr_cd')
        self.dec_min_essential_cvr_offr_cd = attributes[:'dec_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'dec_total_employee_cnt')
        self.dec_total_employee_cnt = attributes[:'dec_total_employee_cnt']
      end

      if attributes.key?(:'feb_ale_member_fte_cnt')
        self.feb_ale_member_fte_cnt = attributes[:'feb_ale_member_fte_cnt']
      end

      if attributes.key?(:'feb_ale_sect_4980_h_trnst_relief_cd')
        self.feb_ale_sect_4980_h_trnst_relief_cd = attributes[:'feb_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'feb_aggregated_group_ind')
        self.feb_aggregated_group_ind = attributes[:'feb_aggregated_group_ind']
      end

      if attributes.key?(:'feb_min_essential_cvr_offr_cd')
        self.feb_min_essential_cvr_offr_cd = attributes[:'feb_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'feb_total_employee_cnt')
        self.feb_total_employee_cnt = attributes[:'feb_total_employee_cnt']
      end

      if attributes.key?(:'jan_ale_member_fte_cnt')
        self.jan_ale_member_fte_cnt = attributes[:'jan_ale_member_fte_cnt']
      end

      if attributes.key?(:'jan_ale_sect_4980_h_trnst_relief_cd')
        self.jan_ale_sect_4980_h_trnst_relief_cd = attributes[:'jan_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'jan_aggregated_group_ind')
        self.jan_aggregated_group_ind = attributes[:'jan_aggregated_group_ind']
      end

      if attributes.key?(:'jan_min_essential_cvr_offr_cd')
        self.jan_min_essential_cvr_offr_cd = attributes[:'jan_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'jan_total_employee_cnt')
        self.jan_total_employee_cnt = attributes[:'jan_total_employee_cnt']
      end

      if attributes.key?(:'jul_ale_member_fte_cnt')
        self.jul_ale_member_fte_cnt = attributes[:'jul_ale_member_fte_cnt']
      end

      if attributes.key?(:'jul_ale_sect_4980_h_trnst_relief_cd')
        self.jul_ale_sect_4980_h_trnst_relief_cd = attributes[:'jul_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'jul_aggregated_group_ind')
        self.jul_aggregated_group_ind = attributes[:'jul_aggregated_group_ind']
      end

      if attributes.key?(:'jul_min_essential_cvr_offr_cd')
        self.jul_min_essential_cvr_offr_cd = attributes[:'jul_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'jul_total_employee_cnt')
        self.jul_total_employee_cnt = attributes[:'jul_total_employee_cnt']
      end

      if attributes.key?(:'jun_ale_member_fte_cnt')
        self.jun_ale_member_fte_cnt = attributes[:'jun_ale_member_fte_cnt']
      end

      if attributes.key?(:'jun_ale_sect_4980_h_trnst_relief_cd')
        self.jun_ale_sect_4980_h_trnst_relief_cd = attributes[:'jun_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'jun_aggregated_group_ind')
        self.jun_aggregated_group_ind = attributes[:'jun_aggregated_group_ind']
      end

      if attributes.key?(:'jun_min_essential_cvr_offr_cd')
        self.jun_min_essential_cvr_offr_cd = attributes[:'jun_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'jun_total_employee_cnt')
        self.jun_total_employee_cnt = attributes[:'jun_total_employee_cnt']
      end

      if attributes.key?(:'jurat_signature_pin')
        self.jurat_signature_pin = attributes[:'jurat_signature_pin']
      end

      if attributes.key?(:'mar_ale_member_fte_cnt')
        self.mar_ale_member_fte_cnt = attributes[:'mar_ale_member_fte_cnt']
      end

      if attributes.key?(:'mar_ale_sect_4980_h_trnst_relief_cd')
        self.mar_ale_sect_4980_h_trnst_relief_cd = attributes[:'mar_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'mar_aggregated_group_ind')
        self.mar_aggregated_group_ind = attributes[:'mar_aggregated_group_ind']
      end

      if attributes.key?(:'mar_min_essential_cvr_offr_cd')
        self.mar_min_essential_cvr_offr_cd = attributes[:'mar_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'mar_total_employee_cnt')
        self.mar_total_employee_cnt = attributes[:'mar_total_employee_cnt']
      end

      if attributes.key?(:'may_ale_member_fte_cnt')
        self.may_ale_member_fte_cnt = attributes[:'may_ale_member_fte_cnt']
      end

      if attributes.key?(:'may_ale_sect_4980_h_trnst_relief_cd')
        self.may_ale_sect_4980_h_trnst_relief_cd = attributes[:'may_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'may_aggregated_group_ind')
        self.may_aggregated_group_ind = attributes[:'may_aggregated_group_ind']
      end

      if attributes.key?(:'may_min_essential_cvr_offr_cd')
        self.may_min_essential_cvr_offr_cd = attributes[:'may_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'may_total_employee_cnt')
        self.may_total_employee_cnt = attributes[:'may_total_employee_cnt']
      end

      if attributes.key?(:'ninety_eight_pct_offer_method_ind')
        self.ninety_eight_pct_offer_method_ind = attributes[:'ninety_eight_pct_offer_method_ind']
      end

      if attributes.key?(:'nov_ale_member_fte_cnt')
        self.nov_ale_member_fte_cnt = attributes[:'nov_ale_member_fte_cnt']
      end

      if attributes.key?(:'nov_ale_sect_4980_h_trnst_relief_cd')
        self.nov_ale_sect_4980_h_trnst_relief_cd = attributes[:'nov_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'nov_aggregated_group_ind')
        self.nov_aggregated_group_ind = attributes[:'nov_aggregated_group_ind']
      end

      if attributes.key?(:'nov_min_essential_cvr_offr_cd')
        self.nov_min_essential_cvr_offr_cd = attributes[:'nov_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'nov_total_employee_cnt')
        self.nov_total_employee_cnt = attributes[:'nov_total_employee_cnt']
      end

      if attributes.key?(:'oct_ale_member_fte_cnt')
        self.oct_ale_member_fte_cnt = attributes[:'oct_ale_member_fte_cnt']
      end

      if attributes.key?(:'oct_ale_sect_4980_h_trnst_relief_cd')
        self.oct_ale_sect_4980_h_trnst_relief_cd = attributes[:'oct_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'oct_aggregated_group_ind')
        self.oct_aggregated_group_ind = attributes[:'oct_aggregated_group_ind']
      end

      if attributes.key?(:'oct_min_essential_cvr_offr_cd')
        self.oct_min_essential_cvr_offr_cd = attributes[:'oct_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'oct_total_employee_cnt')
        self.oct_total_employee_cnt = attributes[:'oct_total_employee_cnt']
      end

      if attributes.key?(:'person_title_txt')
        self.person_title_txt = attributes[:'person_title_txt']
      end

      if attributes.key?(:'qlfy_offer_method_trnst_relief_ind')
        self.qlfy_offer_method_trnst_relief_ind = attributes[:'qlfy_offer_method_trnst_relief_ind']
      end

      if attributes.key?(:'qualifying_offer_method_ind')
        self.qualifying_offer_method_ind = attributes[:'qualifying_offer_method_ind']
      end

      if attributes.key?(:'section_4980_h_relief_ind')
        self.section_4980_h_relief_ind = attributes[:'section_4980_h_relief_ind']
      end

      if attributes.key?(:'sep_ale_member_fte_cnt')
        self.sep_ale_member_fte_cnt = attributes[:'sep_ale_member_fte_cnt']
      end

      if attributes.key?(:'sep_ale_sect_4980_h_trnst_relief_cd')
        self.sep_ale_sect_4980_h_trnst_relief_cd = attributes[:'sep_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'sep_aggregated_group_ind')
        self.sep_aggregated_group_ind = attributes[:'sep_aggregated_group_ind']
      end

      if attributes.key?(:'sep_min_essential_cvr_offr_cd')
        self.sep_min_essential_cvr_offr_cd = attributes[:'sep_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'sep_total_employee_cnt')
        self.sep_total_employee_cnt = attributes[:'sep_total_employee_cnt']
      end

      if attributes.key?(:'signature_dt')
        self.signature_dt = attributes[:'signature_dt']
      end

      if attributes.key?(:'total_form_1095_c_ale_member_cnt')
        self.total_form_1095_c_ale_member_cnt = attributes[:'total_form_1095_c_ale_member_cnt']
      end

      if attributes.key?(:'yearly_ale_member_fte_cnt')
        self.yearly_ale_member_fte_cnt = attributes[:'yearly_ale_member_fte_cnt']
      end

      if attributes.key?(:'yearly_ale_sect_4980_h_trnst_relief_cd')
        self.yearly_ale_sect_4980_h_trnst_relief_cd = attributes[:'yearly_ale_sect_4980_h_trnst_relief_cd']
      end

      if attributes.key?(:'yearly_aggregated_group_ind')
        self.yearly_aggregated_group_ind = attributes[:'yearly_aggregated_group_ind']
      end

      if attributes.key?(:'yearly_min_essential_cvr_offr_cd')
        self.yearly_min_essential_cvr_offr_cd = attributes[:'yearly_min_essential_cvr_offr_cd']
      end

      if attributes.key?(:'yearly_total_employee_cnt')
        self.yearly_total_employee_cnt = attributes[:'yearly_total_employee_cnt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_id.to_s.length > 20
        invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 20.')
      end

      if @group_id.to_s.length < 1
        invalid_properties.push('invalid value for "group_id", the character length must be great than or equal to 1.')
      end

      if @tax_year.nil?
        invalid_properties.push('invalid value for "tax_year", tax_year cannot be nil.')
      end

      if @tax_year.to_s.length > 4
        invalid_properties.push('invalid value for "tax_year", the character length must be smaller than or equal to 4.')
      end

      if @tax_year.to_s.length < 1
        invalid_properties.push('invalid value for "tax_year", the character length must be great than or equal to 1.')
      end

      if !@aggregated_group_member_cd.nil? && @aggregated_group_member_cd.to_s.length > 1
        invalid_properties.push('invalid value for "aggregated_group_member_cd", the character length must be smaller than or equal to 1.')
      end

      if !@apr_ale_sect_4980_h_trnst_relief_cd.nil? && @apr_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "apr_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@apr_aggregated_group_ind.nil? && @apr_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "apr_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@apr_min_essential_cvr_offr_cd.nil? && @apr_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "apr_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@aug_ale_sect_4980_h_trnst_relief_cd.nil? && @aug_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "aug_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@aug_aggregated_group_ind.nil? && @aug_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "aug_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@aug_min_essential_cvr_offr_cd.nil? && @aug_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "aug_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@authoritative_transmittal_ind.nil? && @authoritative_transmittal_ind.to_s.length > 1
        invalid_properties.push('invalid value for "authoritative_transmittal_ind", the character length must be smaller than or equal to 1.')
      end

      if !@dec_ale_sect_4980_h_trnst_relief_cd.nil? && @dec_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "dec_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@dec_aggregated_group_ind.nil? && @dec_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "dec_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@dec_min_essential_cvr_offr_cd.nil? && @dec_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "dec_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@feb_ale_sect_4980_h_trnst_relief_cd.nil? && @feb_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "feb_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@feb_aggregated_group_ind.nil? && @feb_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "feb_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@feb_min_essential_cvr_offr_cd.nil? && @feb_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "feb_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jan_ale_sect_4980_h_trnst_relief_cd.nil? && @jan_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "jan_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jan_aggregated_group_ind.nil? && @jan_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "jan_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@jan_min_essential_cvr_offr_cd.nil? && @jan_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "jan_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jul_ale_sect_4980_h_trnst_relief_cd.nil? && @jul_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "jul_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jul_aggregated_group_ind.nil? && @jul_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "jul_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@jul_min_essential_cvr_offr_cd.nil? && @jul_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "jul_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jun_ale_sect_4980_h_trnst_relief_cd.nil? && @jun_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "jun_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jun_aggregated_group_ind.nil? && @jun_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "jun_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@jun_min_essential_cvr_offr_cd.nil? && @jun_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "jun_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@jurat_signature_pin.nil? && @jurat_signature_pin.to_s.length > 20
        invalid_properties.push('invalid value for "jurat_signature_pin", the character length must be smaller than or equal to 20.')
      end

      if !@mar_ale_sect_4980_h_trnst_relief_cd.nil? && @mar_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "mar_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@mar_aggregated_group_ind.nil? && @mar_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "mar_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@mar_min_essential_cvr_offr_cd.nil? && @mar_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "mar_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@may_ale_sect_4980_h_trnst_relief_cd.nil? && @may_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "may_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@may_aggregated_group_ind.nil? && @may_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "may_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@may_min_essential_cvr_offr_cd.nil? && @may_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "may_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@ninety_eight_pct_offer_method_ind.nil? && @ninety_eight_pct_offer_method_ind.to_s.length > 1
        invalid_properties.push('invalid value for "ninety_eight_pct_offer_method_ind", the character length must be smaller than or equal to 1.')
      end

      if !@nov_ale_sect_4980_h_trnst_relief_cd.nil? && @nov_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "nov_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@nov_aggregated_group_ind.nil? && @nov_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "nov_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@nov_min_essential_cvr_offr_cd.nil? && @nov_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "nov_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@oct_ale_sect_4980_h_trnst_relief_cd.nil? && @oct_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "oct_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@oct_aggregated_group_ind.nil? && @oct_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "oct_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@oct_min_essential_cvr_offr_cd.nil? && @oct_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "oct_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@person_title_txt.nil? && @person_title_txt.to_s.length > 100
        invalid_properties.push('invalid value for "person_title_txt", the character length must be smaller than or equal to 100.')
      end

      if !@qlfy_offer_method_trnst_relief_ind.nil? && @qlfy_offer_method_trnst_relief_ind.to_s.length > 1
        invalid_properties.push('invalid value for "qlfy_offer_method_trnst_relief_ind", the character length must be smaller than or equal to 1.')
      end

      if !@qualifying_offer_method_ind.nil? && @qualifying_offer_method_ind.to_s.length > 1
        invalid_properties.push('invalid value for "qualifying_offer_method_ind", the character length must be smaller than or equal to 1.')
      end

      if !@section_4980_h_relief_ind.nil? && @section_4980_h_relief_ind.to_s.length > 1
        invalid_properties.push('invalid value for "section_4980_h_relief_ind", the character length must be smaller than or equal to 1.')
      end

      if !@sep_ale_sect_4980_h_trnst_relief_cd.nil? && @sep_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "sep_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@sep_aggregated_group_ind.nil? && @sep_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "sep_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@sep_min_essential_cvr_offr_cd.nil? && @sep_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "sep_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      if !@yearly_ale_sect_4980_h_trnst_relief_cd.nil? && @yearly_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        invalid_properties.push('invalid value for "yearly_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.')
      end

      if !@yearly_aggregated_group_ind.nil? && @yearly_aggregated_group_ind.to_s.length > 1
        invalid_properties.push('invalid value for "yearly_aggregated_group_ind", the character length must be smaller than or equal to 1.')
      end

      if !@yearly_min_essential_cvr_offr_cd.nil? && @yearly_min_essential_cvr_offr_cd.to_s.length > 1
        invalid_properties.push('invalid value for "yearly_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_id.nil?
      return false if @group_id.to_s.length > 20
      return false if @group_id.to_s.length < 1
      return false if @tax_year.nil?
      return false if @tax_year.to_s.length > 4
      return false if @tax_year.to_s.length < 1
      return false if !@aggregated_group_member_cd.nil? && @aggregated_group_member_cd.to_s.length > 1
      return false if !@apr_ale_sect_4980_h_trnst_relief_cd.nil? && @apr_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@apr_aggregated_group_ind.nil? && @apr_aggregated_group_ind.to_s.length > 1
      return false if !@apr_min_essential_cvr_offr_cd.nil? && @apr_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@aug_ale_sect_4980_h_trnst_relief_cd.nil? && @aug_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@aug_aggregated_group_ind.nil? && @aug_aggregated_group_ind.to_s.length > 1
      return false if !@aug_min_essential_cvr_offr_cd.nil? && @aug_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@authoritative_transmittal_ind.nil? && @authoritative_transmittal_ind.to_s.length > 1
      return false if !@dec_ale_sect_4980_h_trnst_relief_cd.nil? && @dec_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@dec_aggregated_group_ind.nil? && @dec_aggregated_group_ind.to_s.length > 1
      return false if !@dec_min_essential_cvr_offr_cd.nil? && @dec_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@feb_ale_sect_4980_h_trnst_relief_cd.nil? && @feb_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@feb_aggregated_group_ind.nil? && @feb_aggregated_group_ind.to_s.length > 1
      return false if !@feb_min_essential_cvr_offr_cd.nil? && @feb_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@jan_ale_sect_4980_h_trnst_relief_cd.nil? && @jan_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@jan_aggregated_group_ind.nil? && @jan_aggregated_group_ind.to_s.length > 1
      return false if !@jan_min_essential_cvr_offr_cd.nil? && @jan_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@jul_ale_sect_4980_h_trnst_relief_cd.nil? && @jul_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@jul_aggregated_group_ind.nil? && @jul_aggregated_group_ind.to_s.length > 1
      return false if !@jul_min_essential_cvr_offr_cd.nil? && @jul_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@jun_ale_sect_4980_h_trnst_relief_cd.nil? && @jun_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@jun_aggregated_group_ind.nil? && @jun_aggregated_group_ind.to_s.length > 1
      return false if !@jun_min_essential_cvr_offr_cd.nil? && @jun_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@jurat_signature_pin.nil? && @jurat_signature_pin.to_s.length > 20
      return false if !@mar_ale_sect_4980_h_trnst_relief_cd.nil? && @mar_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@mar_aggregated_group_ind.nil? && @mar_aggregated_group_ind.to_s.length > 1
      return false if !@mar_min_essential_cvr_offr_cd.nil? && @mar_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@may_ale_sect_4980_h_trnst_relief_cd.nil? && @may_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@may_aggregated_group_ind.nil? && @may_aggregated_group_ind.to_s.length > 1
      return false if !@may_min_essential_cvr_offr_cd.nil? && @may_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@ninety_eight_pct_offer_method_ind.nil? && @ninety_eight_pct_offer_method_ind.to_s.length > 1
      return false if !@nov_ale_sect_4980_h_trnst_relief_cd.nil? && @nov_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@nov_aggregated_group_ind.nil? && @nov_aggregated_group_ind.to_s.length > 1
      return false if !@nov_min_essential_cvr_offr_cd.nil? && @nov_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@oct_ale_sect_4980_h_trnst_relief_cd.nil? && @oct_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@oct_aggregated_group_ind.nil? && @oct_aggregated_group_ind.to_s.length > 1
      return false if !@oct_min_essential_cvr_offr_cd.nil? && @oct_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@person_title_txt.nil? && @person_title_txt.to_s.length > 100
      return false if !@qlfy_offer_method_trnst_relief_ind.nil? && @qlfy_offer_method_trnst_relief_ind.to_s.length > 1
      return false if !@qualifying_offer_method_ind.nil? && @qualifying_offer_method_ind.to_s.length > 1
      return false if !@section_4980_h_relief_ind.nil? && @section_4980_h_relief_ind.to_s.length > 1
      return false if !@sep_ale_sect_4980_h_trnst_relief_cd.nil? && @sep_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@sep_aggregated_group_ind.nil? && @sep_aggregated_group_ind.to_s.length > 1
      return false if !@sep_min_essential_cvr_offr_cd.nil? && @sep_min_essential_cvr_offr_cd.to_s.length > 1
      return false if !@yearly_ale_sect_4980_h_trnst_relief_cd.nil? && @yearly_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
      return false if !@yearly_aggregated_group_ind.nil? && @yearly_aggregated_group_ind.to_s.length > 1
      return false if !@yearly_min_essential_cvr_offr_cd.nil? && @yearly_min_essential_cvr_offr_cd.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_id Value to be assigned
    def group_id=(group_id)
      if group_id.nil?
        fail ArgumentError, 'group_id cannot be nil'
      end

      if group_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 20.'
      end

      if group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_id", the character length must be great than or equal to 1.'
      end

      @group_id = group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_year Value to be assigned
    def tax_year=(tax_year)
      if tax_year.nil?
        fail ArgumentError, 'tax_year cannot be nil'
      end

      if tax_year.to_s.length > 4
        fail ArgumentError, 'invalid value for "tax_year", the character length must be smaller than or equal to 4.'
      end

      if tax_year.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_year", the character length must be great than or equal to 1.'
      end

      @tax_year = tax_year
    end

    # Custom attribute writer method with validation
    # @param [Object] aggregated_group_member_cd Value to be assigned
    def aggregated_group_member_cd=(aggregated_group_member_cd)
      if !aggregated_group_member_cd.nil? && aggregated_group_member_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "aggregated_group_member_cd", the character length must be smaller than or equal to 1.'
      end

      @aggregated_group_member_cd = aggregated_group_member_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] apr_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def apr_ale_sect_4980_h_trnst_relief_cd=(apr_ale_sect_4980_h_trnst_relief_cd)
      if !apr_ale_sect_4980_h_trnst_relief_cd.nil? && apr_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "apr_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @apr_ale_sect_4980_h_trnst_relief_cd = apr_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] apr_aggregated_group_ind Value to be assigned
    def apr_aggregated_group_ind=(apr_aggregated_group_ind)
      if !apr_aggregated_group_ind.nil? && apr_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "apr_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @apr_aggregated_group_ind = apr_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] apr_min_essential_cvr_offr_cd Value to be assigned
    def apr_min_essential_cvr_offr_cd=(apr_min_essential_cvr_offr_cd)
      if !apr_min_essential_cvr_offr_cd.nil? && apr_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "apr_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @apr_min_essential_cvr_offr_cd = apr_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] aug_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def aug_ale_sect_4980_h_trnst_relief_cd=(aug_ale_sect_4980_h_trnst_relief_cd)
      if !aug_ale_sect_4980_h_trnst_relief_cd.nil? && aug_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "aug_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @aug_ale_sect_4980_h_trnst_relief_cd = aug_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] aug_aggregated_group_ind Value to be assigned
    def aug_aggregated_group_ind=(aug_aggregated_group_ind)
      if !aug_aggregated_group_ind.nil? && aug_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "aug_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @aug_aggregated_group_ind = aug_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] aug_min_essential_cvr_offr_cd Value to be assigned
    def aug_min_essential_cvr_offr_cd=(aug_min_essential_cvr_offr_cd)
      if !aug_min_essential_cvr_offr_cd.nil? && aug_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "aug_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @aug_min_essential_cvr_offr_cd = aug_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] authoritative_transmittal_ind Value to be assigned
    def authoritative_transmittal_ind=(authoritative_transmittal_ind)
      if !authoritative_transmittal_ind.nil? && authoritative_transmittal_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "authoritative_transmittal_ind", the character length must be smaller than or equal to 1.'
      end

      @authoritative_transmittal_ind = authoritative_transmittal_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] dec_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def dec_ale_sect_4980_h_trnst_relief_cd=(dec_ale_sect_4980_h_trnst_relief_cd)
      if !dec_ale_sect_4980_h_trnst_relief_cd.nil? && dec_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "dec_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @dec_ale_sect_4980_h_trnst_relief_cd = dec_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] dec_aggregated_group_ind Value to be assigned
    def dec_aggregated_group_ind=(dec_aggregated_group_ind)
      if !dec_aggregated_group_ind.nil? && dec_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "dec_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @dec_aggregated_group_ind = dec_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] dec_min_essential_cvr_offr_cd Value to be assigned
    def dec_min_essential_cvr_offr_cd=(dec_min_essential_cvr_offr_cd)
      if !dec_min_essential_cvr_offr_cd.nil? && dec_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "dec_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @dec_min_essential_cvr_offr_cd = dec_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] feb_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def feb_ale_sect_4980_h_trnst_relief_cd=(feb_ale_sect_4980_h_trnst_relief_cd)
      if !feb_ale_sect_4980_h_trnst_relief_cd.nil? && feb_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "feb_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @feb_ale_sect_4980_h_trnst_relief_cd = feb_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] feb_aggregated_group_ind Value to be assigned
    def feb_aggregated_group_ind=(feb_aggregated_group_ind)
      if !feb_aggregated_group_ind.nil? && feb_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "feb_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @feb_aggregated_group_ind = feb_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] feb_min_essential_cvr_offr_cd Value to be assigned
    def feb_min_essential_cvr_offr_cd=(feb_min_essential_cvr_offr_cd)
      if !feb_min_essential_cvr_offr_cd.nil? && feb_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "feb_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @feb_min_essential_cvr_offr_cd = feb_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jan_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def jan_ale_sect_4980_h_trnst_relief_cd=(jan_ale_sect_4980_h_trnst_relief_cd)
      if !jan_ale_sect_4980_h_trnst_relief_cd.nil? && jan_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "jan_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @jan_ale_sect_4980_h_trnst_relief_cd = jan_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jan_aggregated_group_ind Value to be assigned
    def jan_aggregated_group_ind=(jan_aggregated_group_ind)
      if !jan_aggregated_group_ind.nil? && jan_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "jan_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @jan_aggregated_group_ind = jan_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] jan_min_essential_cvr_offr_cd Value to be assigned
    def jan_min_essential_cvr_offr_cd=(jan_min_essential_cvr_offr_cd)
      if !jan_min_essential_cvr_offr_cd.nil? && jan_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "jan_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @jan_min_essential_cvr_offr_cd = jan_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jul_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def jul_ale_sect_4980_h_trnst_relief_cd=(jul_ale_sect_4980_h_trnst_relief_cd)
      if !jul_ale_sect_4980_h_trnst_relief_cd.nil? && jul_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "jul_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @jul_ale_sect_4980_h_trnst_relief_cd = jul_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jul_aggregated_group_ind Value to be assigned
    def jul_aggregated_group_ind=(jul_aggregated_group_ind)
      if !jul_aggregated_group_ind.nil? && jul_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "jul_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @jul_aggregated_group_ind = jul_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] jul_min_essential_cvr_offr_cd Value to be assigned
    def jul_min_essential_cvr_offr_cd=(jul_min_essential_cvr_offr_cd)
      if !jul_min_essential_cvr_offr_cd.nil? && jul_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "jul_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @jul_min_essential_cvr_offr_cd = jul_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jun_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def jun_ale_sect_4980_h_trnst_relief_cd=(jun_ale_sect_4980_h_trnst_relief_cd)
      if !jun_ale_sect_4980_h_trnst_relief_cd.nil? && jun_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "jun_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @jun_ale_sect_4980_h_trnst_relief_cd = jun_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jun_aggregated_group_ind Value to be assigned
    def jun_aggregated_group_ind=(jun_aggregated_group_ind)
      if !jun_aggregated_group_ind.nil? && jun_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "jun_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @jun_aggregated_group_ind = jun_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] jun_min_essential_cvr_offr_cd Value to be assigned
    def jun_min_essential_cvr_offr_cd=(jun_min_essential_cvr_offr_cd)
      if !jun_min_essential_cvr_offr_cd.nil? && jun_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "jun_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @jun_min_essential_cvr_offr_cd = jun_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] jurat_signature_pin Value to be assigned
    def jurat_signature_pin=(jurat_signature_pin)
      if !jurat_signature_pin.nil? && jurat_signature_pin.to_s.length > 20
        fail ArgumentError, 'invalid value for "jurat_signature_pin", the character length must be smaller than or equal to 20.'
      end

      @jurat_signature_pin = jurat_signature_pin
    end

    # Custom attribute writer method with validation
    # @param [Object] mar_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def mar_ale_sect_4980_h_trnst_relief_cd=(mar_ale_sect_4980_h_trnst_relief_cd)
      if !mar_ale_sect_4980_h_trnst_relief_cd.nil? && mar_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "mar_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @mar_ale_sect_4980_h_trnst_relief_cd = mar_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] mar_aggregated_group_ind Value to be assigned
    def mar_aggregated_group_ind=(mar_aggregated_group_ind)
      if !mar_aggregated_group_ind.nil? && mar_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "mar_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @mar_aggregated_group_ind = mar_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] mar_min_essential_cvr_offr_cd Value to be assigned
    def mar_min_essential_cvr_offr_cd=(mar_min_essential_cvr_offr_cd)
      if !mar_min_essential_cvr_offr_cd.nil? && mar_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "mar_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @mar_min_essential_cvr_offr_cd = mar_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] may_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def may_ale_sect_4980_h_trnst_relief_cd=(may_ale_sect_4980_h_trnst_relief_cd)
      if !may_ale_sect_4980_h_trnst_relief_cd.nil? && may_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "may_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @may_ale_sect_4980_h_trnst_relief_cd = may_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] may_aggregated_group_ind Value to be assigned
    def may_aggregated_group_ind=(may_aggregated_group_ind)
      if !may_aggregated_group_ind.nil? && may_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "may_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @may_aggregated_group_ind = may_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] may_min_essential_cvr_offr_cd Value to be assigned
    def may_min_essential_cvr_offr_cd=(may_min_essential_cvr_offr_cd)
      if !may_min_essential_cvr_offr_cd.nil? && may_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "may_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @may_min_essential_cvr_offr_cd = may_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] ninety_eight_pct_offer_method_ind Value to be assigned
    def ninety_eight_pct_offer_method_ind=(ninety_eight_pct_offer_method_ind)
      if !ninety_eight_pct_offer_method_ind.nil? && ninety_eight_pct_offer_method_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "ninety_eight_pct_offer_method_ind", the character length must be smaller than or equal to 1.'
      end

      @ninety_eight_pct_offer_method_ind = ninety_eight_pct_offer_method_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] nov_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def nov_ale_sect_4980_h_trnst_relief_cd=(nov_ale_sect_4980_h_trnst_relief_cd)
      if !nov_ale_sect_4980_h_trnst_relief_cd.nil? && nov_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "nov_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @nov_ale_sect_4980_h_trnst_relief_cd = nov_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] nov_aggregated_group_ind Value to be assigned
    def nov_aggregated_group_ind=(nov_aggregated_group_ind)
      if !nov_aggregated_group_ind.nil? && nov_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "nov_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @nov_aggregated_group_ind = nov_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] nov_min_essential_cvr_offr_cd Value to be assigned
    def nov_min_essential_cvr_offr_cd=(nov_min_essential_cvr_offr_cd)
      if !nov_min_essential_cvr_offr_cd.nil? && nov_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "nov_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @nov_min_essential_cvr_offr_cd = nov_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] oct_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def oct_ale_sect_4980_h_trnst_relief_cd=(oct_ale_sect_4980_h_trnst_relief_cd)
      if !oct_ale_sect_4980_h_trnst_relief_cd.nil? && oct_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "oct_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @oct_ale_sect_4980_h_trnst_relief_cd = oct_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] oct_aggregated_group_ind Value to be assigned
    def oct_aggregated_group_ind=(oct_aggregated_group_ind)
      if !oct_aggregated_group_ind.nil? && oct_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "oct_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @oct_aggregated_group_ind = oct_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] oct_min_essential_cvr_offr_cd Value to be assigned
    def oct_min_essential_cvr_offr_cd=(oct_min_essential_cvr_offr_cd)
      if !oct_min_essential_cvr_offr_cd.nil? && oct_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "oct_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @oct_min_essential_cvr_offr_cd = oct_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] person_title_txt Value to be assigned
    def person_title_txt=(person_title_txt)
      if !person_title_txt.nil? && person_title_txt.to_s.length > 100
        fail ArgumentError, 'invalid value for "person_title_txt", the character length must be smaller than or equal to 100.'
      end

      @person_title_txt = person_title_txt
    end

    # Custom attribute writer method with validation
    # @param [Object] qlfy_offer_method_trnst_relief_ind Value to be assigned
    def qlfy_offer_method_trnst_relief_ind=(qlfy_offer_method_trnst_relief_ind)
      if !qlfy_offer_method_trnst_relief_ind.nil? && qlfy_offer_method_trnst_relief_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "qlfy_offer_method_trnst_relief_ind", the character length must be smaller than or equal to 1.'
      end

      @qlfy_offer_method_trnst_relief_ind = qlfy_offer_method_trnst_relief_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] qualifying_offer_method_ind Value to be assigned
    def qualifying_offer_method_ind=(qualifying_offer_method_ind)
      if !qualifying_offer_method_ind.nil? && qualifying_offer_method_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "qualifying_offer_method_ind", the character length must be smaller than or equal to 1.'
      end

      @qualifying_offer_method_ind = qualifying_offer_method_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] section_4980_h_relief_ind Value to be assigned
    def section_4980_h_relief_ind=(section_4980_h_relief_ind)
      if !section_4980_h_relief_ind.nil? && section_4980_h_relief_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "section_4980_h_relief_ind", the character length must be smaller than or equal to 1.'
      end

      @section_4980_h_relief_ind = section_4980_h_relief_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] sep_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def sep_ale_sect_4980_h_trnst_relief_cd=(sep_ale_sect_4980_h_trnst_relief_cd)
      if !sep_ale_sect_4980_h_trnst_relief_cd.nil? && sep_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "sep_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @sep_ale_sect_4980_h_trnst_relief_cd = sep_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] sep_aggregated_group_ind Value to be assigned
    def sep_aggregated_group_ind=(sep_aggregated_group_ind)
      if !sep_aggregated_group_ind.nil? && sep_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "sep_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @sep_aggregated_group_ind = sep_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] sep_min_essential_cvr_offr_cd Value to be assigned
    def sep_min_essential_cvr_offr_cd=(sep_min_essential_cvr_offr_cd)
      if !sep_min_essential_cvr_offr_cd.nil? && sep_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "sep_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @sep_min_essential_cvr_offr_cd = sep_min_essential_cvr_offr_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] yearly_ale_sect_4980_h_trnst_relief_cd Value to be assigned
    def yearly_ale_sect_4980_h_trnst_relief_cd=(yearly_ale_sect_4980_h_trnst_relief_cd)
      if !yearly_ale_sect_4980_h_trnst_relief_cd.nil? && yearly_ale_sect_4980_h_trnst_relief_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "yearly_ale_sect_4980_h_trnst_relief_cd", the character length must be smaller than or equal to 1.'
      end

      @yearly_ale_sect_4980_h_trnst_relief_cd = yearly_ale_sect_4980_h_trnst_relief_cd
    end

    # Custom attribute writer method with validation
    # @param [Object] yearly_aggregated_group_ind Value to be assigned
    def yearly_aggregated_group_ind=(yearly_aggregated_group_ind)
      if !yearly_aggregated_group_ind.nil? && yearly_aggregated_group_ind.to_s.length > 1
        fail ArgumentError, 'invalid value for "yearly_aggregated_group_ind", the character length must be smaller than or equal to 1.'
      end

      @yearly_aggregated_group_ind = yearly_aggregated_group_ind
    end

    # Custom attribute writer method with validation
    # @param [Object] yearly_min_essential_cvr_offr_cd Value to be assigned
    def yearly_min_essential_cvr_offr_cd=(yearly_min_essential_cvr_offr_cd)
      if !yearly_min_essential_cvr_offr_cd.nil? && yearly_min_essential_cvr_offr_cd.to_s.length > 1
        fail ArgumentError, 'invalid value for "yearly_min_essential_cvr_offr_cd", the character length must be smaller than or equal to 1.'
      end

      @yearly_min_essential_cvr_offr_cd = yearly_min_essential_cvr_offr_cd
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          group_id == o.group_id &&
          tax_year == o.tax_year &&
          aggregated_group_member_cd == o.aggregated_group_member_cd &&
          apr_ale_member_fte_cnt == o.apr_ale_member_fte_cnt &&
          apr_ale_sect_4980_h_trnst_relief_cd == o.apr_ale_sect_4980_h_trnst_relief_cd &&
          apr_aggregated_group_ind == o.apr_aggregated_group_ind &&
          apr_min_essential_cvr_offr_cd == o.apr_min_essential_cvr_offr_cd &&
          apr_total_employee_cnt == o.apr_total_employee_cnt &&
          aug_ale_member_fte_cnt == o.aug_ale_member_fte_cnt &&
          aug_ale_sect_4980_h_trnst_relief_cd == o.aug_ale_sect_4980_h_trnst_relief_cd &&
          aug_aggregated_group_ind == o.aug_aggregated_group_ind &&
          aug_min_essential_cvr_offr_cd == o.aug_min_essential_cvr_offr_cd &&
          aug_total_employee_cnt == o.aug_total_employee_cnt &&
          authoritative_transmittal_ind == o.authoritative_transmittal_ind &&
          dec_ale_member_fte_cnt == o.dec_ale_member_fte_cnt &&
          dec_ale_sect_4980_h_trnst_relief_cd == o.dec_ale_sect_4980_h_trnst_relief_cd &&
          dec_aggregated_group_ind == o.dec_aggregated_group_ind &&
          dec_min_essential_cvr_offr_cd == o.dec_min_essential_cvr_offr_cd &&
          dec_total_employee_cnt == o.dec_total_employee_cnt &&
          feb_ale_member_fte_cnt == o.feb_ale_member_fte_cnt &&
          feb_ale_sect_4980_h_trnst_relief_cd == o.feb_ale_sect_4980_h_trnst_relief_cd &&
          feb_aggregated_group_ind == o.feb_aggregated_group_ind &&
          feb_min_essential_cvr_offr_cd == o.feb_min_essential_cvr_offr_cd &&
          feb_total_employee_cnt == o.feb_total_employee_cnt &&
          jan_ale_member_fte_cnt == o.jan_ale_member_fte_cnt &&
          jan_ale_sect_4980_h_trnst_relief_cd == o.jan_ale_sect_4980_h_trnst_relief_cd &&
          jan_aggregated_group_ind == o.jan_aggregated_group_ind &&
          jan_min_essential_cvr_offr_cd == o.jan_min_essential_cvr_offr_cd &&
          jan_total_employee_cnt == o.jan_total_employee_cnt &&
          jul_ale_member_fte_cnt == o.jul_ale_member_fte_cnt &&
          jul_ale_sect_4980_h_trnst_relief_cd == o.jul_ale_sect_4980_h_trnst_relief_cd &&
          jul_aggregated_group_ind == o.jul_aggregated_group_ind &&
          jul_min_essential_cvr_offr_cd == o.jul_min_essential_cvr_offr_cd &&
          jul_total_employee_cnt == o.jul_total_employee_cnt &&
          jun_ale_member_fte_cnt == o.jun_ale_member_fte_cnt &&
          jun_ale_sect_4980_h_trnst_relief_cd == o.jun_ale_sect_4980_h_trnst_relief_cd &&
          jun_aggregated_group_ind == o.jun_aggregated_group_ind &&
          jun_min_essential_cvr_offr_cd == o.jun_min_essential_cvr_offr_cd &&
          jun_total_employee_cnt == o.jun_total_employee_cnt &&
          jurat_signature_pin == o.jurat_signature_pin &&
          mar_ale_member_fte_cnt == o.mar_ale_member_fte_cnt &&
          mar_ale_sect_4980_h_trnst_relief_cd == o.mar_ale_sect_4980_h_trnst_relief_cd &&
          mar_aggregated_group_ind == o.mar_aggregated_group_ind &&
          mar_min_essential_cvr_offr_cd == o.mar_min_essential_cvr_offr_cd &&
          mar_total_employee_cnt == o.mar_total_employee_cnt &&
          may_ale_member_fte_cnt == o.may_ale_member_fte_cnt &&
          may_ale_sect_4980_h_trnst_relief_cd == o.may_ale_sect_4980_h_trnst_relief_cd &&
          may_aggregated_group_ind == o.may_aggregated_group_ind &&
          may_min_essential_cvr_offr_cd == o.may_min_essential_cvr_offr_cd &&
          may_total_employee_cnt == o.may_total_employee_cnt &&
          ninety_eight_pct_offer_method_ind == o.ninety_eight_pct_offer_method_ind &&
          nov_ale_member_fte_cnt == o.nov_ale_member_fte_cnt &&
          nov_ale_sect_4980_h_trnst_relief_cd == o.nov_ale_sect_4980_h_trnst_relief_cd &&
          nov_aggregated_group_ind == o.nov_aggregated_group_ind &&
          nov_min_essential_cvr_offr_cd == o.nov_min_essential_cvr_offr_cd &&
          nov_total_employee_cnt == o.nov_total_employee_cnt &&
          oct_ale_member_fte_cnt == o.oct_ale_member_fte_cnt &&
          oct_ale_sect_4980_h_trnst_relief_cd == o.oct_ale_sect_4980_h_trnst_relief_cd &&
          oct_aggregated_group_ind == o.oct_aggregated_group_ind &&
          oct_min_essential_cvr_offr_cd == o.oct_min_essential_cvr_offr_cd &&
          oct_total_employee_cnt == o.oct_total_employee_cnt &&
          person_title_txt == o.person_title_txt &&
          qlfy_offer_method_trnst_relief_ind == o.qlfy_offer_method_trnst_relief_ind &&
          qualifying_offer_method_ind == o.qualifying_offer_method_ind &&
          section_4980_h_relief_ind == o.section_4980_h_relief_ind &&
          sep_ale_member_fte_cnt == o.sep_ale_member_fte_cnt &&
          sep_ale_sect_4980_h_trnst_relief_cd == o.sep_ale_sect_4980_h_trnst_relief_cd &&
          sep_aggregated_group_ind == o.sep_aggregated_group_ind &&
          sep_min_essential_cvr_offr_cd == o.sep_min_essential_cvr_offr_cd &&
          sep_total_employee_cnt == o.sep_total_employee_cnt &&
          signature_dt == o.signature_dt &&
          total_form_1095_c_ale_member_cnt == o.total_form_1095_c_ale_member_cnt &&
          yearly_ale_member_fte_cnt == o.yearly_ale_member_fte_cnt &&
          yearly_ale_sect_4980_h_trnst_relief_cd == o.yearly_ale_sect_4980_h_trnst_relief_cd &&
          yearly_aggregated_group_ind == o.yearly_aggregated_group_ind &&
          yearly_min_essential_cvr_offr_cd == o.yearly_min_essential_cvr_offr_cd &&
          yearly_total_employee_cnt == o.yearly_total_employee_cnt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_id, tax_year, aggregated_group_member_cd, apr_ale_member_fte_cnt, apr_ale_sect_4980_h_trnst_relief_cd, apr_aggregated_group_ind, apr_min_essential_cvr_offr_cd, apr_total_employee_cnt, aug_ale_member_fte_cnt, aug_ale_sect_4980_h_trnst_relief_cd, aug_aggregated_group_ind, aug_min_essential_cvr_offr_cd, aug_total_employee_cnt, authoritative_transmittal_ind, dec_ale_member_fte_cnt, dec_ale_sect_4980_h_trnst_relief_cd, dec_aggregated_group_ind, dec_min_essential_cvr_offr_cd, dec_total_employee_cnt, feb_ale_member_fte_cnt, feb_ale_sect_4980_h_trnst_relief_cd, feb_aggregated_group_ind, feb_min_essential_cvr_offr_cd, feb_total_employee_cnt, jan_ale_member_fte_cnt, jan_ale_sect_4980_h_trnst_relief_cd, jan_aggregated_group_ind, jan_min_essential_cvr_offr_cd, jan_total_employee_cnt, jul_ale_member_fte_cnt, jul_ale_sect_4980_h_trnst_relief_cd, jul_aggregated_group_ind, jul_min_essential_cvr_offr_cd, jul_total_employee_cnt, jun_ale_member_fte_cnt, jun_ale_sect_4980_h_trnst_relief_cd, jun_aggregated_group_ind, jun_min_essential_cvr_offr_cd, jun_total_employee_cnt, jurat_signature_pin, mar_ale_member_fte_cnt, mar_ale_sect_4980_h_trnst_relief_cd, mar_aggregated_group_ind, mar_min_essential_cvr_offr_cd, mar_total_employee_cnt, may_ale_member_fte_cnt, may_ale_sect_4980_h_trnst_relief_cd, may_aggregated_group_ind, may_min_essential_cvr_offr_cd, may_total_employee_cnt, ninety_eight_pct_offer_method_ind, nov_ale_member_fte_cnt, nov_ale_sect_4980_h_trnst_relief_cd, nov_aggregated_group_ind, nov_min_essential_cvr_offr_cd, nov_total_employee_cnt, oct_ale_member_fte_cnt, oct_ale_sect_4980_h_trnst_relief_cd, oct_aggregated_group_ind, oct_min_essential_cvr_offr_cd, oct_total_employee_cnt, person_title_txt, qlfy_offer_method_trnst_relief_ind, qualifying_offer_method_ind, section_4980_h_relief_ind, sep_ale_member_fte_cnt, sep_ale_sect_4980_h_trnst_relief_cd, sep_aggregated_group_ind, sep_min_essential_cvr_offr_cd, sep_total_employee_cnt, signature_dt, total_form_1095_c_ale_member_cnt, yearly_ale_member_fte_cnt, yearly_ale_sect_4980_h_trnst_relief_cd, yearly_aggregated_group_ind, yearly_min_essential_cvr_offr_cd, yearly_total_employee_cnt].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Vba.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
