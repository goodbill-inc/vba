=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::CommissionRatesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CommissionRatesApi' do
  before do
    # run before each test
    @api_instance = Vba::CommissionRatesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CommissionRatesApi' do
    it 'should create an instance of CommissionRatesApi' do
      expect(@api_instance).to be_instance_of(Vba::CommissionRatesApi)
    end
  end

  # unit tests for copy_rate
  # Copies CommissionRate from Rate
  # Creates a new CommissionRate from a given CommissionRate.
  # @param vbasoftware_database Target database
  # @param comm_rate_key CommissionRate Key
  # @param [Hash] opts the optional parameters
  # @return [CommissionRateVBAResponse]
  describe 'copy_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_commission_rate
  # Create CommissionRate
  # Creates a new CommissionRate
  # @param vbasoftware_database Target database
  # @param commission_rate 
  # @param [Hash] opts the optional parameters
  # @return [CommissionRateVBAResponse]
  describe 'create_commission_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_commission_rate_from_cluster
  # Create CommissionRate from Rate Cluster
  # Creates a new CommissionRate records from a cluster of templated rates.
  # @param vbasoftware_database Target database
  # @param comm_rate_cluster Rate Cluster
  # @param group_id Group ID
  # @param [Hash] opts the optional parameters
  # @return [CommissionRateVBAResponse]
  describe 'create_commission_rate_from_cluster test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_commission_rate_from_template
  # Create CommissionRate from Template
  # Creates a new CommissionRate from a template CommissionRate.
  # @param vbasoftware_database Target database
  # @param comm_rate_key CommissionRate Key
  # @param group_id Group ID
  # @param [Hash] opts the optional parameters
  # @return [CommissionRateVBAResponse]
  describe 'create_commission_rate_from_template test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_commission_rate
  # Delete CommissionRate
  # Deletes an CommissionRate
  # @param vbasoftware_database Target database
  # @param comm_rate_key CommissionRate Key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_commission_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_commission_rate
  # Get CommissionRate
  # Gets CommissionRate
  # @param vbasoftware_database Target database
  # @param comm_rate_key CommissionRate Key
  # @param [Hash] opts the optional parameters
  # @return [CommissionRateVBAResponse]
  describe 'get_commission_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_commission_rate
  # List CommissionRate
  # Lists all CommissionRate
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page
  # @option opts [Integer] :page_size Page Size
  # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
  # @return [CommissionRateListVBAResponse]
  describe 'list_commission_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_commission_rate_nested
  # List Commission Rates nested by Division/Plan
  # Lists all Commission Rates for the given groupID and have it nested by Division, then by Plan.
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @option opts [String] :group_id Group ID
  # @return [CommissionRateNestedListVBAResponse]
  describe 'list_commission_rate_nested test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_commission_rate
  # Create or Update Batch CommissionRate
  # Create or Update multiple CommissionRate at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param commission_rate 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_commission_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_commission_rate
  # Update CommissionRate
  # Updates a specific CommissionRate.
  # @param vbasoftware_database Target database
  # @param comm_rate_key CommissionRate Key
  # @param commission_rate 
  # @param [Hash] opts the optional parameters
  # @return [CommissionRateVBAResponse]
  describe 'update_commission_rate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
