=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::UserGroupMappingsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UserGroupMappingsApi' do
  before do
    # run before each test
    @api_instance = Vba::UserGroupMappingsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserGroupMappingsApi' do
    it 'should create an instance of UserGroupMappingsApi' do
      expect(@api_instance).to be_instance_of(Vba::UserGroupMappingsApi)
    end
  end

  # unit tests for create_user_group_mapping
  # Create UserGroupMapping
  # Creates a new UserGroupMapping
  # @param vbasoftware_database Target database
  # @param user_group_key UserGroup Key
  # @param user_id User ID
  # @param [Hash] opts the optional parameters
  # @return [UserGroupMappingVBAResponse]
  describe 'create_user_group_mapping test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_user_group_mapping
  # Delete UserGroupMapping
  # Deletes an UserGroupMapping
  # @param vbasoftware_database Target database
  # @param user_group_key UserGroup Key
  # @param user_id User ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_user_group_mapping test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_user_group_mapping
  # Get UserGroupMapping
  # Gets UserGroupMapping
  # @param vbasoftware_database Target database
  # @param user_group_key UserGroup Key
  # @param user_id User ID
  # @param [Hash] opts the optional parameters
  # @return [UserGroupMappingVBAResponse]
  describe 'get_user_group_mapping test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_user_group_mapping
  # List UserGroupMapping
  # Lists all UserGroupMapping for a specific userGroupKey
  # @param vbasoftware_database Target database
  # @param user_group_key UserGroup Key
  # @param [Hash] opts the optional parameters
  # @return [UserGroupMappingListVBAResponse]
  describe 'list_user_group_mapping test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_user_group_mapping_filtered
  # List UserGroupMapping
  # Lists all UserGroupMappings with optional filter for User_ID
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_id User_ID
  # @return [UserGroupMappingListVBAResponse]
  describe 'list_user_group_mapping_filtered test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_user_group_mapping
  # Create multiple UserGroupMappings
  # Create multiple UserGroupMapping at once.  If the entity already exists, an error will be returned for that item. If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param user_group_key UserGroup Key
  # @param user_group_mapping 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_user_group_mapping test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
