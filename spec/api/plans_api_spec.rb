=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::PlansApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PlansApi' do
  before do
    # run before each test
    @api_instance = Vba::PlansApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlansApi' do
    it 'should create an instance of PlansApi' do
      expect(@api_instance).to be_instance_of(Vba::PlansApi)
    end
  end

  # unit tests for copy_plan
  # Copy Plan
  # Copies an existing plan.  This copy can be to a completely new Plan ID, or to overwrite an existing Plan ID.
  # @param vbasoftware_database Target database
  # @param plan_copy 
  # @param [Hash] opts the optional parameters
  # @return [PlansVBAResponse]
  describe 'copy_plan test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_plans
  # Create Plan
  # Creates a new Plan
  # @param vbasoftware_database Target database
  # @param plans 
  # @param [Hash] opts the optional parameters
  # @return [PlansVBAResponse]
  describe 'create_plans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_plans
  # Delete Plans
  # Deletes an Plans
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_plans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_plans
  # Get Plan
  # Gets a specific Plan
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param [Hash] opts the optional parameters
  # @return [PlansVBAResponse]
  describe 'get_plans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_plans
  # List Plans
  # Lists all Plans with option to filter by Plan Type.
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @option opts [String] :plan_type Plan Type
  # @return [PlansListVBAResponse]
  describe 'list_plans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_plans
  # Create or Update Batch Plans
  # Create or Update multiple Plans at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param plans 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_plans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_plans
  # Update Plans
  # Updates a specific Plans.
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param plans 
  # @param [Hash] opts the optional parameters
  # @return [PlansVBAResponse]
  describe 'update_plans test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
