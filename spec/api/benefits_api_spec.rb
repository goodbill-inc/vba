=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::BenefitsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BenefitsApi' do
  before do
    # run before each test
    @api_instance = Vba::BenefitsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BenefitsApi' do
    it 'should create an instance of BenefitsApi' do
      expect(@api_instance).to be_instance_of(Vba::BenefitsApi)
    end
  end

  # unit tests for create_benefit
  # Create Benefit
  # Creates a new Benefit
  # @param vbasoftware_database Target database
  # @param benefit_codes 
  # @param [Hash] opts the optional parameters
  # @return [BenefitCodesVBAResponse]
  describe 'create_benefit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_benefit_codes
  # Delete a Benefit
  # Deletes a specific Benefit by Benefit Code
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_benefit_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_benefit
  # Get a Benefit
  # Gets a specific Benefit by Benefit Code
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param [Hash] opts the optional parameters
  # @return [BenefitCodesVBAResponse]
  describe 'get_benefit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_levels
  # List Benefit Levels
  # List of all Benefit Levels with Key, Display and Description
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_levels test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_plan_dental_designation_types
  # List Benefit Plan Dental Designation Types
  # List of all Benefit Plan Dental Designation Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_plan_dental_designation_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_plan_maximum_coverage_types
  # List Benefit Plan Maximum Scope Types
  # List of all Benefit Plan Maximum Coverage Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_plan_maximum_coverage_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_plan_maximum_network_types
  # List Benefit Plan Maximum Network Types
  # List of all Benefit Plan Maximum Network Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_plan_maximum_network_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_plan_maximum_per_types
  # List Benefit Plan Maximum Per Types
  # List of all Benefit Plan Maximum Per Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_plan_maximum_per_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_plan_maximum_types
  # List Benefit Plan Maximum Types
  # List of all Benefit Plan Maximum Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_plan_maximum_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_plan_riders
  # List Benefit Riders
  # Lists all Benefits that are Riders on a specific Plan
  # @param vbasoftware_database Target database
  # @param plan_id PlanId
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page
  # @option opts [Integer] :page_size Page Size
  # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
  # @return [BenefitCodesListVBAResponse]
  describe 'list_benefit_plan_riders test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_rate_max_types
  # List Benefit Rate Max Types
  # List all Benefit Rate Max Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_rate_max_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_rate_types
  # List Benefit Rate Types
  # List all Benefit Rate Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_benefit_rate_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefits
  # List Benefits
  # Lists all Benefits with optional Benefit Category
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page
  # @option opts [Integer] :page_size Page Size
  # @option opts [String] :benefit_category Filter
  # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
  # @return [BenefitCodesListVBAResponse]
  describe 'list_benefits test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_out_of_pocket_calculations
  # List Out of Pocket (OOP) Calculations
  # List all Out of Pocket (OOP) Calculation key/value pairings.
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_out_of_pocket_calculations test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_out_of_pocket_types
  # List Out of Pocket (OOP) Types
  # List all Out of Pocket (OOP) Type key/value pairings.
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_out_of_pocket_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_plan_benefit_amount_types
  # List Plan Benefit Amount Types
  # List Plan Benefit Amount Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_plan_benefit_amount_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_plan_benefit_co_pay_per_types
  # List Plan Benefit Co-Pay Per Types
  # List Plan Benefit Co-Pay Per Types
  # @param vbasoftware_database Target database
  # @param [Hash] opts the optional parameters
  # @return [StringStaticOptionListVBAResponse]
  describe 'list_plan_benefit_co_pay_per_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_benefits
  # Create or Update Batch of Benefits
  # Create or Update multiple Benefits at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param benefit_codes 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_benefits test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_benefit
  # Update Benefit
  # Updates a specific Benefit
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_codes 
  # @param [Hash] opts the optional parameters
  # @return [BenefitCodesVBAResponse]
  describe 'update_benefit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
