=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::BenefitProceduresApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BenefitProceduresApi' do
  before do
    # run before each test
    @api_instance = Vba::BenefitProceduresApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BenefitProceduresApi' do
    it 'should create an instance of BenefitProceduresApi' do
      expect(@api_instance).to be_instance_of(Vba::BenefitProceduresApi)
    end
  end

  # unit tests for create_benefit_procedures
  # Create BenefitProcedures
  # Creates a new BenefitProcedures
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_procedures 
  # @param [Hash] opts the optional parameters
  # @return [BenefitProceduresVBAResponse]
  describe 'create_benefit_procedures test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_benefit_procedures
  # Delete BenefitProcedures
  # Deletes an BenefitProcedures
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param from_procedure From Procedure
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_benefit_procedures test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_benefit_procedures
  # Get BenefitProcedures
  # Gets BenefitProcedures
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param from_procedure From Procedure
  # @param [Hash] opts the optional parameters
  # @return [BenefitProceduresVBAResponse]
  describe 'get_benefit_procedures test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_procedures
  # List BenefitProcedures
  # Lists all BenefitProcedures benefitCode
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param [Hash] opts the optional parameters
  # @return [BenefitProceduresListVBAResponse]
  describe 'list_benefit_procedures test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_benefit_procedures
  # Create or Update Batch BenefitProcedures
  # Create or Update multiple BenefitProcedures at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_procedures 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_benefit_procedures test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_benefit_procedures
  # Update BenefitProcedures
  # Updates a specific BenefitProcedures.
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param from_procedure From Procedure
  # @param benefit_procedures 
  # @param [Hash] opts the optional parameters
  # @return [BenefitProceduresVBAResponse]
  describe 'update_benefit_procedures test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
