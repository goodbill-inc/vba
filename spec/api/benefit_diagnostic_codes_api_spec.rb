=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::BenefitDiagnosticCodesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BenefitDiagnosticCodesApi' do
  before do
    # run before each test
    @api_instance = Vba::BenefitDiagnosticCodesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BenefitDiagnosticCodesApi' do
    it 'should create an instance of BenefitDiagnosticCodesApi' do
      expect(@api_instance).to be_instance_of(Vba::BenefitDiagnosticCodesApi)
    end
  end

  # unit tests for create_benefit_diag_codes
  # Create BenefitDiagCodes
  # Creates a new BenefitDiagCodes
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_diag_codes 
  # @param [Hash] opts the optional parameters
  # @return [BenefitDiagCodesVBAResponse]
  describe 'create_benefit_diag_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_benefit_diag_codes
  # Delete BenefitDiagCodes
  # Deletes an BenefitDiagCodes
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param diagnostic_code_type Diagnostic Code Type
  # @param from_diag_code From Diag Code
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_benefit_diag_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_benefit_diag_codes
  # Get BenefitDiagCodes
  # Gets BenefitDiagCodes
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param diagnostic_code_type Diagnostic Code Type
  # @param from_diag_code From Diag Code
  # @param [Hash] opts the optional parameters
  # @return [BenefitDiagCodesVBAResponse]
  describe 'get_benefit_diag_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_diag_codes
  # List BenefitDiagCodes
  # Lists all BenefitDiagCodes for the given benefitCode
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param [Hash] opts the optional parameters
  # @return [BenefitDiagCodesListVBAResponse]
  describe 'list_benefit_diag_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_benefit_diag_codes
  # Create or Update Batch BenefitDiagCodes
  # Create or Update multiple BenefitDiagCodes at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_diag_codes 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_benefit_diag_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_benefit_diag_codes
  # Update BenefitDiagCodes
  # Updates a specific BenefitDiagCodes.
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param diagnostic_code_type Diagnostic Code Type
  # @param from_diag_code From Diag Code
  # @param benefit_diag_codes 
  # @param [Hash] opts the optional parameters
  # @return [BenefitDiagCodesVBAResponse]
  describe 'update_benefit_diag_codes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
