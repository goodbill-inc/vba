=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::SubscriberEnrollmentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SubscriberEnrollmentsApi' do
  before do
    # run before each test
    @api_instance = Vba::SubscriberEnrollmentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SubscriberEnrollmentsApi' do
    it 'should create an instance of SubscriberEnrollmentsApi' do
      expect(@api_instance).to be_instance_of(Vba::SubscriberEnrollmentsApi)
    end
  end

  # unit tests for create_sub_enrollment
  # Create SubEnrollment
  # Creates a new SubEnrollment
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param sub_enrollment 
  # @param [Hash] opts the optional parameters
  # @return [SubEnrollmentVBAResponse]
  describe 'create_sub_enrollment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_sub_enrollment
  # Delete SubEnrollment
  # Deletes a SubEnrollment with the given subscriberID, groupID, divisionID, groupCoverageStart, and startDate
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param group_id Group ID
  # @param division_id Division ID
  # @param group_coverage_start Group Coverage Start
  # @param start_date Start Date
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_sub_enrollment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_sub_enrollment
  # Get SubEnrollment
  # Gets a SubEnrollment for the given subscriberID, groupID, divisionID, groupCoverageStart, and startDate
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param group_id Group ID
  # @param division_id Division ID
  # @param group_coverage_start Group Coverage Start
  # @param start_date Start Date
  # @param [Hash] opts the optional parameters
  # @return [SubEnrollmentVBAResponse]
  describe 'get_sub_enrollment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_sub_enrollment
  # List SubEnrollment
  # Lists all SubEnrollment for the given subscriberID
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page
  # @option opts [Integer] :page_size Page Size
  # @option opts [String] :sort_by Comma separated string to sort by. Each sort field can be followed by :asc or :desc to specify sort direction, ascending is default. E.g., &#39;Property1:desc,Property2:asc,Property3:asc&#39; sorts Property1 in descending order, Property2 in ascending, and Property3 in ascending.
  # @return [SubEnrollmentListVBAResponse]
  describe 'list_sub_enrollment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sub_enrollment_set_paid_through
  # Set SubEnrollment Paid Through
  # Sets the Paid Through value on the Subenrollment based on existing Premium Billing paid invoices.
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param group_id Group ID
  # @param division_id Division ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'sub_enrollment_set_paid_through test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_sub_enrollment
  # Create or Update Batch SubEnrollment
  # Create or Update multiple SubEnrollment at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param sub_enrollment 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_sub_enrollment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_sub_enrollment
  # Update SubEnrollment
  # Updates a SubEnrollment with the given subscriberID, groupID, divisionID, groupCoverageStart, and startDate
  # @param vbasoftware_database Target database
  # @param subscriber_id Subscriber ID
  # @param group_id Group ID
  # @param division_id Division ID
  # @param group_coverage_start Group Coverage Start
  # @param start_date Start Date
  # @param sub_enrollment 
  # @param [Hash] opts the optional parameters
  # @return [SubEnrollmentVBAResponse]
  describe 'update_sub_enrollment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
