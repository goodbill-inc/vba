=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::BenefitSpecialtiesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BenefitSpecialtiesApi' do
  before do
    # run before each test
    @api_instance = Vba::BenefitSpecialtiesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BenefitSpecialtiesApi' do
    it 'should create an instance of BenefitSpecialtiesApi' do
      expect(@api_instance).to be_instance_of(Vba::BenefitSpecialtiesApi)
    end
  end

  # unit tests for create_benefit_specialty
  # Create BenefitSpecialty
  # Creates a new BenefitSpecialty
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_specialty 
  # @param [Hash] opts the optional parameters
  # @return [BenefitSpecialtyVBAResponse]
  describe 'create_benefit_specialty test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_benefit_specialty
  # Delete BenefitSpecialty
  # Deletes an BenefitSpecialty
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param specialty_code Specialty Code
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_benefit_specialty test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_benefit_specialty
  # Get BenefitSpecialty
  # Gets BenefitSpecialty
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param specialty_code Specialty Code
  # @param [Hash] opts the optional parameters
  # @return [BenefitSpecialtyVBAResponse]
  describe 'get_benefit_specialty test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_benefit_specialty
  # List BenefitSpecialty
  # Lists all BenefitSpecialty benefitCode
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param [Hash] opts the optional parameters
  # @return [BenefitSpecialtyListVBAResponse]
  describe 'list_benefit_specialty test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_benefit_specialty
  # Create or Update Batch BenefitSpecialty
  # Create or Update multiple BenefitSpecialty at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param benefit_specialty 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_benefit_specialty test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_benefit_specialty
  # Update BenefitSpecialty
  # Updates a specific BenefitSpecialty.
  # @param vbasoftware_database Target database
  # @param benefit_code Benefit Code
  # @param specialty_code Specialty Code
  # @param benefit_specialty 
  # @param [Hash] opts the optional parameters
  # @return [BenefitSpecialtyVBAResponse]
  describe 'update_benefit_specialty test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
