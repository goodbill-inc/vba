=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::AdvClaimApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AdvClaimApi' do
  before do
    # run before each test
    @api_instance = Vba::AdvClaimApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdvClaimApi' do
    it 'should create an instance of AdvClaimApi' do
      expect(@api_instance).to be_instance_of(Vba::AdvClaimApi)
    end
  end

  # unit tests for adjust_claim
  # Adjust Claim(s)
  # Adjust a selected list of claims by Claim Number.
  # @param vbasoftware_database Target database
  # @param claim_adjustment_config 
  # @param [Hash] opts the optional parameters
  # @return [Int32VBAResponse]
  describe 'adjust_claim test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for copy_claim_multi_payor_account
  # Split Claims by Payor/Account
  # When the chosen claim has a multi-Payor/Account error, this process will automatically split the claim and create a bridgre reference in ClaimBatchReference.
  # @param vbasoftware_database Target database
  # @param batch_number Batch Number
  # @param batch_claim Batch Claim
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'copy_claim_multi_payor_account test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for copy_claim_multi_plan_year
  # Split Claims by Plan Year
  # When the chosen claim has a multi-Plan Year error, this process will automatically split the claim and create a bridgre reference in ClaimBatchReference.
  # @param vbasoftware_database Target database
  # @param batch_number Batch Number
  # @param batch_claim Batch Claim
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'copy_claim_multi_plan_year test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for copy_claim_service_line
  # Copy Selected Service Lines
  # Copy a list of ClaimBatchDetails x amount of times and add y amount of days to each copy.
  # @param vbasoftware_database Target database
  # @param number_of_copies Number of Copies
  # @param days_on_copy Days on Copy
  # @param claim_batch_detail 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'copy_claim_service_line test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for copy_claim_to_batch
  # Copy Claim(s) to Batch
  # Copy a selected list of claims to batch.
  # @param vbasoftware_database Target database
  # @param request_body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'copy_claim_to_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_life_claim
  # Create a Life Claim
  # Setup a Life Claim based on defined configuration and optionally setup the Life Claim payments.
  # @param vbasoftware_database Target database
  # @param life_claim_advisor 
  # @param [Hash] opts the optional parameters
  # @return [Int32VBAResponse]
  describe 'create_life_claim test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_life_claim_payment
  # Create a Life Claim Payment
  # Based on passed in parameters, create a Life Claim Payment under an existing Life Claim.
  # @param vbasoftware_database Target database
  # @param batch_number Batch Number
  # @param pay_to Pay To
  # @param volume Volume
  # @param [Hash] opts the optional parameters
  # @option opts [String] :beneficiary_id Beneficiary ID
  # @option opts [Float] :assignment Assignment
  # @return [nil]
  describe 'create_life_claim_payment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for disability_advisor_create_claim
  # Create Disability Payments
  # Create a Batch of Claims that represent Disability Payments for a STD or LTD disability claim.
  # @param vbasoftware_database Target database
  # @param vba_disability_advisor 
  # @param [Hash] opts the optional parameters
  # @return [ClaimInvoiceVBAResponse]
  describe 'disability_advisor_create_claim test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for disability_claim_sync
  # Sync ClaimBatch Disability
  # Send in a ClaimBatch record and have all other ClaimBatch records remaining in Batch syncd to the Disability values on that submitted header.
  # @param vbasoftware_database Target database
  # @param batch_number Batch Number
  # @param batch_claim Batch Claim
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disability_claim_sync test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for full_delete_claim_batch
  # Full Delete ClaimBatch
  # Deletes an ClaimBatch record along with all associated processing needed as a result of that delete.
  # @param vbasoftware_database Target database
  # @param batch_number Batch Number
  # @param batch_claim Batch Claim
  # @param [Hash] opts the optional parameters
  # @option opts [String] :claim_status_category_code Claim Status Category Code
  # @option opts [String] :claim_status_code Claim Status Code
  # @return [nil]
  describe 'full_delete_claim_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for generate_claim_invoice
  # Generate Claim Invoice
  # Creates a Claim Invoice and attaches a list of Claims.
  # @param vbasoftware_database Target database
  # @param claim_invoice_config 
  # @param [Hash] opts the optional parameters
  # @return [ClaimBatchClaimBatchDetailListVBAResponse]
  describe 'generate_claim_invoice test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_claim_xml
  # Get Claim EDI XML
  # Get a full XML representation of this claim submitted via EDI into VBADataIntegration. The criteria for this is available in Search Config: VBADATAINT_CLAIM.
  # @param vbasoftware_database Target database
  # @param edi_key EDI Key
  # @param claim_key Claim Key
  # @param edi_location EDI Location
  # @param [Hash] opts the optional parameters
  # @return [StringVBAResponse]
  describe 'get_claim_xml test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_adjudicate_benefit_match
  # List matching benefit detail
  # List of potential benefit matches along with a match count for a specific claim service line.
  # @param vbasoftware_database Target database
  # @param batch_number Batch Number
  # @param batch_claim Batch Claim
  # @param claim_seq Claim Seq
  # @param [Hash] opts the optional parameters
  # @option opts [String] :plan_id Plan ID
  # @option opts [String] :provider_id Provider ID
  # @option opts [String] :provider_type Provider Type
  # @return [AdjudicateBenefitMatchDetailListVBAResponse]
  describe 'list_adjudicate_benefit_match test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for return_claim_to_batch
  # Return Claim(s) to Batch
  # Return a selected list of claims to batch.
  # @param vbasoftware_database Target database
  # @param request_body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'return_claim_to_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for suspend_from_audit
  # Suspend Claims on Audit
  # This process will take a Claim Audit key and then suspend any claims associated with that Claim Audit (assuming that claim is not Funded).
  # @param vbasoftware_database Target database
  # @param claim_audit_key Claim Audit Key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'suspend_from_audit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for suspense_claim_release
  # Release Suspended Claims
  # Release a selection of suspended claims so they can be Funded.
  # @param vbasoftware_database Target database
  # @param suspense_claim_list 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'suspense_claim_release test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for suspense_claim_return
  # Return Suspended Claims
  # Return a selection of suspended claims to Batch so they can be reprocessed.  Assign an optional Ex Code to the claim returned.
  # @param vbasoftware_database Target database
  # @param ex_code Ex Code
  # @param suspense_claim_list 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'suspense_claim_return test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
