=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::AdvAccountingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AdvAccountingApi' do
  before do
    # run before each test
    @api_instance = Vba::AdvAccountingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdvAccountingApi' do
    it 'should create an instance of AdvAccountingApi' do
      expect(@api_instance).to be_instance_of(Vba::AdvAccountingApi)
    end
  end

  # unit tests for accounting_fund_request
  # Claim Account Funding
  # Submit a list of Payor/Account information to be funded based on configured parameters.  Returns whether there are invalid entries in your list that were skipped during processing.
  # @param vbasoftware_database Target database
  # @param fundaccountbalancelist 
  # @param [Hash] opts the optional parameters
  # @return [BooleanVBAResponse]
  describe 'accounting_fund_request test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_funding_deposit
  # Add Funding to Deposit
  # Creates Funding items and attaches them to an existing Deposit.
  # @param vbasoftware_database Target database
  # @param deposit_key Deposit Key
  # @param funding 
  # @param [Hash] opts the optional parameters
  # @return [FundingDepositVBAResponse]
  describe 'add_funding_deposit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for add_reconciliation
  # Add Reconciliation
  # Creates a new FundingReconcile along with attaching any Checks/Deposits identified.
  # @param vbasoftware_database Target database
  # @param funding_statement 
  # @param [Hash] opts the optional parameters
  # @return [FundingReconcileVBAResponse]
  describe 'add_reconciliation test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for claim_refund
  # Claim Refund
  # Process a Claim Refund creating the necessary Backout and Reentry claims and adding Claim Reference values.
  # @param vbasoftware_database Target database
  # @param funding_process_claim_refund 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'claim_refund test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_funding_account_balance
  # Get FundingAccount Balance
  # Gets FundingAccount balance details
  # @param vbasoftware_database Target database
  # @param account_key Account Key
  # @param [Hash] opts the optional parameters
  # @return [FundingAccountBalanceVBAResponse]
  describe 'get_funding_account_balance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_name_on_check
  # Get Name and Address Information
  # Using Send Check To and a dynamic Pay To ID, get the delivery information for a potential check.
  # @param vbasoftware_database Target database
  # @param funding_name_on_check 
  # @param [Hash] opts the optional parameters
  # @return [FundingNameOnCheckVBAResponse]
  describe 'get_name_on_check test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_payor_account_balance
  # Get PayorAccount Balance
  # Gets PayorAccount Balance details
  # @param vbasoftware_database Target database
  # @param payor_account_key Payor Account Key
  # @param [Hash] opts the optional parameters
  # @return [FundingAccountBalanceVBAResponse]
  describe 'get_payor_account_balance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for hold_funds
  # Hold Funds
  # Lower the existing funding item by the hold amount and create a new funding for the hold amount.
  # @param vbasoftware_database Target database
  # @param funding_key Funding Key
  # @param hold_amount 
  # @param [Hash] opts the optional parameters
  # @return [FundingVBAResponse]
  describe 'hold_funds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for mass_update_claim_funded_status
  # Mass Update Claim Funded Status
  # Pass in a list of claims and what Claim_Funded_Status to update that claim to and have it updated in mass without iterating through claim records.
  # @param vbasoftware_database Target database
  # @param vba_update_claim_funded_status 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mass_update_claim_funded_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for process_checks
  # Process Checks
  # Initiates the process of Check Processing. If the request is valid, the system will generate the necessary actions to process checks and respond with a success status code of 202 Accepted, along with the generated process key.
  # @param vbasoftware_database Target database
  # @param funding_process_check 
  # @param [Hash] opts the optional parameters
  # @return [Int32VBAResponse]
  describe 'process_checks test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for reallocate_funds
  # Reacllocate Funds
  # Change the Payor ID and Account Key of an existing funding item.
  # @param vbasoftware_database Target database
  # @param funding_key Funding Key
  # @param payor_id Payor ID
  # @param account_key Account Key
  # @param [Hash] opts the optional parameters
  # @return [FundingVBAResponse]
  describe 'reallocate_funds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for reconcile_funds
  # Reconcile Funds
  # Reconcile all Deposits, Checks, and Funding associated with this Reconciliation as well as creating offset debits and credits.
  # @param vbasoftware_database Target database
  # @param funding_statement 
  # @param [Hash] opts the optional parameters
  # @return [FundingReconcileVBAResponse]
  describe 'reconcile_funds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for transfer_funds
  # Transfer Funds
  # Transfer funds from one account to another.  Additionally, can auto-create a premium distribution if a Funding_Key of 0 is sent.
  # @param vbasoftware_database Target database
  # @param funding_key Funding Key
  # @param funding_transfer_funds 
  # @param [Hash] opts the optional parameters
  # @return [FundingVBAResponse]
  describe 'transfer_funds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for undo_void_check
  # Undo Void Check
  # Undo a previously voided check by Check ID.  Returns the VBAProcess Key for log review and verification.
  # @param vbasoftware_database Target database
  # @param check_id Check ID
  # @param [Hash] opts the optional parameters
  # @return [Int32VBAResponse]
  describe 'undo_void_check test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for void_check
  # Void Check
  # Voids an existing Check
  # @param vbasoftware_database Target database
  # @param check_id Check ID
  # @param funding_void_check 
  # @param [Hash] opts the optional parameters
  # @return [ChecksVBAResponse]
  describe 'void_check test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for void_funds
  # Void Funds
  # Void an existing funding item.
  # @param vbasoftware_database Target database
  # @param funding_key Funding Key
  # @param [Hash] opts the optional parameters
  # @return [FundingVBAResponse]
  describe 'void_funds test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
