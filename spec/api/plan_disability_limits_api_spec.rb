=begin
#VBASoftware

#APIs for VBASoftware

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Vba::PlanDisabilityLimitsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PlanDisabilityLimitsApi' do
  before do
    # run before each test
    @api_instance = Vba::PlanDisabilityLimitsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlanDisabilityLimitsApi' do
    it 'should create an instance of PlanDisabilityLimitsApi' do
      expect(@api_instance).to be_instance_of(Vba::PlanDisabilityLimitsApi)
    end
  end

  # unit tests for create_disability_plan_limit
  # Create DisabilityPlanLimit
  # Creates a new DisabilityPlanLimit
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param disability_plan_limit 
  # @param [Hash] opts the optional parameters
  # @return [DisabilityPlanLimitVBAResponse]
  describe 'create_disability_plan_limit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_disability_plan_limit
  # Delete DisabilityPlanLimit
  # Deletes an DisabilityPlanLimit
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param disability_plan_limit_key DisabilityPlanLimit Key
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_disability_plan_limit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_disability_plan_limit
  # Get DisabilityPlanLimit
  # Gets DisabilityPlanLimit
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param disability_plan_limit_key DisabilityPlanLimit Key
  # @param [Hash] opts the optional parameters
  # @return [DisabilityPlanLimitVBAResponse]
  describe 'get_disability_plan_limit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_disability_plan_limit
  # List DisabilityPlanLimit
  # Lists all DisabilityPlanLimit for the given planID
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param [Hash] opts the optional parameters
  # @return [DisabilityPlanLimitListVBAResponse]
  describe 'list_disability_plan_limit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_batch_disability_plan_limit
  # Create or Update Batch DisabilityPlanLimit
  # Create or Update multiple DisabilityPlanLimit at once.  If the entity exists, it will be updated.  If the entity does not exist, it will be created.
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param disability_plan_limit 
  # @param [Hash] opts the optional parameters
  # @return [MultiCodeResponseListVBAResponse]
  describe 'update_batch_disability_plan_limit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_disability_plan_limit
  # Update DisabilityPlanLimit
  # Updates a specific DisabilityPlanLimit.
  # @param vbasoftware_database Target database
  # @param plan_id Plan ID
  # @param disability_plan_limit_key DisabilityPlanLimit Key
  # @param disability_plan_limit 
  # @param [Hash] opts the optional parameters
  # @return [DisabilityPlanLimitVBAResponse]
  describe 'update_disability_plan_limit test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
